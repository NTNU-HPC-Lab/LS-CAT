Repo,underdirectory,function,status,variables
1,0,euclidean_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,1,euclidean_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,2,maximum_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,3,maximum_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,4,manhattan_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,5,manhattan_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,6,canberra_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,7,canberra_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,8,binary_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,9,binary_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,10,minkowski_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,11,minkowski_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,12,dot_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,13,dot_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
1,14,getColNorms,runs,"[('int', 'rows'), ('int', 'cols'), ('float *', 'da'), ('int', 'lda'), ('float *', 'colNorms')]"
1,15,gpuFindMax,runs,"[('int', 'n'), ('float *', 'data'), ('int', 'threadWorkLoad'), ('int *', 'maxIndex')]"
1,16,gpuSwapCol,runs,"[('int', 'rows'), ('float *', 'dArray'), ('int', 'coli'), ('int *', 'dColj'), ('int *', 'dPivot')]"
1,17,makeHVector,runs,"[('int', 'rows'), ('float *', 'input'), ('float *', 'output')]"
1,18,UpdateHHNorms,runs,"[('int', 'cols'), ('float *', 'dV'), ('float *', 'dNorms')]"
1,19,gpuKendall,runs,"[('const float *', 'a'), ('size_t', 'na'), ('const float *', 'b'), ('size_t', 'nb'), ('size_t', 'sampleSize'), ('double *', 'results')]"
1,20,getRestricted,runs,"[('int', 'countx'), ('int', 'county'), ('int', 'rows'), ('int', 'cols'), ('float *', 'mX'), ('int', 'mXdim'), ('float *', 'vY'), ('int', 'vYdim'), ('float *', 'mQ'), ('int', 'mQdim'), ('float *', 'mR'), ('int', 'mRdim'), ('float *', 'vectB'), ('int', 'vectBdim')]"
1,21,getUnrestricted,runs,"[('int', 'countx'), ('int', 'county'), ('int', 'rows'), ('int', 'cols'), ('float *', 'mX'), ('int', 'mXdim'), ('float *', 'vY'), ('int', 'vYdim'), ('float *', 'mQ'), ('int', 'mQdim'), ('float *', 'mR'), ('int', 'mRdim'), ('float *', 'vectB'), ('int', 'vectBdim')]"
1,22,ftest,runs,"[('int', 'diagFlag'), ('int', 'p'), ('int', 'rows'), ('int', 'colsx'), ('int', 'colsy'), ('int', 'rCols'), ('int', 'unrCols'), ('float *', 'obs'), ('int', 'obsDim'), ('float *', 'rCoeffs'), ('int', 'rCoeffsDim'), ('float *', 'unrCoeffs'), ('int', 'unrCoeffsDim'), ('float *', 'rdata'), ('int', 'rdataDim'), ('float *', 'unrdata'), ('int', 'unrdataDim'), ('float *', 'dfStats')]"
1,36,gpuMeans,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('float *', 'means'), ('float *', 'numPairs')]"
1,37,gpuSD,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'means'), ('const float *', 'numPairs'), ('float *', 'sds')]"
1,38,gpuPMCC,runs,"[('const float *', 'vectsa'), ('size_t', 'na'), ('const float *', 'vectsb'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'numPairs'), ('const float *', 'means'), ('const float *', 'sds'), ('float *', 'correlations')]"
1,39,gpuMeansNoTest,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('float *', 'means'), ('float *', 'numPairs')]"
1,40,gpuSDNoTest,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'means'), ('const float *', 'numPairs'), ('float *', 'sds')]"
1,41,gpuPMCCNoTest,runs,"[('const float *', 'vectsa'), ('size_t', 'na'), ('const float *', 'vectsb'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'numPairs'), ('const float *', 'means'), ('const float *', 'sds'), ('float *', 'correlations')]"
1,42,gpuSignif,runs,"[('const float *', 'gpuNumPairs'), ('const float *', 'gpuCorrelations'), ('size_t', 'n'), ('float *', 'gpuTScores')]"
1,43,dUpdateSignif,runs,"[('const float *', 'gpuData'), ('size_t', 'n'), ('float *', 'gpuResults')]"
1,44,noNAsPmccMeans,runs,"[('int', 'nRows'), ('int', 'nCols'), ('float *', 'a'), ('float *', 'means')]"
1,45,scale,runs,"[('float', 'knot_max'), ('int', 'nx'), ('int', 'nsamples'), ('float *', 'x'), ('int', 'pitch_x')]"
1,46,get_bin_scores,runs,"[('int', 'nbins'), ('int', 'order'), ('int', 'nknots'), ('float *', 'knots'), ('int', 'nsamples'), ('int', 'nx'), ('float *', 'x'), ('int', 'pitch_x'), ('float *', 'bins'), ('int', 'pitch_bins')]"
1,47,get_entropy,runs,"[('int', 'nbins'), ('int', 'nsamples'), ('int', 'nx'), ('float *', 'bin_scores'), ('int', 'pitch_bin_scores'), ('float *', 'entropies')]"
1,48,get_mi,runs,"[('int', 'nbins'), ('int', 'nsamples'), ('int', 'nx'), ('float *', 'x_bin_scores'), ('int', 'pitch_x_bin_scores'), ('float *', 'entropies_x'), ('int', 'ny'), ('float *', 'y_bin_scores'), ('int', 'pitch_y_bin_scores'), ('float *', 'entropies_y'), ('float *', 'mis'), ('int', 'pitch_mis')]"
1000,5,kernel,runs,[]
1000,24,transposedMatrixKernel,runs,"[('int *', 'd_a'), ('int *', 'd_b')]"
1000,25,additionMatricesKernel,runs,"[('int *', 'd_a'), ('int *', 'd_b'), ('int *', 'd_c')]"
1000,26,additionMatricesKernel,runs,"[('int *', 'd_a'), ('int *', 'd_b'), ('int *', 'd_c')]"
1000,27,transposedMatrixKernel,runs,"[('int *', 'd_a'), ('int *', 'd_b')]"
1000,28,additionMatricesKernel,runs,"[('int *', 'd_a'), ('int *', 'd_b'), ('int *', 'd_c')]"
1000,29,matrixKernel,runs,"[('float *', 'd_in'), ('float *', 'd_out')]"
1000,30,transposedMatrixKernel,runs,"[('int *', 'd_a'), ('int *', 'd_b')]"
1000,43,cubeKernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
1000,44,cubeKernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
10003,2,deltaCalcOutput,runs,"[('float *', 'OutActivation'), ('float *', 'Outputdelta'), ('float *', 'targets')]"
10003,3,deltaCalcHidden,runs,"[('float *', 'Activation'), ('float *', 'delta')]"
10003,4,weightUpdate,runs,"[('float *', 'd_W'), ('float *', 'd_D'), ('float *', 'd_N')]"
10003,5,initWeights,runs,"[('float *', 'dst'), ('unsigned int', 'seed')]"
10003,8,printError,runs,"[('float *', 'output'), ('float *', 'target')]"
10008,81,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
10008,85,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1001,0,grayscaleVer2D,runs,"[('uchar3 *', 'input'), ('uchar3 *', 'output'), ('int', 'imageWidth'), ('int', 'imageHeight')]"
10018,1,Matriz_GPU_Mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10024,0,cuda_cmp_kernel,runs,"[('std::size_t', 'n'), ('int *', 'aptr'), ('int *', 'bptr'), ('int *', 'rptr')]"
10030,0,paralellSine,runs,"[('float *', 'input'), ('float *', 'output')]"
10040,0,gpuMM,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
10040,1,gpuSum,runs,"[('int *', 'prices'), ('int *', 'sumpricesout'), ('int', 'days'), ('int', 'seconds'), ('int', 'N')]"
10047,0,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
10047,1,add,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
10051,7,emptyKernel,runs,[]
1006,0,kernel_example,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
10073,223,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
10073,224,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
10073,225,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
10073,230,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
10073,327,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
10073,332,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1008,0,blob_rearrange_kernel2_1d,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'num'), ('int', 'channels'), ('int', 'width'), ('int', 'height'), ('int', 'widthheight'), ('int', 'padding'), ('int', 'pwidthheight')]"
1008,1,CorrelateData_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'topcount'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'kernel_size'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'bottomchannels'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'top')]"
1008,2,CorrelateDataSubtract_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'item'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'topcount'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'bottomchannels'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'top')]"
1008,3,CorrelateDataBackward0_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'item'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'pbottomwidth'), ('int', 'pbottomheight'), ('int', 'bottomchannels'), ('int', 'bottomcount'), ('int', 'pad_size'), ('float *', 'bottom0diff'), ('const float *', 'bottom1'), ('const float *', 'topdiff')]"
1008,4,CorrelateDataBackward1_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'item'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'pbottomwidth'), ('int', 'pbottomheight'), ('int', 'bottomchannels'), ('int', 'bottomcount'), ('int', 'pad_size'), ('const float *', 'bottom0'), ('float *', 'bottom1diff'), ('const float *', 'topdiff')]"
1008,5,CorrelateDataBackward0Subtract_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'item'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'pbottomwidth'), ('int', 'pbottomheight'), ('int', 'bottomchannels'), ('int', 'bottomcount'), ('int', 'pad_size'), ('float *', 'bottom0diff'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('const float *', 'topdiff')]"
1008,6,CorrelateDataBackward1Subtract_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'item'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'pbottomwidth'), ('int', 'pbottomheight'), ('int', 'bottomchannels'), ('int', 'bottomcount'), ('int', 'pad_size'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'bottom1diff'), ('const float *', 'topdiff')]"
1008,7,blob_rearrange_kernel2,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'num'), ('int', 'channels'), ('int', 'width'), ('int', 'height'), ('int', 'widthheight'), ('int', 'padding'), ('int', 'pwidthheight')]"
1008,8,CorrelateData,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'topcount'), ('int', 'max_displacement'), ('int', 'neighborhood_grid_radius'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'kernel_size'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'bottomchannels'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'top')]"
1008,16,blob_rearrange_kernel2_1d,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'num'), ('int', 'channels'), ('int', 'width'), ('int', 'height'), ('int', 'widthheight'), ('int', 'padding'), ('int', 'pwidthheight')]"
1008,17,CorrelateData_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'topcount'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'kernel_size'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'bottomchannels'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'top')]"
1008,23,blob_rearrange_kernel2,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'num'), ('int', 'channels'), ('int', 'width'), ('int', 'height'), ('int', 'widthheight'), ('int', 'padding'), ('int', 'pwidthheight')]"
1008,24,CorrelateData,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'topcount'), ('int', 'max_displacement'), ('int', 'neighborhood_grid_radius'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'kernel_size'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'bottomchannels'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'top')]"
10121,0,MedianFilter_gpu,runs,"[('unsigned short *', 'Device_ImageData'), ('int', 'Image_Width'), ('int', 'Image_Height')]"
10121,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
10121,3,reduce,runs,"[('int *', 'g_idata'), ('int', 'searchedNumber'), ('int *', 'ok')]"
10121,5,reduce,runs,"[('int *', 'g_idata'), ('int *', 'g_odata')]"
10123,36,sync_conv_groups,runs,[]
10126,2,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
10131,0,calc,runs,"[('float *', 'd_D'), ('int', 'n'), ('int', 'k')]"
10131,1,calc,runs,"[('float *', 'd_D'), ('int', 'n'), ('int', 'k')]"
10131,2,calc,runs,"[('float *', 'd_D'), ('int', 'n'), ('int', 'k')]"
10140,92,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
10140,93,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
10140,94,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
10140,95,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
10140,162,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
10158,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
10163,1,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
1018,0,sigmoid_kernel,runs,"[('float *', 'vec'), ('int', 'len')]"
1018,1,relu_kernel,runs,"[('float *', 'vec'), ('int', 'len')]"
1018,2,scale_values,runs,"[('float *', 'num'), ('size_t', 'size'), ('float', 'abs_max')]"
1018,3,sigmoid_derivative,runs,"[('float *', 'upper_grads'), ('float *', 'upper_values'), ('unsigned int', 'upper_size')]"
1018,4,relu_derivative,runs,"[('float *', 'upper_grads'), ('float *', 'upper_values'), ('unsigned int', 'upper_size')]"
1018,5,times,runs,"[('float *', 'input'), ('unsigned int', 'input_size'), ('float *', 'output'), ('unsigned int', 'n')]"
1018,6,exp_kernel,runs,"[('float *', 'array'), ('unsigned int', 'size')]"
1018,7,set_value,runs,"[('float', 'value'), ('float *', 'array'), ('unsigned int', 'size')]"
1018,8,divide_by_vector,runs,"[('float *', 'matrix'), ('float *', 'vector'), ('unsigned int', 'row'), ('unsigned int', 'col')]"
1018,9,minus_one,runs,"[('float *', 'matrix'), ('unsigned int *', 'indices'), ('unsigned int', 'row'), ('unsigned int', 'col')]"
1018,10,pick_minus_log_ps,runs,"[('float *', 'matrix'), ('float *', 'minus_log_ps'), ('unsigned int *', 'indices'), ('unsigned int', 'row'), ('unsigned int', 'col')]"
10181,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
10181,225,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
10181,226,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
10181,227,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
10181,232,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
10181,348,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
10181,353,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
10186,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
10186,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
10186,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
10186,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
10186,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
10194,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
10194,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
10194,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
10194,3,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
10194,4,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
10194,5,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
10194,6,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
10194,7,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
10194,8,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
10194,9,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
10194,10,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
10194,11,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
10194,12,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
10194,13,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
10194,14,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
10194,15,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
10194,16,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
10194,17,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
10194,18,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
10194,19,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
10194,20,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
10194,21,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
10194,22,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
10194,23,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
10194,24,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
10194,25,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
10194,26,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
10194,27,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
10194,28,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
10194,29,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
10194,30,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
10194,31,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
10194,32,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
10194,33,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
10194,34,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
10194,35,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
10194,36,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
10194,37,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
10194,38,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
10194,39,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
10194,40,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
10194,41,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
10194,42,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
10194,44,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
10194,45,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
10194,46,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
10194,47,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
10199,1,devInverseReindex,runs,"[('int', 'N'), ('int *', 'destArray'), ('int *', 'srcArray'), ('unsigned int *', 'reindex'), ('int', 'realSize'), ('int', 'nDims'), ('int', 'maxValue'), ('bool', 'ignoreValue')]"
10199,2,devInverseReindexInt2Bool,runs,"[('int', 'N'), ('int2 *', 'destArray'), ('int2 *', 'srcArray'), ('unsigned int *', 'reindex'), ('int', 'realSize'), ('int', 'nDims'), ('int', 'maxValue'), ('bool', 'ignoreValue')]"
10199,3,devInverseReindexInt3Bool,runs,"[('int', 'N'), ('int3 *', 'destArray'), ('int3 *', 'srcArray'), ('unsigned int *', 'reindex'), ('int', 'realSize'), ('int', 'nDims'), ('int', 'maxValue'), ('bool', 'ignoreValue')]"
10199,4,devInverseReindexInt,runs,"[('int', 'N'), ('int *', 'destArray'), ('int *', 'srcArray'), ('int *', 'reindex'), ('int', 'realSize'), ('int', 'nDims')]"
10199,5,devInverseReindexInt3,runs,"[('int', 'N'), ('int3 *', 'destArray'), ('int3 *', 'srcArray'), ('int *', 'reindex'), ('int', 'realSize'), ('int', 'nDims')]"
10199,42,devFillAffectedTriangles,runs,"[('int', 'nFlip'), ('int *', 'pTaff'), ('int *', 'pTaffEdge'), ('int *', 'pEnd'), ('int2 *', 'pEt')]"
10199,52,devFillAffectedIndex,runs,"[('int', 'nRemove'), ('int', 'maxTriPerVert'), ('int *', 'pTriangleAffectedIndex')]"
10199,53,devFindUniqueTriangleAffected,runs,"[('int', 'maxIndex'), ('int *', 'pTriangleAffected'), ('int *', 'pTriangleAffectedIndex'), ('int *', 'pUniqueFlag')]"
102,3,opt_32to8Kernel,runs,"[('uint32_t *', 'input'), ('uint8_t *', 'output'), ('size_t', 'length')]"
1022,0,DR_kernel,runs,"[('int', 'nCols'), ('int', 'nRows'), ('float *', 'D'), ('float *', 'R'), ('unsigned long long int *', 'gHist')]"
1022,1,DD_or_RR_kernel,runs,"[('int', 'nCols'), ('int', 'nRows'), ('float *', 'arr'), ('unsigned long long int *', 'gHist')]"
10220,1,hello,runs,[]
10220,2,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
10221,10,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
10221,69,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
10221,70,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
10221,71,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
10221,76,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
10221,171,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
10221,176,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
10223,26,phglobal_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
10223,27,phshmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
10223,51,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
10229,29,sync_conv_groups,runs,[]
10242,0,kernel,runs,"[('float *', 'x'), ('int', 'n')]"
10242,1,test,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'N')]"
10242,2,test,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'N')]"
10244,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
10244,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
10244,2,func,runs,[]
10244,3,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
10244,4,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
10244,5,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
10244,6,func,runs,[]
10244,7,func,runs,[]
10245,79,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
10245,83,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1025,5,sphereTransform,runs,"[('float *', 'data'), ('const unsigned int', 'N')]"
1025,6,sinewave,runs,"[('float *', 'heightMap'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'time')]"
10255,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1026,0,kernelHough,runs,"[('int', 'size'), ('int *', 'd_binarray')]"
10270,2,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
10273,0,sumMat,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'N')]"
10273,2,multiplyNumbersGPU,runs,"[('float *', 'pDataA'), ('float *', 'pDataB'), ('float *', 'pResult')]"
10288,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
10288,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
10288,2,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
10288,3,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
10288,4,indices,runs,[]
10288,7,func,runs,[]
10288,8,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
10288,9,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
10288,10,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
10288,11,func,runs,[]
10288,13,func,runs,[]
1029,0,gpu_grayscale,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'image'), ('float *', 'image_out')]"
1029,1,gpu_gaussian,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'image'), ('float *', 'image_out')]"
1029,2,gpu_sobel,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'image'), ('float *', 'image_out')]"
10311,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
10319,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10319,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10319,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10319,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10319,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10319,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10319,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10319,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
10319,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10319,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
10319,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
10319,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
10319,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
10319,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
10319,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10319,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10319,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
10321,0,stencil_kernel,runs,"[('float *', 'x_new'), ('float *', 'x_old')]"
10321,6,cn_pnpoly,runs,"[('int *', 'bitmap'), ('float2 *', 'points'), ('int', 'n')]"
10321,7,cn_pnpoly_naive,runs,"[('int *', 'bitmap'), ('float2 *', 'points'), ('int', 'n')]"
10321,13,matmul_kernel,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B')]"
10321,14,matmul_kernel,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B')]"
10321,15,matmul_kernel,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B')]"
10321,16,matmul_kernel,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B')]"
10325,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10325,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10325,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10325,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10325,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10325,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10325,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10325,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
10325,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10325,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
10325,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
10325,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
10325,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
10325,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
10325,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10325,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10325,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
10326,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
10326,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
10326,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
10326,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
10326,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
10330,79,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
10330,83,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
10333,36,sync_conv_groups,runs,[]
10334,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
10355,1,calculoAlgoritmoTroca,runs,"[('float *', 'dev_matrizSuperior'), ('int', 'linhaPerm'), ('int', 'colunaPerm'), ('int', 'totalColunas'), ('int', 'totalLinhas')]"
10357,0,nlm_kernel,runs,"[('float const *', 'image'), ('float *', 'filtered_image'), ('int', 'm'), ('int', 'n'), ('float', 'patch_sigma'), ('int *', 'patchSize'), ('float', 'filter_sigma')]"
1036,2,sum_val,runs,"[('double *', 'val'), ('double *', 'r')]"
1036,3,max_gra,runs,"[('double *', 'gra'), ('double *', 'max')]"
1036,4,calculate_val,runs,"[('double *', 'devx'), ('double *', 'val'), ('int', 'size')]"
1036,5,calculate_gra,runs,"[('double *', 'devx'), ('double *', 'gra'), ('int', 'size')]"
1036,6,minus_gra,runs,"[('double *', 'gra'), ('int', 'size')]"
1036,7,create_tuple,runs,"[('double *', 'devx'), ('int *', 'pos_x'), ('int *', 'pos_y'), ('double *', 'value'), ('int', 'N')]"
1036,9,printdd,runs,"[('int *', 'pos'), ('int', 'size')]"
10360,33,gSetSparse,runs,"[('float *', 'out'), ('const size_t *', 'indices'), ('const float *', 'values'), ('int', 'length')]"
10360,40,gMaxPoolingForward,runs,"[('float *', 'out'), ('int', 'outRows'), ('int', 'outCols'), ('float *', 'in'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
10360,41,gMaxPoolingBackward,runs,"[('float *', 'adj'), ('int', 'adjRows'), ('int', 'adjCols'), ('float *', 'in'), ('float *', 'adjIn'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
10360,44,gGetValueByKey,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('int *', 'indeces'), ('int', 'n')]"
10360,47,gScatterAdd,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
10360,48,gScatterUpdate,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
10360,49,gGather,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
1038,1,compute_iteration,runs,"[('char *', 'buffer'), ('char *', 'out_buffer'), ('size_t', 'pitch'), ('size_t', 'pitch_out'), ('int', 'width'), ('int', 'height')]"
10380,28,sync_conv_groups,runs,[]
10383,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
10383,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
10383,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
10383,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
10383,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
10383,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
10383,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
10383,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
10383,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
10383,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
10383,24,hello,runs,[]
10383,28,hello,runs,[]
10387,0,addArrays,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10387,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
10389,3,fourier_transform,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'height'), ('int', 'width'), ('int', 'blockConfig')]"
10389,4,inverse_transform,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'height'), ('int', 'width')]"
10389,5,fourier_transform,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'height'), ('int', 'width'), ('int', 'blockConfig')]"
10389,6,inverse_transform,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'height'), ('int', 'width')]"
10393,0,slice_sparse_dense_row,runs,"[('double *', 'inVal'), ('int *', 'inRowPtr'), ('int *', 'colInd'), ('double *', 'ret'), ('int', 'rl'), ('int', 'ru'), ('int', 'cl'), ('int', 'cu'), ('int', 'retClen')]"
10393,1,slice_sparse_dense_nnz,runs,"[('double *', 'inVal'), ('int *', 'inRowPtr'), ('int *', 'colInd'), ('double *', 'ret'), ('int', 'rl'), ('int', 'ru'), ('int', 'cl'), ('int', 'cu'), ('int', 'retClen')]"
10393,2,slice_dense_dense,runs,"[('double *', 'in'), ('double *', 'ret'), ('int', 'rl'), ('int', 'ru'), ('int', 'cl'), ('int', 'cu'), ('int', 'inClen'), ('int', 'retRlen'), ('int', 'retClen')]"
10393,3,copy_u2l_dense,runs,"[('double *', 'ret'), ('int', 'dim'), ('int', 'N')]"
10393,4,relu,runs,"[('double *', 'A'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen')]"
10393,5,relu_backward,runs,"[('double *', 'X'), ('double *', 'dout'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen')]"
10393,6,inplace_add,runs,"[('double *', 'input'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen')]"
10393,7,bias_add,runs,"[('double *', 'input'), ('double *', 'bias'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen'), ('int', 'PQ')]"
10393,8,daxpy_matrix_vector,runs,"[('double *', 'A'), ('double *', 'B'), ('double', 'alpha'), ('double *', 'ret'), ('int', 'rlenA'), ('int', 'clenA'), ('int', 'rlenB'), ('int', 'clenB')]"
10393,9,bias_multiply,runs,"[('double *', 'input'), ('double *', 'bias'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen'), ('int', 'PQ')]"
10393,10,compare_and_set,runs,"[('double *', 'A'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen'), ('double', 'compareVal'), ('double', 'tol'), ('double', 'ifEqualsVal'), ('double', 'ifLessThanVal'), ('double', 'ifGreaterThanVal')]"
10393,13,fill,runs,"[('double *', 'A'), ('double', 'scalar'), ('int', 'lenA')]"
10393,28,matrix_exp,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,29,matrix_sqrt,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,30,matrix_round,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,31,matrix_abs,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,32,matrix_log,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,33,matrix_floor,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,34,matrix_ceil,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,35,matrix_sin,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,36,matrix_sinh,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,37,matrix_cos,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,38,matrix_cosh,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,39,matrix_tan,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,40,matrix_tanh,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,41,matrix_asin,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,42,matrix_acos,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,43,matrix_atan,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10393,44,matrix_sign,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10395,4,bfsCheck,runs,"[('bool *', 'd_graph_mask'), ('bool *', 'd_updating_graph_mask'), ('bool *', 'd_graph_visited'), ('int', 'no_of_nodes'), ('bool *', 'stop')]"
10397,0,kernel_sum,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'n_el')]"
104,0,total,runs,"[('float *', 'input'), ('float *', 'output'), ('unsigned int', 'len')]"
104,1,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
104,2,matrixMultiplyTiled,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
104,3,matrixMultiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
104,4,post_scan,runs,"[('float *', 'in'), ('float *', 'add'), ('int', 'len')]"
104,5,scan,runs,"[('float *', 'in'), ('float *', 'out'), ('float *', 'post'), ('int', 'len')]"
1040,1,delete_rows_and_columns,runs,"[('int *', 'dl_matrix'), ('int *', 'deleted_rows'), ('int *', 'deleted_cols'), ('const int', 'search_depth'), ('const int', 'selected_row_id'), ('const int', 'total_dl_matrix_row_num'), ('const int', 'total_dl_matrix_col_num')]"
1040,2,init_vectors,runs,"[('int *', 'vec'), ('const int', 'vec_length')]"
1040,3,get_largest_value,runs,"[('int *', 'vec'), ('const int', 'vec_length'), ('int *', 'max')]"
1040,4,find_index,runs,"[('int *', 'vec'), ('const int', 'vec_length'), ('int *', 'value'), ('int *', 'index')]"
1040,5,init_vectors_reserved,runs,"[('int *', 'vec'), ('const int', 'vec_length')]"
1040,6,check_existance_of_candidate_rows,runs,"[('int *', 'deleted_rows'), ('int *', 'row_group'), ('const int', 'search_depth'), ('int *', 'token'), ('int *', 'selected_row_id'), ('const int', 'total_dl_matrix_row_num')]"
1040,7,get_vertex_row_group,runs,"[('int *', 'row_group'), ('int *', 'dl_matrix'), ('const int', 'vertex_num'), ('const int', 'total_dl_matrix_row_num'), ('const int', 'total_dl_matrix_col_num')]"
1040,9,recover_deleted_rows,runs,"[('int *', 'deleted_rows'), ('const int', 'search_depth'), ('const int', 'total_dl_matrix_row_num')]"
1040,10,recover_deleted_cols,runs,"[('int *', 'deleted_cols'), ('const int', 'search_depth'), ('const int', 'total_dl_matrix_col_num')]"
1040,11,recover_results,runs,"[('int *', 'results'), ('const int', 'search_depth'), ('const int', 'total_dl_matrix_row_num')]"
1040,12,get_conflict_node_id,runs,"[('int *', 'deleted_rows'), ('int *', 'row_group'), ('const int', 'search_depth'), ('int *', 'conflict_node_id'), ('const int', 'total_dl_matrix_row_num')]"
1040,13,get_conflict_edge,runs,"[('int *', 'dl_matrix'), ('int *', 'deleted_rows'), ('int *', 'deleted_cols'), ('int *', 'row_group'), ('const int', 'conflict_node_id'), ('const int', 'search_depth'), ('int *', 'conflict_edge'), ('const int', 'vertex_num'), ('const int', 'total_dl_matrix_row_num'), ('const int', 'total_dl_matrix_col_num')]"
1040,14,get_conflict_col_id,runs,"[('int *', 'dl_matrix'), ('int *', 'deleted_cols'), ('int *', 'conflict_col_id'), ('int *', 'conflict_edge'), ('int', 'total_dl_matrix_col_num'), ('int', 'vertex_num')]"
1040,15,remove_cols,runs,"[('int *', 'deleted_cols'), ('int *', 'col_group'), ('const int', 'conflict_col_id'), ('const int', 'total_dl_matrix_col_num')]"
1040,18,add_gpu,runs,"[('int *', 'device_arr'), ('int', 'device_idx'), ('int', 'val')]"
1040,23,init_vertex_group,runs,"[('int *', 'row_group'), ('bool *', 'dl_matrix'), ('int *', 'vertex_num'), ('int *', 't_cn'), ('int *', 't_rn'), ('int *', 'offset_row'), ('int *', 'offset_matrix'), ('int', 'graph_count')]"
10406,0,kernelAddConstant,runs,"[('int *', 'g_a'), ('const int', 'b')]"
10406,4,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
10409,36,sync_conv_groups,runs,[]
10413,27,sigmoid64,runs,"[('double *', 'A'), ('int', 'size')]"
10413,28,sigmoid32,runs,"[('float *', 'A'), ('int', 'size')]"
10426,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
10426,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
10426,2,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
10426,3,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
10426,4,indices,runs,[]
10426,7,func,runs,[]
10426,8,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
10426,9,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
10426,10,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
10426,11,func,runs,[]
10426,12,func,runs,[]
1044,0,conv_kernel,runs,"[('const float *', 'gm'), ('float *', 'convolved'), ('int', 'bh'), ('int', 'bw'), ('int', 'ih'), ('int', 'iw'), ('int', 'ch'), ('int', 'cw'), ('int', 'smH'), ('int', 'smW'), ('int', 'k')]"
10443,81,createLookupKernel,runs,"[('const int *', 'inds'), ('int', 'total'), ('int *', 'output')]"
10443,101,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
10443,102,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
10443,103,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
10448,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
10448,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
1045,2,clearLabel,runs,"[('bool *', 'label'), ('unsigned int', 'size')]"
1045,4,clearLabel,runs,"[('bool *', 'label'), ('unsigned int', 'size')]"
1045,6,clearLabel,runs,"[('float *', 'prA'), ('float *', 'prB'), ('unsigned int', 'num_nodes'), ('float', 'base')]"
1045,8,clearLabel,runs,"[('bool *', 'label'), ('unsigned int', 'size')]"
1045,10,clearLabel,runs,"[('bool *', 'label'), ('unsigned int', 'size')]"
1045,12,clearLabel,runs,"[('bool *', 'label'), ('unsigned int', 'size')]"
10455,1,colorVectorField,runs,"[('float3 *', 'colors'), ('float3 *', 'colorMap'), ('float2 __restrict__ *', 'field'), ('dim3', 'blocks'), ('unsigned int', 'simWidth'), ('unsigned int', 'simHeight')]"
10455,3,DiffusionJacobi,runs,"[('float2 __restrict__ *', 'positions'), ('float2 __restrict__ *', 'oldVel'), ('float2 __restrict__ *', 'newVel'), ('float', 'dt'), ('float', 'dr'), ('float', 'viscosity'), ('unsigned int', 'simWidth'), ('unsigned int', 'simHeight')]"
10455,7,Projection,runs,"[('float2 __restrict__ *', 'newVel'), ('float2 __restrict__ *', 'gradPressure'), ('unsigned int', 'simWidth')]"
10455,9,updateVel,runs,"[('float2 __restrict__ *', 'oldVel'), ('float2 __restrict__ *', 'newVel'), ('unsigned int', 'simWidth')]"
1046,1,vecAdd,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
1047,7,histogram,runs,"[('unsigned char *', 'utime'), ('unsigned int *', 'histo'), ('size_t', 'n')]"
1047,30,digitize,runs,"[('float *', 'idat'), ('uint8_t *', 'udat'), ('size_t', 'n')]"
10480,35,sync_conv_groups,runs,[]
10483,0,initialise_curand_on_kernels,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
10483,2,expPVPath,runs,"[('const int', 'noPaths'), ('const float', 'gr'), ('const int', 'nYears'), ('const float', 'meanP'), ('const float', 'timeStep'), ('const float', 'rrr'), ('float', 'current'), ('float', 'reversion'), ('float', 'jumpProb'), ('const float *', 'brownian'), ('const float *', 'jumpSize'), ('const float *', 'jump'), ('float *', 'result')]"
10483,3,matrixMultiplicationKernelNaive,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'a'), ('int', 'b'), ('int', 'c'), ('int', 'd')]"
10483,4,matrixElementWiseMultiplicationKernelNaive,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'a'), ('int', 'b')]"
10483,5,matrixMultiplicationKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'a'), ('int', 'b'), ('int', 'd')]"
10483,6,matrixMultiplicationKernelEW,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'a'), ('int', 'b')]"
10483,7,matrixDivisionKernelEW,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'a'), ('int', 'b')]"
10483,8,pathAdjacencyKernel,runs,"[('int', 'noTransitions'), ('int', 'noSegments'), ('float *', 'XY1'), ('float *', 'XY2'), ('float *', 'X4_X3'), ('float *', 'Y4_Y3'), ('float *', 'X2_X1'), ('float *', 'Y2_Y1'), ('int *', 'adjacency')]"
10483,9,roadCrossingsKernel,runs,"[('int', 'rows'), ('int', 'segs'), ('int *', 'adjacency'), ('int *', 'cross')]"
10483,10,patchComputation,runs,"[('int', 'noCandidates'), ('int', 'W'), ('int', 'H'), ('int', 'skpx'), ('int', 'skpy'), ('int', 'xres'), ('int', 'yres'), ('float', 'subPatchArea'), ('float', 'xspacing'), ('float', 'yspacing'), ('float', 'capacity'), ('int', 'uniqueRegions'), ('const int *', 'labelledImage'), ('const float *', 'pops'), ('float *', 'results')]"
10483,11,mmKernel,runs,"[('float *', 'popsIn'), ('float *', 'popsOut'), ('float *', 'mmm'), ('int', 'patches')]"
10483,12,mteKernel,runs,"[('int', 'noPaths'), ('int', 'nYears'), ('int', 'noPatches'), ('float', 'timeStep'), ('float *', 'rgr'), ('float *', 'brownians'), ('float *', 'jumpSizes'), ('float *', 'jumps'), ('float *', 'speciesParams'), ('float *', 'initPops'), ('float *', 'caps'), ('float *', 'mmm'), ('int *', 'rowIdx'), ('int *', 'elemsPerCol'), ('float *', 'pathPops'), ('float *', 'eps')]"
10483,13,randControls,runs,"[('int', 'noPaths'), ('int', 'nYears'), ('int', 'noControls'), ('float *', 'randCont'), ('int *', 'control')]"
10483,14,printControls,runs,"[('int', 'noPaths'), ('int', 'path'), ('int', 'nYears'), ('int *', 'controls')]"
10483,15,printAverages,runs,"[('int', 'nYears'), ('int', 'noSpecies'), ('int', 'noControls'), ('int', 'noPaths'), ('float *', 'totalPops'), ('float *', 'aars')]"
10483,16,forwardPathKernel,runs,"[('int', 'noPaths'), ('int', 'nYears'), ('int', 'noSpecies'), ('int', 'noPatches'), ('int', 'noControls'), ('int', 'noUncertainties'), ('float', 'timeStep'), ('float *', 'initPops'), ('float *', 'pops'), ('float *', 'mmm'), ('int *', 'rowIdx'), ('int *', 'elemsPerCol'), ('int', 'maxElems'), ('float *', 'speciesParams'), ('float *', 'caps'), ('float *', 'aars'), ('float *', 'uncertParams'), ('int *', 'controls'), ('float *', 'uJumps'), ('float *', 'uBrownian'), ('float *', 'uJumpSizes'), ('float *', 'uJumpsSpecies'), ('float *', 'uBrownianSpecies'), ('float *', 'uJumpSizesSpecies'), ('float *', 'rgr'), ('float *', 'uResults'), ('float *', 'totalPops')]"
10483,17,computePathStates,runs,"[('int', 'noPaths'), ('int', 'noDims'), ('int', 'nYears'), ('int', 'noControls'), ('int', 'year'), ('float', 'unitCost'), ('float', 'unitRevenue'), ('int *', 'controls'), ('int', 'noFuels'), ('float *', 'fuelCosts'), ('float *', 'uResults'), ('float *', 'uComposition'), ('int', 'noUncertainties'), ('int *', 'fuelIdx'), ('int', 'noCommodities'), ('float *', 'aars'), ('float *', 'totalPops'), ('float *', 'xin'), ('int *', 'currControls')]"
10483,18,allocateXYRegressionData,runs,"[('int', 'noPaths'), ('int', 'noControls'), ('int', 'noDims'), ('int', 'nYears'), ('float *', 'speciesParams'), ('int', 'year'), ('int *', 'controls'), ('float *', 'xin'), ('float *', 'condExp'), ('int *', 'dataPoints'), ('float *', 'xvals'), ('float *', 'yvals')]"
10483,19,computeStateMinMax,runs,"[('int', 'noControls'), ('int', 'noDims'), ('int', 'noPaths'), ('int *', 'dataPoints'), ('float *', 'xvals'), ('float *', 'xmins'), ('float *', 'xmaxes')]"
10483,20,createQueryPoints,runs,"[('int', 'noPoints'), ('int', 'noDims'), ('int', 'dimRes'), ('int', 'control'), ('int', 'noControls'), ('int', 'year'), ('float *', 'xmins'), ('float *', 'xmaxes'), ('float *', 'regression'), ('float *', 'queryPts')]"
10483,22,firstPeriodInduction,runs,"[('int', 'noPaths'), ('int', 'nYears'), ('int', 'noSpecies'), ('int', 'noControls'), ('float', 'timeStep'), ('float', 'unitCost'), ('float', 'unitRevenue'), ('float', 'rrr'), ('int', 'noFuels'), ('int', 'noCommodities'), ('float *', 'Q'), ('float *', 'fuelCosts'), ('float *', 'totalPops'), ('float *', 'speciesParams'), ('int *', 'controls'), ('float *', 'aars'), ('float *', 'uComposition'), ('float *', 'uResults'), ('int *', 'fuelIdx'), ('float *', 'condExp'), ('int *', 'optCont'), ('float *', 'stats')]"
10483,26,buildGlobalLinReg,runs,"[('int', 'noPoints'), ('int', 'noDims'), ('int', 'dimRes'), ('int', 'nYears'), ('int', 'noControls'), ('int', 'year'), ('int', 'control'), ('float *', 'regCoeffs'), ('float *', 'xmins'), ('float *', 'xmaxes'), ('float *', 'regression')]"
10483,27,buildGlobalQuadReg,runs,"[('int', 'noPoints'), ('int', 'noDims'), ('int', 'dimRes'), ('int', 'nYears'), ('int', 'noControls'), ('int', 'year'), ('int', 'control'), ('float *', 'regCoeffs'), ('float *', 'xmins'), ('float *', 'xmaxes'), ('float *', 'regression')]"
10483,28,multiLocLinReg,runs,"[('int', 'noPoints'), ('int', 'noDims'), ('int', 'dimRes'), ('int', 'nYears'), ('int', 'noControls'), ('int', 'year'), ('int', 'control'), ('int', 'k'), ('int *', 'dataPoints'), ('float *', 'xvals'), ('float *', 'yvals'), ('float *', 'regression'), ('float *', 'xmins'), ('float *', 'xmaxes'), ('float *', 'dist'), ('int *', 'ind')]"
10483,29,rovCorrection,runs,"[('int', 'noPoints'), ('int', 'noDims'), ('int', 'dimRes'), ('int', 'nYears'), ('int', 'noControls'), ('int', 'year'), ('int', 'control'), ('float *', 'regression')]"
10483,30,interpolateMulti,runs,"[('int', 'points'), ('int', 'noDims'), ('int', 'dimRes'), ('float *', 'surrogate'), ('float *', 'predictors'), ('float *', 'results')]"
10483,32,cuComputeDistanceGlobal,runs,"[('float *', 'A'), ('int', 'wA'), ('int', 'pA'), ('float *', 'B'), ('int', 'wB'), ('int', 'pB'), ('int', 'dim'), ('float *', 'AB')]"
10483,34,cuComputeNormGlobal,runs,"[('float *', 'A'), ('int', 'wA'), ('int', 'pA'), ('float *', 'B'), ('int', 'wB'), ('int', 'pB'), ('int', 'dim'), ('float *', 'AB'), ('float', 'norm'), ('bool', 'inf')]"
10483,35,cuInsertionSort,runs,"[('float *', 'dist'), ('int', 'dist_pitch'), ('int *', 'ind'), ('int', 'ind_pitch'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
10483,36,cuParallelSqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('int', 'k')]"
10492,1,reduceArgMaxKernel,runs,"[('float *', 'src'), ('float *', 'dst'), ('float *', 'arg'), ('int', 'dim_size'), ('int', 'block_size')]"
10492,2,multiplyElementKernel,runs,"[('float *', 'src1'), ('float *', 'src2'), ('float *', 'dst'), ('int', 'block_size')]"
10492,3,transformBboxSQDKernel,runs,"[('float *', 'delta'), ('float *', 'anchor'), ('float *', 'res'), ('int', 'block_size')]"
10499,0,multiply,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
10499,1,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'sum')]"
10499,2,wavee,runs,"[('int *', 'tab'), ('unsigned int', 'rowSize'), ('unsigned int', 'centerX'), ('unsigned int', 'centerY'), ('float', 'A'), ('float', 'lambda'), ('float', 'time'), ('float', 'fi'), ('unsigned int', 'N')]"
10499,3,bubble,runs,"[('unsigned int', 'length'), ('unsigned int', 'parity'), ('float *', 'tab')]"
10506,1,ker_sparse_to_dense_assign,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
10506,2,ker_dense_to_sparse_subtract,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
10506,3,ker_sparse_to_dense_block_assign_and_multiply,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float', 'mult'), ('float *', 'src'), ('float *', 'trg')]"
10506,6,ker_dense_to_sparse_block_add,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float *', 'src'), ('float *', 'trg')]"
1051,0,invert_mass_matrix,runs,"[('double *', 'values'), ('unsigned int', 'size')]"
10510,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10510,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10510,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10510,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10510,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10510,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10510,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
10510,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
10510,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10510,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
10510,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
10510,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
10510,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
10510,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
10510,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10510,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
10510,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
10513,8,computeSphereVertexDistancesKernel,runs,"[('float4 *', 'V'), ('float *', 'dist'), ('unsigned int *', 'NEIGHBOR'), ('unsigned int *', 'NBOFFSETS'), ('unsigned int *', 'nNeighbors'), ('unsigned int', 'nVertices'), ('float', 'circumference')]"
10513,9,GradientAverageKernel,runs,"[('float4 *', 'D'), ('float4 *', 'TD'), ('unsigned int *', 'NEIGHBOR'), ('unsigned int *', 'NBOFFSETS'), ('unsigned int *', 'nNeighbors'), ('unsigned int', 'nVertices')]"
10513,10,updateGradientsKernel,runs,"[('float4 *', 'D'), ('float4 *', 'TD'), ('unsigned int', 'nVertices')]"
10516,0,extract_with_interpolation,runs,"[('int', 'nthreads'), ('float *', 'data'), ('float *', 'n_xy_coords'), ('float *', 'extracted_data'), ('int', 'n_max_coord'), ('int', 'channels'), ('int', 'height'), ('int', 'width')]"
10516,1,cuComputeDistanceGlobal,runs,"[('float *', 'A'), ('int', 'wA'), ('float *', 'B'), ('int', 'wB'), ('int', 'dim'), ('float *', 'AB')]"
10516,2,cuInsertionSort,runs,"[('float *', 'dist'), ('int *', 'ind'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
10516,3,cuParallelSqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'k')]"
1052,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'tpb')]"
1052,1,GaussianBlur,runs,"[('unsigned int *', 'B'), ('unsigned int *', 'G'), ('unsigned int *', 'R'), ('int', 'numberOfPixels'), ('unsigned int', 'width'), ('int *', 'B_new'), ('int *', 'G_new'), ('int *', 'R_new')]"
1052,6,rotateArray,runs,"[('int *', 'c'), ('int', 'numThreads')]"
1052,9,bf_2flags,runs,"[('int *', 'Na'), ('int *', 'src'), ('int *', 'F1'), ('int *', 'F2'), ('int *', 'exists'), ('int *', 'Sa'), ('int *', 'Ea'), ('int', 'threadsPerBlock')]"
1052,10,bf_2flags,runs,"[('int *', 'Na'), ('int *', 'src'), ('int *', 'F1'), ('int *', 'F2'), ('int *', 'exists'), ('int *', 'Sa'), ('int *', 'Ea'), ('int', 'threadsPerBlock')]"
10537,6,squaresSum,runs,"[('int *', 'data'), ('int *', 'sum'), ('clock_t *', 'time')]"
10537,7,MatrixMulGPU_1,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b'), ('unsigned int', 'WA'), ('unsigned int', 'WB')]"
10552,13,_adagrad32,runs,"[('int', 'n'), ('double', 'eps'), ('float *', 'dw2'), ('float *', 'dw')]"
10552,14,_l1reg32,runs,"[('int', 'n'), ('double', 'l1'), ('float *', 'w'), ('float *', 'dw')]"
10552,15,_rmsprop32,runs,"[('int', 'n'), ('double', 'eps'), ('double', 'rho'), ('float *', 'dw2'), ('float *', 'dw')]"
10552,16,_adam32,runs,"[('int', 'n'), ('int', 't'), ('double', 'eps'), ('double', 'b1'), ('double', 'b2'), ('float *', 'fstm'), ('float *', 'scndm'), ('float *', 'dw')]"
10552,17,_adagrad64,runs,"[('int', 'n'), ('double', 'eps'), ('double *', 'dw2'), ('double *', 'dw')]"
10552,18,_l1reg64,runs,"[('int', 'n'), ('double', 'l1'), ('double *', 'w'), ('double *', 'dw')]"
10552,19,_rmsprop64,runs,"[('int', 'n'), ('double', 'eps'), ('double', 'rho'), ('double *', 'dw2'), ('double *', 'dw')]"
10552,20,_adam64,runs,"[('int', 'n'), ('int', 't'), ('double', 'eps'), ('double', 'b1'), ('double', 'b2'), ('double *', 'fstm'), ('double *', 'scndm'), ('double *', 'dw')]"
10552,28,_Ast_mul_Bs_32,runs,"[('int', 'nx'), ('int', 'ns'), ('float *', 'xval'), ('int *', 'xrow'), ('int *', 'xcol'), ('float *', 'sval'), ('int *', 'srow'), ('int *', 'scol'), ('float *', 'k')]"
10552,29,_Ast_mul_Bs_64,runs,"[('int', 'nx'), ('int', 'ns'), ('double *', 'xval'), ('int *', 'xrow'), ('int *', 'xcol'), ('double *', 'sval'), ('int *', 'srow'), ('int *', 'scol'), ('double *', 'k')]"
10552,30,_As_mul_Bs_32,runs,"[('int', 'mx'), ('int', 'ns'), ('float *', 'xval'), ('int *', 'xrow'), ('int *', 'xcol'), ('float *', 'sval'), ('int *', 'srow'), ('int *', 'scol'), ('float *', 'k')]"
10552,31,_As_mul_Bs_64,runs,"[('int', 'mx'), ('int', 'ns'), ('double *', 'xval'), ('int *', 'xrow'), ('int *', 'xcol'), ('double *', 'sval'), ('int *', 'srow'), ('int *', 'scol'), ('double *', 'k')]"
10552,32,_A_mul_Bs_32,runs,"[('int', 'mx'), ('int', 'ns'), ('float *', 'x'), ('float *', 'sval'), ('int *', 'srow'), ('int *', 'scol'), ('float *', 'k')]"
10552,33,_A_mul_Bs_64,runs,"[('int', 'mx'), ('int', 'ns'), ('double *', 'x'), ('double *', 'sval'), ('int *', 'srow'), ('int *', 'scol'), ('double *', 'k')]"
10552,34,_A_mul_Bst_32,runs,"[('int', 'my'), ('int', 'xc'), ('float *', 'dy'), ('float *', 'xval'), ('int *', 'xrow'), ('int *', 'xcol'), ('float *', 'dw')]"
10552,35,_A_mul_Bst_64,runs,"[('int', 'my'), ('int', 'xc'), ('double *', 'dy'), ('double *', 'xval'), ('int *', 'xrow'), ('int *', 'xcol'), ('double *', 'dw')]"
10552,40,_kgauss32,runs,"[('int', 'nx'), ('int', 'ns'), ('float *', 'xval'), ('int *', 'xrow'), ('int *', 'xcol'), ('float *', 'sval'), ('int *', 'srow'), ('int *', 'scol'), ('float *', 'k'), ('float', 'g')]"
10552,41,_kgauss64,runs,"[('int', 'nx'), ('int', 'ns'), ('double *', 'xval'), ('int *', 'xrow'), ('int *', 'xcol'), ('double *', 'sval'), ('int *', 'srow'), ('int *', 'scol'), ('double *', 'k'), ('double', 'g')]"
10552,42,_kpoly32,runs,"[('int', 'nx'), ('int', 'ns'), ('float *', 'xval'), ('int *', 'xrow'), ('int *', 'xcol'), ('float *', 'sval'), ('int *', 'srow'), ('int *', 'scol'), ('float *', 'k'), ('float', 'c'), ('float', 'd')]"
10552,43,_kpoly64,runs,"[('int', 'nx'), ('int', 'ns'), ('double *', 'xval'), ('int *', 'xrow'), ('int *', 'xcol'), ('double *', 'sval'), ('int *', 'srow'), ('int *', 'scol'), ('double *', 'k'), ('double', 'c'), ('double', 'd')]"
10552,44,_kpolymap32,runs,"[('int', 'n'), ('float *', 'k'), ('float', 'c'), ('float', 'd')]"
10552,45,_kpolymap64,runs,"[('int', 'n'), ('double *', 'k'), ('double', 'c'), ('double', 'd')]"
10552,46,_kgauss32map,runs,"[('int', 'nx'), ('int', 'ns'), ('float *', 'x2'), ('float *', 's2'), ('float *', 'k'), ('float', 'g')]"
10552,47,_kgauss64map,runs,"[('int', 'nx'), ('int', 'ns'), ('double *', 'x2'), ('double *', 's2'), ('double *', 'k'), ('double', 'g')]"
10552,48,_kgauss32sum,runs,"[('int', 'xrows'), ('int', 'xcols'), ('float *', 'x'), ('float *', 'xx')]"
10552,49,_kgauss64sum,runs,"[('int', 'xrows'), ('int', 'xcols'), ('double *', 'x'), ('double *', 'xx')]"
10552,51,_drop32,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'xmask'), ('float', 'dropout'), ('float', 'scale')]"
10552,52,_drop64,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'xmask'), ('double', 'dropout'), ('double', 'scale')]"
10552,53,_kgauss32,runs,"[('int', 'mx'), ('int', 'ns'), ('float *', 'xval'), ('int *', 'xrow'), ('int *', 'xcol'), ('float *', 'sval'), ('int *', 'srow'), ('int *', 'scol'), ('float', 'g'), ('float *', 'k')]"
10552,54,_kgauss32d,runs,"[('int', 'nx'), ('int', 'ns'), ('int', 'nd'), ('float *', 'x'), ('float *', 's'), ('float *', 'k'), ('float', 'g')]"
10552,55,_kgauss64d,runs,"[('int', 'nx'), ('int', 'ns'), ('int', 'nd'), ('double *', 'x'), ('double *', 's'), ('double *', 'k'), ('double', 'g')]"
10552,69,_emul32,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
10552,70,_emul64,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y')]"
10552,77,_drop32,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y'), ('float *', 'xmask'), ('double', 'dropout'), ('double', 'scale')]"
10552,78,_drop64,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'xmask'), ('double', 'dropout'), ('double', 'scale')]"
10552,80,_fill,runs,"[('int', 'n'), ('float', 'val'), ('float *', 'x')]"
10552,81,_add1,runs,"[('int', 'n'), ('float', 'val'), ('float *', 'x')]"
10552,82,_badd,runs,"[('int', 'nrows'), ('int', 'ncols'), ('float *', 'y'), ('float *', 'b')]"
10552,83,_drop,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'xmask'), ('float', 'dropout'), ('float', 'scale')]"
10552,84,_adagrad,runs,"[('int', 'n'), ('float', 'eps'), ('float *', 'dw2'), ('float *', 'dw')]"
10552,85,_l1reg,runs,"[('int', 'n'), ('float', 'l1'), ('float *', 'w'), ('float *', 'dw')]"
10552,86,_reluforw,runs,"[('int', 'n'), ('float *', 'y')]"
10552,87,_reluback,runs,"[('int', 'n'), ('float *', 'y'), ('float *', 'dy')]"
10552,88,_softback,runs,"[('int', 'nrows'), ('int', 'ncols'), ('float *', 'y'), ('float *', 'dy')]"
10552,89,_logploss,runs,"[('int', 'nrows'), ('int', 'ncols'), ('float *', 'y'), ('float *', 'dy')]"
10552,90,_logpforw,runs,"[('int', 'nrows'), ('int', 'ncols'), ('float *', 'y')]"
10553,0,initpopulation,runs,"[('chromosome *', 'cudaChromo'), ('int', 'seed'), ('const int', 'numofeles'), ('int *', 'devValue'), ('int *', 'devWeight')]"
10553,1,initOne,runs,"[('chromosome *', 'cudaChromo'), ('const int', 'numele'), ('int *', 'devValue'), ('int *', 'devWeight')]"
10553,2,gan,runs,"[('chromosome *', 'cudaChromo'), ('chromosome *', 'cudaNewpopulation'), ('const int', 'capacity')]"
10553,3,evaluate,runs,"[('chromosome *', 'cudaChromo'), ('int *', 'devValue'), ('int *', 'devWeight'), ('int', 'numele')]"
10553,4,hybrid,runs,"[('chromosome *', 'cudaChromo'), ('chromosome *', 'cudaNewpopulation'), ('int', 'seed1'), ('const int', 'numele'), ('int *', 'devValue'), ('int *', 'devWeight')]"
10553,5,bitonic_sort_step,runs,"[('chromosome *', 'cudanewpopulation'), ('int', 'j'), ('int', 'k')]"
10576,0,cuda_cmp_kernel,runs,"[('std::size_t', 'n'), ('int *', 'aptr'), ('int *', 'bptr'), ('int *', 'rptr')]"
1058,0,initialize,runs,"[('float *', 'a'), ('float *', 'oA'), ('float *', 'x'), ('float', 'totalSize'), ('int', 'n'), ('int', 'ghosts')]"
1058,1,advect,runs,"[('float *', 'a'), ('float *', 'oA'), ('float *', 'x'), ('float', 'u'), ('int', 'n'), ('int', 'ghosts'), ('float', 'tmax')]"
1058,2,initSinusoid,runs,"[('float *', 'a'), ('float *', 'x'), ('float', 'totalX'), ('int', 'n'), ('int', 'ghosts'), ('float', 'shift'), ('float', 'amp')]"
1058,3,initSquare,runs,"[('float *', 'a'), ('float *', 'x'), ('float', 'totalX'), ('int', 'n'), ('int', 'ghosts')]"
10580,16,__minImpuritya,runs,"[('long long *', 'keys'), ('int *', 'counts'), ('int *', 'outv'), ('int *', 'outf'), ('float *', 'outg'), ('int *', 'outc'), ('int *', 'jc'), ('int *', 'fieldlens'), ('int', 'nnodes'), ('int', 'ncats'), ('int', 'nsamps')]"
10580,17,__minImpurityb,runs,"[('long long *', 'keys'), ('int *', 'counts'), ('int *', 'outv'), ('int *', 'outf'), ('float *', 'outg'), ('int *', 'outc'), ('int *', 'jc'), ('int *', 'fieldlens'), ('int', 'nnodes'), ('int', 'ncats'), ('int', 'nsamps')]"
10580,18,__findBoundaries,runs,"[('long long *', 'keys'), ('int *', 'jc'), ('int', 'n'), ('int', 'njc'), ('int', 'shift')]"
10580,23,__hashmult2,runs,"[('int', 'nrows'), ('int', 'nfeats'), ('int', 'ncols'), ('int', 'brows1'), ('int', 'brows2'), ('float *', 'A'), ('float *', 'Bdata'), ('int *', 'Bir'), ('int *', 'Bjc'), ('float *', 'C'), ('int', 'transpose')]"
10580,27,__pairmult2,runs,"[('int', 'nrows'), ('int', 'bncols'), ('int', 'brows1'), ('int', 'brows2'), ('float *', 'A'), ('int', 'lda'), ('float *', 'A2'), ('int', 'lda2'), ('float *', 'Bdata'), ('int *', 'Bir'), ('int *', 'Bjc'), ('int', 'broff'), ('int', 'bcoff'), ('float *', 'C'), ('int', 'ldc'), ('int', 'transpose')]"
10580,42,__word2vecPos,runs,"[('int', 'nrows'), ('int', 'ncols'), ('int *', 'W'), ('int *', 'LB'), ('int *', 'UB'), ('float *', 'A'), ('float *', 'B'), ('float', 'lrate'), ('float', 'vexp')]"
10580,43,__word2vecNeg,runs,"[('int', 'nrows'), ('int', 'ncols'), ('int *', 'WA'), ('int *', 'WB'), ('float *', 'A'), ('float *', 'B'), ('float', 'lrate'), ('float', 'vexp')]"
10580,44,__word2vecNegFilt,runs,"[('int', 'nrows'), ('int', 'ncols'), ('int', 'nwords'), ('int *', 'WA'), ('int *', 'WB'), ('float *', 'A'), ('float *', 'B'), ('float', 'lrate'), ('float', 'vexp')]"
10580,45,__word2vecEvalPos,runs,"[('int', 'nrows'), ('int', 'ncols'), ('int *', 'W'), ('int *', 'LB'), ('int *', 'UB'), ('float *', 'A'), ('float *', 'B'), ('float *', 'Retval')]"
10580,46,__word2vecEvalNeg,runs,"[('int', 'nrows'), ('int', 'ncols'), ('int *', 'WA'), ('int *', 'WB'), ('float *', 'A'), ('float *', 'B'), ('float *', 'Retval')]"
10580,47,__word2vecFwd,runs,"[('int', 'nrows'), ('int', 'ncols'), ('int *', 'WA'), ('int *', 'WB'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
10580,48,__word2vecBwd,runs,"[('int', 'nrows'), ('int', 'ncols'), ('int *', 'WA'), ('int *', 'WB'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('float', 'lrate')]"
10580,51,__word2vecPos,runs,"[('int', 'nrows'), ('int', 'ncols'), ('int *', 'W'), ('int *', 'LB'), ('int *', 'UB'), ('float *', 'A'), ('float *', 'B'), ('float', 'lrate')]"
10580,56,__linComb,runs,"[('float *', 'X'), ('float', 'wx'), ('float *', 'Y'), ('float', 'wy'), ('float *', 'Z'), ('int', 'len')]"
10580,58,__veccmp,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'd')]"
10580,59,__veccmp,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'd')]"
10580,60,__hammingdists,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'w'), ('int *', 'op'), ('int *', 'ow'), ('int', 'n')]"
10580,80,__ADAGrad,runs,"[('int', 'nrows'), ('int', 'ncols'), ('float *', 'mm'), ('float *', 'um'), ('float *', 'ssq'), ('float *', 'mask'), ('int', 'maskr'), ('float', 'nw'), ('float *', 've'), ('int', 'nve'), ('float *', 'ts'), ('int', 'nts'), ('float *', 'lr'), ('int', 'nlr'), ('float', 'langevin'), ('float', 'eps'), ('int', 'doupdate'), ('curandState *', 'rstates')]"
10580,81,__ADAGradm,runs,"[('int', 'nrows'), ('int', 'ncols'), ('float *', 'mm'), ('float *', 'um'), ('float *', 'ssq'), ('float *', 'momentum'), ('float', 'mu'), ('float *', 'mask'), ('int', 'maskr'), ('float', 'nw'), ('float *', 've'), ('int', 'nve'), ('float *', 'ts'), ('int', 'nts'), ('float *', 'lr'), ('int', 'nlr'), ('float', 'langevin'), ('float', 'eps'), ('int', 'doupdate'), ('curandState *', 'rstates')]"
10580,82,__ADAGradn,runs,"[('int', 'nrows'), ('int', 'ncols'), ('float *', 'mm'), ('float *', 'um'), ('float *', 'ssq'), ('float *', 'momentum'), ('float', 'mu'), ('float *', 'mask'), ('int', 'maskr'), ('float', 'nw'), ('float *', 've'), ('int', 'nve'), ('float *', 'ts'), ('int', 'nts'), ('float *', 'lr'), ('int', 'nlr'), ('float', 'langevin'), ('float', 'eps'), ('int', 'doupdate'), ('curandState *', 'rstates')]"
10586,2,cuAdd,runs,"[('float *', 'dst'), ('float *', 'src'), ('int', 'size')]"
10586,3,cuMultiplyNum,runs,"[('float *', 'dst'), ('float', 'num'), ('int', 'size')]"
10597,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
10597,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
10597,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
10597,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
10597,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
10597,349,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
10597,354,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
10608,0,naivePrefixSum,runs,"[('int *', 'A'), ('int *', 'B'), ('int', 'size'), ('int', 'iteration')]"
10608,1,upSweep,runs,"[('int *', 'A'), ('int', 'size'), ('int', 'iteration')]"
10608,2,setLastToCero,runs,"[('int *', 'A'), ('int', 'size')]"
10608,3,downSweep,runs,"[('int *', 'A'), ('int', 'size'), ('int', 'iteration')]"
10615,3,find_maximum_kernel,runs,"[('float *', 'array'), ('int *', 'mutex'), ('unsigned int', 'n'), ('int', 'blockSize')]"
10615,4,tonemap_adaptive,runs,"[('float *', 'imageIn'), ('float *', 'imageOut'), ('int', 'width'), ('int', 'height'), ('int', 'channels'), ('int', 'depth'), ('float', 'q'), ('float', 'k')]"
10615,5,tonemap_logarithmic,runs,"[('float *', 'imageIn'), ('float *', 'imageOut'), ('int', 'width'), ('int', 'height'), ('int', 'channels'), ('int', 'depth'), ('float', 'q'), ('float', 'k')]"
10615,6,tonemap_gamma,runs,"[('float *', 'imageIn'), ('float *', 'imageOut'), ('int', 'width'), ('int', 'height'), ('int', 'channels'), ('int', 'depth'), ('float', 'f_stop'), ('float', 'gamma')]"
10615,8,MatrixMulKernel,runs,"[('float *', 'd_M'), ('float *', 'd_N'), ('float *', 'd_P'), ('int', 'width')]"
10615,9,PictureKernell,runs,"[('unsigned char *', 'imageInput'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'imageOutput')]"
10615,10,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
10615,11,PictureKernell,runs,"[('unsigned char *', 'd_Pin'), ('unsigned char *', 'd_Pout'), ('int', 'n'), ('int', 'm')]"
10615,12,MatrixMulKernel,runs,"[('float *', 'd_M'), ('float *', 'd_N'), ('float *', 'd_P'), ('int', 'width')]"
10615,14,img2gray,runs,"[('unsigned char *', 'imageInput'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'imageOutput')]"
10615,16,img2gray,runs,"[('unsigned char *', 'imageInput'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'imageOutput')]"
10615,18,img2gray,runs,"[('unsigned char *', 'imageInput'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'imageOutput')]"
10615,20,img2gray,runs,"[('unsigned char *', 'imageInput'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'imageOutput')]"
10620,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
10624,0,k_dummy_test,runs,[]
10632,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
10637,0,cudaDoEigen,runs,"[('double *', 'm'), ('int', 'rows'), ('int', 'columns')]"
10647,33,sync_conv_groups,runs,[]
10651,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
10652,0,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('int', 'size'), ('unsigned int *', 'histo')]"
10652,1,histo_kernel_optimization,runs,"[('unsigned char *', 'buffer'), ('int', 'size'), ('unsigned int *', 'histo')]"
10652,2,Add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10652,3,Dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
10652,4,Zero_Dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
10653,9,cuda_fill,runs,"[('double *', 'pVec'), ('double', 'val'), ('int', 'n')]"
10653,10,cuda_activateTanh,runs,"[('double *', 'pA'), ('int', 'n')]"
10653,11,cuda_deactivateTanh,runs,"[('double *', 'pE'), ('const double *', 'pA'), ('int', 'n')]"
10653,13,cuda_deactivateBend,runs,"[('double *', 'pE'), ('const double *', 'pA'), ('int', 'n')]"
10653,14,cuda_conv2D_ff,runs,"[('double *', 'pA'), ('double *', 'pNet'), ('const double *', 'in'), ('const double *', 'pKernels'), ('const double *', 'pBias'), ('size_t', 'kernelCount'), ('size_t', 'kernelRows'), ('size_t', 'kernelCols'), ('size_t', 'outputRows'), ('size_t', 'outputCols'), ('size_t', 'inputRows'), ('size_t', 'inputCols'), ('size_t', 'inputChannels'), ('size_t', 'padding'), ('size_t', 'stride')]"
10653,15,cuda_conv2D_deactivate,runs,"[('double *', 'err'), ('const double *', 'net'), ('const double *', 'activation'), ('size_t', 'outputs')]"
10653,16,cuda_conv2D_backPropError,runs,"[('double *', 'upStreamError'), ('const double *', 'err'), ('const double *', 'pKernels'), ('size_t', 'kernelCount'), ('size_t', 'kernelRows'), ('size_t', 'kernelCols'), ('size_t', 'outputRows'), ('size_t', 'outputCols'), ('size_t', 'inputChannels'), ('size_t', 'inputRows'), ('size_t', 'inputCols'), ('size_t', 'padding'), ('size_t', 'stride')]"
10653,17,cuda_conv2D_updateDeltas,runs,"[('double *', 'delta'), ('double *', 'biasDelta'), ('const double *', 'upStreamActivation'), ('const double *', 'err'), ('double', 'momentum'), ('size_t', 'kernelCount'), ('size_t', 'kernelRows'), ('size_t', 'kernelCols'), ('size_t', 'outputRows'), ('size_t', 'outputCols'), ('size_t', 'inputChannels'), ('size_t', 'inputRows'), ('size_t', 'inputCols'), ('size_t', 'padding'), ('size_t', 'stride')]"
10658,0,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
1066,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
10670,0,makeFlist,runs,"[('unsigned int *', 'd_trans_offset'), ('unsigned int *', 'd_transactions'), ('unsigned int *', 'd_flist'), ('unsigned int', 'num_transactions'), ('unsigned int', 'num_items_in_transactions')]"
10683,0,simpleKernel,runs,"[('float *', 'dst'), ('float *', 'src1'), ('float *', 'src2')]"
10683,1,simpleKernel,runs,"[('float *', 'dst'), ('float *', 'src')]"
1069,3,InitializeMatrix_kernel,runs,"[('int8_t *', 'matrix'), ('int', 'ldm'), ('int', 'rows'), ('int', 'columns')]"
10692,0,knapsackKernel,runs,"[('int *', 'profits'), ('int *', 'weights'), ('int *', 'f'), ('int', 'capacity'), ('int', 'i')]"
10692,1,knapsackKernel,runs,"[('int *', 'profits'), ('int *', 'weights'), ('int *', 'input_f'), ('int *', 'output_f'), ('int', 'capacity'), ('int', 'c_min'), ('int', 'k')]"
10692,2,knapsackKernel,runs,"[('int *', 'profits'), ('int *', 'weights'), ('int *', 'input_f'), ('int *', 'output_f'), ('int', 'capacity'), ('int', 'c_min'), ('int', 'k')]"
10692,3,warmUpGPU,runs,[]
10693,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
10693,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
10693,2,func,runs,[]
10693,3,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
10693,4,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
10693,5,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
10693,6,func,runs,[]
10693,7,func,runs,[]
10695,0,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
10695,1,do_scale,runs,"[('uint8_t *', 'inBuffer'), ('uint8_t *', 'outBuffer'), ('uint32_t', 'inWidth'), ('uint32_t', 'inHeight'), ('uint32_t', 'outWidth'), ('uint32_t', 'outHeight'), ('double', 'ratioHeight'), ('double', 'ratioWidth'), ('double', 'xRatio'), ('double', 'yRatio'), ('uint32_t', 'outHeightOffset'), ('uint32_t', 'outWidthOffset'), ('uint32_t', 'inStep'), ('uint32_t', 'outStep')]"
10706,15,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
10706,31,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
10706,32,wipe,runs,"[('int *', 'buffer'), ('int', 'length')]"
10706,35,setValueSomestupidlylongnamefoobarfoobarfoobar,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
10706,39,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
10706,40,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
10706,42,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
10706,43,mykernel,runs,"[('float *', 'd1'), ('float *', 'd2'), ('float *', 'd3'), ('float *', 'd4'), ('float *', 'd5')]"
10706,44,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
10706,46,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
10706,47,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
10706,59,getValue,runs,"[('float4 *', 'outdata'), ('float *', 'indata')]"
10706,60,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
10706,61,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
10706,63,incrValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
10706,64,mykernel,runs,"[('int *', 'int1'), ('float *', 'f1'), ('int *', 'int2')]"
10706,65,floattoint,runs,"[('int *', 'out'), ('float *', 'in')]"
10706,66,inttofloat,runs,"[('float *', 'out'), ('int *', 'in')]"
10706,67,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
10706,69,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
10706,70,getValueChar,runs,"[('char *', 'outdata'), ('char *', 'indata')]"
10706,71,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
10706,74,main_set,runs,"[('float *', 'data'), ('float', 'val')]"
10706,75,k2_mul,runs,"[('float *', 'data'), ('float', 'val')]"
10706,76,k1_incr,runs,"[('float *', 'data'), ('float', 'val')]"
10706,77,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
10706,78,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
10716,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
10716,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
10716,2,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
10716,3,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
10716,4,indices,runs,[]
10716,7,func,runs,[]
10716,8,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
10716,9,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
10716,10,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
10716,11,func,runs,[]
10716,13,func,runs,[]
10717,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10717,1,gpu_mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'N')]"
10725,1,gain,runs,"[('int', 'width'), ('int', 'height'), ('float', 'rGain'), ('float', 'gGain'), ('float', 'bGain'), ('float *', 'input'), ('float *', 'output')]"
1073,41,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
1073,42,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
1073,43,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
1073,44,kMultiSoftmaxCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('float *', 'top5Probs'), ('const int', 'numCases'), ('const int', 'numOut'), ('const int', 'setSize')]"
1073,48,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
10736,36,sync_conv_groups,runs,[]
10738,0,transpose_shared,runs,"[('float *', 'a'), ('float *', 'b')]"
10738,1,transpose_naive,runs,"[('float *', 'a'), ('float *', 'b')]"
10738,5,pi_optimized,runs,"[('float *', 'x'), ('float *', 'y'), ('int *', 'global_count')]"
10738,6,pi_random,runs,"[('float *', 'x'), ('float *', 'y'), ('int *', 'global_count')]"
10738,7,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10738,8,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'columns'), ('int', 'rows')]"
10738,9,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10738,10,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'columns'), ('int', 'rows')]"
10741,0,nms_kernel,runs,"[('const int', 'n_boxes'), ('const float', 'nms_overlap_thres'), ('const float *', 'dev_boxes'), ('unsigned long long *', 'dev_mask')]"
10743,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
10745,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
10745,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
10745,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
10745,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
10745,341,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
10745,349,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
10746,180,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
10746,320,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
10749,0,matrixMultKernel_global,runs,"[('float *', 'Ad'), ('float *', 'Bd'), ('float *', 'Cd'), ('int', 'n')]"
10749,1,matrixMultKernel_tiled,runs,"[('float *', 'Ad'), ('float *', 'Bd'), ('float *', 'Cd'), ('int', 'n')]"
10749,2,matrixMultKernel_overlap,runs,"[('float *', 'Ad'), ('float *', 'Bd'), ('float *', 'Cd'), ('int', 'n')]"
10763,0,set_kernel,runs,"[('int *', 'dst'), ('int const', 'value'), ('int const', 'count')]"
10763,1,set_kernel,runs,"[('REAL *', 'dst'), ('REAL const', 'value'), ('std::size_t const', 'count')]"
10764,0,cvlUnit,runs,"[('const char *', 'imgR'), ('const char *', 'imgG'), ('const char *', 'imgB'), ('const char *', 'core'), ('char *', 'outR'), ('char *', 'outG'), ('char *', 'outB'), ('int', 'lenX'), ('int', 'lenY'), ('int', 'lenCore')]"
10764,2,cvlUnit,runs,"[('const char *', 'imgR'), ('const char *', 'imgG'), ('const char *', 'imgB'), ('const char *', 'core'), ('char *', 'outR'), ('char *', 'outG'), ('char *', 'outB'), ('int', 'lenX'), ('int', 'lenY'), ('int', 'lenCore')]"
10768,12,prepareHorizontalPottsProblems8ADMM,runs,"[('float *', 'in'), ('float *', 'u'), ('float *', 'v'), ('float *', 'w_'), ('float *', 'z'), ('float *', 'weights'), ('float *', 'weightsPrime'), ('float *', 'lam1'), ('float *', 'lam2'), ('float *', 'lam3'), ('float', 'mu'), ('uint32_t', 'w'), ('uint32_t', 'h'), ('uint32_t', 'nc')]"
10768,13,prepareDiagonalPottsProblems8ADMM,runs,"[('float *', 'in'), ('float *', 'u'), ('float *', 'v'), ('float *', 'w_'), ('float *', 'z'), ('float *', 'weights'), ('float *', 'weightsPrime'), ('float *', 'lam2'), ('float *', 'lam4'), ('float *', 'lam6'), ('float', 'mu'), ('uint32_t', 'w'), ('uint32_t', 'h'), ('uint32_t', 'nc')]"
10768,14,prepareVerticalPottsProblems8ADMM,runs,"[('float *', 'in'), ('float *', 'u'), ('float *', 'v'), ('float *', 'w_'), ('float *', 'z'), ('float *', 'weights'), ('float *', 'weightsPrime'), ('float *', 'lam1'), ('float *', 'lam4'), ('float *', 'lam5'), ('float', 'mu'), ('uint32_t', 'w'), ('uint32_t', 'h'), ('uint32_t', 'nc')]"
10768,15,prepareAntidiagonalPottsProblems8ADMM,runs,"[('float *', 'in'), ('float *', 'u'), ('float *', 'v'), ('float *', 'w_'), ('float *', 'z'), ('float *', 'weights'), ('float *', 'weightsPrime'), ('float *', 'lam3'), ('float *', 'lam5'), ('float *', 'lam6'), ('float', 'mu'), ('uint32_t', 'w'), ('uint32_t', 'h'), ('uint32_t', 'nc')]"
10768,16,updateLagrangeMultiplierKernel8ADMM,runs,"[('float *', 'u'), ('float *', 'v'), ('float *', 'w_'), ('float *', 'z'), ('float *', 'lam1'), ('float *', 'lam2'), ('float *', 'lam3'), ('float *', 'lam4'), ('float *', 'lam5'), ('float *', 'lam6'), ('float *', 'temp'), ('float', 'mu'), ('uint32_t', 'w'), ('uint32_t', 'h'), ('uint32_t', 'nc')]"
10768,17,prepareHorizontalPottsProblems4ADMM,runs,"[('float *', 'in'), ('float *', 'u'), ('float *', 'v'), ('float *', 'weights'), ('float *', 'weightsPrime'), ('float *', 'lam'), ('float', 'mu'), ('uint32_t', 'w'), ('uint32_t', 'h'), ('uint32_t', 'nc')]"
10768,18,prepareVerticalPottsProblems4ADMM,runs,"[('float *', 'in'), ('float *', 'u'), ('float *', 'v'), ('float *', 'weights'), ('float *', 'weightsPrime'), ('float *', 'lam'), ('float', 'mu'), ('uint32_t', 'w'), ('uint32_t', 'h'), ('uint32_t', 'nc')]"
10768,19,updateLagrangeMultiplierKernel4ADMM,runs,"[('float *', 'u'), ('float *', 'v'), ('float *', 'lam'), ('float *', 'temp'), ('float', 'mu'), ('uint32_t', 'w'), ('uint32_t', 'h'), ('uint32_t', 'nc')]"
10775,0,SomeKernel,runs,"[('int *', 'res'), ('int *', 'data'), ('int', 'col'), ('int', 'row'), ('int', 'y'), ('int', 'step')]"
10775,1,SomeKernel,runs,"[('int *', 'res'), ('int *', 'data'), ('int', 'col'), ('int', 'row'), ('int', 'y'), ('int', 'step')]"
10775,2,SomeKernel,runs,"[('int *', 'res'), ('int *', 'data'), ('int', 'col'), ('int', 'row'), ('int', 'y'), ('int', 'step')]"
10775,3,SomeKernel,runs,"[('int *', 'res'), ('int *', 'data'), ('int', 'col'), ('int', 'row'), ('int', 'y'), ('int', 'step')]"
10775,4,SomeKernel,runs,"[('int *', 'res'), ('int *', 'data'), ('int', 'col'), ('int', 'row'), ('int', 'y'), ('int', 'step')]"
10785,7,emptyKernel,runs,[]
10790,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
10790,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
10790,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
10790,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
10790,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
10798,36,sync_conv_groups,runs,[]
10802,3,Histogram_kernel,runs,"[('int', 'size'), ('int', 'bins'), ('int', 'cpu_bins'), ('unsigned int *', 'data'), ('unsigned int *', 'histo')]"
10802,7,non_max_supp_kernel,runs,"[('unsigned char *', 'data'), ('unsigned char *', 'out'), ('unsigned char *', 'theta'), ('int', 'rows'), ('int', 'cols')]"
10802,8,hyst_kernel,runs,"[('unsigned char *', 'data'), ('unsigned char *', 'out'), ('int', 'rows'), ('int', 'cols')]"
10806,1,oddevensort,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'size')]"
10806,2,MatrixMul,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
10806,3,compute,runs,"[('int *', 'v1'), ('int *', 'v2'), ('int *', 'v3'), ('int', 'N')]"
10817,0,copy_u2l_dense,runs,"[('double *', 'ret'), ('int', 'dim'), ('int', 'N')]"
10817,1,relu,runs,"[('double *', 'A'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen')]"
10817,2,relu_backward,runs,"[('double *', 'X'), ('double *', 'dout'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen')]"
10817,3,bias_add,runs,"[('double *', 'input'), ('double *', 'bias'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen'), ('int', 'PQ')]"
10817,4,daxpy_matrix_vector,runs,"[('double *', 'A'), ('double *', 'B'), ('double', 'alpha'), ('double *', 'ret'), ('int', 'rlenA'), ('int', 'clenA'), ('int', 'rlenB'), ('int', 'clenB')]"
10817,5,bias_multiply,runs,"[('double *', 'input'), ('double *', 'bias'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen'), ('int', 'PQ')]"
10817,6,compare_and_set,runs,"[('double *', 'A'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen'), ('double', 'compareVal'), ('double', 'tol'), ('double', 'ifEqualsVal'), ('double', 'ifLessThanVal'), ('double', 'ifGreaterThanVal')]"
10817,9,fill,runs,"[('double *', 'A'), ('double', 'scalar'), ('int', 'lenA')]"
10817,22,matrix_exp,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,23,matrix_sqrt,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,24,matrix_round,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,25,matrix_abs,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,26,matrix_log,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,27,matrix_floor,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,28,matrix_ceil,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,29,matrix_sin,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,30,matrix_cos,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,31,matrix_tan,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,32,matrix_asin,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,33,matrix_acos,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,34,matrix_atan,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10817,35,matrix_sign,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
10829,33,sync_conv_groups,runs,[]
1083,0,device_only_copy,runs,"[('float *', 'output'), ('float *', 'input'), ('size_t', 'total_size')]"
1083,1,device_apply_scale,runs,"[('float *', 'coords'), ('float', 'scale'), ('size_t', 'total_size')]"
1083,2,recenter_2D,runs,"[('float *', 'coords'), ('size_t', 'dim_y'), ('size_t', 'dim_x')]"
1083,3,recenter_3D,runs,"[('float *', 'coords'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x')]"
1083,4,flip_2D,runs,"[('float *', 'coords'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('int', 'do_y'), ('int', 'do_x')]"
1083,5,flip_3D,runs,"[('float *', 'coords'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('int', 'do_z'), ('int', 'do_y'), ('int', 'do_x')]"
1083,6,translate_3D,runs,"[('float *', 'coords'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('float', 'seg_z'), ('float', 'seg_y'), ('float', 'seg_x')]"
1083,7,translate_2D,runs,"[('float *', 'coords'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('float', 'seg_y'), ('float', 'seg_x')]"
1083,8,rotate_2D,runs,"[('float *', 'coords'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('float', 'cos_angle'), ('float', 'sin_angle')]"
1083,9,rotate_3D,runs,"[('float *', 'coords'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('float *', 'rot_matrix')]"
1083,10,scale_random,runs,"[('float *', 'random'), ('size_t', 'total_size')]"
1083,11,plus_offsets,runs,"[('float *', 'coords'), ('float *', 'random'), ('size_t', 'total_size'), ('float', 'alpha')]"
1083,12,gussain_filter_x,runs,"[('float *', 'random'), ('float *', 'kernel'), ('int', 'lw'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('int', 'mode'), ('float', 'cval')]"
1083,13,gussain_filter_y,runs,"[('float *', 'random'), ('float *', 'kernel'), ('int', 'lw'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('int', 'mode'), ('float', 'cval')]"
1083,14,gussain_filter_z,runs,"[('float *', 'random'), ('float *', 'kernel'), ('int', 'lw'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('int', 'mode'), ('float', 'cval')]"
1083,15,set_coords_2D,runs,"[('float *', 'coords'), ('size_t', 'y'), ('size_t', 'x')]"
1083,16,set_coords_3D,runs,"[('float *', 'coords'), ('size_t', 'z'), ('size_t', 'y'), ('size_t', 'x')]"
10832,0,vectorAddKernel,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
10833,0,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
10833,1,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
10833,2,clock_block,runs,"[('clock_t *', 'd_o'), ('clock_t', 'clock_count')]"
10833,4,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
10833,5,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
10835,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
10835,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
10835,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
10835,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
10835,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
10837,7,refine_dilateFPPlaneDepthMapXpYp_kernel,runs,"[('float *', 'fpPlaneDepthMap'), ('int', 'fpPlaneDepthMap_p'), ('float *', 'maskMap'), ('int', 'maskMap_p'), ('int', 'width'), ('int', 'height'), ('int', 'xp'), ('int', 'yp'), ('float', 'fpPlaneDepth')]"
10837,16,refine_computeBestDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float3 *', 'isims'), ('int', 'isims_p'), ('float3 *', 'idpts'), ('int', 'idpts_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
10837,17,refine_fuseThreeDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float *', 'isimLst'), ('int', 'isimLst_p'), ('float *', 'idptLst'), ('int', 'idptLst_p'), ('float *', 'isimAct'), ('int', 'isimAct_p'), ('float *', 'idptAct'), ('int', 'idptAct_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
10837,79,generateGaussian_kernel,runs,"[('float *', 'og'), ('float', 'delta'), ('int', 'radius')]"
10839,16,update_array_one_gpu,runs,"[('int', 'm'), ('int', 'n'), ('int', 'i'), ('int', 'numberOfThreadsRequired'), ('int', 'count'), ('int', 'oldCount'), ('int *', 'd_array')]"
10839,17,update_array_two_gpu,runs,"[('int', 'm'), ('int', 'n'), ('int', 'i'), ('int', 'numberOfThreadsRequired'), ('int', 'count'), ('int', 'oldCount'), ('int *', 'd_array')]"
10839,50,operate_on_block_one_gpu,runs,"[('int', 'i'), ('int *', 'd_array'), ('int', 'x_start'), ('int', 'y_start'), ('char *', 'd_subsequence1'), ('char *', 'd_subsequence2')]"
10842,8,computeSphereVertexDistancesKernel,runs,"[('float4 *', 'V'), ('float *', 'dist'), ('unsigned int *', 'NEIGHBOR'), ('unsigned int *', 'NBOFFSETS'), ('unsigned int *', 'nNeighbors'), ('unsigned int', 'nVertices'), ('float', 'circumference')]"
10842,9,GradientAverageKernel,runs,"[('float4 *', 'D'), ('float4 *', 'TD'), ('unsigned int *', 'NEIGHBOR'), ('unsigned int *', 'NBOFFSETS'), ('unsigned int *', 'nNeighbors'), ('unsigned int', 'nVertices')]"
10842,10,updateGradientsKernel,runs,"[('float4 *', 'D'), ('float4 *', 'TD'), ('unsigned int', 'nVertices')]"
10843,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
10843,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
10843,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
10843,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
10843,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
1085,0,kernel,runs,[]
1085,1,helloFromGPU,runs,[]
1085,2,kernel,runs,[]
10874,0,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10874,1,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10874,2,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10874,9,kernel,runs,[]
10874,10,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
10874,11,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
10874,15,kernel,runs,"[('uchar4 *', 'ptr'), ('int', 'ticks')]"
10874,16,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10874,18,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10874,19,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
10874,20,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
10874,21,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10874,22,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
10874,23,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10874,25,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
10874,28,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
10874,29,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
10874,30,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
10879,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
10879,1,printThreadIndex,runs,"[('int *', 'A'), ('const int', 'nx'), ('const int', 'ny')]"
10879,2,sumMatrixOnGPU2D,runs,"[('int *', 'MatA'), ('int *', 'MatB'), ('int *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
10879,3,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
10879,4,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
10879,5,checkIndex,runs,[]
1088,2,setMultiLHS,runs,"[('double *', 'dsMulti'), ('double *', 'dlMulti'), ('double *', 'diagMulti'), ('double *', 'duMulti'), ('double *', 'dwMulti'), ('double', 'a'), ('double', 'b'), ('double', 'c'), ('double', 'd'), ('double', 'e'), ('int', 'nx'), ('int', 'batchCount')]"
1088,3,solveEnd,runs,"[('double *', 'data'), ('const double', 'a'), ('const double', 'b'), ('const double', 'd'), ('const double', 'e'), ('const double', 'omega_11'), ('const double', 'omega_12'), ('const double', 'omega_21'), ('const double', 'omega_22'), ('const int', 'nx'), ('const int', 'nBatch')]"
1088,4,solveFull,runs,"[('double *', 'data'), ('double *', 'inv1'), ('double *', 'inv2'), ('const int', 'nx'), ('const int', 'nBatch')]"
1088,5,findCBar,runs,"[('double *', 'cOld'), ('double *', 'cCurr'), ('double *', 'cBar'), ('int', 'nx')]"
1088,6,findRHS,runs,"[('double *', 'cOld'), ('double *', 'cCurr'), ('double *', 'cHalf'), ('double *', 'cNonLinRHS'), ('int', 'nx')]"
1088,7,findNew,runs,"[('double *', 'cCurr'), ('double *', 'cBar'), ('double *', 'cHalf'), ('int', 'nx')]"
1088,10,setMultiLHS,runs,"[('double *', 'dsMulti'), ('double *', 'dlMulti'), ('double *', 'diagMulti'), ('double *', 'duMulti'), ('double *', 'dwMulti'), ('double', 'a'), ('double', 'b'), ('double', 'c'), ('double', 'd'), ('double', 'e'), ('int', 'nx'), ('int', 'batchCount')]"
1088,11,solveEnd,runs,"[('double *', 'data'), ('const double', 'a'), ('const double', 'b'), ('const double', 'd'), ('const double', 'e'), ('const double', 'omega_11'), ('const double', 'omega_12'), ('const double', 'omega_21'), ('const double', 'omega_22'), ('const int', 'nx'), ('const int', 'nBatch')]"
1088,12,solveFull,runs,"[('double *', 'data'), ('double *', 'inv1'), ('double *', 'inv2'), ('const int', 'nx'), ('const int', 'nBatch')]"
1088,13,findCBar,runs,"[('double *', 'cOld'), ('double *', 'cCurr'), ('double *', 'cBar'), ('int', 'nx')]"
1088,14,findRHS,runs,"[('double *', 'cOld'), ('double *', 'cCurr'), ('double *', 'cHalf'), ('double *', 'cNonLinRHS'), ('int', 'nx')]"
1088,15,findNew,runs,"[('double *', 'cCurr'), ('double *', 'cBar'), ('double *', 'cHalf'), ('int', 'nx')]"
1088,20,kernel2DYnp,runs,"[('double *', 'dataNew'), ('double *', 'dataOld'), ('double *', 'boundaryTop'), ('double *', 'boundaryBottom'), ('const double *', 'weights'), ('const int', 'numSten'), ('const int', 'numStenTop'), ('const int', 'numStenBottom'), ('const int', 'nxLocal'), ('const int', 'nyLocal'), ('const int', 'BLOCK_Y'), ('const int', 'nx'), ('const int', 'nyTile'), ('const int', 'tileTop'), ('const int', 'tileBottom')]"
1088,21,kernel2DXnp,runs,"[('double *', 'dataOutput'), ('double *', 'dataInput'), ('const double *', 'weights'), ('const int', 'numSten'), ('const int', 'numStenLeft'), ('const int', 'numStenRight'), ('const int', 'nxLocal'), ('const int', 'nyLocal'), ('const int', 'BLOCK_X'), ('const int', 'nx')]"
1088,23,kernel2DXYp,runs,"[('double *', 'dataOutput'), ('double *', 'dataInput'), ('double *', 'boundaryTop'), ('double *', 'boundaryBottom'), ('const double *', 'weights'), ('const int', 'numSten'), ('const int', 'numStenHoriz'), ('const int', 'numStenLeft'), ('const int', 'numStenRight'), ('const int', 'numStenVert'), ('const int', 'numStenTop'), ('const int', 'numStenBottom'), ('const int', 'nxLocal'), ('const int', 'nyLocal'), ('const int', 'BLOCK_X'), ('const int', 'BLOCK_Y'), ('const int', 'nx'), ('const int', 'nyTile')]"
1088,24,kernel2DXp,runs,"[('double *', 'dataOutput'), ('double *', 'dataInput'), ('const double *', 'weights'), ('const int', 'numSten'), ('const int', 'numStenLeft'), ('const int', 'numStenRight'), ('const int', 'nxLocal'), ('const int', 'nyLocal'), ('const int', 'BLOCK_X'), ('const int', 'nx')]"
1088,25,kernel2DYp,runs,"[('double *', 'dataOutput'), ('double *', 'dataInput'), ('double *', 'boundaryTop'), ('double *', 'boundaryBottom'), ('const double *', 'weights'), ('const int', 'numSten'), ('const int', 'numStenTop'), ('const int', 'numStenBottom'), ('const int', 'nxLocal'), ('const int', 'nyLocal'), ('const int', 'BLOCK_Y'), ('const int', 'nx'), ('const int', 'nyTile')]"
109,3,cunnx_WindowGate2_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'centroids'), ('float *', 'normalizedCentroids'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('const float *', 'input'), ('const float *', 'noise'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'windowStride'), ('int', 'train')]"
109,4,cunnx_WindowGate2_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'error'), ('float *', 'targetCentroids'), ('const float *', 'centroids'), ('const float *', 'input'), ('const float *', 'inputIndice'), ('const float *', 'outputIndice'), ('const float *', 'output'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'windowStride'), ('float', 'c'), ('float', 'd'), ('float', 'e'), ('float', 'lr')]"
109,6,cunnx_WindowSparse_accGradParameters_kernel,runs,"[('float *', 'gradWeight'), ('float *', 'gradBias'), ('float *', 'gradOutput'), ('float *', 'input'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'inputSize'), ('int', 'outputSize'), ('float', 'scale')]"
109,7,cunnx_BlockSparse_updateOutput_kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('const float *', 'outputIndice'), ('const float *', 'outputScale'), ('const float *', 'bias'), ('int', 'outputSize'), ('int', 'nOutputBlock'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize')]"
109,8,cunnx_BlockSparse_updateGradOutput_kernel,runs,"[('float *', '_gradOutput'), ('float *', 'gradOutputScale'), ('const float *', 'gradOutput'), ('const float *', 'output'), ('const float *', 'outputScale'), ('int', 'outputWindowSize'), ('int', 'outputSize')]"
109,9,cunnx_BlockSparse_accGradParameters_kernel,runs,"[('float *', 'gradWeight'), ('float *', 'gradBias'), ('float *', 'gradOutput'), ('float *', 'input'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'nInputBlock'), ('int', 'nOutputBlock'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('float', 'scale')]"
109,10,cunnx_WindowGate_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'centroids'), ('float *', 'normalizedCentroids'), ('float *', 'outputIndice'), ('const float *', 'input'), ('const float *', 'noise'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'outputWindowSize'), ('float', 'a'), ('float', 'b'), ('int', 'train')]"
109,11,cunnx_WindowGate_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'error'), ('float *', 'targetCentroids'), ('const float *', 'centroids'), ('const float *', 'input'), ('const float *', 'outputIndice'), ('const float *', 'output'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'outputWindowSize'), ('float', 'c'), ('float', 'd'), ('float', 'e'), ('float', 'lr')]"
109,13,cunnx_LazyKBest_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('const float *', 'indice'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize')]"
10906,62,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
10906,66,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1091,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1091,1,rectify,runs,"[('unsigned char *', 'original_img'), ('unsigned char *', 'new_img'), ('unsigned int', 'num_thread'), ('unsigned int', 'size')]"
1091,2,max_pooling,runs,"[('unsigned char *', 'original_img'), ('unsigned char *', 'new_img'), ('unsigned int', 'width'), ('unsigned int', 'num_thread'), ('unsigned int', 'size')]"
10910,0,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
10910,3,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
10910,5,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
10910,7,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
10910,9,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
10910,11,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
10910,12,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
10910,14,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
10910,17,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
10910,20,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
10941,33,sync_conv_groups,runs,[]
10946,0,reduce,runs,"[('int *', 'g_idata'), ('int', 'l1'), ('int', 'l2')]"
10946,2,reduce,runs,"[('int *', 'g_idata'), ('int', 'l1'), ('int', 'l2')]"
10959,12,updateOutputWithTargetMV,runs,"[('const float *', 'input'), ('const float *', 'weight'), ('const float *', 'bias'), ('const float *', 'mapping'), ('const float *', 'n_class_in_cluster'), ('const float *', 'class_start_indices'), ('const float *', 'target'), ('const long', 'input_stride0'), ('const long', 'weight_stride0'), ('const long', 'score_stride0'), ('long', 'input_size'), ('float *', 'score')]"
10959,14,updateGradInputLSM,runs,"[('const float *', 'target'), ('const float *', 'mapping'), ('const float *', 'n_class_in_cluster'), ('float *', 'class_score'), ('float *', 'class_logsum'), ('float *', 'cluster_score'), ('float *', 'cluster_logsum'), ('const long', 'class_score_stride0'), ('const long', 'cluster_score_stride0'), ('int', 'n_clusters')]"
10959,15,updateGradInputMV,runs,"[('const float *', 'score'), ('const float *', 'weight'), ('const float *', 'mapping'), ('const float *', 'n_class_in_cluster'), ('const float *', 'class_start_indices'), ('const float *', 'target'), ('const long', 'gradInput_stride0'), ('const long', 'weight_stride0'), ('const long', 'score_stride0'), ('int', 'input_size'), ('float *', 'gradInput')]"
10959,34,TemporalConvolutionTBC_fp_bias,runs,"[('float *', 'output_features'), ('float *', 'bias'), ('int', 'output_stride'), ('int', 'rows')]"
10959,35,TemporalConvolutionTBC_bp_bias,runs,"[('float *', 'matrix'), ('float *', 'target'), ('int', 'rows'), ('int', 'stride'), ('float', 'scale')]"
10969,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10969,2,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10969,5,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
10969,6,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1098,1,ApplyCorrections,runs,"[('unsigned char *', 'g_pSLM_uc'), ('unsigned char *', 'g_LUT'), ('float *', 'g_AberrationCorr_f'), ('float *', 'g_LUTPolCoeff_f')]"
1098,14,uc2f,runs,"[('float *', 'f'), ('unsigned char *', 'uc'), ('int', 'N')]"
10980,0,kernel,runs,[]
10982,33,sync_conv_groups,runs,[]
10984,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
10989,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
10989,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
10989,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
10989,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
10989,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
10995,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
10995,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
10995,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
10995,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
10995,338,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
10995,346,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
11005,4,frame_encode_staircase,runs,"[('int *', 'data'), ('int *', 'pcm'), ('int', 'param_k'), ('int', 'param_m'), ('int', 'w_f'), ('int', 'packet_size')]"
11005,6,yuv422_to_yuv444_kernel,runs,"[('const void *', 'src'), ('void *', 'out'), ('int', 'pix_count')]"
11022,3,vsub,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
11022,4,vmul,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
11022,5,vdiv,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
11022,6,dummy,runs,[]
11024,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11024,1,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11027,0,gpu_transpose,runs,"[('float *', 'dst'), ('float *', 'A'), ('int', 'col'), ('int', 'row')]"
11035,0,vadd,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
11047,2,kernExp,runs,"[('double *', 'A'), ('double *', 'bias')]"
11047,3,kernBiasAndLog,runs,"[('double *', 'sumexp'), ('double *', 'bias')]"
11047,4,kernCalcMu,runs,"[('const size_t', 'numPoints'), ('const size_t', 'pointDim'), ('const double *', 'X'), ('const double *', 'loggamma'), ('const double *', 'GammaK'), ('double *', 'dest')]"
11047,6,kernUpdatePi,runs,"[('const size_t', 'numPoints'), ('const size_t', 'numComponents'), ('double *', 'logpi'), ('double *', 'Gamma')]"
11047,8,kernElementWiseSum,runs,"[('const size_t', 'numPoints'), ('const size_t', 'pointDim'), ('double *', 'dest'), ('double *', 'src')]"
11047,9,kernBlockWiseSum,runs,"[('const size_t', 'numPoints'), ('const size_t', 'pointDim'), ('double *', 'dest')]"
11047,10,kernMoveMem,runs,"[('const size_t', 'numPoints'), ('const size_t', 'pointDim'), ('const size_t', 's'), ('double *', 'A')]"
11047,11,kernElementWiseMax,runs,"[('const size_t', 'numPoints'), ('double *', 'dest'), ('double *', 'src')]"
11047,12,kernBlockWiseMax,runs,"[('const size_t', 'numPoints'), ('double *', 'dest')]"
11060,0,matrixMulCUDA,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
11066,0,convertDbmToMwKernal,runs,"[('float *', 'result'), ('const float *', 'data')]"
11069,165,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
11069,224,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
11069,225,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
11069,226,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
11069,231,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
11069,347,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
11069,352,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
11075,0,set,runs,"[('double *', 'dx'), ('int', 'N')]"
11079,2,log_motion_estimation_cuda,runs,"[('uint8 *', 'current'), ('uint8 *', 'previous'), ('int *', 'vectors_x'), ('int *', 'vectors_y'), ('int *', 'M_B'), ('int *', 'N_B'), ('int *', 'B'), ('int *', 'M'), ('int *', 'N')]"
11080,0,addKernel,runs,"[('float *', 'a'), ('float *', 'b')]"
11095,35,Kernel2,runs,"[('bool *', 'g_graph_mask'), ('bool *', 'g_updating_graph_mask'), ('bool *', 'g_graph_visited'), ('bool *', 'g_over'), ('int', 'no_of_nodes')]"
111,23,kSoftmaxGrad,runs,"[('float *', 'dE_dy_l'), ('float *', 'y_l'), ('float *', 'dE_dx_l'), ('int', 'numCases'), ('int', 'numOut')]"
11105,0,matrixMultDevice,runs,"[('float *', 'd_A'), ('float *', 'd_B'), ('float *', 'd_C'), ('int', 'width')]"
11105,1,matrixMultTiled,runs,"[('float *', 'd_A'), ('float *', 'd_B'), ('float *', 'd_C'), ('int', 'width')]"
11105,2,matrixMultDevice,runs,"[('float *', 'd_A'), ('float *', 'd_B'), ('float *', 'd_C'), ('int', 'width')]"
11105,3,d_sobelFilter,runs,"[('unsigned char *', 'imageIn'), ('unsigned char *', 'imageOut'), ('int', 'width'), ('int', 'height'), ('int', 'maskWidth'), ('char *', 'M')]"
11105,4,rgb2gray,runs,"[('unsigned char *', 'd_Pin'), ('unsigned char *', 'd_Pout'), ('int', 'width'), ('int', 'height')]"
11105,7,rgb2gray,runs,"[('unsigned char *', 'd_Pin'), ('unsigned char *', 'd_Pout'), ('int', 'width'), ('int', 'height')]"
11105,8,PictureKernell,runs,"[('unsigned char *', 'd_Pin'), ('unsigned char *', 'd_Pout'), ('int', 'n'), ('int', 'm')]"
11105,9,rgb2gray,runs,"[('unsigned char *', 'd_Pin'), ('unsigned char *', 'd_Pout'), ('int', 'width'), ('int', 'height')]"
11105,10,vecAdd,runs,"[('float *', 'd_A'), ('float *', 'd_B'), ('float *', 'd_C')]"
11105,11,find_maximum_kernel,runs,"[('float *', 'array'), ('float *', 'max'), ('int *', 'mutex'), ('unsigned int', 'n')]"
11105,12,gamma_tonemap_kernel,runs,"[('float *', 'imageIn'), ('float *', 'imageOut'), ('int', 'width'), ('int', 'height'), ('int', 'channels'), ('float', 'f_stop'), ('float', 'gamma')]"
11105,13,log_tonemap_kernel,runs,"[('float *', 'imageIn'), ('float *', 'imageOut'), ('int', 'width'), ('int', 'height'), ('int', 'channels'), ('float', 'k'), ('float', 'q'), ('float *', 'max')]"
11105,14,adaptive_log_tonemap_kernel,runs,"[('float *', 'imageIn'), ('float *', 'imageOut'), ('int', 'width'), ('int', 'height'), ('int', 'channels'), ('float', 'b'), ('float', 'ld_max'), ('float *', 'max')]"
11113,26,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
11113,30,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
11115,0,prop_gpu,runs,"[('float *', 'p0'), ('float *', 'p1'), ('float *', 'vel'), ('float *', 'coeffs'), ('int', '_nx'), ('int', '_ny'), ('int', '_nz'), ('int', '_n12')]"
11115,1,inject_Source,runs,"[('int', 'id'), ('int', 'ii'), ('float *', 'p'), ('float *', '_tableS'), ('float *', '_sourceV'), ('int *', '_locsS'), ('int', '_dir'), ('int', '_jt'), ('int', '_ntSrc')]"
11127,0,sortKernelSimple,runs,"[('int *', 'arr'), ('int', 'arr_len'), ('int', 'odd')]"
11127,1,sortKernelMulti,runs,"[('int *', 'arr'), ('int', 'arr_len'), ('int', 'num_elem'), ('int', 'oddEven')]"
11127,5,solve,runs,"[('float *', 'mat'), ('float *', 'b'), ('float *', 'x'), ('int', 'rows'), ('int', 'cols')]"
11127,8,swapRow,runs,"[('float *', 'mat'), ('float *', 'b'), ('int', 'cols'), ('int', 'num_block'), ('int', 'k')]"
11127,9,swapRow,runs,"[('float *', 'mat'), ('float *', 'b'), ('float *', 'column_k'), ('int', 'rows'), ('int', 'cols'), ('int', 'k')]"
1113,0,setToOnes,runs,"[('float *', 'data'), ('int', 'size')]"
1113,1,setToZeros,runs,"[('float *', 'data'), ('int', 'size')]"
11130,0,multiplicacion,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11130,1,kernelSumaMatrices,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'm'), ('int', 'n')]"
11130,3,aproximarPi,runs,"[('float *', 'x'), ('float *', 'y'), ('int *', 'z')]"
11130,4,aproximarPi,runs,"[('float *', 'x'), ('float *', 'y'), ('int *', 'z'), ('int', 'tam')]"
11130,5,dot,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11130,6,suma,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n'), ('int', 'm')]"
11130,7,multiplicacion,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n'), ('int', 'm'), ('int', 'l')]"
11130,10,calcularCRS,runs,"[('int *', 'val'), ('int *', 'col_ind'), ('int *', 'row_ptr'), ('int *', 'u'), ('int *', 'resultado'), ('int', 'l')]"
11130,11,calcularBloques,runs,"[('int *', 'matriz'), ('int *', 'u'), ('int *', 'resultado'), ('int', 'num_bloques'), ('int', 'nc'), ('int', 'm')]"
11130,13,dot,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11139,1,mergeHistogramKernel,runs,"[('uint *', 'd_Histogram'), ('uint *', 'd_PartialHistograms'), ('uint', 'histogramCount')]"
1114,6,set_bin,runs,"[('int *', 'd_row_nz'), ('int *', 'd_bin_size'), ('int *', 'd_max'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
1114,7,init_row_perm,runs,"[('int *', 'd_permutation'), ('int', 'M')]"
1114,8,set_row_perm,runs,"[('int *', 'd_bin_size'), ('int *', 'd_bin_offset'), ('int *', 'd_max_row_nz'), ('int *', 'd_row_perm'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
1114,10,init_check,runs,"[('int *', 'd_check'), ('int', 'nz')]"
1114,22,set_bin,runs,"[('int *', 'd_row_nz'), ('int *', 'd_bin_size'), ('int *', 'd_max'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
1114,23,init_row_perm,runs,"[('int *', 'd_permutation'), ('int', 'M')]"
1114,24,set_row_perm,runs,"[('int *', 'd_bin_size'), ('int *', 'd_bin_offset'), ('int *', 'd_max_row_nz'), ('int *', 'd_row_perm'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
1114,26,init_check,runs,"[('int *', 'd_check'), ('int', 'nz')]"
1114,37,set_bin,runs,"[('int *', 'd_row_nz'), ('int *', 'd_bin_size'), ('int *', 'd_max'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
1114,38,init_row_perm,runs,"[('int *', 'd_permutation'), ('int', 'M')]"
1114,39,set_row_perm,runs,"[('int *', 'd_bin_size'), ('int *', 'd_bin_offset'), ('int *', 'd_max_row_nz'), ('int *', 'd_row_perm'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
1114,41,init_check,runs,"[('int *', 'd_check'), ('int', 'nz')]"
1114,53,zero_fill_int,runs,"[('int *', 'd_array'), ('int', 'size')]"
1114,54,set_permutation,runs,"[('int *', 'd_permutation'), ('int', 'M')]"
1114,55,set_cl,runs,"[('int *', 'nnz_num'), ('int *', 'cl'), ('int', 'chunk'), ('int', 'pad_M')]"
1114,56,init_cs,runs,"[('int *', 'd_cl'), ('int *', 'd_cs'), ('int', 'c_size'), ('int', 'chunk')]"
1114,58,set_segmented_nnz_num,runs,"[('int *', 'd_rpt'), ('int *', 'd_col'), ('int *', 'd_nnz_num'), ('int *', 'd_group_seg'), ('int *', 'd_offset'), ('size_t', 'seg_size'), ('size_t', 'seg_num'), ('int', 'M'), ('int', 'pad_M'), ('int', 'group_num_col')]"
1114,59,init_segmented_rpt,runs,"[('int *', 'd_nnz_num'), ('int *', 'd_seg_rpt'), ('int', 'total_pad_row_num')]"
1114,61,update_write_permutation,runs,"[('int *', 'write_permutation'), ('int *', 'nnz_num'), ('int', 'total_pad_row_num'), ('int', 'pad_M')]"
1114,62,compress_write_permutation,runs,"[('int *', 'd_write_permutation'), ('int *', 'd_full_write_permutation'), ('int *', 'd_gcs'), ('int', 'total_pad_row_num'), ('int', 'chunk')]"
1114,63,compress_s_write_permutation,runs,"[('unsigned short *', 'd_s_write_permutation'), ('unsigned short *', 'd_s_write_permutation_offset'), ('int *', 'd_write_permutation'), ('int', 'c_size'), ('int', 'chunk')]"
1114,64,get_c_size,runs,"[('int *', 'd_c_size'), ('int *', 'd_full_cl'), ('int', 'size')]"
1114,67,set_packed_cl_cs,runs,"[('int *', 'd_packed_cl'), ('int *', 'd_packed_cs'), ('int *', 'd_cl'), ('int *', 'd_cs'), ('int *', 'd_gcs'), ('int', 'chunk_num')]"
1114,71,set_d_check_nnz,runs,"[('int *', 'd_check_nnz'), ('int *', 'd_nnz_num'), ('int', 'pad_M'), ('int', 'SIGMA'), ('int', 'sigma_block_row')]"
11148,0,bilinearSamplingFromGrid,runs,"[('float *', 'inputImages_data'), ('int', 'inputImages_strideBatch'), ('int', 'inputImages_strideChannels'), ('int', 'inputImages_strideHeight'), ('int', 'inputImages_strideWidth'), ('float *', 'grids_data'), ('int', 'grids_strideBatch'), ('int', 'grids_strideYX'), ('int', 'grids_strideHeight'), ('int', 'grids_strideWidth'), ('float *', 'output_data'), ('int', 'output_strideBatch'), ('int', 'output_strideChannels'), ('int', 'output_strideHeight'), ('int', 'output_strideWidth'), ('int', 'inputImages_channels'), ('int', 'inputImages_height'), ('int', 'inputImages_width'), ('int', 'output_width')]"
11149,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
11149,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
11149,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
11149,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
11149,341,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
11149,349,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1115,18,setup_kernel,runs,"[('curandState *', 'states'), ('unsigned long', 'seed')]"
11158,0,initSeed,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states')]"
11158,2,selectPre,runs,"[('float *', 'fitness'), ('float *', 'Fitness'), ('float *', 'tmpFitness'), ('float *', 'populationArray'), ('float *', 'tmpPopulationArray')]"
11158,3,selectFcn,runs,"[('float *', 'populationArray'), ('float *', 'tmpPopulationArray'), ('float *', 'fitness'), ('float *', 'Fitness'), ('float *', 'tmpFitness'), ('float', 'sumFitness'), ('float *', 'populationPro'), ('curandState_t *', 'states')]"
11158,4,crossFcn,runs,"[('float *', 'populationArray'), ('curandState_t *', 'states')]"
11158,5,mutationFcn,runs,"[('float *', 'populationArray'), ('curandState_t *', 'states')]"
11162,0,initialize_vertices,runs,"[('int *', 'vertices'), ('int', 'starting_vertex')]"
11162,1,bfs,runs,"[('const edge *', 'edges'), ('int *', 'vertices'), ('int', 'current_depth')]"
11162,2,logprobs_kernel,runs,"[('double *', 'corect_logprobs'), ('double *', 'probs'), ('int *', 'y'), ('int', 'size')]"
11162,3,dscores_kernel_init,runs,"[('int *', 'y'), ('double *', 'dscores'), ('int', 'size')]"
11162,4,dscore_cal_kernel,runs,"[('double *', 'dscores'), ('int', 'num_inputs'), ('int', 'size')]"
11162,5,dhidden_cal_kernel,runs,"[('double *', 'a1'), ('double *', 'dhidden'), ('int', 'size')]"
11162,6,grads_w2_kernel,runs,"[('double *', 'grads_W2'), ('double *', 'W2'), ('double', 'reg'), ('int', 'size')]"
11162,7,grads_w1_kernel,runs,"[('double *', 'grads_W1'), ('double *', 'W1'), ('double', 'reg'), ('int', 'size')]"
11162,8,x_batch_kernel,runs,"[('double *', 'X_batch'), ('double *', 'X'), ('int *', 'sample_indices'), ('int', 'size')]"
11162,9,y_batch_kernel,runs,"[('double *', 'y_batch'), ('double *', 'y'), ('int *', 'sample_indices'), ('int', 'size')]"
11162,10,w1_kernel,runs,"[('double *', 'grads_W1'), ('double *', 'W1'), ('double', 'learning_rate'), ('int', 'size')]"
11162,11,w2_kernel,runs,"[('double *', 'grads_W2'), ('double *', 'W2'), ('double', 'learning_rate'), ('int', 'size')]"
11164,185,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
11164,326,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1117,0,initMemory,runs,"[('size_t', 'position'), ('size_t *', 'array')]"
1117,1,AplusB,runs,"[('int *', 'ret'), ('int', 'a'), ('int', 'N')]"
1117,2,AplusB_wait,runs,"[('int *', 'ret'), ('int', 'a'), ('int', 'N'), ('clock_t', 'sleepInterval')]"
1117,3,sample,runs,[]
1117,7,calcPoly16,runs,[]
1117,17,vDisp,runs,"[('const float *', 'A'), ('const float *', 'B'), ('int', 'ds')]"
11180,0,filter1,runs,"[('int', 'width'), ('int', 'height'), ('unsigned char *', 'src'), ('unsigned char *', 'dest')]"
11180,1,filter2,runs,"[('int', 'width'), ('int', 'height'), ('unsigned char *', 'src'), ('unsigned char *', 'dest')]"
11180,5,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11180,7,mergeGPU1d,runs,"[('unsigned char *', 'image1'), ('unsigned char *', 'image2'), ('unsigned char *', 'res'), ('int', 'pixels')]"
11180,8,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
11180,11,cinzaGPU1d,runs,"[('unsigned char *', 'image1'), ('unsigned char *', 'res'), ('int', 'pixels')]"
11180,16,mergeGPU1d,runs,"[('unsigned char *', 'image1'), ('unsigned char *', 'image2'), ('unsigned char *', 'res'), ('int', 'pixels')]"
11184,0,hellofromGPU,runs,[]
11186,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
11186,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
11186,2,func,runs,[]
11186,3,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
11186,4,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
11186,5,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
11186,6,func,runs,[]
11186,7,func,runs,[]
1119,2,cuArraysR2C_kernel,runs,"[('float *', 'image1'), ('float2 *', 'image2'), ('int', 'size')]"
1119,3,cuArraysC2R_kernel,runs,"[('float2 *', 'image1'), ('float *', 'image2'), ('int', 'size')]"
1119,13,cuSubPixelOffset_kernel,runs,"[('const int2 *', 'offsetInit'), ('const int2 *', 'offsetZoomIn'), ('float2 *', 'offsetFinal'), ('const float', 'OSratio'), ('const float', 'xoffset'), ('const float', 'yoffset'), ('const int', 'size')]"
1119,16,cudaKernel_maxlocPlusZoominOffset,runs,"[('float *', 'offset'), ('const int *', 'padStart'), ('const int *', 'maxlocUpSample'), ('const size_t', 'nImages'), ('float', 'zoomInRatioX'), ('float', 'zoomInRatioY')]"
1119,19,cuArraysCopyToBatch_kernel,runs,"[('const float2 *', 'imageIn'), ('const int', 'inNX'), ('const int', 'inNY'), ('float2 *', 'imageOut'), ('const int', 'outNX'), ('const int', 'outNY'), ('const int', 'nImagesX'), ('const int', 'nImagesY'), ('const int', 'strideX'), ('const int', 'strideY')]"
1119,20,cuArraysCopyToBatchWithOffset_kernel,runs,"[('const float2 *', 'imageIn'), ('const int', 'inNY'), ('float2 *', 'imageOut'), ('const int', 'outNX'), ('const int', 'outNY'), ('const int', 'nImages'), ('const int *', 'offsetX'), ('const int *', 'offsetY')]"
1119,23,cuArraysCopyExtractVaryingOffset,runs,"[('const float *', 'imageIn'), ('const int', 'inNX'), ('const int', 'inNY'), ('float *', 'imageOut'), ('const int', 'outNX'), ('const int', 'outNY'), ('const int', 'nImages'), ('const int2 *', 'offsets')]"
1119,24,cuArraysCopyExtractVaryingOffset_C2C,runs,"[('const float2 *', 'imageIn'), ('const int', 'inNX'), ('const int', 'inNY'), ('float2 *', 'imageOut'), ('const int', 'outNX'), ('const int', 'outNY'), ('const int', 'nImages'), ('const int2 *', 'offsets')]"
1119,25,cuArraysCopyExtractVaryingOffsetCorr,runs,"[('const float *', 'imageIn'), ('const int', 'inNX'), ('const int', 'inNY'), ('float *', 'imageOut'), ('const int', 'outNX'), ('const int', 'outNY'), ('int *', 'imageValid'), ('const int', 'nImages'), ('const int2 *', 'maxloc')]"
1119,26,cuArraysCopyExtractFixedOffset,runs,"[('const float *', 'imageIn'), ('const int', 'inNX'), ('const int', 'inNY'), ('float *', 'imageOut'), ('const int', 'outNX'), ('const int', 'outNY'), ('const int', 'nImages'), ('const int', 'offsetX'), ('const int', 'offsetY')]"
1119,27,cuArraysCopyExtract_C2C_FixedOffset,runs,"[('const float2 *', 'imageIn'), ('const int', 'inNX'), ('const int', 'inNY'), ('float2 *', 'imageOut'), ('const int', 'outNX'), ('const int', 'outNY'), ('const int', 'nImages'), ('const int', 'offsetX'), ('const int', 'offsetY')]"
1119,28,cuArraysCopyExtract_C2R_FixedOffset,runs,"[('const float2 *', 'imageIn'), ('const int', 'inNX'), ('const int', 'inNY'), ('float *', 'imageOut'), ('const int', 'outNX'), ('const int', 'outNY'), ('const int', 'nImages'), ('const int', 'offsetX'), ('const int', 'offsetY')]"
1119,35,cuArraysSetConstant_kernel,runs,"[('float *', 'image'), ('int', 'size'), ('float', 'value')]"
1119,39,cudaKernel_estimateSnr,runs,"[('const float *', 'corrSum'), ('const int *', 'corrValidCount'), ('const float *', 'maxval'), ('float *', 'snrValue'), ('const int', 'size')]"
1119,40,cuSetupSincKernel_kernel,runs,"[('float *', 'r_filter_'), ('const int', 'i_filtercoef_'), ('const float', 'r_soff_'), ('const float', 'r_wgthgt_'), ('const int', 'i_weight_'), ('const float', 'r_soff_inverse_'), ('const float', 'r_beta_'), ('const float', 'r_decfactor_inverse_'), ('const float', 'r_relfiltlen_inverse_')]"
1119,41,cuSincInterpolation_kernel,runs,"[('const int', 'nImages'), ('const float *', 'imagesIn'), ('const int', 'inNX'), ('const int', 'inNY'), ('float *', 'imagesOut'), ('const int', 'outNX'), ('const int', 'outNY'), ('const float *', 'r_filter_'), ('const int', 'i_covs_'), ('const int', 'i_decfactor_'), ('const int', 'i_intplength_'), ('const int', 'i_startX'), ('const int', 'i_startY'), ('const int', 'i_int_size')]"
11193,0,print_float,runs,"[('float *', 'x'), ('int', 'leng')]"
11193,1,print_int,runs,"[('int *', 'x'), ('int', 'leng')]"
11193,2,print_double,runs,"[('double *', 'x'), ('int', 'leng')]"
11193,3,print_long,runs,"[('long *', 'x'), ('int', 'leng')]"
11193,6,logit,runs,"[('float *', 'y'), ('const float *', 'x'), ('int', 'leng')]"
11194,0,drawHeart,runs,"[('int', 'CIRCLE_SEGMENTS'), ('float *', 'xx'), ('float *', 'yy')]"
11197,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
11197,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
11197,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
11197,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
11197,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
11197,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
11197,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
11197,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
11197,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
11197,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
11197,10,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
11197,11,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
11197,12,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
11197,13,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
11197,14,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
11197,15,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
11197,16,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
11197,17,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
11197,18,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
11197,19,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
11197,20,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
11197,21,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
11197,22,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
11197,23,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
11197,24,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
11197,25,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
11197,26,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
11197,27,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
11197,28,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
11197,29,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
11197,30,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
11197,31,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
11197,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
11197,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
11197,34,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
11197,35,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
11197,36,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
11197,37,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
11197,38,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
11197,39,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
11197,40,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
11197,41,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
11197,42,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
11197,43,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
11197,44,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
11197,45,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
11197,47,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
11197,48,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
11197,49,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
11197,50,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
1120,0,Find_Vertex,runs,"[('Vertex *', 'vertices'), ('Edge *', 'edges'), ('int *', 'weights'), ('int *', 'length'), ('int *', 'updateLength')]"
1120,1,Update_Paths,runs,"[('Vertex *', 'vertices'), ('int *', 'length'), ('int *', 'updateLength')]"
11212,0,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11212,1,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11212,2,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11212,9,kernel,runs,[]
11212,10,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
11212,11,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
11212,15,kernel,runs,"[('uchar4 *', 'ptr'), ('int', 'ticks')]"
11212,16,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11212,18,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11212,19,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
11212,20,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
11212,21,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11212,22,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
11212,23,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11212,25,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
11212,28,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
11212,29,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
11212,30,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
11213,1,vecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
11228,1,matrix_mul,runs,"[('float *', 'd_A'), ('float *', 'd_B'), ('float *', 'd_C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
1123,0,vector_add,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
1123,1,vector_add,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
1123,2,vector_add,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
1123,3,vector_add,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
11234,161,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
11234,220,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
11234,221,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
11234,222,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
11234,227,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
11234,335,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
11234,340,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
11235,0,Sub_V_S,runs,"[('const float *', 'a'), ('const float', 'b'), ('float *', 'out'), ('const int', 'n')]"
11235,1,Sub_S_V,runs,"[('const float', 'a'), ('float *', 'b'), ('float *', 'out'), ('const int', 'n')]"
11235,2,Add_V_S,runs,"[('const float *', 'a'), ('const float', 'b'), ('float *', 'out'), ('const int', 'n')]"
11235,3,Add_V_V_InPlace,runs,"[('const float *', 'a'), ('int', 'aOffset'), ('float *', 'b'), ('int', 'bOffset'), ('const int', 'n')]"
11235,4,Mul_Had_V_V,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'out'), ('const int', 'n')]"
11235,5,Div_S_V,runs,"[('const float', 'a'), ('const float *', 'b'), ('float *', 'out'), ('const int', 'n')]"
11235,6,Div_V_V,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'out'), ('const int', 'n')]"
11235,7,Exp_V,runs,"[('const float *', 'a'), ('float *', 'out'), ('const int', 'n')]"
11235,8,Sqrt_V,runs,"[('const float *', 'a'), ('float *', 'out'), ('const int', 'n')]"
11235,9,Sign_V,runs,"[('const float *', 'a'), ('float *', 'out'), ('const int', 'n')]"
11235,10,Rel_V,runs,"[('const float *', 'a'), ('float *', 'out'), ('const int', 'n')]"
11235,11,Log_V,runs,"[('const float *', 'a'), ('float *', 'out'), ('const int', 'n')]"
11235,12,Sigmoid_V,runs,"[('const float *', 'a'), ('float *', 'out'), ('const int', 'n')]"
11235,13,Sum_V,runs,"[('const float *', 'a'), ('float *', 'partial_sums'), ('const int', 'n')]"
11235,14,Softmax_Rowwise_M,runs,"[('const float *', 'a'), ('float *', 'maxPerRow'), ('float *', 'maxPerRowIndices'), ('float *', 'sumPerRow'), ('const int', 'rows'), ('const int', 'cols'), ('const int', 'cols2'), ('float *', 'out'), ('const int', 'n')]"
11235,15,Softmax_Rowwise_M_Backward,runs,"[('const float *', 'origin'), ('const float *', 'adjoint'), ('const float *', 'primal'), ('const float *', 'prevMaxs'), ('const float *', 'prevMaxIndices'), ('const float *', 'prevSums'), ('float *', 'out'), ('const int', 'rows'), ('const int', 'cols'), ('const int', 'cols2'), ('const int', 'n')]"
11235,16,Sum_M_Rowwise,runs,"[('const float *', 'a'), ('const int', 'rows'), ('const int', 'cols'), ('const int', 'cols2'), ('float *', 'sumPerRowPerBlock'), ('const int', 'n')]"
11235,17,Add_M_Rowwise_V_InPlace,runs,"[('const float *', 'a'), ('const int', 'rows'), ('const int', 'cols'), ('const int', 'cols2'), ('float *', 'b'), ('const int', 'n')]"
11235,18,RepeatReshapeCopy_V_MRows,runs,"[('const float *', 'a'), ('float *', 'b'), ('const int', 'rows'), ('const int', 'cols'), ('const int', 'n')]"
11235,19,Permute_M,runs,"[('const float *', 'a'), ('const float *', 'permutedDimensions'), ('const float *', 'originalStrides'), ('float *', 'out'), ('const float *', 'permutedStrides'), ('const int', 'rank'), ('const int', 'n')]"
11235,21,FillWithProbabilityMask_V,runs,"[('float *', 'a'), ('const float', 'probability'), ('int', 'n')]"
11238,0,cuAdd,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
11238,1,cuMult,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
11238,2,cuDiv,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
11238,3,cuExp,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
11238,4,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
11245,2,vectorReduce,runs,"[('const float *', 'global_input_data'), ('float *', 'global_output_data'), ('int', 'numElements')]"
11245,3,vectorMul,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
11254,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
11254,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
11257,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
11264,1,vecDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('const int', 'N')]"
11264,2,vecMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('const int', 'N')]"
11264,3,vecEps,runs,"[('float *', 'a'), ('const int', 'N')]"
11264,4,rowDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
11264,5,colDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
11264,6,colMul,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
11264,13,reduce0,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('int', 'N')]"
11267,2,binZeros,runs,"[('int *', 'd_bin_count'), ('int', 'bin_size')]"
11267,9,initialise_curand,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
11267,10,find_boundaries,runs,"[('const int', 'num_keys'), ('const int', 'num_bucket'), ('const int *', 'which_bucket'), ('int *', 'bucket_start')]"
11267,11,queryDevice,runs,"[('const int', 'num_bucket'), ('const int *', 'bucket_start'), ('const int', 'key')]"
11267,12,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1127,0,update_mean,runs,"[('double *', 'pressure_mean_d'), ('double *', 'pressure_d'), ('double *', 'Rho_mean_d'), ('double *', 'Rho_d'), ('double *', 'Mh_mean_d'), ('double *', 'Mh_d'), ('double *', 'Wh_mean_d'), ('double *', 'Wh_d'), ('int', 'n_since_out'), ('int', 'num')]"
1127,1,CalcTotEnergy,runs,"[('double *', 'Etotal_d'), ('double *', 'GlobalE_d'), ('double *', 'Mh_d'), ('double *', 'W_d'), ('double *', 'Rho_d'), ('double *', 'temperature_d'), ('double', 'Gravit'), ('double', 'Cp'), ('double', 'Rd'), ('double', 'A'), ('double *', 'Altitude_d'), ('double *', 'Altitudeh_d'), ('double *', 'lonlat_d'), ('double *', 'areasT'), ('double *', 'func_r_d'), ('int', 'num'), ('bool', 'DeepModel')]"
1127,2,CalcAngMom,runs,"[('double *', 'AngMomx_d'), ('double *', 'AngMomy_d'), ('double *', 'AngMomz_d'), ('double *', 'GlobalAMx_d'), ('double *', 'GlobalAMy_d'), ('double *', 'GlobalAMz_d'), ('double *', 'Mh_d'), ('double *', 'Rho_d'), ('double', 'A'), ('double', 'Omega'), ('double *', 'Altitude_d'), ('double *', 'Altitudeh_d'), ('double *', 'lonlat_d'), ('double *', 'areasT'), ('double *', 'func_r_d'), ('int', 'num'), ('bool', 'DeepModel')]"
1127,3,CalcMass,runs,"[('double *', 'Mass_d'), ('double *', 'GlobalMass_d'), ('double *', 'Rho_d'), ('double', 'A'), ('double *', 'Altitudeh_d'), ('double *', 'lonlat_d'), ('double *', 'areasT'), ('int', 'num'), ('bool', 'DeepModel')]"
1127,4,CalcEntropy,runs,"[('double *', 'Entropy_d'), ('double *', 'pressure_d'), ('double *', 'temperature_d'), ('double', 'Cp'), ('double', 'Rd'), ('double', 'A'), ('double', 'P_Ref'), ('double *', 'Altitude_d'), ('double *', 'Altitudeh_d'), ('double *', 'lonlat_d'), ('double *', 'areasT'), ('double *', 'func_r_d'), ('int', 'num'), ('bool', 'DeepModel')]"
1127,5,isnan_check_device,runs,"[('double *', 'array'), ('int', 'size'), ('bool *', 'check')]"
1127,6,rayleighHS,runs,"[('double *', 'Mh_d'), ('double *', 'pressure_d'), ('double *', 'Rho_d'), ('double *', 'Altitude_d'), ('double', 'surf_drag'), ('double', 'bl_sigma'), ('double', 'Gravit'), ('double', 'time_step'), ('int', 'num')]"
11271,0,add,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
11271,1,add,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
11271,2,add,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
11271,3,vecAdd,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
11271,4,VectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
11271,5,VectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
11271,6,VectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
11273,1,kernel,runs,[]
11277,174,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
11277,234,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
11277,235,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
11277,236,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
11277,241,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
11277,352,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
11277,357,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
11286,0,pw_copy_rc_cu_z,runs,"[('const double *', 'din'), ('double *', 'zout'), ('const int', 'n')]"
11286,1,pw_copy_cr_cu_z,runs,"[('const double *', 'zin'), ('double *', 'dout'), ('const int', 'n')]"
11286,2,pw_gather_cu_z,runs,"[('double *', 'pwcc'), ('const double *', 'c'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int *', 'ghatmap')]"
11286,3,pw_scatter_cu_z,runs,"[('double *', 'c'), ('const double *', 'pwcc'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int', 'nmaps'), ('const int *', 'ghatmap')]"
11288,0,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
11288,3,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
11288,5,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
11288,7,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
11288,9,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
11288,11,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
11288,12,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
11288,14,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
11288,17,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
11288,20,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
1129,1,createLaplacianKernel,runs,"[('float *', 'grid'), ('float *', 'kernel'), ('int', 'nrDimensions'), ('int', 'nrGridElements')]"
1129,16,convolutionGlobal,runs,"[('float *', 'imgIn'), ('float *', 'kernel'), ('float *', 'imgOut'), ('int', 'w'), ('int', 'h'), ('int', 'nc'), ('int', 'kernelSize')]"
1129,22,matrixPolyderNewLayout,runs,"[('const float *', 'coefImg'), ('float *', 'coefImgDer'), ('const int', 'w'), ('const int', 'h'), ('const int', 'm'), ('size_t', 'yOffset')]"
11296,0,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
11296,6,float4toUchar4,runs,"[('float4 *', 'inputImage'), ('uchar4 *', 'outputImage'), ('int', 'width'), ('int', 'height')]"
11296,7,float2toUchar4,runs,"[('float2 *', 'inputImage'), ('uchar4 *', 'outputImage'), ('int', 'width'), ('int', 'height'), ('int', 'index')]"
11296,8,float2toUchar1,runs,"[('float2 *', 'inputImage'), ('uchar1 *', 'outputImage'), ('int', 'width'), ('int', 'height'), ('int', 'index')]"
11296,9,float1toUchar4,runs,"[('float1 *', 'inputImage'), ('uchar4 *', 'outputImage'), ('int', 'width'), ('int', 'height')]"
11296,10,float1toUchar1,runs,"[('float1 *', 'inputImage'), ('uchar1 *', 'outputImage'), ('int', 'width'), ('int', 'height')]"
11296,11,uchar4tofloat4,runs,"[('uchar4 *', 'inputImage'), ('float4 *', 'outputImage'), ('int', 'width'), ('int', 'height')]"
11297,0,mod_CENTRIST,runs,"[('PPMPixel *', 'image_out'), ('PPMPixel *', 'image_cp'), ('int', 'columns'), ('int', 'rows'), ('int *', 'hist'), ('int', 'hist_len')]"
11307,2,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
11307,3,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11307,4,kernel,runs,"[('uchar4 *', 'ptr'), ('int', 'ticks')]"
11307,5,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11307,7,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11307,9,kernal,runs,[]
11307,11,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11307,12,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
11307,17,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11307,18,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
11315,1,refreshClusters,runs,"[('dim3 *', 'sum'), ('dim3 *', 'cluster'), ('int *', 'counter')]"
11317,43,sync_conv_groups,runs,[]
1132,0,mov_upK,runs,"[('int *', 'matriz'), ('int', 'anchura'), ('int', 'altura')]"
1132,1,mov_downK,runs,"[('int *', 'matriz'), ('int', 'anchura'), ('int', 'altura')]"
1132,2,mov_leftK,runs,"[('int *', 'matriz'), ('int', 'anchura'), ('int', 'altura')]"
1132,3,mov_rightK,runs,"[('int *', 'matriz'), ('int', 'anchura'), ('int', 'altura')]"
11323,0,Cauta_Nod,runs,"[('Nod *', 'noduri'), ('Muchie *', 'muchii'), ('int *', 'costuri'), ('int *', 'costTemporal'), ('int *', 'costFinal')]"
11323,1,UpdateCostDrumuri,runs,"[('Nod *', 'noduri'), ('int *', 'costuriTemporale'), ('int *', 'costuriFinale')]"
11325,2,cuAdd,runs,"[('float *', 'dst'), ('float *', 'src'), ('int', 'size')]"
11325,3,cuMultiplyNum,runs,"[('float *', 'dst'), ('float', 'num'), ('int', 'size')]"
11329,1,ForwardEliminationColumn,runs,"[('double *', 'matrix'), ('int *', 'size'), ('int *', 'row'), ('int *', 'stride'), ('int *', 'pivotRow')]"
1133,50,loadOP,runs,[]
1133,56,use_ptr3,runs,[]
1133,67,prova3,runs,[]
11331,21,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
11331,23,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
11338,7,MergePath,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int *', 'x'), ('int *', 'y'), ('int', 'n')]"
1134,50,loadOP,runs,[]
1134,56,use_ptr3,runs,[]
1134,67,prova3,runs,[]
11344,1,convolutionNoTiling,runs,"[('float *', 'I'), ('float *', 'P'), ('int', 'channels'), ('int', 'width'), ('int', 'height')]"
11353,4,multi,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
11353,5,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11353,6,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1136,0,kernelGPU,runs,"[('float *', 'R'), ('float *', 'G'), ('float *', 'B'), ('float *', 'Rin'), ('float *', 'Gin'), ('float *', 'Bin'), ('int', 'M'), ('int', 'N'), ('int', 'L')]"
11368,0,vecmabite,runs,"[('int *', 'out'), ('int *', 'in'), ('std::size_t', 'size')]"
11368,1,vecadd,runs,"[('int *', 'v0'), ('int *', 'v1'), ('std::size_t', 'size')]"
11368,2,ifpairmabite,runs,"[('int *', 'v'), ('std::size_t', 'size')]"
11368,4,vecmabite,runs,"[('int *', 'out'), ('int *', 'in'), ('int', 'threads'), ('std::size_t', 'size')]"
1138,0,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
1138,1,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
1138,2,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
1138,3,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
1138,4,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
1138,5,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
11386,0,hello,runs,[]
11386,1,matrixMulGPU,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11386,2,matrixMulGPU,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11386,3,saxpy,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11386,4,saxpy,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11386,5,saxpy2D,runs,"[('float', 'scalar'), ('float *', 'x'), ('float *', 'y')]"
11386,6,saxpy2D,runs,"[('float', 'scalar'), ('float *', 'x'), ('float *', 'y')]"
11386,7,saxpy,runs,"[('float', 'scalar'), ('float *', 'x'), ('float *', 'y')]"
11386,8,saxpy,runs,"[('float', 'scalar'), ('float *', 'x'), ('float *', 'y')]"
11386,9,deviceAddVector,runs,"[('int *', 'd_a'), ('int *', 'd_b'), ('int *', 'd_c'), ('int', 'size')]"
11386,10,matByConst,runs,"[('unsigned char *', 'img'), ('unsigned char *', 'result'), ('int', 'alpha'), ('int', 'cols'), ('int', 'rows')]"
11390,0,cuda_cmp_kernel,runs,"[('std::size_t', 'n'), ('int *', 'aptr'), ('int *', 'bptr'), ('int *', 'rptr')]"
11394,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11394,2,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11394,5,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11394,6,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11395,1,initAndUpdate,runs,"[('float *', 'D_oldVal'), ('float *', 'D_currVal'), ('int', 'tpoints'), ('int', 'nsteps')]"
11405,4,vecProductKernel,runs,"[('float *', 'd_z'), ('const float *', 'd_x'), ('const float *', 'd_y'), ('unsigned int', 'N')]"
11405,5,vecProduct,runs,"[('int *', 'd_x'), ('int *', 'd_y'), ('int *', 'd_z'), ('int', 'N')]"
11405,6,vecProductKernel,runs,"[('float *', 'd_z'), ('const float *', 'd_x'), ('const float *', 'd_y'), ('unsigned int', 'N')]"
11405,7,MatrixMulKernel,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_z'), ('int', 'Width')]"
11405,8,MatrixMulKernel,runs,"[('int *', 'd_x'), ('int *', 'd_y'), ('int *', 'd_z'), ('int', 'Block_Width'), ('int', 'M'), ('int', 'N')]"
11410,774,_dev_saxpy,runs,[]
11411,34,sync_conv_groups,runs,[]
11414,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
11417,0,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
1143,0,derive,runs,"[('double *', 'data'), ('double *', 'out'), ('int', 'stride'), ('int', 'gsize'), ('double', 'dx')]"
1143,1,derive,runs,"[('double2 *', 'data'), ('double2 *', 'out'), ('int', 'stride'), ('int', 'gsize'), ('double', 'dx')]"
1143,2,is_eq,runs,"[('bool *', 'a'), ('bool *', 'b'), ('bool *', 'ans')]"
1143,3,make_cufftDoubleComplex,runs,"[('double *', 'in'), ('double2 *', 'out')]"
1143,4,copy,runs,"[('double2 *', 'in'), ('double2 *', 'out')]"
1143,5,energy_sum,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double *', 'out')]"
1143,6,energy_lsum,runs,"[('double *', 'in1'), ('double2 *', 'in2'), ('double *', 'out')]"
1143,7,sum,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double2 *', 'out')]"
1143,8,complexAbsSum,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double *', 'out')]"
1143,9,complexAbsSum,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double2 *', 'in3'), ('double *', 'out')]"
1143,10,complexMagnitude,runs,"[('double2 *', 'in'), ('double *', 'out')]"
1143,11,complexMagnitudeSquared,runs,"[('double2 *', 'in'), ('double *', 'out')]"
1143,12,complexMagnitudeSquared,runs,"[('double2 *', 'in'), ('double2 *', 'out')]"
1143,14,cMult,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double2 *', 'out')]"
1143,15,cMultPhi,runs,"[('double2 *', 'in1'), ('double *', 'in2'), ('double2 *', 'out')]"
1143,16,vecMult,runs,"[('double2 *', 'in'), ('double *', 'factor'), ('double2 *', 'out')]"
1143,17,vecMult,runs,"[('double *', 'in'), ('double *', 'factor'), ('double *', 'out')]"
1143,18,vecSum,runs,"[('double2 *', 'in'), ('double *', 'factor'), ('double2 *', 'out')]"
1143,19,vecSum,runs,"[('double *', 'in'), ('double *', 'factor'), ('double *', 'out')]"
1143,20,l2_norm,runs,"[('double *', 'in1'), ('double *', 'in2'), ('double *', 'in3'), ('double *', 'out')]"
1143,21,l2_norm,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double2 *', 'in3'), ('double *', 'out')]"
1143,22,l2_norm,runs,"[('double *', 'in1'), ('double *', 'in2'), ('double *', 'out')]"
1143,23,l2_norm,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double *', 'out')]"
1143,26,scalarDiv,runs,"[('double2 *', 'in'), ('double', 'factor'), ('double2 *', 'out')]"
1143,27,scalarDiv,runs,"[('double *', 'in'), ('double', 'factor'), ('double *', 'out')]"
1143,28,scalarMult,runs,"[('double2 *', 'in'), ('double', 'factor'), ('double2 *', 'out')]"
1143,29,scalarMult,runs,"[('double *', 'in'), ('double', 'factor'), ('double *', 'out')]"
1143,31,scalarDiv_wfcNorm,runs,"[('double2 *', 'in'), ('double', 'dr'), ('double *', 'pSum'), ('double2 *', 'out')]"
1143,32,scalarPow,runs,"[('double2 *', 'in'), ('double', 'param'), ('double2 *', 'out')]"
1143,33,vecConjugate,runs,"[('double2 *', 'in'), ('double2 *', 'out')]"
1143,34,angularOp,runs,"[('double', 'omega'), ('double', 'dt'), ('double2 *', 'wfc'), ('double *', 'xpyypx'), ('double2 *', 'out')]"
1143,35,thread_test,runs,"[('double *', 'in'), ('double *', 'out')]"
1143,36,multipass,runs,"[('double2 *', 'input'), ('double2 *', 'output'), ('int', 'pass')]"
1143,37,multipass,runs,"[('double *', 'input'), ('double *', 'output')]"
1143,45,set_eq,runs,"[('double *', 'in1'), ('double *', 'in2')]"
1143,46,pSum,runs,"[('double *', 'in1'), ('double *', 'output'), ('int', 'pass')]"
1143,48,zeros,runs,"[('double *', 'field'), ('int', 'n')]"
1143,49,simple_K,runs,"[('double *', 'xp'), ('double *', 'yp'), ('double *', 'zp'), ('double', 'mass'), ('double *', 'K')]"
1143,50,kconstant_A,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
1143,51,krotation_Ax,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
1143,52,krotation_Ay,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
1143,53,kring_rotation_Ax,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
1143,54,kring_rotation_Ay,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
1143,55,kring_rotation_Az,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
1143,56,kring_Az,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
1143,57,ktest_Ax,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
1143,58,ktest_Ay,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
1143,59,kharmonic_V,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'items'), ('double *', 'Ax'), ('double *', 'Ay'), ('double *', 'Az'), ('double *', 'V')]"
1143,60,ktorus_V,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'items'), ('double *', 'Ax'), ('double *', 'Ay'), ('double *', 'Az'), ('double *', 'V')]"
1143,61,kstd_wfc,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'items'), ('double', 'winding'), ('double *', 'phi'), ('double2 *', 'wfc')]"
1143,62,ktorus_wfc,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'items'), ('double', 'winding'), ('double *', 'phi'), ('double2 *', 'wfc')]"
1143,63,aux_fields,runs,"[('double *', 'V'), ('double *', 'K'), ('double', 'gdt'), ('double', 'dt'), ('double *', 'Ax'), ('double *', 'Ay'), ('double *', 'Az'), ('double *', 'px'), ('double *', 'py'), ('double *', 'pz'), ('double *', 'pAx'), ('double *', 'pAy'), ('double *', 'pAz'), ('double2 *', 'GV'), ('double2 *', 'EV'), ('double2 *', 'GK'), ('double2 *', 'EK'), ('double2 *', 'GpAx'), ('double2 *', 'GpAy'), ('double2 *', 'GpAz'), ('double2 *', 'EpAx'), ('double2 *', 'EpAy'), ('double2 *', 'EpAz')]"
1143,65,add_test,runs,"[('double2 *', 'a'), ('double2 *', 'b'), ('double2 *', 'c')]"
1143,66,subtract_test,runs,"[('double2 *', 'a'), ('double2 *', 'b'), ('double2 *', 'c')]"
1143,67,pow_test,runs,"[('double2 *', 'a'), ('int', 'b'), ('double2 *', 'c')]"
1143,68,mult_test,runs,"[('double2 *', 'a'), ('double2 *', 'b'), ('double2 *', 'c')]"
1143,69,mult_test,runs,"[('double2 *', 'a'), ('double', 'b'), ('double2 *', 'c')]"
1143,70,complexMag_test,runs,"[('double2 *', 'in'), ('double *', 'out')]"
1143,73,make_complex_kernel,runs,"[('double *', 'in'), ('int *', 'evolution_type'), ('double2 *', 'out')]"
11443,8,computeSphereVertexDistancesKernel,runs,"[('float4 *', 'V'), ('float *', 'dist'), ('unsigned int *', 'NEIGHBOR'), ('unsigned int *', 'NBOFFSETS'), ('unsigned int *', 'nNeighbors'), ('unsigned int', 'nVertices'), ('float', 'circumference')]"
11443,9,GradientAverageKernel,runs,"[('float4 *', 'D'), ('float4 *', 'TD'), ('unsigned int *', 'NEIGHBOR'), ('unsigned int *', 'NBOFFSETS'), ('unsigned int *', 'nNeighbors'), ('unsigned int', 'nVertices')]"
11443,10,updateGradientsKernel,runs,"[('float4 *', 'D'), ('float4 *', 'TD'), ('unsigned int', 'nVertices')]"
11447,25,ElementWiseMultiply_CUDA,runs,"[('double *', 'C'), ('double *', 'A'), ('double *', 'B'), ('int', 'rows'), ('int', 'cols')]"
11450,2,addEffect,runs,"[('unsigned char *', 'output_img'), ('unsigned char *', 'input_img'), ('int', 'width'), ('int', 'height'), ('int', 'nbBlocks')]"
11451,0,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
11455,1,FFT,runs,"[('float *', 'R'), ('float *', 'I'), ('float *', 'xR'), ('float *', 'xI')]"
1146,2,multiply_kernel,runs,[]
11474,15,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11474,31,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11474,32,wipe,runs,"[('int *', 'buffer'), ('int', 'length')]"
11474,35,setValueSomestupidlylongnamefoobarfoobarfoobar,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11474,39,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
11474,40,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
11474,42,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
11474,43,mykernel,runs,"[('float *', 'd1'), ('float *', 'd2'), ('float *', 'd3'), ('float *', 'd4'), ('float *', 'd5')]"
11474,44,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
11474,46,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
11474,47,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11474,59,getValue,runs,"[('float4 *', 'outdata'), ('float *', 'indata')]"
11474,60,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11474,61,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
11474,63,incrValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11474,64,mykernel,runs,"[('int *', 'int1'), ('float *', 'f1'), ('int *', 'int2')]"
11474,65,floattoint,runs,"[('int *', 'out'), ('float *', 'in')]"
11474,66,inttofloat,runs,"[('float *', 'out'), ('int *', 'in')]"
11474,67,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
11474,69,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
11474,70,getValueChar,runs,"[('char *', 'outdata'), ('char *', 'indata')]"
11474,71,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
11474,74,main_set,runs,"[('float *', 'data'), ('float', 'val')]"
11474,75,k2_mul,runs,"[('float *', 'data'), ('float', 'val')]"
11474,76,k1_incr,runs,"[('float *', 'data'), ('float', 'val')]"
11474,77,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11474,78,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11482,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
11482,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
11482,2,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
11482,3,func,runs,[]
11482,4,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
11482,5,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
11482,6,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
11482,7,func,runs,[]
11482,9,func,runs,[]
11486,12,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11486,13,convKernelFullNaiveSepKernel,runs,"[('float *', 'd_Input'), ('float *', 'd_Output'), ('float *', 'd_Kernel'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'kernelR')]"
11486,14,convKernelFullNaive,runs,"[('float *', 'd_Input'), ('float *', 'd_Output'), ('float *', 'd_Kernel'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'kernelR')]"
11486,32,sum_columns,runs,"[('float *', 'w_mtx'), ('float *', 'output'), ('unsigned int', 'height'), ('unsigned int', 'width')]"
11486,33,delta_output,runs,"[('const float *', 'primed_sum'), ('const float *', 'ideal'), ('const float *', 'actual'), ('float *', 'delta'), ('unsigned int', 'index')]"
11486,34,delta_product,runs,"[('const float *', 'w_ik'), ('const float *', 'd_k'), ('float *', 'output'), ('unsigned int', 'width')]"
11486,35,delta_sum_rows,runs,"[('float *', 'w_ik_d'), ('float *', 'delta_i'), ('unsigned int', 'width')]"
11486,36,delta_hidden,runs,"[('float *', 'prime_ji'), ('float *', 'delta_i')]"
11486,37,gradient_descent,runs,"[('float *', 'd_k'), ('float *', 'o_i'), ('float *', 'g_ik'), ('unsigned int', 'size_d')]"
11486,38,sum_gradients,runs,"[('float *', 'gradient'), ('float *', 'new_value')]"
11486,39,back_prop,runs,"[('float *', 'weight'), ('float *', 'gradient'), ('float *', 'update'), ('float', 'alpha'), ('float', 'epsilon')]"
11486,40,squared_error,runs,"[('const float *', 'ideal'), ('float *', 'actual'), ('float *', 'errors')]"
11486,41,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11500,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
11500,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
11500,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
11500,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
11500,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
11500,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
11500,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
11506,2,Product,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
11506,3,Matrix_Product,runs,"[('double *', 'A'), ('double *', 'g'), ('double *', 'C')]"
11511,2,threshKernel,runs,"[('unsigned char *', 'image'), ('unsigned char *', 'moddedimage'), ('int', 'size'), ('int', 'threshold')]"
11511,3,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b'), ('int', 'size')]"
11511,4,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11516,0,addKernel,runs,"[('int *', 'dev_a'), ('int *', 'x')]"
11516,1,addKernel,runs,"[('int *', 'dev_a'), ('int *', 'dev_b'), ('int *', 'dev_size')]"
11516,2,addKernel,runs,"[('int *', 'dev_a'), ('int *', 'dev_b'), ('int *', 'dev_c')]"
11516,4,addKernel,runs,"[('int *', 'c'), ('int *', 'a'), ('int *', 'b')]"
11516,6,addKernel,runs,"[('int *', 'dev_a'), ('int *', 'x')]"
11518,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
11522,35,sync_conv_groups,runs,[]
11526,1,vel_step,runs,"[('float4 __restrict__ *', 'deviceVel'), ('float3 __restrict__ *', 'accels'), ('unsigned int', 'numBodies'), ('float', 'dt')]"
11526,2,r_step,runs,"[('float4 __restrict__ *', 'devPos'), ('float4 __restrict__ *', 'deviceVel'), ('unsigned int', 'numBodies'), ('float', 'dt')]"
11526,3,update_old,runs,"[('float4 __restrict__ *', 'newPos'), ('float4 __restrict__ *', 'oldPos')]"
11528,49,sync_conv_groups,runs,[]
11538,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
11538,227,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
11538,228,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
11538,229,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
11538,234,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
11538,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
11538,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
11540,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11540,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
11540,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11540,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11540,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11540,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11540,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11540,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
11540,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
11540,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
11540,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
11540,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
11540,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
11540,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
11540,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
11540,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
11540,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
11557,104,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
11559,2,VecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
11560,0,AddIntsCUDA,runs,"[('int *', 'a'), ('int *', 'b')]"
11563,1,ker_sparse_to_dense_assign,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
11563,2,ker_dense_to_sparse_subtract,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
11563,3,ker_sparse_to_dense_block_assign_and_multiply,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float', 'mult'), ('float *', 'src'), ('float *', 'trg')]"
11563,6,ker_dense_to_sparse_block_add,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float *', 'src'), ('float *', 'trg')]"
11574,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
11574,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
11574,2,func,runs,[]
11574,3,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
11574,4,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
11574,5,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
11574,6,func,runs,[]
11574,7,func,runs,[]
11579,0,mul,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11579,1,mykernel,runs,[]
11579,2,multiply,runs,"[('int *', 'result'), ('int *', 'A'), ('int *', 'B')]"
11580,2,VecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
11580,8,VecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
11580,9,VecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
11580,21,to_pbo_kernel1,runs,"[('unsigned char *', 'g_in'), ('int', 'stride_in'), ('uchar4 *', 'g_out'), ('int', 'stride_out'), ('int', 'width'), ('int', 'height')]"
11580,28,cuFilterGaussZKernel_32f_C1,runs,"[('float *', 'dst'), ('float *', 'src'), ('const int', 'y'), ('const int', 'width'), ('const int', 'depth'), ('const size_t', 'stride'), ('const size_t', 'slice_stride'), ('float', 'sigma'), ('int', 'kernel_size')]"
11580,45,cuConvertC3ToC4Kernel,runs,"[('const float3 *', 'src'), ('size_t', 'src_stride'), ('float4 *', 'dst'), ('size_t', 'dst_stride'), ('int', 'width'), ('int', 'height')]"
11580,46,cuConvertC4ToC3Kernel,runs,"[('const float4 *', 'src'), ('size_t', 'src_stride'), ('float3 *', 'dst'), ('size_t', 'dst_stride'), ('int', 'width'), ('int', 'height')]"
11580,47,cuConvert8uC1To32fC1Kernel,runs,"[('const unsigned char *', 'src'), ('size_t', 'src_stride'), ('float *', 'dst'), ('size_t', 'dst_stride'), ('float', 'mul_constant'), ('float', 'add_constant'), ('int', 'width'), ('int', 'height')]"
11580,48,cuConvert32uC1To32fC1Kernel,runs,"[('const unsigned int *', 'src'), ('size_t', 'src_stride'), ('float *', 'dst'), ('size_t', 'dst_stride'), ('float', 'mul_constant'), ('float', 'add_constant'), ('int', 'width'), ('int', 'height')]"
11580,49,cuConvert8uC3To32fC4Kernel,runs,"[('const unsigned char *', 'src'), ('size_t', 'src_pitch'), ('float4 *', 'dst'), ('size_t', 'dst_stride'), ('float', 'mul_constant'), ('float', 'add_constant'), ('int', 'width'), ('int', 'height')]"
11580,52,cuConvertRGBToHSVKernel,runs,"[('const float4 *', 'src'), ('float4 *', 'dst'), ('size_t', 'stride'), ('int', 'width'), ('int', 'height'), ('bool', 'normalize')]"
11580,53,cuConvertHSVToRGBKernel,runs,"[('const float4 *', 'src'), ('float4 *', 'dst'), ('size_t', 'stride'), ('int', 'width'), ('int', 'height'), ('bool', 'denormalize')]"
11580,54,cuConvertRGBToLABKernel,runs,"[('const float4 *', 'src'), ('float4 *', 'dst'), ('size_t', 'stride'), ('int', 'width'), ('int', 'height'), ('bool', 'isNormalized')]"
11580,55,cuConvertLABToRGBKernel,runs,"[('const float4 *', 'src'), ('float4 *', 'dst'), ('size_t', 'stride'), ('int', 'width'), ('int', 'height')]"
11590,0,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
11590,3,setVal,runs,"[('int *', 'testfuck'), ('int', 'size')]"
11592,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11592,1,addKernel2,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11592,2,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11592,3,addKernel,runs,"[('int *', 'c'), ('const int *', 'a')]"
11592,4,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11592,5,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
116,4,mapPrefixSumToPrisms,runs,"[('const unsigned', 'numberOfPrisms'), ('const unsigned', 'raysPerSample'), ('const unsigned', 'reflectionSlices'), ('const unsigned *', 'raysPerPrism'), ('const unsigned *', 'prefixSum'), ('unsigned *', 'indicesOfPrisms'), ('unsigned *', 'numberOfReflections')]"
11602,0,calc,runs,"[('float *', 'd_D'), ('int', 'n'), ('int', 'k')]"
11602,1,calc,runs,"[('float *', 'd_D'), ('int', 'n'), ('int', 'k')]"
11602,2,calc,runs,"[('float *', 'd_D'), ('int', 'n'), ('int', 'k')]"
11607,79,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
11607,83,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1161,0,add,runs,"[('int', 'N'), ('double *', 'a'), ('double *', 'b'), ('double *', 'c')]"
1161,1,add,runs,"[('int', 'N'), ('double *', 'a'), ('double *', 'b')]"
1161,2,convolution_kernel,runs,"[('unsigned char *', 'input_img'), ('unsigned char *', 'output_img'), ('int', 'height'), ('int', 'width')]"
1161,4,rgbToGreyKernel,runs,"[('int', 'height'), ('int', 'width'), ('unsigned char *', 'input_img'), ('unsigned char *', 'output_img')]"
11611,4,PyrDown_y_g,runs,"[('u_int8_t *', 'ptGrayIn'), ('u_int8_t *', 'ptGrayOut'), ('int', 'w'), ('int', 'h')]"
11611,6,nonmaxSuppression,runs,"[('const short2 *', 'kpLoc_Device'), ('int', 'count'), ('const int *', 'score_DeviceMat'), ('int', 'cols'), ('int', 'rows'), ('short2 *', 'locFinal'), ('float *', 'responseFinal')]"
11647,0,add,runs,"[('double *', 'in'), ('double *', 'out'), ('int', 'offset'), ('int', 'n')]"
11647,1,add,runs,"[('int *', 'in'), ('int', 'offset'), ('int', 'n')]"
11647,2,add,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'offset'), ('int', 'n')]"
11647,3,add,runs,"[('double *', 'in'), ('double *', 'out'), ('int', 'offset'), ('int', 'n')]"
11647,4,add,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'offset'), ('int', 'n')]"
11647,6,matrix_multiply_cuda,runs,"[('int *', 'd_a'), ('int *', 'd_b'), ('int *', 'd_c'), ('int', 'm'), ('int', 'n')]"
11647,7,matrix_multiply_tiling_cuda,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'm'), ('int', 'n')]"
11647,9,cuda_updatesum,runs,"[('int *', 'array'), ('int *', 'update_array'), ('int', 'size')]"
11647,10,add,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'offset'), ('int', 'n')]"
11647,11,add,runs,"[('double *', 'in'), ('double *', 'out'), ('int', 'offset'), ('int', 'n')]"
11647,12,add,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'n')]"
11647,13,init,runs,"[('double *', 'out'), ('int', 'n')]"
11647,14,add,runs,"[('double *', 'in'), ('double *', 'out'), ('int', 'offset'), ('int', 'n')]"
11647,15,add,runs,"[('long *', 'in'), ('long *', 'out'), ('int', 'offset'), ('int', 'n')]"
11647,16,add,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'n')]"
11647,17,add,runs,"[('int *', 'in'), ('int', 'd'), ('int', 'n')]"
11647,18,add,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'offset'), ('int', 'n')]"
11647,19,add,runs,"[('long *', 'in'), ('long *', 'out'), ('int', 'offset'), ('int', 'n')]"
11647,20,add,runs,"[('double *', 'in'), ('double *', 'out'), ('int', 'offset'), ('int', 'n')]"
11647,21,add,runs,"[('double *', 'in'), ('double *', 'out'), ('int', 'offset'), ('int', 'n')]"
11652,0,matrixVectMultKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
11652,1,matrixAddKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
11652,2,MatrixMulKernelV1,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'Width')]"
11652,3,MatrixMulKernelV2,runs,"[('float *', 'd_M'), ('float *', 'd_N'), ('float *', 'd_P'), ('int', 'Width')]"
11652,4,MatrixMulKernelV3,runs,"[('float *', 'd_M'), ('float *', 'd_N'), ('float *', 'd_P'), ('int', 'Width')]"
11652,5,imageBNKernel,runs,"[('unsigned char *', 'd_image'), ('int', 'h'), ('int', 'w')]"
11652,6,imageBlurKernel,runs,"[('unsigned char *', 'd_image'), ('int', 'h'), ('int', 'w')]"
11654,0,euclidean_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d')]"
11654,1,euclidean_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
11654,2,minkowski_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
11654,3,canberra_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
11654,4,dnorm_kernel,runs,"[('float *', 'vals'), ('int', 'N'), ('float', 'mu'), ('float', 'sigma')]"
11654,7,dnorm_kernel,runs,"[('float *', 'vals'), ('int', 'N'), ('float', 'mu'), ('float', 'sigma')]"
11654,8,add_kernel,runs,"[('double *', 'vals'), ('double *', 'ans'), ('int', 'N'), ('double', 'mu')]"
11654,9,fadd_kernel,runs,"[('float *', 'vals'), ('int', 'N'), ('float', 'mu')]"
11654,10,dset_kernel,runs,"[('double *', 'vals'), ('int', 'N'), ('double', 'mu')]"
11654,11,dset_both_kernel,runs,"[('double *', 'vals'), ('int', 'N'), ('double', 'mu'), ('float', 'sd')]"
11654,12,dset_array_kernel,runs,"[('double *', 'vals'), ('int', 'N'), ('double *', 'mu')]"
11654,13,euclidean_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d')]"
11654,14,euclidean_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
11654,15,minkowski_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
11654,16,canberra_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
11654,17,euclideanDistance,runs,"[('const float *', 'data_a'), ('int', 'nrow_a'), ('const float *', 'data_b'), ('int', 'nrow_b'), ('int', 'ncol'), ('float *', 'ans')]"
11654,19,setValue_kernel,runs,"[('int *', 'vals'), ('int', 'N')]"
11654,21,addOne,runs,"[('double *', 'vals'), ('int', 'N')]"
11654,22,addOneFloat,runs,"[('double *', 'vals'), ('int', 'N'), ('float *', 'out')]"
11654,23,dnorm_kernel,runs,"[('float *', 'vals'), ('int', 'N'), ('float', 'mu'), ('float', 'sigma'), ('float *', 'out')]"
11654,24,dnorm_kernel,runs,"[('float *', 'vals'), ('int', 'N'), ('float', 'mu'), ('float', 'sigma')]"
11654,25,euclidean_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
11654,26,truncNorm,runs,"[('float *', 'out'), ('float *', 'unifVals'), ('int', 'N')]"
11654,27,log_truncNorm,runs,"[('float *', 'out'), ('float *', 'unifVals'), ('int', 'N')]"
11654,29,addOne,runs,"[('float *', 'vals'), ('int', 'N'), ('float *', 'out')]"
11654,32,runif_kernel,runs,"[('curandState *', 'state'), ('float *', 'vals'), ('int', 'n'), ('float', 'lo'), ('float', 'hi')]"
11654,33,rexpo_kernel,runs,"[('curandState *', 'state'), ('float *', 'vals'), ('int', 'n'), ('float', 'lambda')]"
11654,34,rnorm_kernel,runs,"[('curandState *', 'state'), ('float *', 'vals'), ('int', 'n'), ('float', 'mu'), ('float', 'sigma')]"
11654,35,rpois_kernel,runs,"[('curandState *', 'state'), ('int *', 'vals'), ('int', 'n'), ('double', 'lambda')]"
11654,36,rnorm_all_in_one_kernel,runs,"[('float *', 'vals'), ('int', 'n'), ('float', 'mu'), ('float', 'sigma')]"
11654,37,dnorm_kernel,runs,"[('float *', 'vals'), ('int', 'N'), ('float', 'mu'), ('float', 'sigma')]"
11654,38,setup_kernel,runs,"[('curandState *', 'state'), ('int *', 'seeds'), ('int', 'n')]"
11654,39,rgamma_kernel,runs,"[('curandState *', 'state'), ('int', 'state_len'), ('float *', 'vals'), ('int', 'n'), ('float', 'a'), ('float', 'scale')]"
1167,5,show,runs,[]
1168,6,computePressure_CUDA,runs,"[('float *', 'pressure'), ('float *', 'density'), ('const int', 'num'), ('const float', 'rho0'), ('const float', 'stiff')]"
11680,13,cunn_SpatialLogSoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'classSize'), ('int', 'height'), ('int', 'width')]"
11680,18,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
11680,34,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
11680,35,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
11680,63,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
11680,64,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
11684,0,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
11684,1,capByScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
11684,2,floorByScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
11684,3,addScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
11684,4,subScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
11684,5,multScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
11684,6,divScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
11684,7,squared,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
11684,8,cuPow,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
11684,9,cuSqrt,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
11684,10,cuExp,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
11684,11,cuLog,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
11684,12,invert,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
11684,13,cuAbs,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
11684,14,cap,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
11684,15,cuFloor,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
11684,16,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
11684,17,sub,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
11684,18,mult,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
11684,19,cuDiv,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
11684,20,accrue,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float', 'p'), ('float *', 'result')]"
11684,21,discount,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float', 'p'), ('float *', 'result')]"
11684,22,addProduct,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float *', 'result')]"
11684,23,addProduct_vs,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float', 'c'), ('float *', 'result')]"
11684,24,addRatio,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float *', 'result')]"
11684,25,subRatio,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float *', 'result')]"
11684,26,reducePartial,runs,"[('int', 'size'), ('void *', 'data'), ('void *', 'result')]"
11685,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
11685,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
11685,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
11685,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
11685,341,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
11685,349,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
11687,79,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
11687,83,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1169,1,scanLabels,runs,"[('int *', 'labels'), ('int', 'w'), ('int', 'h'), ('int', 'd')]"
1169,2,analyseLabels,runs,"[('int *', 'labels'), ('int', 'w'), ('int', 'h'), ('int', 'd')]"
1169,3,convolutionRows3DKernel,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD'), ('int', 'kernel_index'), ('int', 'kernel_radius')]"
1169,4,convolutionColumns3DKernel,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD'), ('int', 'kernel_index'), ('int', 'kernel_radius')]"
1169,5,convolutionLayers3DKernel,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD'), ('int', 'kernel_index'), ('int', 'kernel_radius')]"
1169,6,NormalizeSubtract3DKernel,runs,"[('float *', 'img_src'), ('const float *', 'img_sub'), ('const int', 'width'), ('const int', 'height'), ('const int', 'depth'), ('float', 'normalizer')]"
1169,7,initGridKernel,runs,"[('float *', 'd_grid'), ('int', 'axis'), ('int', 'w'), ('int', 'h'), ('int', 'd')]"
1169,8,DivideKernel,runs,"[('float *', 'd_dst'), ('unsigned short *', 'd_denom')]"
1169,15,Normalize3DKernel,runs,"[('const unsigned short *', 'd_src'), ('const float *', 'd_erosion'), ('const float *', 'd_dilation'), ('float *', 'd_dst'), ('float', 'min_intensity'), ('const int', 'width'), ('const int', 'height'), ('const int', 'depth')]"
1169,16,Copy3DKernel,runs,"[('const unsigned short *', 'd_src'), ('float *', 'd_dst'), ('float', 'min_intensity'), ('const int', 'width'), ('const int', 'height'), ('const int', 'depth')]"
1169,17,gradientRowsKernel,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD')]"
1169,18,gradientColumnsKernel,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD')]"
1169,19,gradientLayersKernel,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD')]"
1169,20,PositiveDefiniteKernel,runs,"[('char *', 'hessian_pd'), ('float *', 'hessian'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD')]"
1169,22,erosionRows3DKernel,runs,"[('unsigned short *', 'd_dst'), ('unsigned short *', 'd_src'), ('int', 'w'), ('int', 'h'), ('int', 'd'), ('int', 'kernel_radius')]"
1169,23,erosionColumns3DKernel,runs,"[('unsigned short *', 'd_dst'), ('unsigned short *', 'd_src'), ('int', 'w'), ('int', 'h'), ('int', 'd'), ('int', 'kernel_radius')]"
1169,24,erosionLayers3DKernel,runs,"[('unsigned short *', 'd_dst'), ('unsigned short *', 'd_src'), ('int', 'w'), ('int', 'h'), ('int', 'd'), ('int', 'kernel_radius')]"
1169,25,HessianPositiveDefiniteKernel,runs,"[('char *', 'd_hessian_pd'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD')]"
11695,0,pw_copy_rc_cu_z,runs,"[('const double *', 'din'), ('double *', 'zout'), ('const int', 'n')]"
11695,1,pw_copy_cr_cu_z,runs,"[('const double *', 'zin'), ('double *', 'dout'), ('const int', 'n')]"
11695,2,pw_gather_cu_z,runs,"[('double *', 'pwcc'), ('const double *', 'c'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int *', 'ghatmap')]"
11695,3,pw_scatter_cu_z,runs,"[('double *', 'c'), ('const double *', 'pwcc'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int', 'nmaps'), ('const int *', 'ghatmap')]"
11710,0,addToKPlus,runs,"[('int', 'msize'), ('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double *', 'd')]"
11713,0,ShortestPath3,runs,"[('float *', 'Arr1'), ('float *', 'Arr2'), ('int', 'N')]"
11713,1,ShortestPath2,runs,"[('float *', 'Arr1'), ('float *', 'Arr2'), ('int', 'N')]"
11713,2,ShortestPath1,runs,"[('float *', 'Arr1'), ('float *', 'Arr2'), ('int', 'N')]"
11713,3,ShortestPath2,runs,"[('float *', 'Arr1'), ('float *', 'Arr2'), ('float *', 'recv'), ('int', 'N'), ('int', 'rows'), ('int', 'k'), ('int', 'rank'), ('int', 'owner')]"
11713,4,ShortestPath1,runs,"[('float *', 'Arr1'), ('float *', 'Arr2'), ('int', 'N'), ('int', 'rows'), ('int', 'rank')]"
11714,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
11717,37,init_rng,runs,"[('curandState *', 'states'), ('int', 'seed')]"
11724,2,uniformUpdate,runs,"[('uint4 *', 'd_Data'), ('uint *', 'd_Buffer')]"
11728,0,even,runs,"[('int *', 'darr'), ('int', 'n')]"
11728,1,odd,runs,"[('int *', 'darr'), ('int', 'n')]"
11733,189,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
11733,330,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
11739,0,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
11742,1,fastForwardDst,runs,"[('const int16_t *', 'block'), ('int16_t *', 'coeff'), ('int', 'shift')]"
11744,15,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11744,31,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11744,32,wipe,runs,"[('int *', 'buffer'), ('int', 'length')]"
11744,35,setValueSomestupidlylongnamefoobarfoobarfoobar,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11744,39,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
11744,40,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
11744,42,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
11744,43,mykernel,runs,"[('float *', 'd1'), ('float *', 'd2'), ('float *', 'd3'), ('float *', 'd4'), ('float *', 'd5')]"
11744,44,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
11744,46,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
11744,47,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11744,59,getValue,runs,"[('float4 *', 'outdata'), ('float *', 'indata')]"
11744,60,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11744,61,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
11744,63,incrValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11744,64,mykernel,runs,"[('int *', 'int1'), ('float *', 'f1'), ('int *', 'int2')]"
11744,65,floattoint,runs,"[('int *', 'out'), ('float *', 'in')]"
11744,66,inttofloat,runs,"[('float *', 'out'), ('int *', 'in')]"
11744,67,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
11744,69,getValue,runs,"[('float *', 'outdata'), ('float *', 'indata')]"
11744,70,getValueChar,runs,"[('char *', 'outdata'), ('char *', 'indata')]"
11744,71,longKernel,runs,"[('float *', 'data'), ('int', 'N'), ('float', 'value')]"
11744,74,main_set,runs,"[('float *', 'data'), ('float', 'val')]"
11744,75,k2_mul,runs,"[('float *', 'data'), ('float', 'val')]"
11744,76,k1_incr,runs,"[('float *', 'data'), ('float', 'val')]"
11744,77,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11744,78,setValue,runs,"[('float *', 'data'), ('int', 'idx'), ('float', 'value')]"
11746,0,matting_laplacian_kernel,runs,"[('float *', 'input'), ('float *', 'grad'), ('int', 'h'), ('int', 'w'), ('int *', 'CSR_rowIdx'), ('int *', 'CSR_colIdx'), ('float *', 'CSR_val'), ('int', 'N')]"
11746,1,best_local_affine_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'affine_model'), ('int', 'h'), ('int', 'w'), ('float', 'epsilon'), ('int', 'kernel_radius')]"
11746,2,bilateral_smooth_kernel,runs,"[('float *', 'affine_model'), ('float *', 'filtered_affine_model'), ('float *', 'guide'), ('int', 'h'), ('int', 'w'), ('int', 'kernel_radius'), ('float', 'sigma1'), ('float', 'sigma2')]"
11746,3,reconstruction_best_kernel,runs,"[('float *', 'input'), ('float *', 'filtered_affine_model'), ('float *', 'filtered_best_output'), ('int', 'h'), ('int', 'w')]"
11758,0,transposition,runs,"[('int *', 'matrix'), ('int *', 'matrixOut'), ('int', 'length'), ('int', 'width')]"
11774,0,kMultiplyBySigmoidGrad,runs,"[('float *', 'act'), ('float *', 'target'), ('const unsigned int', 'len')]"
11774,13,kTranspose,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
11774,14,kLessThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,15,kLessThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,16,kGreaterThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,17,kUpperBound,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,18,kLowerBound,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,19,kGreaterThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,20,kUpperBoundScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,21,kLowerBoundScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,23,kCumsum,runs,"[('float *', 'mat'), ('float *', 'target'), ('float *', 'temp'), ('unsigned int', 'height')]"
11774,28,kSqSumColumnwise,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
11774,29,kNormLimitColumnwise,runs,"[('float *', 'mat'), ('float *', 'target'), ('float', 'norm'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
11774,30,kSign,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,31,kApplySin,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,32,kApplyCos,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,33,kApplySigmoid,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,34,kApplyTanh,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,35,kApplyAbs,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,36,kApplyLog1PlusExpExact,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,37,kApplyLog1PlusExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,38,kLog,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
11774,39,kExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,40,kCeil,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,41,kFloor,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,42,kSqrt,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,43,kPow,runs,"[('float *', 'mat'), ('float', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,44,kPowMatrix,runs,"[('float *', 'mat'), ('float *', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,45,kCrossEntropy,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
11774,46,kCrossEntropyBernoulli,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
11774,47,kCorrectPreds,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'cutoff')]"
11774,48,kReciprocal,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
11774,49,kAddColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
11774,50,kAddDiagonalScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
11774,51,kAddDiagonal,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
11774,52,kMultDiagonalScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
11774,53,kMultDiagonal,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
11774,54,kAddRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
11774,55,kAddColMult,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
11774,56,kAddRowMult,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
11774,57,kMultByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
11774,58,kDivByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
11774,59,kDivByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
11774,60,kMultByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
11774,61,kAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
11774,62,kSubtract,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
11774,63,kDivide,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
11774,64,kMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
11774,65,kCosDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
11774,66,kSinDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
11774,67,kLogisticDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
11774,68,kTanhDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
11774,69,kRectifiedLinearDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
11774,70,kRectifiedLinearSmoothDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
11774,71,kMultScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len')]"
11774,72,kAssignScalar,runs,"[('float *', 'dest'), ('float', 'alpha'), ('unsigned int', 'len')]"
11774,73,kDivideScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len')]"
11774,74,kAddScalar,runs,"[('float *', 'a'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
11774,75,kSelectRows,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nSourceRows')]"
11774,76,kSwapRows,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices1'), ('float *', 'indices2'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nRows')]"
11774,77,kSetSelectedRows,runs,"[('float *', 'target'), ('float *', 'source'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nTargetRows')]"
11774,78,kBlockify,runs,"[('float *', 'source'), ('float *', 'target'), ('int', 'numdims'), ('int', 'blocksize')]"
11774,79,kGenerateTranslationsBigVarOff,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'off_x_arr'), ('float *', 'off_y_arr'), ('int', 'source_w'), ('int', 'target_w'), ('int', 'num_channels')]"
11776,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
11776,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
11776,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
11776,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
11776,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
11780,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
11788,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
11788,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
11788,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
11788,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
11788,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
11793,0,Permute,runs,"[('double *', 'Dev_Mtr'), ('int *', 'i'), ('int *', 'k'), ('int *', 'Dev_size')]"
11793,1,MaxElement,runs,"[('double *', 'Mtr'), ('int', 'Size'), ('int', 'i'), ('int *', 'strnum')]"
11793,2,Gaus,runs,"[('double *', 'Mtr'), ('int', 'Size'), ('int', 'i')]"
11796,1,cuComputeDistanceGlobal,runs,"[('float *', 'A'), ('int', 'wA'), ('int', 'pA'), ('float *', 'B'), ('int', 'wB'), ('int', 'pB'), ('int', 'dim'), ('float *', 'AB')]"
11796,2,cuInsertionSort,runs,"[('float *', 'dist'), ('int', 'dist_pitch'), ('int *', 'ind'), ('int', 'ind_pitch'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
11796,3,cuParallelSqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('int', 'k')]"
1180,0,histogram_kernel,runs,"[('float *', 'I'), ('float *', 'minI'), ('float *', 'maxI'), ('float *', 'mask'), ('int', 'nbins'), ('int', 'c'), ('int', 'h'), ('int', 'w'), ('float *', 'hist')]"
1180,1,hist_remap2_kernel,runs,"[('float *', 'I'), ('int', 'nI'), ('float *', 'mI'), ('float *', 'histJ'), ('float *', 'cumJ'), ('float *', '_minJ'), ('float *', '_maxJ'), ('int', 'nbins'), ('float *', '_sortI'), ('int *', '_idxI'), ('float *', 'R'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
1180,4,avg_vote_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('int *', 'corrAB'), ('int', 'patch'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
1180,5,blend_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('float *', 'M'), ('float *', 'AP'), ('float', 'alpha'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
1180,6,patchmatch2_conv_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'AP'), ('float *', 'BP'), ('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int', 'patch'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
1180,7,patchmatch2_argmax_kernel,runs,"[('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int *', 'corrAB'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
1180,8,upsample_corr_kernel,runs,"[('int *', 'curr_corr'), ('int *', 'next_corr'), ('int', 'curr_h'), ('int', 'curr_w'), ('int', 'next_h'), ('int', 'next_w')]"
1180,10,Ring_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('float *', 'M'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
1180,11,Ring2_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('int *', 'mask'), ('int *', 'm'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
1180,12,patchmatch_r_conv_kernel,runs,"[('float *', 'input'), ('float *', 'target'), ('float *', 'conv'), ('int', 'patch'), ('int', 'stride'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
1180,13,patchmatch_r_argmax_kernel,runs,"[('float *', 'conv'), ('float *', 'target'), ('float *', 'match'), ('int *', 'correspondence'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
1181,0,kernelTransposeMatrix,runs,"[('const char *', 'mat_in'), ('char *', 'mat_out'), ('unsigned int', 'rows'), ('unsigned int', 'cols')]"
11810,0,Substep1Kernel,runs,"[('double *', 'Pressure'), ('double *', 'Dens'), ('double *', 'VradInt'), ('double *', 'invdiffRmed'), ('double *', 'Potential'), ('double *', 'Rinf'), ('double *', 'invRinf'), ('double *', 'Vrad'), ('double *', 'VthetaInt'), ('double *', 'Vtheta'), ('double *', 'Rmed'), ('double', 'dt'), ('int', 'nrad'), ('int', 'nsec'), ('double', 'OmegaFrame'), ('int', 'ZMPlus'), ('double', 'IMPOSEDDISKDRIFT'), ('double', 'SIGMASLOPE')]"
11810,2,Substep3Kernel2,runs,"[('double *', 'Dens'), ('double *', 'Qplus'), ('double *', 'viscosity_array'), ('double *', 'TAURR'), ('double *', 'TAURP'), ('double *', 'TAUPP'), ('double *', 'DivergenceVelocity'), ('int', 'nrad'), ('int', 'nsec'), ('double *', 'Rmed'), ('int', 'Cooling'), ('double *', 'EnergyNew'), ('double', 'dt'), ('double *', 'EnergyMed'), ('double *', 'SigmaMed'), ('double *', 'CoolingTimeMed'), ('double *', 'EnergyInt'), ('double', 'ADIABATICINDEX'), ('double *', 'QplusMed')]"
11810,3,UpdateVelocitiesKernel,runs,"[('double *', 'VthetaInt'), ('double *', 'VradInt'), ('double *', 'invRmed'), ('double *', 'Rmed'), ('double *', 'Rsup'), ('double *', 'Rinf'), ('double *', 'invdiffRmed'), ('double *', 'invdiffRsup'), ('double *', 'Dens'), ('double *', 'invRinf'), ('double *', 'TAURR'), ('double *', 'TAURP'), ('double *', 'TAUPP'), ('double', 'DeltaT'), ('int', 'nrad'), ('int', 'nsec')]"
11810,4,InitComputeAccelKernel,runs,"[('double *', 'CellAbscissa'), ('double *', 'CellOrdinate'), ('double *', 'Rmed'), ('int', 'nsec'), ('int', 'nrad')]"
11810,6,ComputePressureFieldKernel,runs,"[('double *', 'SoundSpeed'), ('double *', 'Dens'), ('double *', 'Pressure'), ('int', 'Adiabatic'), ('int', 'nrad'), ('int', 'nsec'), ('double', 'ADIABATICINDEX'), ('double *', 'Energy')]"
11810,8,InitLabelKernel,runs,"[('double *', 'Label'), ('double', 'xp'), ('double', 'yp'), ('double', 'rhill'), ('double *', 'Rmed'), ('int', 'nrad'), ('int', 'nsec')]"
11810,9,CircumPlanetaryMassKernel,runs,"[('double *', 'Dens'), ('double *', 'Surf'), ('double *', 'CellAbscissa'), ('double *', 'CellOrdinate'), ('double', 'xpl'), ('double', 'ypl'), ('int', 'nrad'), ('int', 'nsec'), ('double', 'HillRadius'), ('double *', 'mdcp0')]"
11810,11,MultiplyPolarGridbyConstantKernel,runs,"[('double *', 'Dens'), ('int', 'nrad'), ('int', 'nsec'), ('double', 'ScalingFactor')]"
11810,12,Substep2Kernel,runs,"[('double *', 'Dens'), ('double *', 'VradInt'), ('double *', 'VthetaInt'), ('double *', 'TemperInt'), ('int', 'nrad'), ('int', 'nsec'), ('double *', 'invdiffRmed'), ('double *', 'invdiffRsup'), ('double *', 'DensInt'), ('int', 'Adiabatic'), ('double *', 'Rmed'), ('double', 'dt'), ('double *', 'VradNew'), ('double *', 'VthetaNew'), ('double *', 'Energy'), ('double *', 'EnergyInt')]"
11810,13,kernel,runs,"[('double *', 'Dens'), ('double *', 'VradInt'), ('double *', 'VthetaInt'), ('double *', 'TemperInt'), ('int', 'nrad'), ('int', 'nsec'), ('double *', 'invdiffRmed'), ('double *', 'invdiffRsup'), ('double *', 'DensInt'), ('int', 'Adiabatic'), ('double *', 'Rmed'), ('double', 'dt'), ('double *', 'VradNew'), ('double *', 'VthetaNew'), ('double *', 'Energy'), ('double *', 'EnergyInt')]"
11810,14,OpenBoundaryKernel,runs,"[('double *', 'Vrad'), ('double *', 'Dens'), ('double *', 'Energy'), ('int', 'nsec'), ('double', 'SigmaMed')]"
11810,15,ReduceCsKernel,runs,"[('double *', 'SoundSpeed'), ('double *', 'cs0'), ('double *', 'cs1'), ('double *', 'csnrm1'), ('double *', 'csnrm2'), ('int', 'nsec'), ('int', 'nrad')]"
11810,16,ReduceMeanKernel,runs,"[('double *', 'Dens'), ('double *', 'Energy'), ('int', 'nsec'), ('double *', 'mean_dens'), ('double *', 'mean_energy'), ('double *', 'mean_dens2'), ('double *', 'mean_energy2'), ('int', 'nrad')]"
11810,18,NonReflectingBoundaryKernel2,runs,"[('double *', 'Dens'), ('double *', 'Energy'), ('int', 'i_angle'), ('int', 'nsec'), ('double *', 'Vrad'), ('double *', 'SoundSpeed'), ('double', 'SigmaMed'), ('int', 'nrad'), ('double', 'SigmaMed2'), ('int', 'i_angle2')]"
11810,19,MinusMeanKernel,runs,"[('double *', 'Dens'), ('double *', 'Energy'), ('double', 'SigmaMed'), ('double', 'mean_dens_r'), ('double', 'mean_dens_r2'), ('double', 'mean_energy_r'), ('double', 'mean_energy_r2'), ('double', 'EnergyMed'), ('int', 'nsec'), ('int', 'nrad'), ('double', 'SigmaMed2'), ('double', 'EnergyMed2')]"
11810,20,Make1DprofileKernel,runs,"[('double *', 'gridfield'), ('double *', 'axifield'), ('int', 'nsec'), ('int', 'nrad')]"
11810,24,LRMomentaKernel,runs,"[('double *', 'RadMomP'), ('double *', 'RadMomM'), ('double *', 'ThetaMomP'), ('double *', 'ThetaMomM'), ('double *', 'Dens'), ('double *', 'Vrad'), ('double *', 'Vtheta'), ('int', 'nrad'), ('int', 'nsec'), ('double *', 'Rmed'), ('double', 'OmegaFrame')]"
11810,25,ExtQtyKernel,runs,"[('double *', 'ExtLabel'), ('double *', 'Dens'), ('double *', 'Label'), ('int', 'nsec'), ('int', 'nrad')]"
11810,26,StarRadKernel,runs,"[('double *', 'Qbase2'), ('double *', 'Vrad'), ('double *', 'QStar'), ('double', 'dt'), ('int', 'nrad'), ('int', 'nsec'), ('double *', 'invdiffRmed'), ('double *', 'Rmed'), ('double *', 'dq')]"
11810,27,StarRadKernel2,runs,"[('double *', 'Qbase2'), ('double *', 'Vrad'), ('double *', 'QStar'), ('double', 'dt'), ('int', 'nrad'), ('int', 'nsec'), ('double *', 'invdiffRmed'), ('double *', 'Rmed'), ('double *', 'dq')]"
11810,33,CrashKernel,runs,"[('double *', 'array'), ('int', 'nrad'), ('int', 'nsec'), ('int', 'Crash')]"
11810,35,DivisePolarGridKernel,runs,"[('double *', 'Qbase'), ('double *', 'DensInt'), ('double *', 'Work'), ('int', 'nrad'), ('int', 'nsec')]"
11810,36,VanLeerRadialKernel,runs,"[('double *', 'Rinf'), ('double *', 'Rsup'), ('double *', 'QRStar'), ('double *', 'DensStar'), ('double *', 'Vrad'), ('double *', 'LostByDisk'), ('int', 'nsec'), ('int', 'nrad'), ('double', 'dt'), ('int', 'OpenInner'), ('double *', 'Qbase'), ('double *', 'invSurf')]"
11810,37,VanLeerThetaKernel,runs,"[('double *', 'Rsup'), ('double *', 'Rinf'), ('double *', 'Surf'), ('double', 'dt'), ('int', 'nrad'), ('int', 'nsec'), ('int', 'UniformTransport'), ('int *', 'NoSplitAdvection'), ('double *', 'QRStar'), ('double *', 'DensStar'), ('double *', 'Vazimutal_d'), ('double *', 'Qbase')]"
11810,38,ComputeAverageThetaVelocitiesKernel,runs,"[('double *', 'Vtheta'), ('double *', 'VMed'), ('int', 'nsec'), ('int', 'nrad')]"
11810,39,ComputeResidualsKernel,runs,"[('double *', 'VthetaRes'), ('double *', 'VMed'), ('int', 'nsec'), ('int', 'nrad'), ('double *', 'Vtheta')]"
11810,40,ComputeConstantResidualKernel,runs,"[('double *', 'VMed'), ('double *', 'invRmed'), ('int *', 'Nshift'), ('int *', 'NoSplitAdvection'), ('int', 'nsec'), ('int', 'nrad'), ('double', 'dt'), ('double *', 'Vtheta'), ('double *', 'VthetaRes'), ('double *', 'Rmed'), ('int', 'FastTransport')]"
11810,41,StarThetaKernel,runs,"[('double *', 'Qbase'), ('double *', 'Rmed'), ('int', 'nrad'), ('int', 'nsec'), ('double *', 'dq'), ('double', 'dt')]"
11810,44,ComputeVelocitiesKernel,runs,"[('double *', 'Vrad'), ('double *', 'Vtheta'), ('double *', 'Dens'), ('double *', 'Rmed'), ('double *', 'ThetaMomP'), ('double *', 'ThetaMomM'), ('double *', 'RadMomP'), ('double *', 'RadMomM'), ('int', 'nrad'), ('int', 'nsec'), ('double', 'OmegaFrame')]"
11810,45,ComputeSpeQtyKernel,runs,"[('double *', 'Label'), ('double *', 'Dens'), ('double *', 'ExtLabel'), ('int', 'nrad'), ('int', 'nsec')]"
11810,47,CorrectVthetaKernel,runs,"[('double *', 'Vtheta'), ('double', 'domega'), ('double *', 'Rmed'), ('int', 'nrad'), ('int', 'nsec')]"
11810,48,ConditionCFLKernel1D,runs,"[('double *', 'Rsup'), ('double *', 'Rinf'), ('double *', 'Rmed'), ('int', 'nrad'), ('int', 'nsec'), ('double *', 'Vtheta'), ('double *', 'Vmoy')]"
11810,49,ConditionCFLKernel2D1,runs,"[('double *', 'Rsup'), ('double *', 'Rinf'), ('double *', 'Rmed'), ('int', 'nsec'), ('int', 'nrad'), ('double *', 'Vresidual'), ('double *', 'Vtheta'), ('double *', 'Vmoy'), ('int', 'FastTransport'), ('double *', 'SoundSpeed'), ('double *', 'Vrad'), ('double *', 'DT2D')]"
11810,50,ConditionCFLKernel2D2,runs,"[('double *', 'newDT'), ('double *', 'DT2D'), ('double *', 'DT1D'), ('double *', 'Vmoy'), ('double *', 'invRmed'), ('int *', 'CFL'), ('int', 'nsec'), ('int', 'nrad'), ('double', 'DeltaT')]"
11810,51,ConditionCFLKernel2D3,runs,"[('double *', 'newDT'), ('double *', 'DT2D'), ('double *', 'DT1D'), ('double *', 'Vmoy'), ('double *', 'invRmed'), ('int *', 'CFL'), ('int', 'nsec'), ('int', 'nrad'), ('double', 'DeltaT')]"
11810,52,ApplySubKeplerianBoundaryKernel,runs,"[('double *', 'VthetaInt'), ('double *', 'Rmed'), ('double', 'OmegaFrame'), ('int', 'nsec'), ('int', 'nrad'), ('double', 'VKepIn'), ('double', 'VKepOut')]"
11812,1,find_advection_point_location_cuda,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'xadv'), ('double *', 'yadv'), ('unsigned int', 'nx'), ('unsigned int', 'ny'), ('unsigned int *', 'cellx'), ('unsigned int *', 'celly'), ('unsigned int *', 'tracker'), ('double', 'xlim1'), ('double', 'xlim2'), ('double', 'ylim1'), ('double', 'ylim2'), ('unsigned int', 'TileSize')]"
11812,3,update_mixed_derivatives,runs,"[('double *', 'temppsix'), ('double *', 'temppsiy'), ('double *', 'temppsixy'), ('unsigned int', 'nx'), ('unsigned int', 'ny'), ('double', 'dx'), ('double', 'dy'), ('unsigned int', 'TileSize')]"
11812,4,devicetodevicecopy,runs,"[('double *', 'dphi'), ('double *', 'dpsix'), ('double *', 'dpsiy'), ('double *', 'mphi'), ('double *', 'mpsix'), ('double *', 'mpsiy'), ('unsigned int', 'nx'), ('unsigned int', 'TileSize')]"
11819,1,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,2,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,4,gpu_stencil2D_4pt_hack2,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,5,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,7,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,8,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,11,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,13,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,14,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,17,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,19,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,20,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,23,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,25,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,26,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,29,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,31,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,32,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,35,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,37,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,38,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,41,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,43,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,44,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,47,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,49,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,50,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,53,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,55,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,56,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,59,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,61,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,62,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,65,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,67,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,68,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,71,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,73,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,75,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,76,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,79,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,81,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,82,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,85,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,87,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,88,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,91,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,93,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,95,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,97,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,98,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,101,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,104,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,107,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,110,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,113,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,116,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,118,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,119,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,122,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,127,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,129,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,131,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,132,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,135,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,137,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,138,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,141,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,143,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,144,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,147,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,149,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,150,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,153,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,155,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,156,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,159,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,161,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,162,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,165,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,167,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,168,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,171,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,172,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,173,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,174,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,178,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,179,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,182,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,183,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,184,gpu_stencil37_hack2_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,185,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,186,gpu_stencil37_hack2_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,187,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,188,gpu_stencil37_hack2_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,193,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,194,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,197,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,198,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,199,gpu_stencil37_hack2_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,200,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,201,gpu_stencil37_hack2_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,202,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,203,gpu_stencil37_hack2_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,208,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,209,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,212,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,213,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,214,gpu_stencil37_hack2_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,215,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,216,gpu_stencil37_hack2_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,217,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,218,gpu_stencil37_hack2_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,223,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,224,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,227,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,228,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,229,gpu_stencil37_hack2_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,230,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,231,gpu_stencil37_hack2_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,232,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,233,gpu_stencil37_hack2_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,237,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,238,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,241,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,242,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,243,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,244,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,248,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,249,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,252,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,253,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,254,gpu_stencil37_hack2_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,255,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,256,gpu_stencil37_hack2_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,257,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,258,gpu_stencil37_hack2_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,263,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,264,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,267,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,268,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,269,gpu_stencil37_hack2_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,270,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,271,gpu_stencil37_hack2_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,272,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,273,gpu_stencil37_hack2_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,278,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,279,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,282,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,283,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,284,gpu_stencil37_hack2_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,285,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,286,gpu_stencil37_hack2_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,287,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,288,gpu_stencil37_hack2_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,293,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,294,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,297,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,298,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,299,gpu_stencil37_hack2_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,300,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,301,gpu_stencil37_hack2_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,302,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,303,gpu_stencil37_hack2_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,307,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,308,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,311,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,312,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,313,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,314,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,317,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,318,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,321,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,322,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('uint64_t', 'n_rows'), ('uint64_t', 'n_cols'), ('uint64_t', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,323,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('uint64_t', 'n_rows'), ('uint64_t', 'n_cols'), ('uint64_t', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,324,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('uint64_t', 'n_rows'), ('uint64_t', 'n_cols'), ('uint64_t', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,328,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,329,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,332,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,333,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,334,gpu_stencil37_hack2_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,335,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,336,gpu_stencil37_hack2_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,337,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,338,gpu_stencil37_hack2_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'd_xpitch'), ('int', 'd_ypitch'), ('int', 'd_zpitch'), ('int', 's_xpitch'), ('int', 's_ypitch'), ('int', 's_zpitch'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,342,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,343,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,346,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,347,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('uint64_t', 'n_rows'), ('uint64_t', 'n_cols'), ('uint64_t', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,348,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('uint64_t', 'n_rows'), ('uint64_t', 'n_cols'), ('uint64_t', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,349,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('uint64_t', 'n_rows'), ('uint64_t', 'n_cols'), ('uint64_t', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,352,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,353,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,356,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,357,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,358,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,359,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,362,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,363,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,366,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,367,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,368,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,369,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,371,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
11819,411,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,412,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,415,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,416,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11819,418,gpu_stencil2D_4pt_hack5_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,419,gpu_stencil2D_4pt_hack5_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_cols'), ('double *', 'shared_rows'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'M'), ('int', 'N')]"
11819,422,gpu_stencil2D_4pt,runs,"[('double *', 'dst'), ('double *', 'src'), ('int', 'M'), ('int', 'N')]"
11819,423,gpu_stencil37_hack1_cp_slices,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,424,gpu_stencil37_hack1_cp_rows,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,425,gpu_stencil37_hack1_cp_cols,runs,"[('double *', 'dst'), ('double *', 'shared_rows'), ('double *', 'shared_cols'), ('double *', 'shared_slices'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_slices'), ('int', 'tile_x'), ('int', 'tile_y'), ('int', 'tile_z')]"
11819,427,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11832,0,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,1,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,9,simple_reduction,runs,"[('int *', 'shared_var'), ('int *', 'input_values'), ('int', 'N'), ('int', 'iters')]"
11832,11,helloFromGPU,runs,[]
11832,12,lots_of_float_compute,runs,"[('float *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('float *', 'outputs')]"
11832,13,lots_of_double_compute,runs,"[('double *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('double *', 'outputs')]"
11832,14,fmad_kernel,runs,"[('double', 'x'), ('double', 'y'), ('double *', 'out')]"
11832,15,kernel,runs,"[('float *', 'F'), ('double *', 'D')]"
11832,18,standard_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
11832,19,intrinsic_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
11832,20,atomics,runs,"[('int *', 'shared_var'), ('int *', 'values_read'), ('int', 'N'), ('int', 'iters')]"
11832,21,unsafe,runs,"[('int *', 'shared_var'), ('int *', 'values_read'), ('int', 'N'), ('int', 'iters')]"
11832,23,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,24,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,25,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,26,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,27,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,28,printThreadIndex,runs,"[('int *', 'A'), ('const int', 'nx'), ('const int', 'ny')]"
11832,29,checkIndex,runs,[]
11832,30,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,31,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,32,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,33,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,37,sumMatrixOnGPU2D,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'NX'), ('int', 'NY')]"
11832,44,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,45,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,46,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,47,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,48,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,49,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,50,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,51,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,53,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,54,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,56,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,59,host_api_kernel,runs,"[('float *', 'randomValues'), ('float *', 'out'), ('int', 'N')]"
11832,60,device_api_kernel,runs,"[('curandState *', 'states'), ('float *', 'out'), ('int', 'N')]"
11832,62,refill_randoms,runs,"[('float *', 'dRand'), ('int', 'N'), ('curandState *', 'states')]"
11832,64,refill_randoms,runs,"[('float *', 'dRand'), ('int', 'N'), ('curandState *', 'states')]"
11832,65,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,66,sumArraysZeroCopy,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,69,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,70,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,71,warmup,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,72,copyRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,73,copyCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,74,transposeNaiveRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,75,transposeNaiveCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,76,transposeUnroll4Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,77,transposeUnroll4Col,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,78,transposeDiagonalRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,79,transposeDiagonalCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,81,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,84,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,85,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,86,readOffsetUnroll2,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,87,readOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,88,writeOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,89,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,90,writeOffsetUnroll2,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,91,writeOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,92,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,93,iKernel,runs,"[('float *', 'src'), ('float *', 'dst')]"
11832,94,iKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,95,kernel_add_wavelet,runs,"[('float *', 'g_u2'), ('float', 'wavelets'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'ngpus')]"
11832,96,kernel_2dfd_last,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
11832,97,kernel_2dfd,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
11832,105,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out')]"
11832,113,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'N')]"
11832,114,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,117,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,133,reduceGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,134,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,135,reduceSmemDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,136,reduceGmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,137,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,138,reduceSmemUnrollDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,139,reduceNeighboredGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,140,reduceNeighboredSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,141,copyGmem,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,142,naiveGmem,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,143,naiveGmemUnroll,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,144,transposeSmemUnroll,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,145,transposeSmemUnrollPad,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,146,transposeSmemUnrollPadDyn,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,147,transposeSmem,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
11832,148,transposeSmemPad,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
11832,149,transposeSmemDyn,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
11832,150,transposeSmemPadDyn,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
11832,155,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,160,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,173,kernel,runs,"[('float *', 'g_data'), ('float', 'value')]"
11832,178,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,179,sumMatrixOnGPU2D,runs,"[('int *', 'MatA'), ('int *', 'MatB'), ('int *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11832,182,warmup,runs,"[('int *', 'out'), ('int', 'N')]"
11832,183,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,184,reduceCompleteUnrollWarps8Sync,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,185,reduceCompleteUnrollWarps8SyncVolatile,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,186,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,187,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,188,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,189,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,190,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,191,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,192,reduceUnrolling16,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,193,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,194,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,196,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,197,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,198,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,199,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,200,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,201,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,202,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,203,reduceUnrolling8New,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,204,reduceUnrolling16,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,205,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,206,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,208,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,209,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,210,reduceInterleavedFloat,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
11832,211,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,212,reduceCompleteUnrollWarps8Float,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
11832,213,warmup,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,214,copyRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,215,copyCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,216,transposeNaiveRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,217,transposeNaiveCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,218,transposeUnroll4Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,219,transposeRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,220,transposeUnroll8Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,221,transposeUnroll4Col,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,222,transposeDiagonalRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,223,transposeDiagonalCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,224,transposeDiagonalColUnroll4,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
11832,225,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,226,sumArraysZeroCopy,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,227,sumArraysZeroCopyWithUVA,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,230,readWriteOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,231,readWriteOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,232,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,235,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,236,sumArraysZeroCopyOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N'), ('int', 'offset')]"
11832,237,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,238,writeOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,239,readWriteOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,240,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
11832,243,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,244,sumArraysZeroCopyWithUVAOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N'), ('int', 'offset')]"
11832,245,kernel_add_wavelet,runs,"[('float *', 'g_u2'), ('float', 'wavelets'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'ngpus')]"
11832,246,kernel_2dfd_last,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
11832,247,kernel_2dfd,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
11832,248,iKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,249,iKernel,runs,"[('float *', 'src'), ('float *', 'dst')]"
11832,250,iKernel,runs,"[('float *', 'src'), ('float *', 'dst')]"
11832,251,iKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
11832,270,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out')]"
11832,272,stencil_1d_global,runs,"[('float *', 'in'), ('float *', 'out'), ('float *', 'dcoef')]"
11832,289,reduceGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,290,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,291,reduceSmemDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,292,reduceGmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,293,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,294,reduceSmemUnrollDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,295,reduceNeighboredGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11832,296,reduceNeighboredSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
11840,4,MotionVec,runs,"[('float *', 'new_image_dev'), ('float *', 'old_image_dev'), ('uchar4 *', 'Image_dev'), ('int', 'w'), ('int', 'h')]"
11846,9,VecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
11846,10,atbashGPU,runs,"[('char const *', 'in'), ('char *', 'out'), ('int', 'n')]"
11846,11,hello,runs,"[('char *', 'a'), ('int *', 'b')]"
11846,12,gpuTranspose,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'm'), ('int', 'n')]"
11846,13,gpuMatMul,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
11851,0,fillSpaceTSteps,runs,"[('int', 'N'), ('int', 'T'), ('float', 'c'), ('float', 'dt'), ('float', 'dd'), ('float *', 'waveSpace'), ('float *', 'waveSpaceTMin1'), ('float *', 'waveSpaceTMin2')]"
11851,1,add,runs,"[('float *', 'c'), ('float *', 'a'), ('float *', 'b'), ('int', 'values')]"
11851,2,hello2D,runs,[]
11855,2,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
1186,2,gpu_rBRIEF_Loop,runs,"[('int', 'N'), ('float4 *', 'patches'), ('int4 *', 'pattern')]"
1186,3,gpu_rBRIEF_naive,runs,"[('float4 *', 'workload'), ('int *', 'output'), ('int4 *', 'pattern'), ('int4 *', 'train_bin_vec'), ('int', 'K'), ('int', 'P'), ('int', 'I')]"
11861,8,computeSphereVertexDistancesKernel,runs,"[('float4 *', 'V'), ('float *', 'dist'), ('unsigned int *', 'NEIGHBOR'), ('unsigned int *', 'NBOFFSETS'), ('unsigned int *', 'nNeighbors'), ('unsigned int', 'nVertices'), ('float', 'circumference')]"
11861,9,GradientAverageKernel,runs,"[('float4 *', 'D'), ('float4 *', 'TD'), ('unsigned int *', 'NEIGHBOR'), ('unsigned int *', 'NBOFFSETS'), ('unsigned int *', 'nNeighbors'), ('unsigned int', 'nVertices')]"
11861,10,updateGradientsKernel,runs,"[('float4 *', 'D'), ('float4 *', 'TD'), ('unsigned int', 'nVertices')]"
1187,7,Max,runs,"[('const int', 'n'), ('const float *', 'top_temp'), ('float *', 'top_data'), ('float *', 'mask'), ('const int', 'mask_index')]"
1187,8,get_temp_grad,runs,"[('const int', 'n'), ('const float *', 'gradOutput'), ('const float *', 'mask'), ('float *', 'top_grad'), ('const int', 'mask_index')]"
1187,9,MaxDepth,runs,"[('const int', 'n'), ('const float *', 'bottom_data'), ('const int', 'step'), ('const int', 'depth'), ('float *', 'idx')]"
1187,10,sga_down_forward,runs,"[('const int', 'n'), ('const float *', 'filters'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'top_data')]"
1187,11,sga_down_data_backward,runs,"[('const int', 'n'), ('const float *', 'filters'), ('float *', 'top_diff'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'bottom_diff')]"
1187,12,sga_down_weight_backward,runs,"[('const int', 'n'), ('const float *', 'bottom_data'), ('const float *', 'top_data'), ('const float *', 'temp_diff'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'filters_diff')]"
1187,13,sga_up_forward,runs,"[('const int', 'n'), ('const float *', 'filters'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'top_data')]"
1187,14,sga_up_data_backward,runs,"[('const int', 'n'), ('const float *', 'filters'), ('float *', 'top_diff'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'bottom_diff')]"
1187,15,sga_up_weight_backward,runs,"[('const int', 'n'), ('const float *', 'bottom_data'), ('const float *', 'top_data'), ('const float *', 'temp_diff'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'filters_diff')]"
1187,16,sga_right_forward,runs,"[('const int', 'n'), ('const float *', 'filters'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'top_data')]"
1187,17,sga_right_data_backward,runs,"[('const int', 'n'), ('const float *', 'filters'), ('float *', 'top_diff'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'bottom_diff')]"
1187,18,sga_right_weight_backward,runs,"[('const int', 'n'), ('const float *', 'bottom_data'), ('const float *', 'top_data'), ('const float *', 'temp_diff'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'filters_diff')]"
1187,19,sga_left_forward,runs,"[('const int', 'n'), ('const float *', 'filters'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'top_data')]"
1187,20,sga_left_data_backward,runs,"[('const int', 'n'), ('const float *', 'filters'), ('float *', 'top_diff'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'bottom_diff')]"
1187,21,sga_left_weight_backward,runs,"[('const int', 'n'), ('const float *', 'bottom_data'), ('const float *', 'top_data'), ('const float *', 'temp_diff'), ('const int', 'height'), ('const int', 'width'), ('const int', 'depth'), ('const int', 'wsize'), ('float *', 'filters_diff')]"
1187,22,lga_filtering_forward,runs,"[('const int', 'n'), ('const float *', 'bottom_data'), ('const float *', 'filters'), ('const int', 'height'), ('const int', 'width'), ('const int', 'channel'), ('const int', 'radius'), ('float *', 'top_data')]"
1187,23,lga_filter_backward,runs,"[('const int', 'n'), ('const float *', 'bottom_data'), ('const float *', 'top_diff'), ('const int', 'height'), ('const int', 'width'), ('const int', 'channel'), ('const int', 'radius'), ('float *', 'filter_diff')]"
1187,24,lga_data_backward,runs,"[('const int', 'n'), ('const float *', 'filters'), ('const float *', 'top_diff'), ('const int', 'height'), ('const int', 'width'), ('const int', 'channel'), ('const int', 'radius'), ('float *', 'bottom_diff')]"
1187,25,Max,runs,"[('const int', 'n'), ('const float *', 'top_temp'), ('float *', 'top_data'), ('float *', 'mask'), ('const int', 'mask_index')]"
1187,26,get_temp_grad,runs,"[('const int', 'n'), ('const float *', 'gradOutput'), ('const float *', 'mask'), ('float *', 'top_grad'), ('const int', 'mask_index')]"
1187,27,MaxDepth,runs,"[('const int', 'n'), ('const float *', 'bottom_data'), ('const int', 'step'), ('const int', 'depth'), ('float *', 'idx')]"
11872,3,VectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
11872,4,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11872,5,VectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
11872,6,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11876,0,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11876,1,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
11876,9,simple_reduction,runs,"[('int *', 'shared_var'), ('int *', 'input_values'), ('int', 'N'), ('int', 'iters')]"
11876,19,device_len_dot,runs,[]
11876,24,device_transpose,runs,[]
11876,36,device_mse,runs,[]
11876,37,device_ll,runs,[]
11882,0,nms_kernel,runs,"[('const int', 'n_boxes'), ('const float', 'nms_overlap_thres'), ('const float *', 'dev_boxes'), ('unsigned long long *', 'dev_mask')]"
11885,1,AddIntegers,runs,"[('int *', 'arr1'), ('int *', 'arr2'), ('int', 'num_elements')]"
11885,2,FindClosestPoint,runs,"[('float3 *', 'points'), ('int *', 'closestPoint'), ('const int', 'numberPoints')]"
11885,3,AddIntegers,runs,"[('int *', 'a'), ('int *', 'b')]"
11890,2,needle_cuda_shared_1,runs,"[('int *', 'reference'), ('int *', 'matrix_cuda'), ('int', 'cols'), ('int', 'penalty'), ('int', 'i'), ('int', 'block_width')]"
11890,3,needle_cuda_shared_2,runs,"[('int *', 'reference'), ('int *', 'matrix_cuda'), ('int', 'cols'), ('int', 'penalty'), ('int', 'i'), ('int', 'block_width')]"
11890,4,needle_cuda_noshr_1,runs,"[('int *', 'reference'), ('int *', 'matrix_cuda'), ('int', 'cols'), ('int', 'penalty'), ('int', 'i'), ('int', 'block_width')]"
11890,5,needle_cuda_noshr_2,runs,"[('int *', 'reference'), ('int *', 'matrix_cuda'), ('int', 'cols'), ('int', 'penalty'), ('int', 'i'), ('int', 'block_width')]"
11890,6,upper_left,runs,"[('int *', 'input_itemsets'), ('int *', 'reference'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'i'), ('int', 'penalty')]"
11890,7,lower_right,runs,"[('int *', 'input_itemsets'), ('int *', 'reference'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'i'), ('int', 'penalty')]"
11890,8,copy,runs,"[('int *', 'dst'), ('int *', 'input_itemsets'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'lb0'), ('int', 'lb1'), ('int', 'ub0'), ('int', 'ub1')]"
11890,9,upper_left,runs,"[('int *', 'input_itemsets'), ('int *', 'reference'), ('int *', 'tmp'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'i'), ('int', 'penalty')]"
11890,10,middle,runs,"[('int *', 'input_itemsets'), ('int *', 'reference'), ('int *', 'tmp'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'i'), ('int', 'penalty')]"
11890,11,lower_right,runs,"[('int *', 'input_itemsets'), ('int *', 'reference'), ('int *', 'tmp'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'i'), ('int', 'penalty')]"
11890,12,marshalling1,runs,"[('int *', 'input_itemsets'), ('int *', 'tmp'), ('int', 'max_rows'), ('int', 'max_cols')]"
11890,13,marshalling2,runs,"[('int *', 'input_itemsets'), ('int *', 'tmp'), ('int', 'max_rows'), ('int', 'max_cols')]"
11890,14,unmarshalling,runs,"[('int *', 'input_itemsets'), ('int *', 'tmp'), ('int', 'max_rows'), ('int', 'max_cols')]"
11890,15,upper_left_opt,runs,"[('int *', 'dst'), ('int *', 'input_itemsets'), ('int *', 'reference'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'i'), ('int', 'penalty')]"
11890,16,lower_right_opt,runs,"[('int *', 'dst'), ('int *', 'input_itemsets'), ('int *', 'reference'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'i'), ('int', 'penalty')]"
11890,17,upper_left,runs,"[('int *', 'dst'), ('int *', 'input_itemsets'), ('int *', 'reference'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'i'), ('int', 'penalty')]"
11890,18,lower_right,runs,"[('int *', 'dst'), ('int *', 'input_itemsets'), ('int *', 'reference'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'i'), ('int', 'penalty')]"
11890,19,upper_left_copy,runs,"[('int *', 'dst'), ('int *', 'input_itemsets'), ('int *', 'reference'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'i'), ('int', 'penalty')]"
11890,20,lower_right_copy,runs,"[('int *', 'dst'), ('int *', 'input_itemsets'), ('int *', 'reference'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'i'), ('int', 'penalty')]"
11890,21,copy,runs,"[('int *', 'dst'), ('int *', 'input_itemsets'), ('int', 'max_rows'), ('int', 'max_cols'), ('int', 'lb0'), ('int', 'lb1'), ('int', 'ub0'), ('int', 'ub1')]"
11891,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11896,3,LinearTransform,runs,"[('double *', 'A'), ('int', 'numElements'), ('double', 'at'), ('double', 'bt')]"
11896,4,FillTex,runs,"[('void *', 'surface'), ('int', 'width'), ('int', 'height'), ('size_t', 'pitch'), ('double *', 'src'), ('int', 'Mask')]"
11896,5,FillTexByte,runs,"[('void *', 'surface'), ('int', 'width'), ('int', 'height'), ('size_t', 'pitch'), ('char *', 'src'), ('int', 'Mask')]"
11896,6,FillTexTh,runs,"[('void *', 'surface'), ('int', 'width'), ('int', 'height'), ('size_t', 'pitch'), ('double *', 'src'), ('int', 'Mask'), ('int', 'th'), ('int', 'pixValue')]"
11896,7,AutoRegK,runs,"[('double *', 'X0'), ('double *', 'X1'), ('double *', 'X2'), ('double *', 'N0'), ('int', 'numElements'), ('double', 'a'), ('double', 'b')]"
11896,8,Kernel_Expansion1,runs,"[('double *', 'tb1'), ('double *', 'tb2'), ('int', 'width'), ('int', 'height'), ('double', 'Dx'), ('double', 'x0'), ('double', 'Dy'), ('double', 'y0')]"
11896,9,Kernel_CartToPol1,runs,"[('double *', 'tb1'), ('double *', 'tb2'), ('int', 'width'), ('int', 'height')]"
11896,14,KGaborFilter1,runs,"[('double *', 'filter'), ('double *', 'Vr'), ('int', 'width'), ('int', 'height'), ('double', 'ss'), ('double', 'r0'), ('double', 'sr0'), ('double', 'stheta0')]"
11896,15,KGaborFilter2,runs,"[('double *', 'filter'), ('int', 'NumElements'), ('double', 'fMul')]"
11896,16,KparamAR,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double', 'ss'), ('double', 'dtAR'), ('int', 'width'), ('int', 'height')]"
11896,17,AutoRegPinkK,runs,"[('double *', 'X0'), ('double *', 'X1'), ('double *', 'Y'), ('double *', 'C0'), ('double *', 'D0'), ('double *', 'LastF'), ('int', 'numElts'), ('int', 'Nc')]"
11896,18,KtexFillRect,runs,"[('void *', 'surface'), ('double *', 'tb'), ('int', 'width'), ('int', 'height'), ('size_t', 'pitch'), ('float2 *', 'Pts'), ('int', 'k'), ('float', 'th')]"
11904,0,gpu_mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'N')]"
11909,1,cudaTIGammaKernel,runs,"[('double *', 'extEV'), ('double *', 'x2'), ('double *', 'x3'), ('unsigned char *', 'tipX1'), ('unsigned char *', 'tipX2'), ('double *', 'r'), ('double *', 'uX1'), ('double *', 'uX2')]"
11909,2,cudaIIGammaKernel,runs,"[('double *', 'extEV'), ('double *', 'x1'), ('double *', 'x2'), ('double *', 'x3'), ('double *', 'left'), ('double *', 'right')]"
11909,3,cudaPreTTGammaKernel,runs,"[('double *', 'tipVector'), ('double *', 'l'), ('double *', 'r'), ('double *', 'umpX1'), ('double *', 'umpX2')]"
11909,4,cudaPreTIGammaKernel,runs,"[('double *', 'tipVector'), ('double *', 'l'), ('double *', 'ump')]"
11909,5,cudaEvaluateLeftGammaKernel,runs,"[('int *', 'wptr'), ('double *', 'x2'), ('double *', 'tipVector'), ('unsigned char *', 'tipX1'), ('double *', 'diagptable'), ('double *', 'output'), ('const int', 'limit')]"
11909,6,cudaEvaluateRightGammaKernel,runs,"[('int *', 'wptr'), ('double *', 'x1'), ('double *', 'x2'), ('double *', 'diagptable'), ('double *', 'output'), ('const int', 'limit')]"
11909,7,cudaSumTTGammaKernel,runs,"[('unsigned char *', 'tipX1'), ('unsigned char *', 'tipX2'), ('double *', 'tipVector'), ('double *', 'sumtable'), ('int', 'limit')]"
11909,8,cudaSumTIGammaKernel,runs,"[('unsigned char *', 'tipX1'), ('double *', 'x2'), ('double *', 'tipVector'), ('double *', 'sumtable'), ('int', 'limit')]"
11909,9,cudaSumIIGammaKernel,runs,"[('double *', 'x1'), ('double *', 'x2'), ('double *', 'sumtable'), ('int', 'limit')]"
1191,7,instance_iou_cuda_kernel,runs,"[('int64_t', 'total_gt_instances'), ('const int64_t __restrict__ *', 'nInstance'), ('int', 'nProposal'), ('const int64_t __restrict__ *', 'proposals_idx'), ('const int64_t __restrict__ *', 'proposals_offset'), ('const int64_t __restrict__ *', 'instance_labels'), ('const int64_t __restrict__ *', 'offset_num_gt_instances'), ('const int64_t __restrict__ *', 'batch'), ('const int64_t __restrict__ *', 'instance_pointnum'), ('float *', 'proposals_iou')]"
11914,229,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
11914,230,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
11914,231,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
11914,236,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
11914,342,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
11914,350,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
11917,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
11917,1,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
11917,2,special,runs,"[('float *', 'd_out'), ('float *', 'd_in'), ('int', 'size')]"
11917,3,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
11917,4,special,runs,"[('float *', 'd_out'), ('float *', 'd_in'), ('int', 'size')]"
11919,0,vectorAdditionCUDA,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c'), ('int', 'n')]"
11919,1,MatrixMulKernel,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'Width')]"
11921,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11921,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
11921,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11921,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11921,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11921,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11921,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
11921,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
11921,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
11921,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
11921,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
11921,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
11921,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
11921,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
11921,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
11921,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
11921,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
11924,4,precalculateABC,runs,"[('float4 *', 'ABCm'), ('float *', 'M'), ('float', 'timestep'), ('float', 'alpha'), ('unsigned int', 'numPoints')]"
11924,5,updateDisplacements_k,runs,"[('float4 *', 'Ui_t'), ('float4 *', 'Ui_tminusdt'), ('float *', 'M'), ('float4 *', 'Ri'), ('float4 *', 'Fi'), ('int', 'maxNumForces'), ('float4 *', 'ABC'), ('unsigned int', 'numPoints')]"
1193,1,adjust_galaxy_set,runs,"[('Galaxy *', 'galaxy_set'), ('int', 'n')]"
1193,3,measure_galaxy_distribution,runs,"[('int *', 'DD_histogram'), ('int *', 'DR_histogram'), ('int *', 'RR_histogram'), ('float *', 'distribution'), ('int', 'n')]"
11934,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
11934,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
11940,3,blend,runs,"[('float *', 'cmap'), ('float *', 'oldd'), ('float *', 'newd'), ('float', 'weight'), ('int *', 'params')]"
11940,7,update2,runs,"[('float *', 'alphaMinusBeta_out'), ('const float *', 'rho'), ('const float *', 'yDotZ'), ('const float *', 'alpha')]"
11940,8,update3,runs,"[('float *', 'rho_out'), ('float *', 'H0_out'), ('const float *', 'yDotS'), ('const float *', 'yDotY')]"
11940,44,sync_conv_groups,runs,[]
11942,1,downSampleKernel,runs,"[('unsigned char *', 'd_in'), ('unsigned char *', 'd_out'), ('size_t', 'skip')]"
11944,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
11953,166,hello,runs,[]
11957,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
11957,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
11957,2,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
11957,3,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
11957,4,indices,runs,[]
11957,7,func,runs,[]
11957,8,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
11957,9,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
11957,10,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
11957,11,func,runs,[]
11957,13,func,runs,[]
1196,1,dropout_op,runs,"[('size_t', 'sz'), ('float_t *', 'random_nums'), ('float_t *', 'data'), ('float_t', 'drop_rate'), ('float_t', 'scale')]"
1196,2,dense_mv_add,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest')]"
1196,3,dense_add,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest')]"
1196,4,dense_add_conv,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'bias_dim')]"
1196,5,transpose,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'src_width'), ('size_t', 'src_height')]"
1196,6,fractional_stride_nchw,runs,"[('size_t', 'num_values'), ('size_t', 'stride'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'ld_src'), ('size_t', 'ld_dest')]"
1196,7,reshape,runs,"[('size_t', 'num_values'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'ld_src'), ('size_t', 'ld_dest')]"
1196,8,transformation,runs,"[('size_t', 'num_values'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'ld_src'), ('size_t', 'ld_dest')]"
1196,10,affine_transform,runs,"[('size_t', 'sz'), ('float_t *', 'audio'), ('float_t *', 'end_out'), ('size_t', 'stride')]"
1196,11,skip_res_add,runs,"[('size_t', 'sz'), ('float_t *', 'f5'), ('float *', 'f1'), ('float_t *', 'skip_out_sum'), ('size_t', 'stride')]"
1196,12,skip_add,runs,"[('size_t', 'sz'), ('float_t *', 'f1'), ('float *', 'skip_out_sum')]"
1196,13,copy_kernel,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest')]"
1196,14,transpose_kernel,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'ld_src'), ('size_t', 'ld_dest')]"
1196,15,concat_z,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest'), ('float_t *', 'z'), ('size_t', 'stride')]"
11972,2,limitCoeff,runs,"[('int', 'nBatch'), ('int', 'rbs'), ('int', 'rScale'), ('float', 'maxCoeff'), ('float *', 'DA'), ('float *', 'RA'), ('float *', 'CA')]"
11972,3,sumSquareError,runs,"[('int', 'nBatch'), ('int', 'rbs'), ('int', 'rScale'), ('int', 'nCoeff'), ('float *', 'DA'), ('float *', 'CA'), ('float *', 'EA'), ('float *', 'SA')]"
11972,5,reverseVec,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b')]"
11984,0,calculateError,runs,"[('float *', 'aFourth'), ('float *', 'err'), ('int', 'expectedOutput')]"
11991,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
11991,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
11991,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
11991,3,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
11991,4,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
11991,5,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
11991,6,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
11991,7,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
11991,8,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
11991,9,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
11991,10,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
11991,11,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
11991,12,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
11991,13,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
11991,14,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
11991,15,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
11991,16,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
11991,17,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
11991,18,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
11991,19,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
11991,20,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
11991,21,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
11991,22,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
11991,23,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
11991,24,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
11991,25,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
11991,26,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
11991,27,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
11991,28,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
11991,29,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
11991,30,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
11991,31,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
11991,32,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
11991,33,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
11991,34,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
11991,35,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
11991,36,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
11991,37,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
11991,38,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
11991,39,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
11991,40,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
11991,41,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
11991,42,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
11991,44,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
11991,45,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
11991,46,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
11991,47,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
11991,48,forward_softmax_layer_kernel,runs,"[('int', 'n'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
11992,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11992,2,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
11992,3,multiply,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
11992,4,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
11992,5,kernel,runs,[]
11992,6,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
11992,8,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
12,0,ReduceRalf,runs,"[('my_float *', 'd_Array'), ('my_float *', 'd_ReducedArray'), ('int', 'N'), ('int', 'current')]"
120,42,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
120,43,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
120,44,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
120,45,kMultiSoftmaxCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('float *', 'top5Probs'), ('const int', 'numCases'), ('const int', 'numOut'), ('const int', 'setSize')]"
120,49,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
1200,0,kRgb2CIELab,runs,"[('const cudaTextureObject_t', 'texFrameBGRA'), ('cudaSurfaceObject_t', 'surfFrameLab'), ('int', 'width'), ('int', 'height')]"
1200,1,kInitClusters,runs,"[('const cudaSurfaceObject_t', 'surfFrameLab'), ('float *', 'clusters'), ('int', 'width'), ('int', 'height'), ('int', 'nSpxPerRow'), ('int', 'nSpxPerCol')]"
1200,3,kUpdate,runs,"[('int', 'nbSpx'), ('float *', 'clusters'), ('float *', 'accAtt_g')]"
12009,2,sieveOfEratosthenes,runs,"[('char *', 'primes'), ('uint64_t', 'max')]"
12009,3,segmentSieve,runs,"[('char *', 'primes'), ('uint64_t', 'max')]"
12009,4,sieveOfEratosthenes,runs,"[('char *', 'primes'), ('uint64_t', 'max')]"
12009,5,segmentSieve,runs,"[('char *', 'primes'), ('uint64_t', 'max')]"
12009,6,sieveOfEratosthenesCUDA,runs,"[('char *', 'primes'), ('uint64_t', 'max')]"
12010,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
12010,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
12010,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
12010,3,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
12010,4,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
12010,5,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
12010,6,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
12010,7,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
12010,8,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
12010,9,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
12010,10,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
12010,11,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
12010,12,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
12010,13,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
12010,14,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
12010,15,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
12010,16,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
12010,17,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
12010,18,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
12010,19,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
12010,20,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
12010,21,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
12010,22,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
12010,23,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
12010,24,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
12010,25,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
12010,26,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
12010,27,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
12010,28,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
12010,29,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
12010,30,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
12010,31,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
12010,32,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
12010,33,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
12010,34,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
12010,35,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
12010,36,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
12010,37,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
12010,38,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
12010,39,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
12010,40,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
12010,41,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
12010,42,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
12010,44,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
12010,45,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
12010,46,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
12010,47,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
12011,0,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
12025,28,sync_conv_groups,runs,[]
12030,0,dot_product,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
12037,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12037,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
12037,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12037,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12037,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12037,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12037,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12037,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
12037,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
12037,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
12037,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
12037,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
12037,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
12037,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
12037,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
12037,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
12037,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
1204,1,kernel,runs,"[('float *', 'array'), ('int', 'size')]"
1204,2,kernelA,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
1204,3,kernelB,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
1204,4,kernelC,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
1204,5,kernelD,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
1204,6,kernel,runs,"[('float *', 'array'), ('int', 'size')]"
1205,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1206,0,kernel1,runs,"[('int', 'N'), ('int *', 'd_array')]"
1206,1,kernel2,runs,"[('int', 'N'), ('int *', 'd_array')]"
12063,1,hierarchical_scan_kernel_phase1,runs,"[('int *', 'X'), ('int *', 'Y'), ('int *', 'S')]"
12063,3,hierarchical_scan_kernel_phase3,runs,"[('int *', 'S'), ('int *', 'Y')]"
12063,4,Kogge_Stone_scan_kernel,runs,"[('float *', 'X'), ('float *', 'Y'), ('int', 'InputSize')]"
12063,5,Kogge_Stone_scan_kernel,runs,"[('float *', 'X'), ('float *', 'Y'), ('int', 'InputSize')]"
12063,6,Brent_Kung_scan_kernel,runs,"[('float *', 'X'), ('float *', 'Y'), ('int', 'InputSize')]"
12063,7,efficient_Kogge_Stone_scan_kernel,runs,"[('float *', 'X'), ('float *', 'Y'), ('int', 'InputSize')]"
12063,8,partialSumKernel,runs,"[('int *', 'X'), ('int', 'N')]"
12063,9,partialSumKernel,runs,"[('int *', 'X'), ('int', 'N')]"
12078,1,sumOfSquares,runs,"[('int *', 'num'), ('int *', 'result'), ('clock_t *', 'time')]"
12078,3,sumOfSquares,runs,"[('int *', 'num'), ('int *', 'result'), ('clock_t *', 'time')]"
12086,0,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12086,4,sumMatrixOnGPU2D,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'NX'), ('int', 'NY')]"
12086,11,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12086,12,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12086,13,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12086,14,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12086,15,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12086,16,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12086,17,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12086,18,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12086,20,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12086,21,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12086,23,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
12089,0,derKernel,runs,"[('double *', 'device_x'), ('double *', 'device_f')]"
12089,1,guessKernel,runs,"[('double *', 'device_X_Total'), ('double *', 'device_X_Not'), ('double *', 'device_F_Not'), ('double', 'h')]"
12089,2,order10Kernel,runs,"[('double *', 'device_X_Total'), ('double *', 'device_X_Not'), ('double *', 'device_F_Not'), ('double', 'h'), ('double *', 'device_f')]"
12089,3,Order10FkKernel,runs,"[('double *', 'device_X_Total'), ('double *', 'device_X_Not'), ('double *', 'device_F_Not'), ('double', 'h'), ('double *', 'device_f')]"
12089,4,Order12Kernel,runs,"[('double *', 'device_X_Total'), ('double *', 'device_X_Not'), ('double *', 'device_F_Not'), ('double', 'h'), ('double *', 'device_f')]"
12098,0,vecAdd,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
121,6,kExpand,runs,"[('float *', 'images'), ('float *', 'targets'), ('int', 'num_images'), ('int', 'num_input_channels'), ('int', 'image_size_y'), ('int', 'image_size_x'), ('int', 'num_modules_y'), ('int', 'num_modules_x'), ('int', 'kernel_size_y'), ('int', 'kernel_size_x'), ('int', 'padding_y'), ('int', 'padding_x'), ('int', 'stride_y'), ('int', 'stride_x'), ('int', 'num_modules_batch'), ('int', 'module_id_offset')]"
121,7,kOutpTraceMultiplyImages,runs,"[('float *', 'expanded_images'), ('float *', 'expanded_derivs'), ('int', 'num_images'), ('int', 'num_channels'), ('int', 'num_modules_batch'), ('int', 'kernel_size')]"
121,8,kSetOnes,runs,"[('float *', 'dest'), ('int', 'count')]"
121,13,kContract,runs,"[('float *', 'expanded_data'), ('float *', 'targets'), ('int', 'num_images'), ('int', 'num_input_channels'), ('int', 'image_size_y'), ('int', 'image_size_x'), ('int', 'num_modules_y'), ('int', 'num_modules_x'), ('int', 'kernel_size_y'), ('int', 'kernel_size_x'), ('int', 'padding_y'), ('int', 'padding_x'), ('int', 'stride_y'), ('int', 'stride_x'), ('int', 'num_modules_batch'), ('int', 'module_id_offset')]"
121,14,kWriteRows,runs,"[('float *', 'data'), ('float *', 'target'), ('int', 'num_images'), ('int', 'num_modules'), ('int', 'num_modules_batch'), ('int', 'module_id_offset'), ('float', 'beta')]"
121,15,kReadRows,runs,"[('float *', 'data'), ('float *', 'target'), ('int', 'num_images'), ('int', 'num_modules'), ('int', 'num_modules_batch'), ('int', 'module_id_offset')]"
121,16,kWriteRowsMult,runs,"[('float *', 'data'), ('float *', 'target'), ('int', 'num_images'), ('int', 'num_modules'), ('int', 'num_modules_batch'), ('int', 'module_id_offset'), ('float', 'alpha'), ('float', 'beta')]"
121,59,kTranspose,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
121,60,kTransposeBig,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'height'), ('int', 'width')]"
121,61,kLessThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
121,62,kLessThanEq,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
121,63,kLessThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
121,64,kLessThanEqScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
121,65,kGreaterThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
121,66,kGreaterThanEq,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
121,67,kGreaterThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
121,68,kGreaterThanEqScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
121,69,kUpperBound,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
121,70,kLowerBound,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
121,71,kUpperBoundScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
121,72,kLowerBoundScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
121,73,kUpperBoundModScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
121,74,kSparseDot,runs,"[('int', 'm'), ('int', 'n'), ('int', 'k'), ('float *', 'data'), ('int *', 'indptr'), ('int *', 'indices'), ('float *', 'dense_data'), ('float *', 'target'), ('float', 'beta'), ('float', 'alpha')]"
121,75,kSign,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,76,kApplySin,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,77,kApplyCos,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,78,kApplySigmoid,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,79,kApplyTanh,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,80,kApplyAbs,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,81,kApplyLog1PlusExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,82,kLog,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
121,83,kSquashRelu,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'lambda')]"
121,84,kExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,85,kCeil,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,86,kFloor,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,87,kSqrt,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,88,kPow,runs,"[('float *', 'mat'), ('float', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
121,89,kPowMatrix,runs,"[('float *', 'mat'), ('float *', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
121,90,kCrossEntropy,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
121,91,kCrossEntropyBernoulli,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
121,92,kCorrectPreds,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'cutoff')]"
121,93,kReciprocal,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,94,kBesselRatioActivation,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
121,95,kBesselRatioActivationContinuedFraction,runs,"[('float *', 'mat'), ('float *', 'target'), ('float', 'order'), ('int', 'num_terms'), ('unsigned int', 'len')]"
121,96,kAddColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
121,97,kAddDiagonalScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
121,98,kAddDiagonal,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
121,99,kMultDiagonalScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
121,100,kMultDiagonal,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
121,101,kAddRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
121,102,kAddColMult,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
121,103,kAddToEachPixel,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('unsigned int', 'num_pix')]"
121,104,kAddRowMult,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
121,105,kMultByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
121,106,kDivByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
121,107,kDivByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
121,108,kMultByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
121,109,kMultByRowVectorScale,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'scale_targets')]"
121,110,kAddMultSign,runs,"[('float *', 'a'), ('float *', 'b'), ('unsigned int', 'numEls'), ('float', 'mult')]"
121,111,kAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
121,112,kSubtract,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
121,113,kDivide,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
121,114,kMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls'), ('float', 'scale_targets')]"
121,115,kCosDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
121,116,kSinDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
121,117,kLogisticDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
121,118,kLogisticGrad,runs,"[('float *', 'mat'), ('float *', 'targets'), ('float *', 'out_grad'), ('unsigned int', 'numEls')]"
121,119,kLogisticCorrectNormalized,runs,"[('float *', 'mat'), ('float *', 'targets'), ('float *', 'out'), ('unsigned int', 'height'), ('unsigned int', 'width')]"
121,120,kTanhDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
121,121,kRectifiedLinearDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
121,122,kRectifiedLinearSmoothDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
121,123,kMultScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len'), ('float', 'scale_targets')]"
121,124,kAssignScalar,runs,"[('float *', 'dest'), ('float', 'alpha'), ('unsigned int', 'len')]"
121,125,kDivideScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len')]"
121,126,kAddScalar,runs,"[('float *', 'a'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
121,127,kSelectRows,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nSourceRows')]"
121,128,kSwapColumns,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices1'), ('float *', 'indices2'), ('int', 'cols'), ('int', 'width'), ('int', 'height')]"
121,129,kShuffleColumns,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices'), ('int', 'width'), ('int', 'height')]"
121,130,kSetSelectedRows,runs,"[('float *', 'target'), ('float *', 'source'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nTargetRows')]"
121,131,kBlockify,runs,"[('float *', 'source'), ('float *', 'target'), ('int', 'numdims'), ('int', 'blocksize')]"
121,132,kGenerateTranslationsBigVarOff,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'off_x_arr'), ('float *', 'off_y_arr'), ('int', 'source_w'), ('int', 'target_w'), ('int', 'num_channels')]"
121,133,kSoftMaxGrad,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
121,134,kSoftMaxGradRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
121,135,kHingeQuadraticRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'margin')]"
121,136,kHingeLinearRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'margin')]"
121,137,kSoftMaxGradCLS,runs,"[('float *', 'mat'), ('int *', 'labels'), ('float *', 'indices'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
121,138,kSoftMaxCrossEntropy,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'tiny')]"
121,139,kSoftMaxCrossEntropyRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'tiny')]"
121,154,kSumRowwise,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'mult'), ('float', 'p')]"
121,159,kExpand,runs,"[('float *', 'source'), ('float *', 'indices'), ('float *', 'target'), ('int', 'height'), ('int', 'width'), ('int', 'target_width')]"
121,160,kExpandAndAdd,runs,"[('float *', 'source'), ('float *', 'mat'), ('float *', 'indices'), ('float *', 'target'), ('int', 'width'), ('int', 'height'), ('float', 'mult'), ('int', 'width2')]"
121,161,kAccumulateColumns,runs,"[('float *', 'mat'), ('float *', 'indices'), ('float *', 'target'), ('int', 'mat_width'), ('int', 'target_width'), ('int', 'height'), ('float', 'mult'), ('int', 'avg')]"
121,162,kExtractPatches,runs,"[('float *', 'images'), ('float *', 'patches'), ('float *', 'indices'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('int', 'num_images'), ('int', 'img_width'), ('int', 'img_height'), ('int', 'patch_width'), ('int', 'patch_height'), ('int', 'num_colors')]"
121,163,kExtractPatches2,runs,"[('float *', 'images'), ('float *', 'patches'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('float *', 'flip'), ('int', 'num_images'), ('int', 'img_width'), ('int', 'img_height'), ('int', 'patch_width'), ('int', 'patch_height'), ('int', 'num_colors')]"
121,164,kExtractPatches3,runs,"[('float *', 'images'), ('float *', 'patches'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('float *', 'flip'), ('int', 'num_images'), ('int', 'img_width'), ('int', 'img_height'), ('int', 'patch_width'), ('int', 'patch_height'), ('int', 'num_colors')]"
121,166,kRectifyBoundingBox,runs,"[('float *', 'boxes'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('float *', 'flip'), ('int', 'num_images'), ('int', 'patch_width'), ('int', 'patch_height'), ('int', 'num_locs')]"
121,167,kAdagrad,runs,"[('float *', 'history'), ('float *', 'grad'), ('float', 'delta'), ('int', 'len')]"
121,168,kRMSProp,runs,"[('float *', 'history'), ('float *', 'grad'), ('float', 'factor'), ('int', 'len')]"
121,169,kBoundingBoxLogisticGrad,runs,"[('float *', 'mat'), ('int *', 'bbox'), ('int *', 'label'), ('int *', 'seg'), ('float *', 'indices'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('int', 'size'), ('int', 'width'), ('int', 'height'), ('int', 'depth'), ('float', 'scale_width'), ('float', 'scale_height'), ('float *', 'grad')]"
121,171,kBoundingBoxSoftMaxGrad,runs,"[('float *', 'mat'), ('int *', 'bbox'), ('int *', 'label'), ('int *', 'seg'), ('float *', 'indices'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('int', 'size'), ('int', 'width'), ('int', 'height'), ('int', 'depth'), ('float', 'scale_width'), ('float', 'scale_height'), ('float *', 'grad')]"
12106,1,matrixMultKernel,runs,"[('float *', 'd_A'), ('float *', 'd_B'), ('float *', 'd_C'), ('int', 'N')]"
12107,0,sum_dynamic_kernel,runs,"[('const int *', 'pIn'), ('int *', 'pOut'), ('size_t', 'numInts')]"
12107,2,decrement_dynamic_kernel,runs,"[('int *', 'pInts'), ('size_t', 'numInts')]"
12118,0,addByCombine,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
12118,1,addKernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
12118,2,addByThreads,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
12118,3,addTwoIntegers,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
12118,4,mykernel,runs,[]
1212,0,init,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
1212,1,init,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
1212,2,sgemm_gpu_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,3,device_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1212,4,createResizedImage,runs,"[('unsigned char *', 'imageScaledData'), ('int', 'scaled_width'), ('float', 'scale_factor'), ('cudaTextureObject_t', 'texObj')]"
1212,14,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1212,15,simple_saxpy_kernel,runs,"[('float *', 'y'), ('const float *', 'x'), ('const float', 'alpha'), ('const float', 'beta')]"
1212,16,iterative_saxpy_kernel,runs,"[('float *', 'y'), ('const float *', 'x'), ('const float', 'alpha'), ('const float', 'beta'), ('int', 'n_loop')]"
1212,19,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1212,21,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1212,23,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1212,25,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1212,26,child_kernel,runs,"[('int *', 'data'), ('int', 'seed')]"
1212,31,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1212,33,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1212,35,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1212,37,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1212,38,sgemm_gpu_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,39,reduction_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in'), ('unsigned int', 'size')]"
1212,43,atomic_reduction_kernel,runs,"[('float *', 'data_out'), ('float *', 'data_in'), ('int', 'size')]"
1212,44,reduction_kernel_1,runs,"[('float *', 'g_out'), ('float *', 'g_in'), ('unsigned int', 'size')]"
1212,45,reduction_kernel_2,runs,"[('float *', 'g_out'), ('float *', 'g_in'), ('unsigned int', 'size')]"
1212,46,idx_print,runs,[]
1212,51,global_reduction_kernel,runs,"[('float *', 'data_out'), ('float *', 'data_in'), ('int', 'stride'), ('int', 'size')]"
1212,52,reduction_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in'), ('unsigned int', 'size')]"
1212,53,reduction_kernel,runs,"[('float *', 'g_out'), ('float *', 'g_in'), ('unsigned int', 'size')]"
1212,54,reduction_kernel,runs,"[('float *', 'g_out'), ('float *', 'g_in'), ('unsigned int', 'size')]"
1212,55,sgemm_gpu_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,57,fmaf_kernel,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_z'), ('int', 'size')]"
1212,59,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,60,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,61,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,62,sgemm_kernel_A,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,63,sgemm_kernel_B,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,64,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,65,sgemm_kernel_A,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,66,sgemm_kernel_B,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,67,sgemm_kernel_A,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,68,sgemm_kernel_B,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,69,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,71,sgemm_kernel_B,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,72,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,74,predicate_kernel,runs,"[('float *', 'd_predicates'), ('float *', 'd_input'), ('int', 'length')]"
1212,75,pack_kernel,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('float *', 'd_predicates'), ('float *', 'd_scanned'), ('int', 'length')]"
1212,76,split_kernel,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('float *', 'd_predicates'), ('float *', 'd_scanned'), ('int', 'length')]"
1212,77,convolution_kernel_v1,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('float *', 'd_filter'), ('int', 'num_row'), ('int', 'num_col'), ('int', 'filter_size')]"
1212,81,scan_v2_kernel,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('int', 'length')]"
1212,82,scan_v1_kernel,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('int', 'length')]"
1212,83,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'M'), ('int', 'N'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,84,sgemm_kernel_v2,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'M'), ('int', 'N'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
1212,85,calculateHistogram,runs,"[('unsigned int *', 'imageHistogram'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('cudaTextureObject_t', 'texObj')]"
1212,86,calculateBodyForce,runs,"[('float4 *', 'p'), ('float4 *', 'v'), ('float', 'dt'), ('int', 'n')]"
1212,87,device_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1212,88,device_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1212,89,device_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1212,90,print_from_gpu,runs,[]
1212,94,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
1212,102,generate_kernel,runs,"[('unsigned int *', 'generated_out'), ('curandState_t *', 'state')]"
1212,103,generate_uniform_kernel,runs,"[('float *', 'generated_out'), ('curandState_t *', 'state')]"
1212,104,float2half_kernel,runs,"[('half *', 'out'), ('float *', 'in')]"
1213,1,calcLoss,runs,"[('float *', 'err'), ('float *', 'output'), ('unsigned int', 'Y'), ('const int', 'N')]"
1213,3,concat,runs,"[('float *', 'output'), ('float *', 'input1'), ('float *', 'input2'), ('float *', 'input3'), ('float *', 'input4'), ('const int', 'size'), ('const int', 'in_channel1'), ('const int', 'in_channel2'), ('const int', 'in_channel3'), ('const int', 'in_channel4')]"
1213,4,decat,runs,"[('float *', 'input'), ('float *', 'output1'), ('float *', 'output2'), ('float *', 'output3'), ('float *', 'output4'), ('const int', 'size'), ('const int', 'out_channel1'), ('const int', 'out_channel2'), ('const int', 'out_channel3'), ('const int', 'out_channel4')]"
1213,5,fp_conv,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'weight'), ('const int', 'kernel_size'), ('const int', 'size'), ('const int', 'n_size'), ('const int', 'in_channel'), ('const int', 'out_channel'), ('bool', 'SAME')]"
1213,6,fp_bias_conv,runs,"[('float *', 'preact'), ('float *', 'bias'), ('const int', 'size'), ('const int', 'n_channel')]"
1213,7,fp_preact_fc,runs,"[('float *', 'input'), ('float *', 'preact'), ('float *', 'weight'), ('const int', 'size'), ('const int', 'in_channel'), ('const int', 'out_channel')]"
1213,8,fp_bias_fc,runs,"[('float *', 'preact'), ('float *', 'bias'), ('const int', 'n_channel')]"
1213,9,bp_weight_fc,runs,"[('float *', 'd_weight'), ('float *', 'd_preact'), ('float *', 'p_output'), ('const int', 'size'), ('const int', 'in_channel'), ('const int', 'out_channel')]"
1213,11,bp_output_conv,runs,"[('float *', 'd_output'), ('float *', 'weight'), ('float *', 'nd_preact'), ('const int', 'size'), ('const int', 'kernel_size'), ('const int', 'n_size'), ('const int', 'in_channel'), ('const int', 'out_channel'), ('bool', 'CONV'), ('bool', 'SAME')]"
1213,13,bp_weight_conv,runs,"[('float *', 'd_weight'), ('float *', 'd_preact'), ('float *', 'p_output'), ('const int', 'kernel_size'), ('const int', 'size'), ('const int', 'n_size'), ('const int', 'in_channel'), ('const int', 'out_channel'), ('bool', 'SAME')]"
1213,15,fp_maxpool,runs,"[('float *', 'output'), ('float *', 'input'), ('const int', 'kernel_size'), ('const int', 'size'), ('const int', 'n_size'), ('const int', 'in_channel'), ('bool', 'SAME')]"
1213,16,bp_maxpool,runs,"[('float *', 'd_preact'), ('float *', 'preact'), ('float *', 'p_output'), ('float *', 'nd_output'), ('const int', 'kernel_size'), ('const int', 'size'), ('const int', 'n_size'), ('const int', 'in_channel'), ('bool', 'SAME')]"
1213,17,bp_output_fc,runs,"[('float *', 'd_output'), ('float *', 'd_preact'), ('float *', 'weight'), ('const int', 'size'), ('const int', 'in_channel'), ('const int', 'out_channel')]"
1213,18,sumGrad,runs,"[('float *', 'output'), ('float *', 'input1'), ('float *', 'input2'), ('float *', 'input3'), ('float *', 'input4'), ('const int', 'numElem')]"
1213,22,calcLoss,runs,"[('float *', 'err'), ('float *', 'output'), ('unsigned int', 'Y'), ('const int', 'N')]"
1213,24,concat,runs,"[('float *', 'output'), ('float *', 'input1'), ('float *', 'input2'), ('float *', 'input3'), ('float *', 'input4'), ('const int', 'size'), ('const int', 'in_channel1'), ('const int', 'in_channel2'), ('const int', 'in_channel3'), ('const int', 'in_channel4')]"
1213,25,decat,runs,"[('float *', 'input'), ('float *', 'output1'), ('float *', 'output2'), ('float *', 'output3'), ('float *', 'output4'), ('const int', 'size'), ('const int', 'out_channel1'), ('const int', 'out_channel2'), ('const int', 'out_channel3'), ('const int', 'out_channel4')]"
1213,26,fp_conv,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'weight'), ('const int', 'kernel_size'), ('const int', 'size'), ('const int', 'n_size'), ('const int', 'in_channel'), ('const int', 'out_channel'), ('bool', 'SAME')]"
1213,27,fp_bias_conv,runs,"[('float *', 'preact'), ('float *', 'bias'), ('const int', 'size'), ('const int', 'n_channel')]"
1213,28,fp_preact_fc,runs,"[('float *', 'input'), ('float *', 'preact'), ('float *', 'weight'), ('const int', 'size'), ('const int', 'in_channel'), ('const int', 'out_channel')]"
1213,29,fp_bias_fc,runs,"[('float *', 'preact'), ('float *', 'bias'), ('const int', 'n_channel')]"
1213,30,bp_weight_fc,runs,"[('float *', 'd_weight'), ('float *', 'd_preact'), ('float *', 'p_output'), ('const int', 'size'), ('const int', 'in_channel'), ('const int', 'out_channel')]"
1213,32,bp_output_conv,runs,"[('float *', 'd_output'), ('float *', 'weight'), ('float *', 'nd_preact'), ('const int', 'size'), ('const int', 'kernel_size'), ('const int', 'n_size'), ('const int', 'in_channel'), ('const int', 'out_channel'), ('bool', 'CONV'), ('bool', 'SAME')]"
1213,34,bp_weight_conv,runs,"[('float *', 'd_weight'), ('float *', 'd_preact'), ('float *', 'p_output'), ('const int', 'kernel_size'), ('const int', 'size'), ('const int', 'n_size'), ('const int', 'in_channel'), ('const int', 'out_channel'), ('bool', 'SAME')]"
1213,36,fp_maxpool,runs,"[('float *', 'output'), ('float *', 'input'), ('const int', 'kernel_size'), ('const int', 'size'), ('const int', 'n_size'), ('const int', 'in_channel'), ('bool', 'SAME')]"
1213,37,bp_maxpool,runs,"[('float *', 'd_preact'), ('float *', 'preact'), ('float *', 'p_output'), ('float *', 'nd_output'), ('const int', 'kernel_size'), ('const int', 'size'), ('const int', 'n_size'), ('const int', 'in_channel'), ('bool', 'SAME')]"
1213,38,bp_output_fc,runs,"[('float *', 'd_output'), ('float *', 'd_preact'), ('float *', 'weight'), ('const int', 'size'), ('const int', 'in_channel'), ('const int', 'out_channel')]"
1213,39,concat,runs,"[('float *', 'input1'), ('float *', 'input2'), ('float *', 'input3'), ('float *', 'input4'), ('size_t', 'num1'), ('size_t', 'num2'), ('size_t', 'num3'), ('size_t', 'num4'), ('size_t', 'maxNum'), ('float *', 'output'), ('const int', 'numPerBatch')]"
1213,40,decat,runs,"[('float *', 'output1'), ('float *', 'output2'), ('float *', 'output3'), ('float *', 'output4'), ('size_t', 'num1'), ('size_t', 'num2'), ('size_t', 'num3'), ('size_t', 'num4'), ('size_t', 'maxNum'), ('float *', 'input'), ('const int', 'numPerBatch')]"
1213,41,sumGrad,runs,"[('float *', 'input1'), ('float *', 'input2'), ('float *', 'input3'), ('float *', 'input4'), ('float *', 'output'), ('const int', 'numElem')]"
1213,42,FillOnes,runs,"[('float *', 'vec'), ('int', 'size')]"
1213,43,SoftmaxLossBackprop,runs,"[('const float *', 'label'), ('int', 'num_labels'), ('int', 'batch_size'), ('float *', 'diff')]"
12139,33,sync_conv_groups,runs,[]
12143,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
12143,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
12150,0,pow_array_gpu,runs,"[('float *', 'a'), ('int', 'power'), ('int', 'array_size')]"
12150,1,pow_array_gpu,runs,"[('float *', 'a'), ('int', 'power'), ('int', 'array_size')]"
12150,2,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
12150,4,addPermutations,runs,"[('double *', 'determinant'), ('double *', 'permutations'), ('int *', 'n')]"
12150,7,addRows,runs,"[('double *', 'matrix'), ('int *', 'd_i')]"
12150,8,multiplyDet,runs,"[('double *', 'matrix'), ('double *', 'determinant'), ('int *', 'n')]"
12150,9,reduce_max_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_logLum'), ('int', 'size')]"
12150,10,pow_array_gpu,runs,"[('float *', 'a'), ('int', 'power'), ('int', 'array_size')]"
12150,11,pow_array_gpu,runs,"[('float *', 'a'), ('int', 'power'), ('int', 'array_size')]"
12150,12,square_array,runs,"[('float *', 'a'), ('int', 'array_size')]"
12156,1,find_advection_point_location_cuda,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'xadv'), ('double *', 'yadv'), ('unsigned int', 'nx'), ('unsigned int', 'ny'), ('unsigned int *', 'cellx'), ('unsigned int *', 'celly'), ('unsigned int *', 'tracker'), ('double', 'xlim1'), ('double', 'xlim2'), ('double', 'ylim1'), ('double', 'ylim2'), ('unsigned int', 'TileSize')]"
12156,3,update_mixed_derivatives,runs,"[('double *', 'temppsix'), ('double *', 'temppsiy'), ('double *', 'temppsixy'), ('unsigned int', 'nx'), ('unsigned int', 'ny'), ('double', 'dx'), ('double', 'dy'), ('unsigned int', 'TileSize')]"
12156,4,devicetodevicecopy,runs,"[('double *', 'dphi'), ('double *', 'dpsix'), ('double *', 'dpsiy'), ('double *', 'mphi'), ('double *', 'mpsix'), ('double *', 'mpsiy'), ('unsigned int', 'nx'), ('unsigned int', 'TileSize')]"
12167,0,vadd,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
1217,2,generate_sources,runs,"[('curandState *', 'state'), ('int', 'n'), ('uint32_t *', 'verts')]"
1217,3,generate_destinations,runs,"[('curandState *', 'state'), ('int', 'n'), ('const uint32_t *', 'sources'), ('uint32_t *', 'destinations')]"
12175,1,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
12176,79,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
12176,83,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
12179,35,gSetSparse,runs,"[('float *', 'out'), ('const size_t *', 'indices'), ('const float *', 'values'), ('int', 'length')]"
12179,42,gMaxPoolingForward,runs,"[('float *', 'out'), ('int', 'outRows'), ('int', 'outCols'), ('float *', 'in'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
12179,43,gMaxPoolingBackward,runs,"[('float *', 'adj'), ('int', 'adjRows'), ('int', 'adjCols'), ('float *', 'in'), ('float *', 'adjIn'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
12179,46,gGetValueByKey,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('int *', 'indeces'), ('int', 'n')]"
12179,49,gScatterAdd,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
12179,50,gScatterUpdate,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
12179,51,gGather,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
12192,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12192,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
12192,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12192,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12192,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12192,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12192,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
12192,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
12192,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
12192,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
12192,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
12192,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
12192,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
12192,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
12192,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
12192,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
12192,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
12202,0,MatrixMulKernel,runs,"[('int', 'ARows'), ('int', 'ACols'), ('int', 'BRows'), ('int', 'BCols'), ('int', 'CRows'), ('int', 'CCols'), ('unsigned int *', 'A_d'), ('unsigned int *', 'B_d'), ('unsigned int *', 'C_d')]"
12202,1,matrixTranspose,runs,"[('unsigned int *', 'A_d'), ('unsigned int *', 'T_d'), ('int', 'rowCount'), ('int', 'colCount')]"
12202,2,matrixTranspose,runs,"[('unsigned int *', 'A_d'), ('unsigned int *', 'T_d'), ('int', 'n')]"
12202,3,vecAdd,runs,"[('unsigned int *', 'A_d'), ('unsigned int *', 'B_d'), ('unsigned int *', 'C_d'), ('int', 'WORK_SIZE')]"
1221,0,kernel_add_wavelet,runs,"[('float *', 'd_u'), ('float *', 'd_wavelet'), ('int', 'it')]"
12214,0,generate,runs,"[('float *', 'output'), ('float', 'trunk'), ('int', 'n_particle')]"
12214,16,_gather,runs,"[('const float *', 'input'), ('const int *', 'indices'), ('float *', 'output'), ('const int', 'n')]"
12214,28,copy,runs,"[('float *', 'v4'), ('const float *', 'v3'), ('const int', 'n')]"
12214,62,exclscnmb2e,runs,"[('int *', 'd_data0'), ('int *', 'd_output0'), ('int *', 'd_data1'), ('int *', 'd_output1'), ('int *', 'd_data2'), ('int *', 'd_output2'), ('int *', 'd_data3'), ('int *', 'd_output3'), ('int *', 'd_data4'), ('int *', 'd_output4'), ('int *', 'd_data5'), ('int *', 'd_output5'), ('int *', 'd_data6'), ('int *', 'd_output6'), ('int *', 'd_data7'), ('int *', 'd_output7')]"
12219,0,CuDeviceArrayCopyFromTexture,runs,"[('float3 *', 'dst'), ('int', 'dstStep'), ('int', 'width'), ('int', 'height')]"
12222,1,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
12222,2,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
12224,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
12224,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
12224,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
12224,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
12224,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
12224,349,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
12224,354,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
12242,7,emptyKernel,runs,[]
12247,1,MxM_naive,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('const int', 'N')]"
12252,0,golGpu,runs,"[('int', 'height'), ('int', 'width'), ('unsigned char *', 'pBuffer1'), ('unsigned char *', 'pBuffer2')]"
1227,2,mat_mult_kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'mat_rows'), ('int', 'mat_cols')]"
1227,4,mat_mult_transposed_kernel,runs,"[('int *', 'mat_a'), ('int *', 'mat_b'), ('int *', 'res')]"
1227,5,mat_transpose_coalesced_kernel,runs,"[('int *', 'mat'), ('int *', 'res')]"
1227,6,mat_transpose_regular_kernel,runs,"[('int *', 'mat'), ('int *', 'res')]"
1227,7,mat_vec_mult_fixed_dims,runs,"[('int *', 'mat'), ('int *', 'vec'), ('int *', 'res')]"
1227,8,mat_mult_kernel,runs,"[('int *', 'mat_a'), ('int *', 'mat_b'), ('int *', 'result'), ('int', 'a_rows'), ('int', 'a_cols'), ('int', 'b_cols')]"
1227,10,mat_mult_fixed_dims_kernel,runs,"[('int *', 'mat_a'), ('int *', 'mat_b'), ('int *', 'res')]"
1227,11,sum_naive_kernel,runs,"[('int *', 'arr'), ('int', 'size'), ('int *', 'sum')]"
1227,12,sum_improved_atomic_kernel,runs,"[('int *', 'arr'), ('int', 'size'), ('int *', 'sum')]"
1227,13,block_sum_kernel,runs,"[('int *', 'arr'), ('int', 'size'), ('int *', 'block_sums')]"
1227,14,mat_mult_fixed_dims_trans_kernel,runs,"[('int *', 'mat_a'), ('int *', 'mat_b'), ('int *', 'res')]"
1227,17,check_done_kernel,runs,"[('bool *', 'mask'), ('int', 'num_vtx'), ('bool *', 'finished')]"
1227,18,init_sssp_data,runs,"[('bool *', 'd_mask'), ('int *', 'd_dists'), ('int *', 'd_update_dists'), ('const int', 'source'), ('const int', 'num_vtx')]"
1227,19,get_dists_kernel,runs,"[('const int *', 'beg_pos'), ('const int *', 'adj_list'), ('const int *', 'weights'), ('bool *', 'mask'), ('int *', 'dists'), ('int *', 'update_dists'), ('const int', 'num_vtx')]"
1227,20,update_dists_kernel,runs,"[('const int *', 'beg_pos'), ('const int *', 'adj_list'), ('const int *', 'weights'), ('bool *', 'mask'), ('int *', 'dists'), ('int *', 'update_dists'), ('const int', 'num_vtx')]"
1227,21,collective_dist_kernel,runs,"[('int *', 'dist'), ('int', 'rows'), ('int', 'cols'), ('double *', 'col_dist')]"
12285,0,sieveOfEratosthenesCUDA,runs,"[('char *', 'primes'), ('uint64_t', 'max')]"
12289,1,update_vb,runs,"[('float *', 'd_verts_ptr'), ('int', 'vertex_count'), ('float', 'timeElapsed')]"
123,2,computePdKernel,runs,"[('double *', 'particle_pd'), ('int', 'particles_per_feature'), ('int', 'n_features'), ('double *', 'feature_pd')]"
123,9,expandKernel,runs,"[('double *', 'values'), ('int', 'n_original'), ('int', 'factor'), ('double *', 'expanded')]"
123,11,resampleFeaturesKernel,runs,"[('double *', 'u'), ('double *', 'v'), ('double *', 'd'), ('double *', 'vu'), ('double *', 'vv'), ('double *', 'vd'), ('double *', 'weights'), ('double *', 'randvals'), ('int', 'n_features'), ('double *', 'u_sampled'), ('double *', 'v_sampled'), ('double *', 'd_sampled'), ('double *', 'vu_sampled'), ('double *', 'vv_sampled'), ('double *', 'vd_sampled')]"
12305,36,sync_conv_groups,runs,[]
1231,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
1231,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
1231,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
1231,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
1231,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
1231,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
1231,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
1231,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
1231,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
1231,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
1231,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
1231,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
1231,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
1231,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
1231,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
1231,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
1231,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
12317,0,add32,runs,"[('float *', 'A'), ('float *', 'B'), ('int', 'size')]"
12317,1,testMemset,runs,"[('float *', 'array'), ('float', 'value'), ('int', 'N')]"
1232,0,device_only_copy,runs,"[('float *', 'output'), ('float *', 'input'), ('size_t', 'total_size')]"
1232,1,device_apply_scale,runs,"[('float *', 'coords'), ('float', 'scale'), ('size_t', 'total_size')]"
1232,2,recenter_2D,runs,"[('float *', 'coords'), ('size_t', 'dim_y'), ('size_t', 'dim_x')]"
1232,3,recenter_3D,runs,"[('float *', 'coords'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x')]"
1232,4,flip_2D,runs,"[('float *', 'coords'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('int', 'do_y'), ('int', 'do_x')]"
1232,5,flip_3D,runs,"[('float *', 'coords'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('int', 'do_z'), ('int', 'do_y'), ('int', 'do_x')]"
1232,6,translate_3D,runs,"[('float *', 'coords'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('float', 'seg_z'), ('float', 'seg_y'), ('float', 'seg_x')]"
1232,7,translate_2D,runs,"[('float *', 'coords'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('float', 'seg_y'), ('float', 'seg_x')]"
1232,8,rotate_2D,runs,"[('float *', 'coords'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('float', 'cos_angle'), ('float', 'sin_angle')]"
1232,9,rotate_3D,runs,"[('float *', 'coords'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('float *', 'rot_matrix')]"
1232,10,scale_random,runs,"[('float *', 'random'), ('size_t', 'total_size')]"
1232,11,plus_offsets,runs,"[('float *', 'coords'), ('float *', 'random'), ('size_t', 'total_size'), ('float', 'alpha')]"
1232,12,gussain_filter_x,runs,"[('float *', 'random'), ('float *', 'kernel'), ('int', 'lw'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('int', 'mode'), ('float', 'cval')]"
1232,13,gussain_filter_y,runs,"[('float *', 'random'), ('float *', 'kernel'), ('int', 'lw'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('int', 'mode'), ('float', 'cval')]"
1232,14,gussain_filter_z,runs,"[('float *', 'random'), ('float *', 'kernel'), ('int', 'lw'), ('size_t', 'dim_z'), ('size_t', 'dim_y'), ('size_t', 'dim_x'), ('int', 'mode'), ('float', 'cval')]"
1232,15,set_coords_2D,runs,"[('float *', 'coords'), ('size_t', 'y'), ('size_t', 'x')]"
1232,16,set_coords_3D,runs,"[('float *', 'coords'), ('size_t', 'z'), ('size_t', 'y'), ('size_t', 'x')]"
12331,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
12343,27,sync_conv_groups,runs,[]
12348,0,cuda_cmp_kernel,runs,"[('std::size_t', 'n'), ('int *', 'aptr'), ('int *', 'bptr'), ('int *', 'rptr')]"
12351,36,sync_conv_groups,runs,[]
12356,36,sync_conv_groups,runs,[]
12368,76,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
12368,80,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1237,10,bitonic_sort_step,runs,"[('float *', 'dev_values'), ('int', 'j'), ('int', 'k')]"
12372,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
12372,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
12372,2,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
12372,3,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
12372,4,indices,runs,[]
12372,7,func,runs,[]
12372,8,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
12372,9,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
12372,10,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
12372,11,func,runs,[]
12372,13,func,runs,[]
1238,0,transponer,runs,"[('float *', 'entrada'), ('float *', 'salida'), ('int', 'ANCHO')]"
1238,2,vecAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1238,7,mikernel,runs,[]
1239,0,stencil_no_shared,runs,"[('int *', 'in'), ('int *', 'out')]"
1239,1,stencil_shared,runs,"[('int *', 'in'), ('int *', 'out')]"
1239,2,stencil_no_sync,runs,"[('int *', 'in'), ('int *', 'out')]"
1239,3,stencil_sync,runs,"[('int *', 'in'), ('int *', 'out')]"
12390,0,addKernel,runs,"[('int *', 'tid_c'), ('int *', 'tid_total')]"
12391,0,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
12391,3,blend_kernel,runs,"[('float *', 'outSrc'), ('const float *', 'inSrc')]"
12391,4,copy_const_kernel,runs,"[('float *', 'iptr'), ('const float *', 'cptr')]"
12392,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
12392,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1240,4,correctBounds,runs,"[('double *', 'd_ub'), ('double *', 'd_lb'), ('int', 'nRxns'), ('double *', 'd_prevPoint'), ('double', 'alpha'), ('double', 'beta'), ('double *', 'd_centerPoint'), ('double *', 'points'), ('int', 'pointsPerFile'), ('int', 'pointCount'), ('int', 'index')]"
1240,5,reprojectPoint,runs,"[('double *', 'd_N'), ('int', 'nRxns'), ('int', 'istart'), ('double *', 'd_umat'), ('double *', 'points'), ('int', 'pointsPerFile'), ('int', 'pointCount'), ('int', 'index')]"
1240,6,reprojectPoint2,runs,"[('double *', 'd_N'), ('int', 'nRxns'), ('int', 'istart'), ('double *', 'd_umat'), ('double *', 'points'), ('int', 'pointsPerFile'), ('int', 'pointCount'), ('int', 'index')]"
1240,7,findMaxAbs,runs,"[('int', 'nRxns'), ('double *', 'd_umat2'), ('int', 'nMets'), ('int *', 'd_rowVec'), ('int *', 'd_colVec'), ('double *', 'd_val'), ('int', 'nnz'), ('double *', 'points'), ('int', 'pointsPerFile'), ('int', 'pointCount'), ('int', 'index')]"
1240,8,advNextStep,runs,"[('double *', 'd_prevPoint'), ('double *', 'd_umat'), ('double', 'd_stepDist'), ('int', 'nRxns'), ('double *', 'points'), ('int', 'pointsPerFile'), ('int', 'pointCount'), ('int', 'index')]"
12400,7,refine_dilateFPPlaneDepthMapXpYp_kernel,runs,"[('float *', 'fpPlaneDepthMap'), ('int', 'fpPlaneDepthMap_p'), ('float *', 'maskMap'), ('int', 'maskMap_p'), ('int', 'width'), ('int', 'height'), ('int', 'xp'), ('int', 'yp'), ('float', 'fpPlaneDepth')]"
12400,16,refine_computeBestDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float3 *', 'isims'), ('int', 'isims_p'), ('float3 *', 'idpts'), ('int', 'idpts_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
12400,17,refine_fuseThreeDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float *', 'isimLst'), ('int', 'isimLst_p'), ('float *', 'idptLst'), ('int', 'idptLst_p'), ('float *', 'isimAct'), ('int', 'isimAct_p'), ('float *', 'idptAct'), ('int', 'idptAct_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
12400,79,generateGaussian_kernel,runs,"[('float *', 'og'), ('float', 'delta'), ('int', 'radius')]"
12401,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
12401,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
12401,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
12401,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
12401,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
12402,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
12405,0,copy_u2l_dense,runs,"[('double *', 'ret'), ('int', 'dim'), ('int', 'N')]"
12405,1,relu,runs,"[('double *', 'A'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen')]"
12405,2,relu_backward,runs,"[('double *', 'X'), ('double *', 'dout'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen')]"
12405,3,bias_add,runs,"[('double *', 'input'), ('double *', 'bias'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen'), ('int', 'PQ')]"
12405,4,daxpy_matrix_vector,runs,"[('double *', 'A'), ('double *', 'B'), ('double', 'alpha'), ('double *', 'ret'), ('int', 'rlenA'), ('int', 'clenA'), ('int', 'rlenB'), ('int', 'clenB')]"
12405,5,bias_multiply,runs,"[('double *', 'input'), ('double *', 'bias'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen'), ('int', 'PQ')]"
12405,6,compare_and_set,runs,"[('double *', 'A'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen'), ('double', 'compareVal'), ('double', 'tol'), ('double', 'ifEqualsVal'), ('double', 'ifLessThanVal'), ('double', 'ifGreaterThanVal')]"
12405,9,fill,runs,"[('double *', 'A'), ('double', 'scalar'), ('int', 'lenA')]"
12405,24,matrix_exp,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,25,matrix_sqrt,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,26,matrix_round,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,27,matrix_abs,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,28,matrix_log,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,29,matrix_floor,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,30,matrix_ceil,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,31,matrix_sin,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,32,matrix_cos,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,33,matrix_tan,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,34,matrix_asin,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,35,matrix_acos,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,36,matrix_atan,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12405,37,matrix_sign,runs,"[('double *', 'A'), ('double *', 'C'), ('unsigned int', 'size')]"
12409,35,sync_conv_groups,runs,[]
12424,0,knapsackKernel,runs,"[('int *', 'profits'), ('int *', 'weights'), ('int *', 'f'), ('int', 'capacity'), ('int', 'i')]"
12424,1,knapsackKernel,runs,"[('int *', 'profits'), ('int *', 'weights'), ('int *', 'input_f'), ('int *', 'output_f'), ('int', 'capacity'), ('int', 'c_min'), ('int', 'k')]"
12424,2,knapsackKernel,runs,"[('int *', 'profits'), ('int *', 'weights'), ('int *', 'input_f'), ('int *', 'output_f'), ('int', 'capacity'), ('int', 'c_min'), ('int', 'k')]"
12424,3,warmUpGPU,runs,[]
12439,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
12439,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
12439,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
12439,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
12439,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
12439,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
12447,33,sync_conv_groups,runs,[]
12448,3,float_to_color,runs,"[('uchar4 *', 'pixels'), ('float *', 'in')]"
12460,25,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
1247,7,myset,runs,"[('unsigned long long *', 'p'), ('unsigned long long', 'v'), ('long long', 'n')]"
1247,31,generate_sources,runs,"[('curandState *', 'state'), ('int', 'n'), ('uint32_t *', 'verts')]"
1247,32,generate_destinations,runs,"[('curandState *', 'state'), ('int', 'n'), ('const uint32_t *', 'sources'), ('uint32_t *', 'destinations')]"
12471,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
12471,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
12471,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
12471,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
12471,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
12479,10,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
12479,11,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
12479,25,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12479,27,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12479,28,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12479,56,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
12479,57,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
12483,9,pack_left,runs,"[('const int', 'x'), ('const int', 'y'), ('const int', 'halo_depth'), ('double *', 'field'), ('double *', 'buffer'), ('const int', 'depth')]"
12483,10,pack_right,runs,"[('const int', 'x'), ('const int', 'y'), ('const int', 'halo_depth'), ('double *', 'field'), ('double *', 'buffer'), ('const int', 'depth')]"
12483,11,unpack_left,runs,"[('const int', 'x'), ('const int', 'y'), ('const int', 'halo_depth'), ('double *', 'field'), ('double *', 'buffer'), ('const int', 'depth')]"
12483,12,unpack_right,runs,"[('const int', 'x'), ('const int', 'y'), ('const int', 'halo_depth'), ('double *', 'field'), ('double *', 'buffer'), ('const int', 'depth')]"
12483,13,pack_top,runs,"[('const int', 'x'), ('const int', 'y'), ('const int', 'halo_depth'), ('double *', 'field'), ('double *', 'buffer'), ('const int', 'depth')]"
12483,14,pack_bottom,runs,"[('const int', 'x'), ('const int', 'y'), ('const int', 'halo_depth'), ('double *', 'field'), ('double *', 'buffer'), ('const int', 'depth')]"
12483,15,unpack_top,runs,"[('const int', 'x'), ('const int', 'y'), ('const int', 'halo_depth'), ('double *', 'field'), ('double *', 'buffer'), ('const int', 'depth')]"
12483,16,unpack_bottom,runs,"[('const int', 'x'), ('const int', 'y'), ('const int', 'halo_depth'), ('double *', 'field'), ('double *', 'buffer'), ('const int', 'depth')]"
12483,18,cheby_calc_u,runs,"[('const int', 'x_inner'), ('const int', 'y_inner'), ('const int', 'halo_depth'), ('const double *', 'p'), ('double *', 'u')]"
12483,20,set_chunk_data_vertices,runs,"[('int', 'x'), ('int', 'y'), ('int', 'halo_depth'), ('double', 'dx'), ('double', 'dy'), ('double', 'x_min'), ('double', 'y_min'), ('double *', 'vertex_x'), ('double *', 'vertex_y'), ('double *', 'vertex_dx'), ('double *', 'vertex_dy')]"
12483,21,set_chunk_data,runs,"[('int', 'x'), ('int', 'y'), ('double', 'dx'), ('double', 'dy'), ('double *', 'cell_x'), ('double *', 'cell_y'), ('double *', 'cell_dx'), ('double *', 'cell_dy'), ('double *', 'vertex_x'), ('double *', 'vertex_y'), ('double *', 'volume'), ('double *', 'x_area'), ('double *', 'y_area')]"
12483,22,field_summary,runs,"[('const int', 'x_inner'), ('const int', 'y_inner'), ('const int', 'halo_depth'), ('const double *', 'volume'), ('const double *', 'density'), ('const double *', 'energy0'), ('const double *', 'u'), ('double *', 'vol_out'), ('double *', 'mass_out'), ('double *', 'ie_out'), ('double *', 'temp_out')]"
12483,23,CuKnlSetField,runs,"[('double', 'xCells'), ('double', 'yCells'), ('double *', 'energy0'), ('double *', 'energy1')]"
12483,24,ppcg_init,runs,"[('const int', 'x_inner'), ('const int', 'y_inner'), ('const int', 'halo_depth'), ('const double', 'theta'), ('const double *', 'r'), ('double *', 'sd')]"
12483,25,ppcg_calc_ur,runs,"[('const int', 'x_inner'), ('const int', 'y_inner'), ('const int', 'halo_depth'), ('const double *', 'kx'), ('const double *', 'ky'), ('const double *', 'sd'), ('double *', 'u'), ('double *', 'r')]"
12483,26,ppcg_calc_sd,runs,"[('const int', 'x_inner'), ('const int', 'y_inner'), ('const int', 'halo_depth'), ('const double', 'alpha'), ('const double', 'beta'), ('const double *', 'r'), ('double *', 'sd')]"
12483,28,cg_init_k,runs,"[('const int', 'x_inner'), ('const int', 'y_inner'), ('const int', 'halo_depth'), ('const double *', 'w'), ('double *', 'kx'), ('double *', 'ky'), ('double', 'rx'), ('double', 'ry')]"
12483,32,cg_calc_p,runs,"[('const int', 'x_inner'), ('const int', 'y_inner'), ('const int', 'halo_depth'), ('const double', 'beta'), ('const double *', 'r'), ('double *', 'p')]"
12483,34,jacobi_init,runs,"[('const int', 'x_inner'), ('const int', 'y_inner'), ('const int', 'halo_depth'), ('const double *', 'density'), ('const double *', 'energy'), ('const double', 'rx'), ('const double', 'ry'), ('double *', 'kx'), ('double *', 'ky'), ('double *', 'u0'), ('double *', 'u'), ('const int', 'coefficient')]"
12483,35,jacobi_copy_u,runs,"[('const int', 'x_inner'), ('const int', 'y_inner'), ('const double *', 'src'), ('double *', 'dest')]"
12483,37,copy_u,runs,"[('const int', 'x_inner'), ('const int', 'y_inner'), ('const int', 'halo_depth'), ('const double *', 'src'), ('double *', 'dest')]"
12483,40,finalise,runs,"[('const int', 'x_inner'), ('const int', 'y_inner'), ('const int', 'halo_depth'), ('const double *', 'density'), ('const double *', 'u'), ('double *', 'energy')]"
12483,42,zero_buffer,runs,"[('const int', 'x'), ('const int', 'y'), ('double *', 'buffer')]"
12487,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
12487,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
12487,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
12487,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
12487,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
12489,1,add,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
12491,2,rgb_to_xyY,runs,"[('float *', 'd_r'), ('float *', 'd_g'), ('float *', 'd_b'), ('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float', 'delta'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
12491,3,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
12491,4,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
12494,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
12497,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
12497,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
12497,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
12497,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
12497,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
12499,2,ARR_ADDC,runs,"[('float *', 'result'), ('float *', 'in1'), ('float *', 'in2'), ('int', 'N')]"
1250,1,computeGrid,runs,"[('float *', 'read'), ('float *', 'write')]"
12506,0,MatrixMult,runs,"[('int', 'm'), ('int', 'n'), ('int', 'k'), ('double *', 'a'), ('double *', 'b'), ('double *', 'c')]"
12506,1,matrixMultiplySharedMem,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
1251,2,cuda_standarization,runs,"[('float *', 'data'), ('int', 'rows'), ('int', 'columns')]"
12526,0,multSquareMatrix,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'result'), ('int', 'n')]"
12526,1,mult_global,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'result'), ('int', 'n')]"
12526,2,mult_shared,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'result'), ('int', 'n')]"
1253,4,transposeNaive,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
12530,7,emptyKernel,runs,[]
12539,3,vsub,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
12539,4,vmul,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
12539,5,vdiv,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
12539,6,dummy,runs,[]
12544,0,rdiv_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,1,eq_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,2,norm2_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('float *', 'dx'), ('int', 'incx'), ('float', 'result')]"
12544,3,sigmoid_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,4,prod_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('float *', 'dx'), ('int', 'incx'), ('float', 'result')]"
12544,5,rsub_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,6,sub_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,7,tanh_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,8,floor_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,9,add_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,10,rdiv_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,11,abs_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,12,mul_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,13,ceil_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,14,exp_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,15,div_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,16,rdiv_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,17,neg_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,18,sub_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,19,neq_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,20,sign_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,21,rsub_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,22,add_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,23,sub_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,24,norm1_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('float *', 'dx'), ('int', 'incx'), ('float', 'result')]"
12544,25,exp_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,26,rsub_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,27,exp_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,28,div_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,29,mul_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,30,div_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,31,add_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,32,mul_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,33,log_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,34,sqrt_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,35,pow_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float', 'raise'), ('float *', 'result')]"
12544,36,rdiv_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,37,eq_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,39,norm2_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('double *', 'dx'), ('int', 'incx'), ('double', 'result')]"
12544,40,sigmoid_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,41,prod_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('double *', 'dx'), ('int', 'incx'), ('double', 'result')]"
12544,42,rsub_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,43,sub_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,44,tanh_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,45,floor_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,46,add_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,47,rdiv_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,48,abs_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,49,mul_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,50,ceil_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,51,exp_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,52,div_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,53,rdiv_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,54,neg_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,55,sub_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,56,neq_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,57,sign_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,58,rsub_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,59,add_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,60,sub_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('double', 'dx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,61,norm1_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('double *', 'dx'), ('int', 'incx'), ('double', 'result')]"
12544,62,exp_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,63,rsub_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('double', 'dx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,64,exp_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,65,div_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('double', 'dx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,66,mul_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,67,div_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,68,add_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('double', 'dx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,69,mul_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('double', 'dx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,70,log_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,71,sqrt_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,72,pow_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double', 'raise'), ('double *', 'result')]"
12544,122,uniform_float,runs,"[('int', 'n'), ('float', 'lower'), ('float', 'upper'), ('float *', 'result')]"
12544,183,uniform_double,runs,"[('int', 'n'), ('double', 'lower'), ('double', 'upper'), ('double *', 'result')]"
12544,195,rdiv_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,196,eq_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,197,norm2_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('float *', 'dx'), ('int', 'incx'), ('float', 'result')]"
12544,198,sigmoid_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,199,prod_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('float *', 'dx'), ('int', 'incx'), ('float', 'result')]"
12544,200,rsub_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,201,sub_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,202,tanh_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,203,floor_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,204,add_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,205,rdiv_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,206,abs_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,207,mul_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,208,ceil_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,209,exp_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,210,div_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,211,rdiv_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,212,neg_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,213,sub_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,214,neq_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,215,sign_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,216,rsub_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,217,add_float,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12544,218,sub_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,219,norm1_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('float *', 'dx'), ('int', 'incx'), ('float', 'result')]"
12544,220,exp_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,221,rsub_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,222,exp_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,223,div_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,224,mul_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,225,div_strided_float,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('float *', 'dx'), ('float *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('float *', 'result')]"
12544,226,add_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,227,mul_scalar_float,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,228,log_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,229,sqrt_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float *', 'result')]"
12544,230,pow_float,runs,"[('int', 'n'), ('int', 'idx'), ('float *', 'dy'), ('int', 'incy'), ('float', 'raise'), ('float *', 'result')]"
12544,231,rdiv_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('float', 'dx'), ('float *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,232,eq_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,234,norm2_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('double *', 'dx'), ('int', 'incx'), ('double', 'result')]"
12544,235,sigmoid_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,236,prod_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('double *', 'dx'), ('int', 'incx'), ('double', 'result')]"
12544,237,rsub_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,238,sub_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,239,tanh_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,240,floor_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,241,add_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,242,rdiv_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,243,abs_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,244,mul_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,245,ceil_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,246,exp_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,247,div_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,248,rdiv_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,249,neg_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,250,sub_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,251,neq_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,252,sign_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,253,rsub_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,254,add_double,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'b'), ('double *', 'sum')]"
12544,255,sub_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('double', 'dx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,256,norm1_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('double *', 'dx'), ('int', 'incx'), ('double', 'result')]"
12544,257,exp_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,258,rsub_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('double', 'dx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,259,exp_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,260,div_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('double', 'dx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,261,mul_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,262,div_strided_double,runs,"[('int', 'n'), ('int', 'xOffset'), ('int', 'yOffset'), ('double *', 'dx'), ('double *', 'dy'), ('int', 'incx'), ('int', 'incy'), ('double *', 'result')]"
12544,263,add_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('double', 'dx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,264,mul_scalar_double,runs,"[('int', 'n'), ('int', 'idx'), ('double', 'dx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,265,log_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,266,sqrt_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double *', 'result')]"
12544,267,pow_double,runs,"[('int', 'n'), ('int', 'idx'), ('double *', 'dy'), ('int', 'incy'), ('double', 'raise'), ('double *', 'result')]"
12549,0,convert_to_luv_gpu_kernel,runs,"[('unsigned char *', 'in_img'), ('float *', 'out_img'), ('int', 'cols'), ('int', 'rows'), ('bool', 'use_rgb')]"
12549,1,trianguler_convolution_gpu_kernel,runs,"[('float *', 'dev_I'), ('float *', 'dev_O'), ('float *', 'T0'), ('float *', 'T1'), ('float *', 'T2'), ('int', 'wd'), ('int', 'ht'), ('float', 'nrm'), ('float', 'p')]"
12549,2,lin2lin_resmpl_good_gpu_kernel,runs,"[('float *', 'dev_in_img'), ('float *', 'dev_out_img'), ('float *', 'dev_C0_tmp'), ('float *', 'dev_C1_tmp'), ('float *', 'dev_C2_tmp'), ('int', 'org_wd'), ('int', 'org_ht'), ('int', 'dst_wd'), ('int', 'dst_ht'), ('int', 'n_channels'), ('float', 'r'), ('int *', 'yas_const'), ('int *', 'ybs_const')]"
12549,3,lin2lin_resmpl_messy_gpu_kernel,runs,"[('float *', 'dev_in_img'), ('float *', 'dev_out_img'), ('float *', 'dev_C0_tmp'), ('float *', 'dev_C1_tmp'), ('float *', 'dev_C2_tmp'), ('int', 'org_wd'), ('int', 'org_ht'), ('int', 'dst_wd'), ('int', 'dst_ht'), ('int', 'n_channels'), ('float', 'r'), ('int', 'hn'), ('int', 'wn'), ('int', 'xbd0'), ('int', 'xbd1'), ('int', 'ybd0'), ('int', 'ybd1'), ('int *', 'xas_const'), ('int *', 'xbs_const'), ('float *', 'xwts_const'), ('int *', 'yas_const'), ('int *', 'ybs_const'), ('float *', 'ywts_const')]"
12549,4,int2lin_resmpl_good_gpu_kernel,runs,"[('float *', 'dev_in_img'), ('float *', 'dev_out_img'), ('float *', 'dev_C0_tmp'), ('float *', 'dev_C1_tmp'), ('float *', 'dev_C2_tmp'), ('int', 'org_wd'), ('int', 'org_ht'), ('int', 'dst_wd'), ('int', 'dst_ht'), ('int', 'n_channels'), ('float', 'r'), ('int *', 'yas_const'), ('int *', 'ybs_const')]"
12549,5,int2lin_resmpl_messy_gpu_kernel,runs,"[('float *', 'dev_in_img'), ('float *', 'dev_out_img'), ('float *', 'dev_C0_tmp'), ('float *', 'dev_C1_tmp'), ('float *', 'dev_C2_tmp'), ('int', 'org_wd'), ('int', 'org_ht'), ('int', 'dst_wd'), ('int', 'dst_ht'), ('int', 'n_channels'), ('float', 'r'), ('int', 'hn'), ('int', 'wn'), ('int', 'xbd0'), ('int', 'xbd1'), ('int', 'ybd0'), ('int', 'ybd1'), ('int *', 'xas_const'), ('int *', 'xbs_const'), ('float *', 'xwts_const'), ('int *', 'yas_const'), ('int *', 'ybs_const'), ('float *', 'ywts_const')]"
1255,2,end_coloring_mark,runs,[]
1255,50,permute_colors_kernel,runs,"[('int', 'num_rows'), ('int *', 'row_colors'), ('int *', 'color_permutation')]"
1255,51,reverse_colors_kernel,runs,"[('int', 'num_rows'), ('int', 'max_color'), ('int *', 'row_colors')]"
1255,79,profileLevelUp_kernel,runs,[]
1255,80,profileLevelDown_kernel,runs,[]
1255,81,profileLevelZero_kernel,runs,[]
1255,82,profilePhaseSetup_kernel,runs,[]
1255,83,profilePhaseSolve_kernel,runs,[]
1255,84,profilePhaseNone_kernel,runs,[]
1255,85,profileSubphaseMatrixColoring_kernel,runs,[]
1255,86,profileSubphaseSmootherSetup_kernel,runs,[]
1255,87,profileSubphaseFindAggregates_kernel,runs,[]
1255,88,profileSubphaseComputeRestriction_kernel,runs,[]
1255,89,profileSubphaseComputeCoarseA_kernel,runs,[]
1255,90,profileSubphaseNone_kernel,runs,[]
1255,91,profileSubphaseTruncateP_kernel,runs,[]
1256,4,hotspotOpt1,runs,"[('float *', 'p'), ('float *', 'tIn'), ('float *', 'tOut'), ('float', 'sdc'), ('int', 'nx'), ('int', 'ny'), ('int', 'nz'), ('float', 'ce'), ('float', 'cw'), ('float', 'cn'), ('float', 'cs'), ('float', 'ct'), ('float', 'cb'), ('float', 'cc')]"
1256,54,readGlobalMemoryCoalesced,runs,"[('float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
1256,55,readGlobalMemoryUnit,runs,"[('float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
1256,56,readLocalMemory,runs,"[('const float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
1256,57,writeGlobalMemoryCoalesced,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
1256,58,writeGlobalMemoryUnit,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
1256,59,writeLocalMemory,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
1256,75,BFS_kernel_warp,runs,"[('unsigned int *', 'levels'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('int', 'W_SZ'), ('int', 'CHUNK_SZ'), ('unsigned int', 'numVertices'), ('int', 'curr'), ('int *', 'flag')]"
1256,76,BFS_kernel_one_block,runs,"[('volatile unsigned int *', 'frontier'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('unsigned int', 'num_p_per_mp'), ('unsigned int', 'w_q_size')]"
1256,77,BFS_kernel_SM_block,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('unsigned int', 'num_p_per_mp'), ('unsigned int', 'w_q_size')]"
1256,80,Frontier_copy,runs,"[('unsigned int *', 'frontier'), ('unsigned int *', 'frontier2'), ('unsigned int *', 'frontier_length')]"
1256,81,BFS_kernel_one_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_mem')]"
1256,82,BFS_kernel_SM_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_mem')]"
1256,84,kernelUpdateBiases,runs,"[('float *', 'nabla_b'), ('float *', 'biases'), ('float', 'eta'), ('float', 'mini_batch_size')]"
1256,86,kernelUpdateNablaB,runs,"[('float *', 'nabla_b'), ('float *', 'delta_nabla_b')]"
1256,90,kernelBackprop3a,runs,"[('float *', 'delta_nabla_b'), ('int', 'b_off'), ('int', 'bound'), ('int', 'b_off_old'), ('float *', 'weights'), ('int', 'w_off_old')]"
1256,91,kernelBackprop3b,runs,"[('float *', 'delta_nabla_b'), ('int', 'b_off'), ('float *', 'zs')]"
1256,92,kernelBackprop1,runs,"[('float *', 'delta_nabla_w'), ('int', 'w_off'), ('float *', 'activations'), ('float *', 'delta_nabla_b'), ('int', 'b_off')]"
1256,94,kernelFeedForward1,runs,"[('float *', 'zs'), ('int', 'bound2'), ('float *', 'weights'), ('int', 'w_off'), ('float *', 'activations1')]"
1256,95,kernelFeedForward1b,runs,"[('float *', 'zs'), ('int', 'bound'), ('float *', 'weights'), ('int', 'w_off'), ('float *', 'activations')]"
1256,96,kernelFeedForward3,runs,"[('float *', 'zs'), ('float *', 'biases'), ('int', 'b_off'), ('float *', 'activations')]"
1256,97,kernelFeedForward2,runs,"[('float *', 'zs'), ('float *', 'biases'), ('int', 'b_off'), ('float *', 'activations')]"
1256,143,executeThirdLayer,runs,"[('float *', 'Layer3_Neurons_GPU'), ('float *', 'Layer3_Weights_GPU'), ('float *', 'Layer4_Neurons_GPU')]"
1256,144,executeFourthLayer,runs,"[('float *', 'Layer4_Neurons_GPU'), ('float *', 'Layer4_Weights_GPU'), ('float *', 'Layer5_Neurons_GPU')]"
1257,4,nothingKernel,runs,[]
1257,6,nothingKernel,runs,[]
1257,15,nothingKernel,runs,[]
1257,18,nothingKernel,runs,[]
12578,0,Subsample_Bilinear_uchar,runs,"[('unsigned char *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
12578,1,Subsample_Bilinear_uchar2,runs,"[('uchar2 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch2'), ('int', 'src_width'), ('int', 'src_height')]"
12578,2,Subsample_Bilinear_uchar4,runs,"[('uchar4 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
12578,3,Subsample_Bilinear_ushort,runs,"[('unsigned short *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
12578,4,Subsample_Bilinear_ushort2,runs,"[('ushort2 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch2'), ('int', 'src_width'), ('int', 'src_height')]"
12578,5,Subsample_Bilinear_ushort4,runs,"[('ushort4 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
12578,6,Thumbnail_uchar,runs,"[('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
12578,7,Thumbnail_uchar2,runs,"[('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
12578,8,Thumbnail_ushort,runs,"[('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
12578,9,Thumbnail_ushort2,runs,"[('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
12579,1,initialConditions,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('double *', 'mass')]"
12579,2,leapstep,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('double', 'dt')]"
12579,3,accel,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('double *', 'mass'), ('double', 'dt')]"
12579,4,accel_3_body,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('double *', 'mass'), ('double', 'dt')]"
12579,5,printstate,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz')]"
12579,7,leapstep,runs,"[('unsigned long', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('double', 'dt')]"
12579,14,initialConditions,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('double *', 'mass')]"
12579,15,leapstep,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('double', 'dt')]"
12579,17,accel_3_body,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('double *', 'mass'), ('double', 'dt')]"
12579,19,printstate,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('int', 'tnow')]"
12579,21,initialConditions,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('double *', 'mass')]"
12579,22,leapstep,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('double', 'dt')]"
12579,24,accel_3_body,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('double *', 'mass'), ('double', 'dt')]"
12579,26,printstate,runs,"[('int', 'n'), ('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'vx'), ('double *', 'vy'), ('double *', 'vz'), ('int', 'tnow')]"
12582,1,conv_vertical_naive_output,runs,"[('const int', 'n'), ('float *', 'y'), ('const float *', 'x'), ('const float *', 'w'), ('const int', 'iH'), ('const int', 'iW'), ('const int', 'kL')]"
12582,2,conv_vertical_naive_gradInput,runs,"[('const int', 'n'), ('float *', 'dx'), ('const float *', 'dy'), ('const float *', 'w'), ('const int', 'oH'), ('const int', 'oW'), ('const int', 'kL')]"
12582,3,conv_vertical_naive_gradParam,runs,"[('const int', 'n'), ('float *', 'dw'), ('const float *', 'x'), ('const float *', 'dy'), ('const int', 'kL'), ('const int', 'oH'), ('const int', 'oW')]"
12582,4,conv_vertical_naive_gradWeight,runs,"[('const int', 'n'), ('float *', 'y'), ('const float *', 'x'), ('const int', 'kL'), ('const int', 'iC')]"
12582,6,conv_horizontal_naive_output,runs,"[('const int', 'n'), ('float *', 'y'), ('const float *', 'x'), ('const float *', 'w'), ('const int', 'iH'), ('const int', 'iW'), ('const int', 'kL')]"
12582,7,conv_horizontal_naive_gradInput,runs,"[('const int', 'n'), ('float *', 'dx'), ('const float *', 'dy'), ('const float *', 'w'), ('const int', 'oH'), ('const int', 'oW'), ('const int', 'kL')]"
12582,8,conv_horizontal_naive_gradParam,runs,"[('const int', 'n'), ('float *', 'dw'), ('const float *', 'x'), ('const float *', 'dy'), ('const int', 'kL'), ('const int', 'oH'), ('const int', 'oW')]"
12582,9,conv_horizontal_naive_gradWeight,runs,"[('const int', 'n'), ('float *', 'y'), ('const float *', 'x'), ('const int', 'kL'), ('const int', 'iC')]"
12594,9,calculateGaussianKernel,runs,"[('float *', 'gaussKernel'), ('const float', 'sigma'), ('int', 'halfKernelWidth')]"
126,0,spinKernel,runs,[]
126,1,pw_biasAdd,runs,"[('float *', 'y'), ('float *', 'bias'), ('int', 'n'), ('int', 'nBias')]"
126,2,pw_vecAdd,runs,"[('float *', 'y'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
126,3,pw_vecMul,runs,"[('float *', 'y'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
126,4,pw_tanh,runs,"[('float *', 'y'), ('float *', 'a'), ('int', 'n')]"
126,7,init_data_kernel,runs,"[('int', 'n'), ('double *', 'x')]"
126,8,daxpy_kernel,runs,"[('int', 'n'), ('double', 'a'), ('double *', 'x'), ('double *', 'y')]"
126,9,check_results_kernel,runs,"[('int', 'n'), ('double', 'correctvalue'), ('double *', 'x')]"
126,10,init_data_kernel,runs,"[('int', 'n'), ('double *', 'x')]"
126,11,daxpy_kernel,runs,"[('int', 'n'), ('double', 'a'), ('double *', 'x'), ('double *', 'y')]"
126,12,check_results_kernel,runs,"[('int', 'n'), ('double', 'correctvalue'), ('double *', 'x')]"
126,36,staticReverse,runs,"[('int *', 'd'), ('int', 'n')]"
126,37,dynamicReverse,runs,"[('int *', 'd'), ('int', 'n')]"
126,38,kernel,runs,"[('float *', 'a'), ('int', 'offset')]"
126,39,copy,runs,"[('float *', 'odata'), ('const float *', 'idata')]"
126,40,copySharedMem,runs,"[('float *', 'odata'), ('const float *', 'idata')]"
126,41,transposeNaive,runs,"[('float *', 'odata'), ('const float *', 'idata')]"
126,42,transposeCoalesced,runs,"[('float *', 'odata'), ('const float *', 'idata')]"
126,43,transposeNoBankConflicts,runs,"[('float *', 'odata'), ('const float *', 'idata')]"
12604,3,test_num_vgpr_num_sgpr,runs,[]
12604,14,g,runs,[]
12606,0,CudaKernelTextureCubeStrobelight,runs,"[('char *', 'surface'), ('int', 'width'), ('int', 'height'), ('size_t', 'pitch'), ('int', 'face'), ('float', 't')]"
12606,2,CudaKernelHelloWorld,runs,"[('char *', 'a'), ('int *', 'b')]"
12609,1,check_if_unique,runs,"[('const unsigned *', 'keys'), ('unsigned *', 'is_unique'), ('size_t', 'kSize')]"
12609,3,prepare_indices,runs,"[('const unsigned', 'num_keys'), ('unsigned *', 'data')]"
12629,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
12629,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
12629,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
12629,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
12629,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
12638,0,kernel,runs,"[('int *', 'count_d'), ('float *', 'randomnums')]"
12639,8,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
12639,9,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
12639,23,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12639,25,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12639,26,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12639,44,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
12639,45,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
12639,49,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
12639,50,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
12639,52,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride')]"
1264,0,polynomial_expansion,runs,"[('float *', 'poly'), ('int', 'degree'), ('int', 'n'), ('float *', 'array')]"
12650,0,kernel_shared,runs,"[('int *', 'A'), ('int *', 'C'), ('int *', 'B'), ('int *', 'result')]"
12650,1,kernel,runs,"[('int *', 'A'), ('int *', 'C'), ('int *', 'B'), ('int *', 'result')]"
12667,36,sync_conv_groups,runs,[]
12673,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
12674,4,kernelF,runs,"[('const float *', 'd_xAx'), ('const float *', 'd_bx'), ('const float *', 'd_c'), ('float *', 'd_y')]"
12674,5,kernelGradf,runs,"[('const float *', 'd_x'), ('float *', 'd_grad'), ('float *', 'A'), ('float *', 'b'), ('const size_t', 'len')]"
12674,10,update2,runs,"[('float *', 'alphaMinusBeta_out'), ('const float *', 'rho'), ('const float *', 'yDotZ'), ('const float *', 'alpha')]"
12674,11,update3,runs,"[('float *', 'rho_out'), ('float *', 'H0_out'), ('const float *', 'yDotS'), ('const float *', 'yDotY')]"
12674,12,kernelF,runs,"[('const float *', 'd_xAx'), ('const float *', 'd_bx'), ('const float *', 'd_c'), ('float *', 'd_y')]"
12674,13,kernelGradf,runs,"[('const float *', 'd_x'), ('float *', 'd_grad'), ('float *', 'A'), ('float *', 'b'), ('const size_t', 'len')]"
12674,16,kernelF,runs,"[('const float *', 'd_x'), ('float *', 'd_y')]"
12674,17,kernelGradf,runs,"[('const float *', 'd_x'), ('float *', 'd_grad')]"
12680,0,gpu_monte_carlo,runs,"[('Real *', 'estimate'), ('curandState *', 'states'), ('int', 'trials')]"
12680,5,kernelAddConstant,runs,"[('int *', 'g_a'), ('const int', 'b')]"
12680,27,gpu_monte_carlo,runs,"[('float *', 'estimate'), ('curandState *', 'states')]"
12680,28,cal_pi,runs,"[('float *', 'sum'), ('int', 'nbin'), ('float', 'step'), ('int', 'nthreads'), ('int', 'nblocks')]"
12682,0,update_centroids,runs,"[('const sequence_t *', 'data'), ('sequence_t *', 'centroids'), ('unsigned int *', 'tmp_centroidCount'), ('unsigned int', 'numClusters')]"
12682,1,kmeans_kernel,runs,"[('const sequence_t *', 'data'), ('const sequence_t *', 'centroids'), ('int *', 'membership'), ('unsigned int *', 'tmp_centroidCount'), ('unsigned int', 'n'), ('unsigned int', 'numClusters')]"
12683,2,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor_t'), ('int', 'scale_factor_xy'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3'), ('int', 'd4')]"
12683,3,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor_t'), ('int', 'scale_factor_xy'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3'), ('int', 'd4')]"
12688,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
12692,1,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
12699,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
12701,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
12702,3,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
12702,5,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
12702,16,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
12702,17,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
12705,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
12705,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
12705,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
12705,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
12705,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
12708,0,init,runs,"[('int *', 'tab'), ('int', 'len')]"
12708,1,oneReduction,runs,"[('int *', 'tab'), ('int', 'len'), ('int', 'mod')]"
12708,3,oneMove,runs,"[('int *', 'tab'), ('int', 'dist'), ('int', 'pow'), ('int', 'blocksPerTask'), ('int', 'period')]"
12708,4,prefixSum,runs,"[('int *', 'input_T'), ('int *', 'prefix_T'), ('int *', 'prefix_helper_T'), ('int', 'n'), ('int', 'k'), ('int', 'blockPower')]"
12708,5,replace,runs,"[('int *', 'input_T'), ('int *', 'output_T'), ('int *', 'prefix_T'), ('int *', 'prefix_helper_T'), ('int', 'n'), ('int', 'k'), ('int', 'blockPower')]"
12709,0,matMul_CUDA_double,runs,"[('double *', 'sum'), ('int', 'size'), ('double *', 'vector1'), ('double *', 'vector2')]"
12709,1,matMul_CUDA_float,runs,"[('float *', 'sum'), ('int', 'size'), ('float *', 'vector1'), ('float *', 'vector2')]"
12709,2,gpu_monte_carlo,runs,"[('float *', 'estimate'), ('curandState *', 'states')]"
12709,3,cal_pi,runs,"[('float *', 'sum'), ('int', 'nbin'), ('float', 'step'), ('int', 'nthreads'), ('int', 'nblocks')]"
12709,5,gpu_monte_carlo,runs,"[('float *', 'estimate'), ('curandState *', 'states')]"
12709,6,gpu_monte_carlo_d,runs,"[('double *', 'estimate'), ('curandState *', 'states')]"
12709,7,gpu_monte_carlo,runs,"[('float *', 'estimate'), ('curandState *', 'states')]"
12709,8,gpu_monte_carlo_d,runs,"[('double *', 'estimate'), ('curandState *', 'states')]"
12709,9,gpu_monte_carlo,runs,"[('float *', 'estimate'), ('curandState *', 'states')]"
12709,10,gpu_monte_carlo_d,runs,"[('double *', 'estimate'), ('curandState *', 'states')]"
12709,13,gpu_monte_carlo_curand,runs,"[('float *', 'estimate'), ('curandState *', 'states')]"
12709,14,gpu_monte_carlo_curand_d,runs,"[('double *', 'estimate'), ('curandState *', 'states')]"
12709,15,cal_pi,runs,"[('float *', 'sum'), ('int', 'nbin'), ('float', 'step'), ('int', 'nthreads'), ('int', 'nblocks')]"
12709,16,cal_pi_d,runs,"[('double *', 'sum'), ('int', 'nbin'), ('double', 'step'), ('int', 'nthreads'), ('int', 'nblocks')]"
12709,19,cal_pi,runs,"[('float *', 'sum'), ('int', 'nbin'), ('float', 'step'), ('int', 'nthreads'), ('int', 'nBLOCKS')]"
12709,20,cal_pi_d,runs,"[('double *', 'sum'), ('int', 'nbin'), ('double', 'step'), ('int', 'nthreads'), ('int', 'nBLOCKS')]"
12709,21,gpu_monte_carlo,runs,"[('float *', 'estimate'), ('curandState *', 'states')]"
12709,22,gpu_monte_carlo_d,runs,"[('double *', 'estimate'), ('curandState *', 'states')]"
12709,23,dotProduct_CUDA_double,runs,"[('double *', 'sum'), ('int', 'size'), ('double *', 'vector1'), ('double *', 'vector2')]"
12709,24,dotProduct_CUDA_float,runs,"[('float *', 'sum'), ('int', 'size'), ('float *', 'vector1'), ('float *', 'vector2')]"
12709,25,dotProduct_CUDA,runs,"[('double *', 'sum'), ('long', 'size'), ('double *', 'vector1'), ('double *', 'vector2')]"
12722,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
12722,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
12722,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
12722,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
12722,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
12739,13,gpu_setup_curand,runs,"[('uint64_t', 'seed'), ('curandState *', 'curand_states'), ('uint32_t', 'num_engines')]"
12741,8,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
12741,9,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
12741,23,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12741,25,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12741,26,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12741,44,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
12741,45,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
12741,49,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
12741,50,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
12741,52,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride'), ('int', 'paddingValue')]"
12746,0,sortRows,runs,"[('int *', 'image'), ('int', 'imageHeight'), ('int', 'imageWidth'), ('int', 'colorMode')]"
12746,1,optimizedSortRows,runs,"[('int *', 'image'), ('int', 'imageHeight'), ('int', 'imageWidth'), ('int', 'colorMode')]"
12749,0,GPUHeatContactFunction,runs,"[('float *', 'a'), ('float *', 'b'), ('int *', 'body')]"
12749,1,GPUTimeStepFunction,runs,"[('float *', 'a'), ('float *', 'b'), ('int *', 'body')]"
1275,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1275,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
12756,0,graphGenerate,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
12756,1,vectorAddition,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
12756,2,vectorValue,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
12756,3,vectorAddition,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
12756,4,matrixColour,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
12756,5,matrixColour,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
12756,7,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,8,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,9,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,10,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,11,randomColouring,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,12,conflictDetection,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm'), ('int *', 'detectConflict')]"
12756,13,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,15,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,16,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,17,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,18,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,19,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,20,randomColouring,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,21,conflictDetection,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm'), ('int *', 'detectConflict')]"
12756,22,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,24,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,25,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,26,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,27,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,28,randomColouring,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,29,conflictDetection,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm'), ('int *', 'detectConflict')]"
12756,30,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,33,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,34,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,35,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,38,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,39,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,40,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,41,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,43,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,44,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,45,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,49,decrementalColouringNew,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int', 'n'), ('int', 'm'), ('int *', 'decrementalArray'), ('int', 'size')]"
12756,54,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,55,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,56,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,59,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,60,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,61,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,66,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,67,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,68,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,74,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,75,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,76,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,81,decrementalColouringNew,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int', 'n'), ('int', 'm'), ('int *', 'decrementalArray'), ('int', 'size')]"
12756,86,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,87,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,88,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,92,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,93,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,94,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,98,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,99,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,100,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,106,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,107,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,108,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,113,decrementalColouringNew,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int', 'n'), ('int', 'm'), ('int *', 'decrementalArray'), ('int', 'size')]"
12756,118,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,119,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,120,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,122,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,123,randomColouring,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,124,conflictDetection,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm'), ('int *', 'detectConflict')]"
12756,125,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,128,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,129,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,130,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,132,decrementalColouringNew,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int', 'n'), ('int', 'm'), ('int *', 'decrementalArray'), ('int', 'size')]"
12756,137,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,138,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,139,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,144,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,145,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,146,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,147,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,148,randomColouring,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,149,conflictDetection,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm'), ('int *', 'detectConflict')]"
12756,150,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,152,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,153,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,154,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,156,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,157,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,158,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12756,160,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
12756,161,randomNumbering,runs,"[('curandState *', 'globalState'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'limit')]"
12756,162,degreeCalc,runs,"[('int *', 'vertexArray'), ('int *', 'neighbourArray'), ('int *', 'degreeCount'), ('int', 'n'), ('int', 'm')]"
12757,96,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
12757,97,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
12757,98,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
12757,99,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
12757,170,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
12763,35,sync_conv_groups,runs,[]
12764,1,kernelSetDoubleBuffer,runs,"[('float *', 'gpuBuffPtr'), ('float', 'v'), ('size_t', 'size')]"
12764,2,kernelProcessEventsBatchAsync,runs,"[('uint8_t *', 'gpuEventsX'), ('uint8_t *', 'gpuEventsY'), ('int', 'gpuEventListSize'), ('float *', 'gpuFilter'), ('int', 'fsx'), ('int', 'fsy'), ('int', 'fsz'), ('float *', 'gpuBuffer'), ('int', 'ringBufferIdx'), ('int', 'bsx'), ('int', 'bsy'), ('int', 'bsz'), ('int', 'fs_xy'), ('int', 'fn')]"
12764,3,kernelReadMotionEnergyAsync,runs,"[('float *', 'gpuConvBufferl1'), ('float *', 'gpuConvBufferl2'), ('int', 'ringBufferIdx'), ('int', 'bsx'), ('int', 'bsy'), ('int', 'n'), ('float *', 'gpuEnergyBuffer')]"
12764,4,kernelNormalizeMotionEnergyAsync,runs,"[('int', 'bsx'), ('int', 'bsy'), ('int', 'n'), ('float', 'alphaPNorm'), ('float', 'alphaQNorm'), ('float', 'betaNorm'), ('float', 'sigmaNorm'), ('float *', 'gpuEnergyBuffer')]"
12772,1,compress_file_gpu,runs,"[('unsigned char *', 'd_input'), ('bool *', 'compressedfile_array'), ('int *', 'char_huffman_table2'), ('int *', 'block_cntr_array'), ('int *', 'd_last_byte_padding'), ('int *', 'finalsize'), ('int *', 'orig_number_of_char'), ('int', 'number_of_char')]"
12776,4,Fprop1,runs,"[('const float *', 'in'), ('const float *', 'syn1'), ('float *', 'layer1')]"
12776,5,Fprop2,runs,"[('const float *', 'layer1'), ('const float *', 'syn2'), ('float *', 'out')]"
12776,6,Ecalc2,runs,"[('float *', 'out'), ('const float *', 'label')]"
12776,8,Bprop2,runs,"[('const float *', 'layer1'), ('float *', 'dsyn2'), ('const float *', 'out'), ('const float', 'alpha')]"
12776,10,Bprop1,runs,"[('const float *', 'in'), ('float *', 'dsyn1'), ('const float *', 'dlayer1'), ('const float', 'alpha')]"
12776,13,Fprop1,runs,"[('const float *', 'in'), ('const float *', 'syn1'), ('float *', 'layer1')]"
12776,14,Fprop2,runs,"[('const float *', 'layer1'), ('const float *', 'syn2'), ('float *', 'out')]"
12776,15,Ecalc2,runs,"[('float *', 'out'), ('const float *', 'label')]"
12776,17,Bprop2,runs,"[('const float *', 'layer1'), ('float *', 'dsyn2'), ('const float *', 'out'), ('const float', 'alpha')]"
12776,19,Bprop1,runs,"[('const float *', 'in'), ('float *', 'dsyn1'), ('const float *', 'dlayer1'), ('const float', 'alpha')]"
12776,21,Fprop1,runs,"[('const float *', 'in'), ('const float *', 'syn1'), ('float *', 'layer1')]"
12776,22,LSTM1,runs,"[('float *', 'layer1'), ('float *', 'lstm1'), ('const float *', 'gate1i'), ('const float *', 'gate1o'), ('const int', 'offset')]"
12776,23,FpropH,runs,"[('float *', 'layer1'), ('const float *', 'synH'), ('const int', 'offset')]"
12776,26,Fprop2,runs,"[('const float *', 'layer1'), ('const float *', 'syn2'), ('float *', 'out'), ('const int', 'offset')]"
12776,27,Ecalc2,runs,"[('float *', 'out'), ('const float *', 'label')]"
12776,29,Bprop2,runs,"[('const float *', 'out'), ('const float *', 'layer1'), ('float *', 'dsyn2'), ('const int', 'count'), ('const float', 'alpha')]"
12776,31,BpropH,runs,"[('const float *', 'layer1'), ('float *', 'dlayer1'), ('const float *', 'synH'), ('float *', 'dsynH'), ('const float', 'alpha'), ('const int', 'offset')]"
12776,33,Bprop1,runs,"[('const float *', 'dlayer1'), ('const float *', 'dlayer1i'), ('const float *', 'dlayer1o'), ('const float *', 'in'), ('float *', 'dsyn1'), ('float *', 'dsyn1i'), ('float *', 'dsyn1o'), ('const float', 'alpha')]"
12776,34,forwardPass1,runs,"[('float *', 'in'), ('float *', 'syn1'), ('float *', 'layer1')]"
12776,35,forwardPass2,runs,"[('float *', 'layer1'), ('float *', 'syn2'), ('float *', 'out')]"
12776,36,backProp2,runs,"[('float *', 'layer1'), ('float *', 'dsyn2'), ('float *', 'label'), ('float *', 'out')]"
12776,37,backProp1,runs,"[('float *', 'in'), ('float *', 'dsyn1'), ('float *', 'layer1'), ('float *', 'syn2'), ('float *', 'label'), ('float *', 'out')]"
12776,38,applyChanges,runs,"[('float *', 'syn'), ('float *', 'dsyn'), ('int', 'dim'), ('float', 'alpha')]"
1278,0,imageBlur,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'width'), ('int', 'height')]"
1278,1,sobelFilter,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'width'), ('int', 'height')]"
12782,1,KernelMM,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
12782,2,KernelMM,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
12782,3,KernelMM,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
12784,0,VectorAdd,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
12784,1,printHello,runs,[]
12784,2,DotProd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
12797,3,cunnx_WindowGate2_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'centroids'), ('float *', 'normalizedCentroids'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('const float *', 'input'), ('const float *', 'noise'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'windowStride'), ('int', 'train')]"
12797,4,cunnx_WindowGate2_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'error'), ('float *', 'targetCentroids'), ('const float *', 'centroids'), ('const float *', 'input'), ('const float *', 'inputIndice'), ('const float *', 'outputIndice'), ('const float *', 'output'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'windowStride'), ('float', 'c'), ('float', 'd'), ('float', 'e'), ('float', 'lr')]"
12797,6,cunnx_WindowSparse_accGradParameters_kernel,runs,"[('float *', 'gradWeight'), ('float *', 'gradBias'), ('float *', 'gradOutput'), ('float *', 'input'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'inputSize'), ('int', 'outputSize'), ('float', 'scale')]"
12797,7,cunnx_BlockSparse_updateOutput_kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('const float *', 'outputIndice'), ('const float *', 'outputScale'), ('const float *', 'bias'), ('int', 'outputSize'), ('int', 'nOutputBlock'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize')]"
12797,8,cunnx_BlockSparse_updateGradOutput_kernel,runs,"[('float *', '_gradOutput'), ('float *', 'gradOutputScale'), ('const float *', 'gradOutput'), ('const float *', 'output'), ('const float *', 'outputScale'), ('int', 'outputWindowSize'), ('int', 'outputSize')]"
12797,9,cunnx_BlockSparse_accGradParameters_kernel,runs,"[('float *', 'gradWeight'), ('float *', 'gradBias'), ('float *', 'gradOutput'), ('float *', 'input'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'nInputBlock'), ('int', 'nOutputBlock'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('float', 'scale')]"
12797,10,cunnx_WindowGate_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'centroids'), ('float *', 'normalizedCentroids'), ('float *', 'outputIndice'), ('const float *', 'input'), ('const float *', 'noise'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'outputWindowSize'), ('float', 'a'), ('float', 'b'), ('int', 'train')]"
12797,11,cunnx_WindowGate_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'error'), ('float *', 'targetCentroids'), ('const float *', 'centroids'), ('const float *', 'input'), ('const float *', 'outputIndice'), ('const float *', 'output'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'outputWindowSize'), ('float', 'c'), ('float', 'd'), ('float', 'e'), ('float', 'lr')]"
12797,13,cunnx_LazyKBest_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('const float *', 'indice'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize')]"
12807,0,searchWithCuda,runs,"[('double *', 'resultPossibilities'), ('char *', 'query'), ('char *', 'atribsValues'), ('double *', 'possibilities'), ('int *', 'queryPrefix'), ('int *', 'atribsPrefix'), ('int *', 'answersNumber'), ('int *', 'categoriesNumber'), ('int *', 'atribsNumber')]"
12814,35,sync_conv_groups,runs,[]
12828,0,vectorSum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
12828,2,matrixMultiply,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
12828,3,tileMatMul,runs,"[('float *', 'matA'), ('float *', 'matB'), ('float *', 'matC'), ('int', 'aRows'), ('int', 'aCols'), ('int', 'bRows'), ('int', 'bCols'), ('int', 'cRows'), ('int', 'cCols')]"
12830,8,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
12830,9,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
12830,23,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12830,25,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12830,26,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
12830,44,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
12830,45,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
12830,49,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
12830,50,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
12830,52,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride'), ('int', 'paddingValue')]"
12837,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
12837,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
12837,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
12837,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
12837,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
12841,1,reduce,runs,"[('Vec3f *', 'input'), ('Vec3f *', 'output')]"
12862,0,generateData,runs,"[('int', 'dimension'), ('int', 'rseed'), ('double *', 'rotation'), ('int', 'number_of_peaks'), ('double *', 'peak_values'), ('double *', 'x_local'), ('double *', 'arr_scales')]"
12862,14,kernelUpdateParticle,runs,"[('double *', 'positions'), ('double *', 'velocities'), ('double *', 'pBests'), ('double *', 'gBest'), ('int', 'particlesCount'), ('int', 'dimensionsCount'), ('double', 'r1'), ('double', 'r2')]"
12862,20,kernelUpdateParticle,runs,"[('double *', 'positions'), ('double *', 'velocities'), ('double *', 'pBests'), ('double *', 'gBest'), ('int', 'particlesCount'), ('int', 'dimensionsCount'), ('double', 'r1'), ('double', 'r2')]"
12862,26,kernelUpdateParticle,runs,"[('double *', 'positions'), ('double *', 'velocities'), ('double *', 'pBests'), ('double *', 'gBest'), ('int', 'particlesCount'), ('int', 'dimensionsCount'), ('double', 'r1'), ('double', 'r2')]"
12864,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
12867,1,cn_pnpoly_naive,runs,"[('int *', 'bitmap'), ('float2 *', 'points'), ('int', 'n')]"
12867,2,pnpoly_cnGPU,runs,"[('const float *', 'px'), ('const float *', 'py'), ('const float *', 'vx'), ('const float *', 'vy'), ('char *', 'cs'), ('int', 'npoint'), ('int', 'nvert')]"
12867,3,pnpoly_cnGPU1,runs,"[('const float *', 'px'), ('const float *', 'py'), ('const float *', 'vx'), ('const float *', 'vy'), ('char *', 'cs'), ('int', 'npoint'), ('int', 'nvert')]"
12867,4,pnpoly_cnGPU2,runs,"[('const float *', 'px'), ('const float *', 'py'), ('const float *', 'vx'), ('const float *', 'vy'), ('char *', 'cs'), ('int', 'npoint'), ('int', 'nvert')]"
12867,5,vectorAddGPU,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'N')]"
12867,6,pnpolyGPU,runs,"[('const float *', 'vertex'), ('float', 'testx'), ('float', 'testy'), ('int *', 'results')]"
12867,8,pnpoly_cnGPU,runs,"[('char *', 'cs'), ('const float *', 'px'), ('const float *', 'py'), ('const float *', 'vx'), ('const float *', 'vy'), ('int', 'npoint'), ('int', 'nvert')]"
12867,9,pnpoly_cnGPU1,runs,"[('const float *', 'px'), ('const float *', 'py'), ('const float *', 'vx'), ('const float *', 'vy'), ('char *', 'cs'), ('int', 'npoint'), ('int', 'nvert')]"
12867,10,pnpoly_cnGPU2,runs,"[('const float *', 'px'), ('const float *', 'py'), ('const float *', 'vx'), ('const float *', 'vy'), ('char *', 'cs'), ('int', 'npoint'), ('int', 'nvert')]"
12867,11,vectorAddGPU,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'N')]"
12868,1,calc_kernel,runs,"[('double *', 'w'), ('double *', 'r'), ('int', 'rows'), ('int', 'cols'), ('double', 'tolerance')]"
1287,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1287,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
12885,3,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
12885,5,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
12885,16,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
12885,17,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
129,6,entrySearch_max_int_kernel,runs,"[('int *', 'g_iarr'), ('int *', 'g_maxarr'), ('int', 'size')]"
129,205,init,runs,"[('int *', 'vector'), ('int', 'N'), ('int', 'val')]"
129,208,bin_start,runs,"[('int *', 'binStart'), ('int *', 'binEnd'), ('int *', 'partBin'), ('int', 'nparts')]"
12900,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
12901,0,funct,runs,"[('int', 'n'), ('int', 'k'), ('float *', 'x'), ('int *', 'qx')]"
12901,1,funct2,runs,"[('int', 'n'), ('int', 'k'), ('float *', 'x'), ('int *', 'qx')]"
12906,96,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
12906,97,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
12906,98,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
12906,99,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
12906,170,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
1291,0,computeMoment,runs,"[('int8_t *', 'readArr'), ('int8_t *', 'writeArr'), ('float *', 'weightArr'), ('int', 'n'), ('int', 'tileSize')]"
1291,1,computeMoment,runs,"[('int *', 'readArr'), ('int *', 'writeArr'), ('double *', 'weightArr'), ('int', 'n')]"
1291,2,computeMoment,runs,"[('int *', 'readArr'), ('int *', 'writeArr'), ('double *', 'weightArr'), ('int', 'n')]"
12917,0,matrixMultiplicationKernel,runs,"[('long *', 'A'), ('long *', 'B'), ('long *', 'C'), ('long', 'N')]"
12922,0,calc_histogram,runs,"[('int *', 'hist_out'), ('unsigned char *', 'img_in'), ('int', 'img_size'), ('int', 'nbr_bin')]"
12922,1,calc_lut,runs,"[('int *', 'lut'), ('int *', 'hist_in'), ('int', 'img_size'), ('int', 'nbr_bin')]"
12922,2,calc_output,runs,"[('unsigned char *', 'img_out'), ('unsigned char *', 'img_in'), ('int *', 'lut'), ('int', 'img_size')]"
12922,3,calc_histogram,runs,"[('int *', 'hist_out'), ('unsigned char *', 'img_in'), ('int', 'img_size'), ('int', 'nbr_bin')]"
12922,4,calc_lut,runs,"[('int *', 'lut'), ('int *', 'hist_in'), ('int', 'img_size'), ('int', 'nbr_bin')]"
12922,5,calc_output,runs,"[('unsigned char *', 'img_out'), ('unsigned char *', 'img_in'), ('int *', 'lut'), ('int', 'img_size')]"
12922,8,calc_output,runs,"[('unsigned char *', 'img_out'), ('unsigned char *', 'img_in'), ('int *', 'lut'), ('int', 'img_size')]"
12922,9,convolutionRowGPU,runs,"[('double *', 'h_Dst'), ('double *', 'h_Src'), ('double *', 'h_Filter'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'filterR')]"
12922,10,convolutionColumnGPU,runs,"[('double *', 'h_Dst'), ('double *', 'h_Src'), ('double *', 'h_Filter'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'filterR')]"
1293,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1293,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
12930,59,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
12930,63,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
12941,0,hello,runs,"[('char *', 'a'), ('int *', 'b')]"
12941,1,bitonicSort2,runs,"[('int *', 'inputArray'), ('const unsigned int', 'stage'), ('const unsigned int', 'passOfStage'), ('const unsigned int', 'width')]"
12941,2,bitonic_sort_step,runs,"[('unsigned int *', 'dev_values'), ('int', 'j'), ('int', 'k')]"
12941,3,CompressionKernel,runs,"[('int', 'dimensionalityd'), ('unsigned long long *', 'cbufd'), ('unsigned char *', 'dbufd'), ('int *', 'cutd'), ('int *', 'offd')]"
12941,4,DecompressionKernel,runs,"[('int', 'dimensionalityd'), ('unsigned char *', 'compressed_data_buffer_in'), ('int *', 'chunk_boundaries_buffer_in'), ('unsigned long long *', 'uncompressed_data_buffer_out')]"
12941,5,bit_reduce,runs,"[('const uint32_t *', 'input_array'), ('uint32_t *', 'intBuf')]"
12941,6,seq_compact,runs,"[('uint8_t *', 'intBuf'), ('const uint16_t', 'dataSize'), ('uint32_t *', 'sizeBuf')]"
12941,7,bit_reduce_count,runs,"[('const uint32_t *', 'input_array'), ('uint32_t *', 'intBuf'), ('uint32_t *', 'countBuf'), ('const uint16_t', 'dataCount')]"
12941,9,move,runs,"[('uint8_t *', 'buf'), ('uint32_t', 'dest'), ('uint32_t', 'source'), ('uint16_t', 'bytesEach'), ('const bool', 'wipe')]"
12942,0,add_gpu,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
12950,0,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
12958,0,sum,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('long long', 'N')]"
1296,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
1296,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1296,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1296,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
1296,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
1296,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
1296,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
1296,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
1296,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
1296,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1296,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
1296,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1296,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
1296,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
1296,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1296,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
1296,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1296,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
1296,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1296,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1296,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1296,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1296,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1296,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
1296,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1296,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1296,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1296,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1296,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1296,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1296,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1296,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1296,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1296,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1296,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1296,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1296,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1296,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
1296,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
1296,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
1296,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
1296,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1296,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1296,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1296,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1296,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1296,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1296,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
1296,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'out')]"
1296,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'out')]"
1296,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
1296,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1296,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
1296,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
1296,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
1296,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
1296,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
1296,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
1296,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
1296,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
1296,61,forward_softmax_layer_kernel,runs,"[('int', 'n'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
12965,0,findMatch_GPU,runs,"[('int32_t *', 'u_vals'), ('int32_t *', 'v_vals'), ('int32_t', 'size_total'), ('float *', 'planes_a'), ('float *', 'planes_b'), ('float *', 'planes_c'), ('int32_t *', 'disparity_grid'), ('int32_t *', 'grid_dims'), ('uint8_t *', 'I1_desc'), ('uint8_t *', 'I2_desc'), ('int32_t *', 'P'), ('int32_t', 'plane_radius'), ('int32_t', 'width'), ('int32_t', 'height'), ('bool *', 'valids'), ('bool', 'right_image'), ('float *', 'D')]"
12965,1,adaptiveMeanGPU8,runs,"[('float *', 'D'), ('int32_t', 'D_width'), ('int32_t', 'D_height')]"
1297,0,gpu_Heat,runs,"[('float *', 'u'), ('float *', 'utmp'), ('float *', 'residual'), ('int', 'N')]"
1297,1,gpu_HeatReduction,runs,"[('float *', 'res'), ('float *', 'result')]"
12973,1,elementMulMatrixKernel,runs,"[('double *', 'dev_w'), ('const double *', 'dev_U'), ('const double *', 'dev_V'), ('unsigned int', 'index_row_i'), ('unsigned int', 'index_column_j'), ('unsigned int', 'dim1_U'), ('unsigned int', 'dim1_V')]"
12973,2,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1298,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
12983,4,Subsample_Bilinear_uchar,runs,"[('cudaTextureObject_t', 'uchar_tex'), ('unsigned char *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
12983,5,Subsample_Bilinear_uchar2,runs,"[('cudaTextureObject_t', 'uchar2_tex'), ('uchar2 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch2'), ('int', 'src_width'), ('int', 'src_height')]"
12983,6,Subsample_Bilinear_uchar4,runs,"[('cudaTextureObject_t', 'uchar4_tex'), ('uchar4 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
12983,7,Subsample_Bilinear_ushort,runs,"[('cudaTextureObject_t', 'ushort_tex'), ('unsigned short *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
12983,8,Subsample_Bilinear_ushort2,runs,"[('cudaTextureObject_t', 'ushort2_tex'), ('ushort2 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch2'), ('int', 'src_width'), ('int', 'src_height')]"
12983,9,Subsample_Bilinear_ushort4,runs,"[('cudaTextureObject_t', 'ushort4_tex'), ('ushort4 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
12983,10,Thumbnail_uchar,runs,"[('cudaTextureObject_t', 'uchar_tex'), ('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
12983,11,Thumbnail_uchar2,runs,"[('cudaTextureObject_t', 'uchar2_tex'), ('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
12983,12,Thumbnail_ushort,runs,"[('cudaTextureObject_t', 'ushort_tex'), ('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
12983,13,Thumbnail_ushort2,runs,"[('cudaTextureObject_t', 'ushort2_tex'), ('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
12983,14,Overlay_Cuda,runs,"[('int', 'x_position'), ('int', 'y_position'), ('unsigned char *', 'main'), ('int', 'main_linesize'), ('unsigned char *', 'overlay'), ('int', 'overlay_linesize'), ('int', 'overlay_w'), ('int', 'overlay_h'), ('unsigned char *', 'overlay_alpha'), ('int', 'alpha_linesize'), ('int', 'alpha_adj_x'), ('int', 'alpha_adj_y')]"
12985,0,multiply,runs,"[('float *', 'A2'), ('float *', 'B2'), ('float *', 'C'), ('int', 'N'), ('int', 'threads_num')]"
12993,13,jackpot_compactTest_gpu_ADD,runs,"[('uint32_t *', 'data'), ('uint32_t *', 'partial_sums'), ('int', 'len')]"
12994,0,UpdateGrid,runs,"[('int', 'offX'), ('int', 'offY'), ('int *', 'i_cells'), ('struct uchar4 *', 'dst'), ('int', 'width'), ('int', 'height'), ('int', 'worldW'), ('int', 'worldH')]"
12994,1,CalcNextGeneration,runs,"[('int *', 'i_cells'), ('int *', 'o_cells'), ('int', 'width'), ('int', 'height')]"
12994,2,SyncCells,runs,"[('int *', 'i_cells'), ('int *', 'o_cells'), ('int', 'size')]"
12999,0,kernel,runs,"[('float *', 'max'), ('float *', 'var'), ('int *', 'top'), ('int', 'k')]"
13017,3,cuAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'N')]"
13017,4,cuAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'N')]"
13017,7,d_MM,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'wA'), ('int', 'wB'), ('int', 'hA')]"
13017,8,d_MM_OPT,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'wA'), ('int', 'wB'), ('int', 'hA')]"
13017,9,d_MM,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'wA'), ('int', 'wB'), ('int', 'hA')]"
13017,10,d_MM_OPT,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'wA'), ('int', 'wB'), ('int', 'hA')]"
13017,11,cuAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'N')]"
13017,12,cuMult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'wA'), ('int', 'wB'), ('int', 'hA')]"
13017,13,cuMultOpti,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'wA'), ('int', 'wB'), ('int', 'hA')]"
13021,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13021,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13021,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13021,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13021,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
1304,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1304,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
13049,0,Counting,runs,"[('int *', 'HalfData'), ('int', 'HalfDataSize'), ('int', 'N')]"
13060,38,sync_conv_groups,runs,[]
13061,0,kExp,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
13061,1,kLogistic1,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
13061,2,kLogistic2,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
13061,3,kLog,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
13061,4,kSquare,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
13061,5,kSqrt,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
13061,6,kZero,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
13061,7,kReciprocal,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
13061,8,kSubtractFromScalar,runs,"[('float *', 'gData'), ('float', 'scalar'), ('float *', 'target'), ('unsigned int', 'numElements')]"
13061,9,kAddScalar,runs,"[('float *', 'gData'), ('float', 'scalar'), ('float *', 'target'), ('unsigned int', 'numElements')]"
13061,10,kBiggerThanScalar,runs,"[('float *', 'gData'), ('float', 'scalar'), ('float *', 'target'), ('unsigned int', 'numElements')]"
13061,16,kBiggerThan,runs,"[('float *', 'gMat1'), ('float *', 'gMat2'), ('float *', 'gMatTarget'), ('unsigned int', 'numElements')]"
13061,17,kCopy,runs,"[('float *', 'srcStart'), ('float *', 'destStart'), ('unsigned int', 'copyWidth'), ('unsigned int', 'jumpWidth'), ('unsigned int', 'numElements')]"
13061,18,kCopyToTransDestSlow,runs,"[('float *', 'srcStart'), ('float *', 'destStart'), ('unsigned int', 'srcCopyWidth'), ('unsigned int', 'srcJumpWidth'), ('unsigned int', 'destJumpHeight'), ('unsigned int', 'numElements')]"
13061,19,kCopyToTransDestFast,runs,"[('float *', 'srcStart'), ('float *', 'destStart'), ('unsigned int', 'srcCopyWidth'), ('unsigned int', 'srcCopyHeight'), ('unsigned int', 'srcJumpSize'), ('unsigned int', 'destJumpSize')]"
13061,20,kAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls'), ('float', 'scaleA'), ('float', 'scaleB')]"
13061,21,kAddTransSlow,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('unsigned int', 'numEls'), ('float', 'scaleA'), ('float', 'scaleB')]"
13061,22,kAddTransFast,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('unsigned int', 'bJumpWidth'), ('float', 'scaleA'), ('float', 'scaleB')]"
13061,23,kMultTransFast,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('unsigned int', 'bJumpWidth')]"
13061,24,kMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13061,25,kDivideTransFast,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('unsigned int', 'bJumpWidth')]"
13061,26,kDivide,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13061,27,kTranspose,runs,"[('float *', 'a'), ('float *', 'dest'), ('int', 'width'), ('int', 'height')]"
13061,28,kSquaredDiffTransFast,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'width'), ('unsigned int', 'bJumpWidth')]"
13061,29,kSquaredDiff,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13061,30,kAdd3,runs,"[('float *', 'a'), ('const float *', 'b'), ('const float *', 'c'), ('const unsigned int', 'numEls'), ('const float', 'scaleA'), ('const float', 'scaleB'), ('const float', 'scaleC')]"
13061,31,kTile,runs,"[('float *', 'src'), ('float *', 'tgt'), ('unsigned int', 'srcWidth'), ('unsigned int', 'srcHeight'), ('unsigned int', 'tgtWidth'), ('unsigned int', 'tgtHeight')]"
13061,32,kAddRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'scaleVec')]"
13061,33,kAddColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('const unsigned int', 'width'), ('const unsigned int', 'height'), ('const float', 'scaleVec')]"
13061,34,kMultByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13061,35,kMultByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13061,36,kDivideByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13061,37,kDivideByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13061,38,kDumbSumCols,runs,"[('float *', 'mat'), ('float *', 'vec'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13061,40,kRotate180,runs,"[('float *', 'filters'), ('float *', 'targets'), ('const int', 'filterSize')]"
13061,41,kCopyInto,runs,"[('float *', 'images'), ('float *', 'targets'), ('const int', 'imgSize'), ('const int', 'paddingSize'), ('const int', 'numImages')]"
13062,0,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
13062,1,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
13065,7,emptyKernel,runs,[]
13082,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
13089,0,histo_kernal,runs,"[('char *', 'buffer'), ('long', 'size'), ('int *', 'histo')]"
13090,6,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
13090,7,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
13090,17,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13090,19,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13090,20,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13090,24,cunn_MSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
13090,40,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
13090,41,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
13090,45,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
13090,46,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
13090,54,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride')]"
13092,0,FillOnes,runs,"[('float *', 'vec'), ('int', 'size')]"
13092,1,SoftmaxLossBackprop,runs,"[('const float *', 'label'), ('int', 'num_labels'), ('int', 'batch_size'), ('float *', 'diff')]"
13093,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13093,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13093,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13093,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13093,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13099,0,MatrixMulKernel,runs,"[('float *', 'd_M'), ('float *', 'd_N'), ('float *', 'd_P'), ('int', 'Width')]"
13099,1,MatrixMulKernelTiles,runs,"[('float *', 'd_M'), ('float *', 'd_N'), ('float *', 'd_P'), ('int', 'Width')]"
13100,33,sync_conv_groups,runs,[]
13101,28,sync_conv_groups,runs,[]
1311,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
13110,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13115,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
13117,1,init_and_update,runs,"[('float *', 'values_d'), ('int', 'tpoints'), ('int', 'nsteps')]"
13117,3,init_and_update,runs,"[('float *', 'values_d'), ('int', 'tpoints'), ('int', 'nsteps')]"
13117,5,init_and_update,runs,"[('float *', 'values_d'), ('int', 'tpoints'), ('int', 'nsteps')]"
13126,0,leven,runs,"[('char *', 'a'), ('char *', 'b'), ('char *', 'costs'), ('int', 'size')]"
13126,1,mul,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'size')]"
13132,1,cunn_SoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'nframe'), ('int', 'dim'), ('int', 'stride')]"
13132,5,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
13132,6,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
13132,16,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13132,17,subgradweight,runs,"[('float *', 'input'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'gradBias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW'), ('float', 'scale')]"
13132,18,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13132,19,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13132,20,cunn_MSECriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeAverage')]"
13132,21,cunn_MSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
13132,37,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
13132,38,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
13132,42,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
13132,43,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
13132,45,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride')]"
13134,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13134,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13134,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13134,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13134,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13141,2,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
13142,2,SSTTest,runs,"[('float *', 'V'), ('int *', 'addr'), ('int', 'N')]"
13142,4,SSTVector,runs,"[('float *', 'V'), ('int *', 'addr'), ('int', 'N')]"
13142,5,SMSV,runs,"[('float *', 'M'), ('float *', 'V'), ('float *', 'R'), ('int *', 'maddr'), ('int *', 'addr'), ('int', 'N')]"
13142,6,SSTVector,runs,"[('float *', 'V'), ('int *', 'addr'), ('int', 'N')]"
13142,7,DMSV,runs,"[('float *', 'M'), ('float *', 'V'), ('float *', 'R'), ('int *', 'addr'), ('int', 'N')]"
13144,6,set_volume_to_constant,runs,"[('float *', 'out'), ('float', 'value')]"
13144,19,kernel_normalize_and_add_to_output,runs,"[('float *', 'dev_vol_in'), ('float *', 'dev_vol_out'), ('float *', 'dev_accumulate_weights'), ('float *', 'dev_accumulate_values')]"
13144,30,magnitude_threshold_kernel,runs,"[('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z'), ('float', 'gamma')]"
13144,31,gradient_and_subtract_kernel,runs,"[('float *', 'in'), ('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z')]"
13144,32,multiply_by_beta_kernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'beta')]"
13144,33,subtract_kernel,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out')]"
13153,4,Mask_Union_Kernel,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'devOut')]"
13153,5,Mask_Intersect_Kernel,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'devOut')]"
13153,6,Mask_Subtract_Kernel,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'devOut')]"
13153,7,Mask_Difference_Kernel,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'devOut')]"
13153,8,Mask_Invert_Kernel,runs,"[('int *', 'A'), ('int *', 'devOut')]"
13153,9,Mask_Sum_Kernel,runs,"[('int *', 'A'), ('int', 'valCount'), ('int *', 'scalarOut')]"
13153,10,Image_SumReduceStep_Kernel,runs,"[('int *', 'devBufIn'), ('int *', 'devBufOut'), ('int', 'lastBlockSize')]"
13156,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13156,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13156,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13156,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13156,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13161,1,matAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
13161,4,floyd1DKernel,runs,"[('int *', 'M'), ('const int', 'nverts'), ('const int', 'k')]"
13161,5,floyd2DKernel,runs,"[('int *', 'M'), ('const int', 'nverts'), ('const int', 'k')]"
13181,0,_cuda_add_scalar,runs,"[('int *', 'in'), ('int', 'scalar'), ('int', 'n')]"
13183,19,gpu_colorRampHeatMapUnsat,runs,"[('uchar3 *', 'colored'), ('const float *', 'vals'), ('const int', 'width'), ('const int', 'height'), ('const float', 'minVal'), ('const float', 'maxVal')]"
13183,20,gpu_colorRampHeatMapUnsat,runs,"[('uchar4 *', 'colored'), ('const float *', 'vals'), ('const int', 'width'), ('const int', 'height'), ('const float', 'minVal'), ('const float', 'maxVal')]"
13183,39,gpu_maskPointCloud,runs,"[('float4 *', 'verts'), ('const int', 'width'), ('const int', 'height'), ('const int *', 'mask')]"
13183,40,gpu_imageSquare,runs,"[('float *', 'out'), ('const float *', 'in'), ('const int', 'width'), ('const int', 'height')]"
13183,41,gpu_imageSqrt,runs,"[('float *', 'out'), ('const float *', 'in'), ('const int', 'width'), ('const int', 'height')]"
13198,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
132,3,sleepKernel,runs,"[('double *', 'cycles'), ('int64_t', 'waitCycles')]"
132,10,signedGPU,runs,"[('int', 'numTests'), ('int *', 'ns'), ('int *', 'ds'), ('int *', 'qs'), ('int *', 'rs')]"
132,11,unsignedGPU,runs,"[('int', 'numTests'), ('unsigned *', 'ns'), ('unsigned *', 'ds'), ('unsigned *', 'qs'), ('unsigned *', 'rs')]"
13201,0,addKernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
13201,1,addKernelV2,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
13201,3,fillKernelV2,runs,"[('float *', 'a'), ('float *', 'b')]"
13201,4,fillAndAddKernelV2,runs,"[('float *', 'c'), ('float *', 'a'), ('float *', 'b')]"
13201,5,computeVertices_kernel,runs,"[('float4 *', 'pos'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'time')]"
13203,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
13203,1,mykernel,runs,[]
13203,3,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
13203,4,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
13203,5,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1321,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
13211,0,rectlin,runs,"[('const int', 'n'), ('const double *', 'a'), ('double *', 'b')]"
13211,1,vmultx,runs,"[('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,2,DYbinaryentropyXsigmoidY,runs,"[('const int', 'lengthX'), ('const double *', 'x'), ('const double *', 'y'), ('const double *', 't'), ('double *', 'z')]"
13211,3,stanh,runs,"[('const int', 'lengthA'), ('const double', 'alpha'), ('const double *', 'a'), ('double *', 'b')]"
13211,4,vAoverBupdate,runs,"[('const int', 'lengthA'), ('const double', 'alpha'), ('const double *', 'gradc'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'gradn')]"
13211,5,vadd,runs,"[('const int', 'n'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,6,gscale,runs,"[('const int', 'lengthB'), ('const double *', 'a'), ('double *', 'b')]"
13211,7,vcopyfrom_update,runs,"[('const int', 'n'), ('const int', 'shift'), ('const double *', 'a'), ('double *', 'b')]"
13211,8,vcopyfrom,runs,"[('const int', 'n'), ('const int', 'shift'), ('const double *', 'a'), ('double *', 'b')]"
13211,9,DmeanSquareLoss,runs,"[('const int', 'lengthx'), ('const double', 'pref'), ('const double *', 'gradc'), ('const double *', 'x'), ('const double *', 'y'), ('double *', 'gradn')]"
13211,10,DYbinaryentropy,runs,"[('const int', 'lengthX'), ('const double *', 'x'), ('const double *', 'y'), ('const double *', 't'), ('double *', 'z')]"
13211,11,vdivbangupdate,runs,"[('const int', 'lengthA'), ('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,12,sigmoid,runs,"[('const int', 'lengthA'), ('const double *', 'a'), ('double *', 'b')]"
13211,13,alphaax,runs,"[('const int', 'lengthC'), ('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,14,serialsum,runs,"[('const int', 'n'), ('const double *', 'x'), ('double *', 'y')]"
13211,15,diagm_kernel,runs,"[('const int', 'lengthA'), ('const double *', 'a'), ('double *', 'b')]"
13211,16,DXbinaryentropyXsigmoidY,runs,"[('const int', 'lengthX'), ('const double *', 'x'), ('const double *', 'y'), ('const double *', 't'), ('double *', 'z')]"
13211,17,tx1mx,runs,"[('const int', 'lengthX'), ('const double *', 't'), ('const double *', 'x'), ('double *', 'z')]"
13211,18,relu,runs,"[('const int', 'n'), ('const double *', 'a'), ('double *', 'b')]"
13211,19,DXbinaryentropy,runs,"[('const int', 'lengthX'), ('const double *', 'x'), ('const double *', 'y'), ('const double *', 't'), ('double *', 'z')]"
13211,20,vmultbang,runs,"[('const int', 'lengthA'), ('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,21,gaxpy4,runs,"[('const int', 'n'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,22,vdivbang,runs,"[('const int', 'lengthA'), ('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,23,diag_kernel,runs,"[('const int', 'lengthA'), ('const double *', 'a'), ('double *', 'b')]"
13211,24,gfill,runs,"[('const int', 'n'), ('const double *', 'a'), ('double *', 'c')]"
13211,25,gaxpy3,runs,"[('const int', 'n'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,26,binaryentropyXsigmoidY,runs,"[('const int', 'lengthX'), ('const double *', 'x'), ('const double *', 'y'), ('double *', 'z')]"
13211,27,vdivupdate,runs,"[('const int', 'lengthA'), ('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,28,vabs,runs,"[('const int', 'n'), ('const double *', 'a'), ('double *', 'b')]"
13211,29,A_emult_Bg0,runs,"[('const int', 'n'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,30,alphaaxpy,runs,"[('const int', 'lengthC'), ('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,31,gaxpy,runs,"[('const int', 'lengthC'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,32,Dstanh,runs,"[('const int', 'lengthX'), ('const double', 'sf'), ('const double *', 'gradc'), ('const double *', 'fc'), ('double *', 'gradn')]"
13211,33,gaxpy2,runs,"[('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,34,CalpahGax,runs,"[('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,35,vcopyshift,runs,"[('const int', 'n'), ('const int', 'shift'), ('const double *', 'a'), ('double *', 'b')]"
13211,36,vsquare,runs,"[('const double *', 'a'), ('double *', 'c')]"
13211,37,expkernel,runs,"[('const int', 'lengthA'), ('const double *', 'a'), ('double *', 'b')]"
13211,38,gax,runs,"[('const int', 'lengthC'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,39,vmultbangupdate,runs,"[('const int', 'lengthA'), ('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,40,binaryentropy,runs,"[('const int', 'lengthX'), ('const double *', 'x'), ('const double *', 'y'), ('double *', 'z')]"
13211,41,kinklin,runs,"[('const int', 'n'), ('const double', 'gamma'), ('const double *', 'a'), ('double *', 'b')]"
13211,42,vsign,runs,"[('const int', 'n'), ('const double *', 'a'), ('double *', 'b')]"
13211,43,xsigny_update,runs,"[('const int', 'n'), ('const double *', 'a'), ('double *', 'b'), ('double *', 'c')]"
13211,44,vmult,runs,"[('const int', 'lengthA'), ('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,45,vdivbang,runs,"[('const int', 'lengthA'), ('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,46,logkernel,runs,"[('const int', 'lengthA'), ('const double *', 'a'), ('double *', 'b')]"
13211,47,gax,runs,"[('const int', 'lengthC'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,48,vsquare,runs,"[('const double *', 'a'), ('double *', 'c')]"
13211,49,ax,runs,"[('const int', 'lengthC'), ('const double', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13211,50,CalpahGaxpGy,runs,"[('const double', 'alpha'), ('const double *', 'a'), ('const double *', 'b'), ('double *', 'c')]"
13217,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13217,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13217,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13217,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13217,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13231,1,kernelMultMatTiled,runs,"[('float *', 'd_M'), ('float *', 'd_N'), ('float *', 'd_P'), ('int', 'm'), ('int', 'n'), ('int', 'y')]"
13231,2,kernelMultMat,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'm')]"
13231,3,kernelMultMat,runs,"[('double *', 'd_a'), ('double *', 'd_b'), ('double *', 'd_c'), ('int', 'ROWS'), ('int', 'COL_A'), ('int', 'COL_B')]"
13231,4,convolutionGPUkernel_1D,runs,"[('int *', 'h_n'), ('int *', 'h_mascara'), ('int *', 'h_r'), ('int', 'n'), ('int', 'mascara')]"
13231,5,convolutionGPUkernel_2D,runs,"[('int *', 'M'), ('int *', 'mascara'), ('int *', 'resultado'), ('int', 'm'), ('int', 'n'), ('int', 'widthM')]"
13233,1,vectFill,runs,"[('int *', 'data1'), ('int *', 'data2'), ('int *', 'restult'), ('unsigned long', 'sizeOfArray')]"
13236,0,filter_roi,runs,"[('unsigned char *', 'BIN'), ('const unsigned char *', 'ROI'), ('unsigned int', 'map_len')]"
13236,1,imperviousness_change,runs,"[('const unsigned char *', 'dev_BIN1'), ('const unsigned char *', 'dev_BIN2'), ('unsigned int', 'WIDTH'), ('unsigned int', 'HEIGHT'), ('int *', 'dev_LTAKE_map')]"
13236,2,imperviousness_change_double,runs,"[('const unsigned char *', 'dev_BIN1'), ('const unsigned char *', 'dev_BIN2'), ('unsigned int', 'WIDTH'), ('unsigned int', 'HEIGHT'), ('double *', 'dev_LTAKE_map')]"
13236,3,imperviousness_change_char,runs,"[('const unsigned char *', 'dev_BIN1'), ('const unsigned char *', 'dev_BIN2'), ('unsigned int', 'WIDTH'), ('unsigned int', 'HEIGHT'), ('char *', 'dev_LTAKE_map')]"
13236,4,imperviousness_change_large,runs,"[('const unsigned char *', 'dev_BIN1'), ('const unsigned char *', 'dev_BIN2'), ('unsigned int', 'WIDTH'), ('unsigned int', 'HEIGHT'), ('int *', 'dev_LTAKE_map'), ('int', 'mapel_per_thread')]"
1324,0,kernelUpdateParticle,runs,"[('float *', 'positions'), ('float *', 'velocities'), ('float *', 'pBests'), ('float *', 'gBest'), ('float', 'r1'), ('float', 'r2')]"
1324,1,kernelUpdatePBest,runs,"[('float *', 'positions'), ('float *', 'pBests'), ('float *', 'gBest')]"
1324,2,kernelUpdateGBest,runs,"[('float *', 'gBest'), ('float *', 'pBests')]"
13240,1,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
13240,2,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
13240,4,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
13245,0,operate,runs,"[('char *', 'source'), ('char *', 'goal'), ('int', 'sizex'), ('int', 'sizey')]"
13249,0,countTriangles,runs,"[('uint2 *', 'validPoints'), ('int *', 'count')]"
13250,1,mergeHistogram256Kernel,runs,"[('uint *', 'd_Histogram'), ('uint *', 'd_PartialHistograms'), ('uint', 'histogramCount')]"
13274,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13274,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13274,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13274,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13274,168,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13280,34,init_rng,runs,"[('curandState *', 'states'), ('int', 'seed')]"
13285,0,sayHi,runs,[]
13292,4,xmpC2S_kernel,runs,"[('uint32_t', 'N'), ('uint32_t', 'limbs'), ('uint32_t', 'stride'), ('const uint32_t *', 'in'), ('uint32_t *', 'out')]"
13292,5,xmpS2C_kernel,runs,"[('uint32_t', 'N'), ('uint32_t', 'limbs'), ('uint32_t', 'stride'), ('const uint32_t *', 'in'), ('uint32_t *', 'out')]"
133,0,multiply_them,runs,"[('float *', 'dest'), ('float *', 'a'), ('float *', 'b')]"
1330,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1330,340,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
13303,0,matrix_mult,runs,"[('float *', 'array1'), ('unsigned int', 'rows1'), ('unsigned int', 'cols1'), ('float *', 'array2'), ('unsigned int', 'rows2'), ('unsigned int', 'cols2'), ('float *', 'array3')]"
13304,3,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
13304,5,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
13304,16,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
13304,17,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
13306,2,KerBitReversalMatrixRow,runs,"[('float *', 'd_lpDstRe'), ('float *', 'd_lpDstIm'), ('float *', 'd_lpSrcRe'), ('float *', 'd_lpSrcIm'), ('int', 'width'), ('int', 'log2x')]"
13306,3,KerBitReversalMatrixCol,runs,"[('float *', 'd_lpDstRe'), ('float *', 'd_lpDstIm'), ('float *', 'd_lpSrcRe'), ('float *', 'd_lpSrcIm'), ('int', 'width'), ('int', 'log2y')]"
13307,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
13310,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13310,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13310,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13310,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13310,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13313,4,_negateStencilKernel,runs,"[('int *', 'stencil'), ('int', 'size'), ('int *', 'out')]"
13313,15,_setPrecisionKernel,runs,"[('float *', 'data'), ('size_t', 'size'), ('int *', 'precision')]"
13324,3,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
13324,5,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
13332,0,getRelevantMeas,runs,"[('cartesian_segment *', 'carSegs'), ('laserdata_cartesian *', 'd_laser'), ('unsigned long long *', 'dist')]"
13332,13,findIDInConvoyDevice,runs,"[('Convoy *', 'd_convoy'), ('int *', 'd_IDIncluded'), ('int', 'id1'), ('int', 'id2')]"
13332,16,checkConvoyForDuplicateDeviceSelf,runs,"[('Convoy *', 'd_convoy'), ('bool *', 'd_duplicate')]"
13332,20,getRelevantMeas,runs,"[('cartesian_segment *', 'carSegs'), ('laserdata_cartesian *', 'd_laser'), ('unsigned long long *', 'dist')]"
13332,32,findIDInConvoyDevice,runs,"[('Convoy *', 'd_convoy'), ('int *', 'd_IDIncluded'), ('int', 'id1'), ('int', 'id2')]"
13332,34,checkConvoyForDuplicateDeviceSelf,runs,"[('Convoy *', 'd_convoy'), ('bool *', 'd_duplicate')]"
13333,2,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
13344,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
13355,3,kernelFlou,runs,"[('unsigned char *', 'ptr'), ('unsigned int *', 'debug')]"
13358,0,block_sum,runs,"[('const float *', 'hostInput'), ('float *', 'sumResults'), ('float *', 'squareResults'), ('const size_t', 'n')]"
13358,1,single_block_reduction,runs,"[('float *', 'sumResults'), ('float *', 'squareResults'), ('const size_t', 'n')]"
13385,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13393,12,recombine,runs,"[('unsigned int *', 'p0'), ('unsigned int *', 'p1'), ('unsigned int *', 'off'), ('unsigned int', 'cols')]"
13393,13,recombiner,runs,"[('double *', 'rands'), ('unsigned int *', 'parents'), ('unsigned int', 'parent_rows'), ('unsigned int', 'parent_cols'), ('unsigned int *', 'off'), ('unsigned int', 'cols'), ('unsigned int', 'seq_offset')]"
13393,25,update_population_metadata,runs,"[('unsigned int *', 'pop'), ('unsigned int', 'rows'), ('unsigned int', 'cols'), ('unsigned int *', 'free'), ('unsigned int *', 'lost'), ('unsigned int *', 'fixed')]"
13393,26,update_population_fixed,runs,"[('unsigned int *', 'pop'), ('unsigned int', 'rows'), ('unsigned int', 'cols'), ('unsigned int *', 'fixed')]"
13393,27,update_population_lost,runs,"[('unsigned int *', 'pop'), ('unsigned int', 'rows'), ('unsigned int', 'cols'), ('unsigned int *', 'fixed')]"
13393,28,update_population_free,runs,"[('unsigned int *', 'fixed'), ('unsigned int *', 'lost'), ('unsigned int *', 'free'), ('unsigned int', 'cols')]"
13397,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13397,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13397,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13397,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13397,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13401,0,reduce0,runs,"[('const float *', 'in'), ('float *', 'out')]"
13401,1,reduce1,runs,"[('const float *', 'in'), ('float *', 'out')]"
13401,2,reduce2,runs,"[('const float *', 'in'), ('float *', 'out')]"
13431,0,pFloyd,runs,"[('float *', 'D'), ('float *', 'Q'), ('int', 'vertices'), ('int', 'k'), ('int', 'k2')]"
13432,0,hello,runs,[]
13434,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
13446,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13446,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13446,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13446,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13446,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13453,1,sum,runs,"[('int *', 'dest'), ('int', 'a'), ('int', 'b')]"
13453,2,vector_add,runs,"[('double const *', 'A_dev'), ('double const *', 'B_dev'), ('double *', 'C_dev'), ('int const', 'N')]"
13457,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13457,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13457,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13457,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13457,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13464,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
13464,5,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
13464,7,ReducePI,runs,"[('float *', 'd_sum'), ('int', 'num')]"
13464,8,ReducePI2,runs,"[('float *', 'd_sum'), ('int', 'num'), ('float *', 'd_pi')]"
13464,12,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
13469,0,cudaAcc_GetPowerSpectrum_kernel,runs,"[('int', 'NumDataPoints'), ('float2 *', 'FreqData'), ('float *', 'PowerSpectrum')]"
13469,1,cudaAcc_GetPowerSpectrum_kernel2,runs,"[('int', 'NumDataPoints'), ('float2 *', 'FreqData'), ('float *', 'PowerSpectrum')]"
13476,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
13478,7,emptyKernel,runs,[]
13482,10,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
13482,11,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
13482,27,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13482,29,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13482,30,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13482,56,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
13482,57,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
13482,59,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
13482,60,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
13482,62,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride'), ('int', 'paddingValue')]"
13486,33,sync_conv_groups,runs,[]
13507,40,sync_conv_groups,runs,[]
1351,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1351,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
13511,1,sha256_update,runs,"[('SHA256_CTX *', 'ctx'), ('uchar *', 'data'), ('uint', 'len')]"
13511,2,sha256_final,runs,"[('SHA256_CTX *', 'ctx'), ('uchar *', 'gpuResult')]"
13512,0,mult,runs,"[('float *', 'Q'), ('float *', 'R'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
13512,1,scaleR,runs,"[('float *', 'Q'), ('float *', 'R'), ('int', 'm'), ('int', 'n'), ('int', 'k'), ('float', 'S')]"
13512,2,scaleQ,runs,"[('float *', 'Q'), ('float *', 'R'), ('int', 'm'), ('int', 'n'), ('int', 'k'), ('float', 'S')]"
13512,3,update,runs,"[('float *', 'Q'), ('float *', 'R'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
13512,4,dummy_kernel,runs,[]
13515,4,GetScaleFactorsKernel,runs,"[('float *', 'indata'), ('float *', 'base'), ('float *', 'stdev'), ('float *', 'factors'), ('int', 'nchans'), ('int', 'processed')]"
13520,0,Inicializacao,runs,"[('double *', 'uprev'), ('const int', 'n')]"
13520,1,Atualiza,runs,"[('double *', 'u'), ('double *', 'u_prev'), ('const int', 'n')]"
13520,2,Maximo,runs,"[('double *', 'input'), ('double *', 'results'), ('int', 'n')]"
13520,3,MatrixAdd_d,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
13520,4,Random,runs,"[('float *', 'results'), ('long int', 'n'), ('unsigned int', 'seed')]"
13520,5,Somatorio,runs,"[('float *', 'input'), ('float *', 'results'), ('long int', 'n')]"
13520,6,Atualiza,runs,"[('double *', 'u'), ('double *', 'u_prev'), ('const int', 'n')]"
13520,7,Maximo,runs,"[('double *', 'input'), ('double *', 'results'), ('int', 'n')]"
13520,8,Evolve,runs,"[('int *', 'val'), ('int *', 'aux'), ('int', 'n')]"
13520,9,Evolve,runs,"[('int *', 'val'), ('int *', 'aux'), ('int', 'n')]"
13520,10,Random,runs,"[('float *', 'results'), ('int', 'n'), ('unsigned int', 'seed')]"
13522,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
13526,5,ARR_ADDC,runs,"[('float *', 'result'), ('float *', 'in1'), ('float *', 'in2'), ('int', 'N')]"
13529,2,matrixTranspose2,runs,"[('const float *', 'F'), ('float *', 'C')]"
13529,4,matrixMultiply1,runs,"[('float *', 'A'), ('float *', 'C'), ('int', 'size')]"
13529,5,matrixMultiply2,runs,"[('float *', 'A'), ('float *', 'C'), ('int', 'size')]"
13529,6,matrixMultiply3,runs,"[('float *', 'A'), ('float *', 'C'), ('int', 'size')]"
13529,8,matrixFunc,runs,"[('float *', 'F'), ('int', 'size')]"
13529,9,MatrixMulDevice,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int *', 'matrixSize')]"
13535,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13535,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13535,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13535,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13535,168,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13538,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13538,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13538,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13538,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13538,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
1354,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
1354,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
13553,0,matrix_2d_mul_float_gpu,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'num_rows_A'), ('int', 'num_cols_A'), ('int', 'num_cols_B')]"
13553,1,matrix_2d_mul_float_gpu,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'num_rows_A'), ('int', 'num_cols_A'), ('int', 'num_cols_B')]"
13553,2,addSingleThread,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
13553,3,addMoreThreads,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
13553,4,addGridThreads,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
13561,0,print_float,runs,"[('float *', 'x'), ('int', 'leng')]"
13561,1,print_int,runs,"[('int *', 'x'), ('int', 'leng')]"
13561,2,print_double,runs,"[('double *', 'x'), ('int', 'leng')]"
13561,3,print_long,runs,"[('long *', 'x'), ('int', 'leng')]"
13561,6,logit,runs,"[('float *', 'y'), ('const float *', 'x'), ('int', 'leng')]"
13574,0,MatrixMult,runs,"[('int', 'm'), ('int', 'n'), ('int', 'k'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
13592,0,AddVectors,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
13593,0,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
13593,3,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
13593,5,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
13593,7,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
13593,9,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
13593,11,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
13593,12,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
13593,14,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
13593,17,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
13593,20,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
13594,33,sync_conv_groups,runs,[]
13598,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13598,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13598,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13598,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13598,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
136,6,computeHistogram,runs,"[('unsigned int *', 'buffer'), ('int', 'size'), ('unsigned int *', 'histo')]"
13607,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
13607,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
13607,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
13607,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
13607,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
13607,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
13607,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
13607,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
13607,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
13607,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
13607,24,hello,runs,[]
13607,28,hello,runs,[]
13607,31,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
1363,0,vecAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
13637,0,kMultiplyBySigmoidGrad,runs,"[('float *', 'act'), ('float *', 'target'), ('const unsigned int', 'len')]"
13637,6,kTranspose,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
13637,7,kLessThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,8,kLessThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,9,kGreaterThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,10,kGreaterThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,11,kEquals,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,12,kEqualsScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,13,kSparseDot,runs,"[('int', 'm'), ('int', 'n'), ('int', 'k'), ('float *', 'data'), ('int *', 'indptr'), ('int *', 'indices'), ('float *', 'dense_data'), ('float *', 'target'), ('float', 'beta'), ('float', 'alpha')]"
13637,14,kMinimum,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,15,kMinimumScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,16,kMaximum,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,17,kMaximumScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,26,kSign,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,27,kApplySigmoid,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,28,kApplyTanh,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,29,kApplySoftThreshold,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,30,kApplyAbs,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,31,kApplyLog1PlusExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,32,kLog,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,33,kExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,34,kGamma,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,35,kLogGamma,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,36,kSqrt,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,37,kPow,runs,"[('float *', 'mat'), ('float', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,38,kPowMatrix,runs,"[('float *', 'mat'), ('float *', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,39,kReciprocal,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
13637,40,kAddColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13637,41,kAddRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13637,42,kAddColMult,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13637,43,kMultByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13637,44,kMultByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13637,45,kDivByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13637,46,kDivByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
13637,47,kAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13637,48,kSubtract,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13637,49,kDivide,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13637,50,kMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13637,51,kMultScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len')]"
13637,52,kAssignScalar,runs,"[('float *', 'dest'), ('float', 'alpha'), ('unsigned int', 'len')]"
13637,53,kDivideScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len')]"
13637,54,kAddScalar,runs,"[('float *', 'a'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13637,55,kSelectRows,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nSourceRows')]"
13637,56,kSetSelectedRows,runs,"[('float *', 'target'), ('float *', 'source'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nTargetRows')]"
13637,57,kWhere,runs,"[('float *', 'condition_mat'), ('float *', 'if_mat'), ('float *', 'else_mat'), ('float *', 'target'), ('unsigned int', 'len')]"
1364,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
1364,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
1364,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
1364,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
1364,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
1364,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
1364,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
13645,0,cuComputeNorm,runs,"[('float *', 'mat'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('float *', 'norm')]"
13645,1,cuAddRNorm,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('float *', 'vec')]"
13645,2,cuInsertionSort,runs,"[('float *', 'dist'), ('int', 'dist_pitch'), ('int *', 'ind'), ('int', 'ind_pitch'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
13645,3,cuAddQNormAndSqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('float *', 'q'), ('int', 'k')]"
13646,10,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
13646,11,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
13646,25,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13646,27,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13646,28,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13646,56,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
13646,57,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
13655,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
13655,1,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
13655,2,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
13668,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13668,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13668,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13668,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13668,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13682,11,addScalar,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'ptrC')]"
13689,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13689,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13689,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13689,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13689,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13695,0,Kernel1,runs,"[('float *', 'A'), ('int', 'N'), ('int', 'k')]"
13695,1,Kernel2,runs,"[('float *', 'A'), ('int', 'N'), ('int', 'k')]"
13708,2,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
13708,4,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
13708,9,set_rngstate_kernel,runs,"[('curandStateMtgp32 *', 'state'), ('mtgp32_kernel_params *', 'kernel')]"
13708,15,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
13708,16,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
13708,17,THCudaTensor_kernel_indexFill,runs,"[('float *', 'tensor'), ('long *', 'stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim'), ('float', 'val')]"
13708,18,THCudaTensor_kernel_indexCopy,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
13708,19,THCudaTensor_kernel_indexSelect_contiguous,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long', 'stride'), ('float *', 'index'), ('long', 'idxSize')]"
13708,21,THCudaTensor_copyUpperSymmetric,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'len')]"
13729,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13731,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
13733,33,sync_conv_groups,runs,[]
13736,0,daxpy_simple,runs,"[('int', 'n'), ('double', 'alpha'), ('double *', 'x'), ('double *', 'y')]"
13736,1,daxpy,runs,"[('int', 'n'), ('double', 'alpha'), ('double *', 'x'), ('double *', 'y')]"
13738,0,conv,runs,"[('float *', 't'), ('float *', 'tk'), ('float *', 'out'), ('int', 't_rows'), ('int', 't_columns'), ('int', 'n_channels'), ('int', 'k_rows'), ('int', 'k_columns'), ('int', 'n_kernels')]"
13738,1,mat_transpose,runs,"[('float *', 'a'), ('float *', 'out'), ('int', 'size_x'), ('int', 'size_y')]"
13738,2,mat_scale,runs,"[('float', 'alpha'), ('float *', 'a'), ('float *', 'c'), ('int', 'rows'), ('int', 'columns'), ('int', 'depth')]"
13738,3,t_sum,runs,"[('float *', 'a'), ('float *', 'out'), ('int', 'n_elements')]"
13738,4,mat_add,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'limit')]"
13738,5,mat_sub,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'rows'), ('int', 'columns')]"
13738,6,add_bias,runs,"[('float *', 'a'), ('float *', 'bias'), ('float *', 'out'), ('int', 'size_x'), ('int', 'size_y'), ('int', 'size_z')]"
13738,7,mat_hadamard,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'rows'), ('int', 'columns')]"
13738,8,mat_dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'a_rows'), ('int', 'a_columns'), ('int', 'b_rows'), ('int', 'b_columns')]"
13754,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13754,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13754,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13754,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13754,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13757,0,gpu_simple_kernel,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'N')]"
13757,4,gpuDot,runs,"[('float *', 'dot'), ('float *', 'a'), ('float *', 'b'), ('int', 'N')]"
13757,6,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
13760,35,sync_conv_groups,runs,[]
13765,3,generate_histogram,runs,"[('unsigned int *', 'bins'), ('const float *', 'dIn'), ('const int', 'binNumber'), ('const float', 'lumMin'), ('const float', 'lumMax'), ('const int', 'size')]"
13765,5,generate_binID,runs,"[('const float *', 'dIn'), ('int *', 'out'), ('const int', 'binNumber'), ('const float', 'lumMin'), ('const float', 'lumMax'), ('const int', 'size')]"
13765,6,update_bins,runs,"[('unsigned int *', 'bins'), ('int *', 'in_binID'), ('int', 'binNumber'), ('const int', 'size')]"
13765,7,blelloch_no_padding,runs,"[('unsigned int *', 'd_in_array'), ('const size_t', 'numBins')]"
13765,9,cmin,runs,"[('float *', 'd_in'), ('float *', 'min'), ('int', 'len')]"
13765,10,cmax,runs,"[('float *', 'd_in'), ('float *', 'max'), ('int', 'len')]"
13766,0,vertical_conv,runs,"[('pixel *', 'Pixel_in_v'), ('pixel *', 'Pixel_out_v'), ('int', 'img_wd_v'), ('int', 'img_ht_v'), ('float *', 'kernel_v'), ('int', 'k_v')]"
13766,1,horizontal_conv,runs,"[('pixel *', 'Pixel_in'), ('pixel *', 'Pixel_out'), ('int', 'img_wd'), ('int', 'img_ht'), ('float *', 'kernel'), ('int', 'k')]"
13772,1,mat_mul,runs,"[('float *', 'Ad'), ('float *', 'Bd'), ('float *', 'Cd')]"
13779,0,calculateFitness,runs,"[('int *', 'classIds'), ('int *', 'roomIds'), ('int *', 'roomCapacities'), ('int *', 'groupIds'), ('int *', 'groupSizes'), ('int *', 'timeSlotIds'), ('int *', 'profIds'), ('int *', 'clashes')]"
13784,33,sync_conv_groups,runs,[]
13787,0,MatrixMul,runs,"[('float *', 'A_d'), ('float *', 'B_d'), ('float *', 'C_d')]"
13792,85,kernel,runs,"[('float *', 'a'), ('size_t', 'N')]"
13792,94,update_inverse_cuda,runs,"[('float *', 'Ainv'), ('float *', 'u'), ('int', 'N'), ('int', 'rowstride'), ('int', 'k')]"
13797,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13797,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13797,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13797,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13797,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13800,0,add_kernel,runs,"[('int *', 'device_result'), ('int *', 'device_blocksum')]"
13800,3,output_index,runs,"[('int *', 'device_hist'), ('int *', 'pdevice_hist'), ('int *', 'device_input'), ('int *', 'device_out'), ('int', 'length'), ('int', 'num_blocks'), ('int', 'nibble')]"
13800,4,add_kernel_2elements,runs,"[('int *', 'device_result'), ('int *', 'device_blocksum_2elements')]"
13800,19,splitRearrange,runs,"[('int', 'numElems'), ('int', 'iter'), ('unsigned int *', 'keys_i'), ('unsigned int *', 'keys_o'), ('unsigned int *', 'values_i'), ('unsigned int *', 'values_o'), ('unsigned int *', 'histo')]"
13800,26,uniformAdd,runs,"[('unsigned int', 'n'), ('unsigned int *', 'data'), ('unsigned int *', 'inter')]"
13800,28,splitRearrange,runs,"[('int', 'numElems'), ('int', 'iter'), ('unsigned int *', 'keys_i'), ('unsigned int *', 'keys_o'), ('unsigned int *', 'values_i'), ('unsigned int *', 'values_o'), ('unsigned int *', 'histo')]"
13800,35,uniformAdd,runs,"[('unsigned int', 'n'), ('unsigned int *', 'data'), ('unsigned int *', 'inter')]"
13800,50,mysgemmNT,runs,"[('const float *', 'A'), ('int', 'lda'), ('const float *', 'B'), ('int', 'ldb'), ('float *', 'C'), ('int', 'ldc'), ('int', 'k'), ('float', 'alpha'), ('float', 'beta')]"
13800,51,mysgemmNT,runs,"[('const float *', 'A'), ('int', 'lda'), ('const float *', 'B'), ('int', 'ldb'), ('float *', 'C'), ('int', 'ldc'), ('int', 'k'), ('float', 'alpha'), ('float', 'beta')]"
13800,52,ComputePhiMag_GPU,runs,"[('float *', 'phiR'), ('float *', 'phiI'), ('float *', 'phiMag'), ('int', 'numK')]"
13803,3,scale_down_after_fft,runs,"[('float *', 'd_Ex'), ('float *', 'd_Ey'), ('float *', 'd_Ez'), ('int', 'N_grid'), ('int', 'N_grid_all')]"
13803,4,set_grid_array_to_value,runs,"[('float *', 'arr'), ('float', 'value'), ('int', 'N_grid')]"
13803,5,reduce_fields,runs,"[('float *', 'd_rho'), ('float *', 'd_Ex'), ('float *', 'd_Ey'), ('float *', 'd_Ez'), ('float *', 'd_Rrho'), ('float *', 'd_REx'), ('float *', 'd_REy'), ('float *', 'd_REz'), ('int', 'N')]"
13803,10,reduce_moments,runs,"[('float *', 'd_arr'), ('float *', 'd_results'), ('int', 'N')]"
13803,15,addtoall,runs,"[('int *', 'a'), ('int', 'b')]"
13803,16,MyKernel,runs,"[('float *', 'devPtr'), ('size_t', 'pitch'), ('int', 'width'), ('int', 'height')]"
1381,200,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1381,341,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
13810,2,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
13810,4,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
13810,9,THCudaTensor_kernel_indexFill,runs,"[('float *', 'tensor'), ('long *', 'stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim'), ('float', 'val')]"
13810,10,THCudaTensor_kernel_indexCopy,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
13810,11,THCudaTensor_kernel_indexSelect_contiguous,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long', 'stride'), ('float *', 'index'), ('long', 'idxSize')]"
13810,12,THCudaTensor_kernel_indexSelect,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long *', 'src_stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim')]"
13810,13,THCudaTensor_copyUpperSymmetric,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'len')]"
13816,0,reduce,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'N')]"
13817,50,sync_conv_groups,runs,[]
1383,5,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
1383,6,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
1383,7,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
1383,8,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
1383,9,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
1383,10,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
1383,11,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
1383,12,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
1383,13,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
1383,14,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
1383,15,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
1383,16,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
1383,17,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
1383,18,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
1383,19,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('float *', 'dist'), ('int *', 'idx'), ('float *', 'val')]"
13834,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13834,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13834,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13834,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13834,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13837,35,sync_conv_groups,runs,[]
13846,44,resetParticlesKernel,runs,"[('float3 *', 'pos'), ('float3 *', 'vel'), ('float *', 'age'), ('float *', 'life'), ('int', 'nParts')]"
13851,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13866,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13866,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13866,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13866,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13866,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13872,1,testWithGlobal,runs,"[('int', 'n'), ('int', 's'), ('float *', 'result'), ('float *', 'buf')]"
13872,3,SimpleKernel,runs,"[('int', 'N'), ('float *', 'a')]"
13872,4,emptyKernel,runs,[]
1388,7,refine_dilateFPPlaneDepthMapXpYp_kernel,runs,"[('float *', 'fpPlaneDepthMap'), ('int', 'fpPlaneDepthMap_p'), ('float *', 'maskMap'), ('int', 'maskMap_p'), ('int', 'width'), ('int', 'height'), ('int', 'xp'), ('int', 'yp'), ('float', 'fpPlaneDepth')]"
1388,16,refine_computeBestDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float3 *', 'isims'), ('int', 'isims_p'), ('float3 *', 'idpts'), ('int', 'idpts_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
1388,17,refine_fuseThreeDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float *', 'isimLst'), ('int', 'isimLst_p'), ('float *', 'idptLst'), ('int', 'idptLst_p'), ('float *', 'isimAct'), ('int', 'isimAct_p'), ('float *', 'idptAct'), ('int', 'idptAct_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
1388,93,generateGaussian_kernel,runs,"[('float *', 'og'), ('float', 'delta'), ('int', 'radius')]"
13887,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
13887,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
13887,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
13887,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
13887,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
13887,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
13887,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
13887,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
13887,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
13887,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
13887,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
13887,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
13887,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
13887,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
13887,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
13887,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
13887,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
13895,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
13895,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
13895,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
13895,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
13895,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
13900,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
13911,9,calculateCircuitGraphVertexData,runs,"[('unsigned int *', 'D'), ('unsigned int *', 'C'), ('unsigned int', 'ecount')]"
13911,10,constructCircuitGraphVertex,runs,"[('unsigned int *', 'C'), ('unsigned int *', 'offset'), ('unsigned int', 'ecount'), ('unsigned int *', 'cv'), ('unsigned int', 'cvCount')]"
13911,13,markSegments,runs,"[('unsigned short *', 'd_mark'), ('unsigned int', 'circuitGraphEdgeCount'), ('unsigned int *', 'd_cg_edge_start'), ('unsigned int *', 'd_cedgeCount'), ('unsigned int', 'circuitVertexSize')]"
13911,42,componentStepFive,runs,"[('unsigned int *', 'Q'), ('unsigned int', 'length'), ('unsigned int *', 'sprimtemp'), ('unsigned int', 's')]"
13911,43,scan_workefficient,runs,"[('float *', 'g_odata'), ('float *', 'g_idata'), ('int', 'n')]"
13911,45,scan_naive,runs,"[('float *', 'g_odata'), ('float *', 'g_idata'), ('int', 'n')]"
13913,15,__embedmat2d,runs,"[('float *', 'a'), ('long long *', 'b'), ('int', 'nrows'), ('int', 'ncols'), ('int', 'sortdown')]"
13913,16,__embedmat,runs,"[('float *', 'a'), ('int *', 'b'), ('long long *', 'c'), ('int', 'n')]"
13913,17,__extractmat2d,runs,"[('float *', 'a'), ('long long *', 'b'), ('int', 'nrows'), ('int', 'ncols')]"
13913,18,__extractmat,runs,"[('float *', 'a'), ('int *', 'b'), ('long long *', 'c'), ('int', 'n')]"
13913,20,__stratifycounts,runs,"[('float *', 'strata'), ('int', 'n'), ('float *', 'a'), ('unsigned int *', 'bi')]"
13913,21,__radixcounts,runs,"[('float *', 'a'), ('int', 'n'), ('int', 'digit'), ('unsigned int *', 'bi')]"
13913,23,__toInt,runs,"[('double *', 'A'), ('int *', 'B'), ('int', 'N')]"
13913,24,__full,runs,"[('int *', 'ir'), ('int *', 'ic'), ('double *', 'data'), ('double *', 'od'), ('int', 'nrows'), ('int', 'ncols'), ('int', 'nnz')]"
13913,25,__set_val,runs,"[('double *', 'A'), ('double', 'val'), ('int', 'length')]"
13913,32,__fillToInds,runs,"[('double', 'A'), ('double *', 'B'), ('int *', 'I'), ('long long', 'len')]"
13913,35,__fillToInds3D,runs,"[('double', 'A'), ('double *', 'B'), ('int', 'ldb'), ('int', 'rdb'), ('int *', 'I'), ('int', 'nrows'), ('int *', 'J'), ('int', 'ncols'), ('int *', 'K'), ('int', 'nk')]"
13913,36,__fillToInds4D,runs,"[('double', 'A'), ('double *', 'B'), ('int', 'ldb'), ('int', 'rdb'), ('int', 'tdb'), ('int *', 'I'), ('int', 'nrows'), ('int *', 'J'), ('int', 'ncols'), ('int *', 'K'), ('int', 'nk'), ('int *', 'L'), ('int', 'nl'), ('int', 'ntk'), ('int', 'nbk'), ('int', 'ntl'), ('int', 'nbl')]"
13913,49,__dds,runs,"[('int', 'nrows'), ('int', 'nnz'), ('double *', 'A'), ('double *', 'B'), ('int *', 'Cir'), ('int *', 'Cic'), ('double *', 'P')]"
13913,50,__dds0,runs,"[('int', 'nrows'), ('int', 'ncols'), ('double *', 'A'), ('double *', 'B'), ('int *', 'Cir'), ('int *', 'Cjc'), ('double *', 'P')]"
13913,51,__transpose,runs,"[('double *', 'in'), ('int', 'instride'), ('double *', 'out'), ('int', 'outstride'), ('int', 'nrows'), ('int', 'ncols')]"
13913,52,__embedmat2d,runs,"[('double *', 'a'), ('long long *', 'b'), ('int', 'nrows'), ('int', 'ncols'), ('int', 'sortdown')]"
13913,53,__embedmat,runs,"[('double *', 'a'), ('int *', 'b'), ('long long *', 'c'), ('int', 'n')]"
13913,54,__extractmat2d,runs,"[('double *', 'a'), ('long long *', 'b'), ('int', 'nrows'), ('int', 'ncols')]"
13913,55,__extractmat,runs,"[('double *', 'a'), ('int *', 'b'), ('long long *', 'c'), ('int', 'n')]"
13913,57,__stratifycounts,runs,"[('double *', 'strata'), ('int', 'n'), ('double *', 'a'), ('unsigned int *', 'bi')]"
13913,58,__radixcounts,runs,"[('double *', 'a'), ('int', 'n'), ('int', 'digit'), ('unsigned int *', 'bi')]"
13913,60,__l1dist,runs,"[('double *', 'A'), ('int', 'lda'), ('double *', 'B'), ('int', 'ldb'), ('double *', 'C'), ('int', 'ldc'), ('int', 'd'), ('int', 'nrows'), ('int', 'ncols'), ('double', 'p')]"
13913,61,__l2dist,runs,"[('double *', 'A'), ('int', 'lda'), ('double *', 'B'), ('int', 'ldb'), ('double *', 'C'), ('int', 'ldc'), ('int', 'd'), ('int', 'nrows'), ('int', 'ncols'), ('double', 'p')]"
13913,62,__minkowskidist,runs,"[('double *', 'A'), ('int', 'lda'), ('double *', 'B'), ('int', 'ldb'), ('double *', 'C'), ('int', 'ldc'), ('int', 'd'), ('int', 'nrows'), ('int', 'ncols'), ('double', 'p')]"
13913,63,__linfdist,runs,"[('double *', 'A'), ('int', 'lda'), ('double *', 'B'), ('int', 'ldb'), ('double *', 'C'), ('int', 'ldc'), ('int', 'd'), ('int', 'nrows'), ('int', 'ncols'), ('double', 'p')]"
13913,64,__msum,runs,"[('double *', 'A'), ('int', 'lda'), ('double *', 'B'), ('int', 'ldb'), ('double *', 'C'), ('int', 'ldc'), ('int', 'd'), ('int', 'nrows'), ('int', 'ncols'), ('double', 'p')]"
13913,83,__cumsumc,runs,"[('int', 'nrows'), ('int', 'ncols'), ('double *', 'A'), ('double *', 'B')]"
13913,117,__dds,runs,"[('int', 'nrows'), ('int', 'nnz'), ('float *', 'A'), ('float *', 'B'), ('int *', 'Cir'), ('int *', 'Cic'), ('float *', 'P')]"
13913,118,__dds0,runs,"[('int', 'nrows'), ('int', 'ncols'), ('float *', 'A'), ('float *', 'B'), ('int *', 'Cir'), ('int *', 'Cjc'), ('float *', 'P')]"
13913,120,__l1dist,runs,"[('float *', 'A'), ('int', 'lda'), ('float *', 'B'), ('int', 'ldb'), ('float *', 'C'), ('int', 'ldc'), ('int', 'd'), ('int', 'nrows'), ('int', 'ncols'), ('float', 'p')]"
13913,121,__l2dist,runs,"[('float *', 'A'), ('int', 'lda'), ('float *', 'B'), ('int', 'ldb'), ('float *', 'C'), ('int', 'ldc'), ('int', 'd'), ('int', 'nrows'), ('int', 'ncols'), ('float', 'p')]"
13913,122,__minkowskidist,runs,"[('float *', 'A'), ('int', 'lda'), ('float *', 'B'), ('int', 'ldb'), ('float *', 'C'), ('int', 'ldc'), ('int', 'd'), ('int', 'nrows'), ('int', 'ncols'), ('float', 'p')]"
13913,123,__linfdist,runs,"[('float *', 'A'), ('int', 'lda'), ('float *', 'B'), ('int', 'ldb'), ('float *', 'C'), ('int', 'ldc'), ('int', 'd'), ('int', 'nrows'), ('int', 'ncols'), ('float', 'p')]"
13913,124,__msum,runs,"[('float *', 'A'), ('int', 'lda'), ('float *', 'B'), ('int', 'ldb'), ('float *', 'C'), ('int', 'ldc'), ('int', 'd'), ('int', 'nrows'), ('int', 'ncols'), ('float', 'p')]"
13913,129,__poissonrnd,runs,"[('int', 'n'), ('float *', 'A'), ('int *', 'B'), ('curandState *', 'rstates')]"
13913,130,__randinit,runs,"[('unsigned long long', 'seed'), ('unsigned long long', 'offset'), ('curandState *', 'rstates')]"
13913,137,__fillToInds,runs,"[('float', 'A'), ('float *', 'B'), ('int *', 'I'), ('long long', 'len')]"
13913,138,__fillToIndsX,runs,"[('float', 'A'), ('float *', 'B'), ('long long', 'len')]"
13913,139,__fillToIndsLong,runs,"[('long long', 'A'), ('long long *', 'B'), ('int *', 'I'), ('long long', 'len')]"
13913,140,__fillToIndsLongX,runs,"[('long long', 'A'), ('long long *', 'B'), ('long long', 'len')]"
13913,146,__fillToInds3D,runs,"[('float', 'A'), ('float *', 'B'), ('int', 'ldb'), ('int', 'rdb'), ('int *', 'I'), ('int', 'nrows'), ('int *', 'J'), ('int', 'ncols'), ('int *', 'K'), ('int', 'nk')]"
13913,147,__fillToInds3DLong,runs,"[('long long', 'A'), ('long long *', 'B'), ('int', 'ldb'), ('int', 'rdb'), ('int *', 'I'), ('int', 'nrows'), ('int *', 'J'), ('int', 'ncols'), ('int *', 'K'), ('int', 'nk')]"
13913,150,__fillToInds4D,runs,"[('float', 'A'), ('float *', 'B'), ('int', 'ldb'), ('int', 'rdb'), ('int', 'tdb'), ('int *', 'I'), ('int', 'nrows'), ('int *', 'J'), ('int', 'ncols'), ('int *', 'K'), ('int', 'nk'), ('int *', 'L'), ('int', 'nl')]"
13913,151,__fillToInds4DLong,runs,"[('long long', 'A'), ('long long *', 'B'), ('int', 'ldb'), ('int', 'rdb'), ('int', 'tdb'), ('int *', 'I'), ('int', 'nrows'), ('int *', 'J'), ('int', 'ncols'), ('int *', 'K'), ('int', 'nk'), ('int *', 'L'), ('int', 'nl')]"
13913,164,__transpose,runs,"[('float *', 'in'), ('int', 'instride'), ('float *', 'out'), ('int', 'outstride'), ('int', 'nrows'), ('int', 'ncols')]"
13913,165,__intToFloat,runs,"[('int *', 'A'), ('float *', 'B'), ('int', 'N')]"
13913,166,__doubleToFloat,runs,"[('double *', 'A'), ('float *', 'B'), ('int', 'N')]"
13913,167,__longToFloat,runs,"[('long long *', 'A'), ('float *', 'B'), ('int', 'N')]"
13913,168,__floatToLong,runs,"[('float *', 'A'), ('long long *', 'B'), ('int', 'N')]"
13913,169,__floatToInt,runs,"[('float *', 'A'), ('int *', 'B'), ('int', 'N')]"
13913,170,__floatToDouble,runs,"[('float *', 'A'), ('double *', 'B'), ('int', 'N')]"
13913,171,__longToInt,runs,"[('long long *', 'A'), ('int *', 'B'), ('int', 'N')]"
13913,172,__intToLong,runs,"[('int *', 'A'), ('long long *', 'B'), ('int', 'N')]"
13913,173,__full,runs,"[('int *', 'ir'), ('int *', 'ic'), ('float *', 'data'), ('float *', 'od'), ('int', 'nrows'), ('int', 'ncols'), ('int', 'nnz')]"
13913,174,__initSeq,runs,"[('int *', 'A'), ('int', 'nrows'), ('int', 'ncols')]"
13913,175,__initSeq2,runs,"[('int *', 'A'), ('int', 'nrows'), ('int', 'ncols')]"
13913,176,__set_val,runs,"[('float *', 'A'), ('float', 'val'), ('int', 'length')]"
13913,177,__set_lval,runs,"[('long long *', 'A'), ('long long', 'val'), ('int', 'length')]"
13915,0,addition,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
13915,1,addition,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
13915,2,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
13915,3,myfunc,runs,[]
1392,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
1392,20,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
13923,33,sync_conv_groups,runs,[]
13930,0,CudaGetBitAndOfRows,runs,"[('unsigned int *', 'table1D'), ('unsigned int *', 'row'), ('int', 'rowSize'), ('int', 'tableRowCount')]"
13930,1,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
13936,0,Subsample_Bilinear_uchar,runs,"[('unsigned char *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
13936,1,Subsample_Bilinear_uchar2,runs,"[('uchar2 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch2'), ('int', 'src_width'), ('int', 'src_height')]"
13936,2,Subsample_Bilinear_uchar4,runs,"[('uchar4 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
13936,3,Subsample_Bilinear_ushort,runs,"[('unsigned short *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
13936,4,Subsample_Bilinear_ushort2,runs,"[('ushort2 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch2'), ('int', 'src_width'), ('int', 'src_height')]"
13936,5,Subsample_Bilinear_ushort4,runs,"[('ushort4 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
13936,6,Thumbnail_uchar,runs,"[('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
13936,7,Thumbnail_uchar2,runs,"[('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
13936,8,Thumbnail_ushort,runs,"[('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
13936,9,Thumbnail_ushort2,runs,"[('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
13945,2,copySharedMem,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
13945,3,transposeNaive,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
13945,4,transposeCoalesced,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
13945,5,transposeNoBankConflicts,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
13945,6,transposeDiagonal,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
13945,7,transposeFineGrained,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
13945,8,transposeCoarseGrained,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
13945,14,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
13949,0,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
13949,1,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
13949,2,GPUMult,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'WIDTH')]"
13949,3,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
13949,4,GPUAdd,runs,"[('float *', 'array1'), ('float *', 'array2'), ('float *', 'result'), ('int', 'WIDTH')]"
13949,5,addKernel,runs,"[('int *', 'ic'), ('const int *', 'ia'), ('const int *', 'ib')]"
1395,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1395,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
13960,0,dotPro,runs,"[('long', 'n'), ('double *', 'vec1'), ('double *', 'vec2'), ('double *', 'vec3')]"
13960,1,dotPro,runs,"[('long', 'n'), ('float *', 'vec1'), ('float *', 'vec2'), ('float *', 'vec3')]"
13960,4,cal_pi,runs,"[('double *', 'sum'), ('int', 'nbin'), ('double', 'step'), ('int', 'nthreads'), ('int', 'nblocks')]"
13960,5,cal_pi,runs,"[('float *', 'sum'), ('int', 'nbin'), ('float', 'step'), ('int', 'nthreads'), ('int', 'nblocks')]"
13960,8,matrixMultiKernel,runs,"[('double *', 'C'), ('double *', 'A'), ('double *', 'B'), ('int', 'Width')]"
13960,9,matrixMultiKernel,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'Width')]"
13970,1,sum,runs,"[('int *', 'dest'), ('int', 'a'), ('int', 'b')]"
13970,2,vector_add,runs,"[('double const *', 'A_dev'), ('double const *', 'B_dev'), ('double *', 'C_dev'), ('int const', 'N')]"
13976,0,compare,runs,"[('int *', 'in_d'), ('int *', 'out_d')]"
13989,0,convolve,runs,"[('float *', 'data_in'), ('float *', 'data_out'), ('float *', 'kernel'), ('int', 'kernelSize'), ('int', 'BLOCK_SIZE')]"
13989,1,convolve_optimised,runs,"[('float *', 'data_in'), ('float *', 'data_out'), ('float *', 'kernel'), ('int', 'kernelSize'), ('int', 'BLOCK_SIZE')]"
13993,10,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
13993,11,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
13993,27,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13993,29,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13993,30,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
13993,44,cunn_CriterionFilter_updateOutput_kernel,runs,"[('float *', 'target'), ('float *', 'ignored_label'), ('int', 'bound'), ('int', 'batch_size'), ('int', 'map_nelem'), ('int', 'blocks_per_sample')]"
13993,45,cunn_CriterionFilter_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'target'), ('float *', 'ignored_label'), ('int', 'batch_size'), ('int', 'n_classes'), ('int', 'map_nelem'), ('int', 'blocks_per_sample')]"
13993,60,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
13993,61,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
13993,63,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
13993,64,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
13993,66,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride'), ('int', 'paddingValue')]"
140,0,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
140,1,kEltwiseLogregCost,runs,"[('float *', 'predmap'), ('float *', 'indmap'), ('float *', 'indlogpred'), ('float *', 'correctprobs'), ('int', 'numCases'), ('int', 'numTasks'), ('int', 'per_thread_case')]"
140,4,kEltwiseL2SVMCost,runs,"[('float *', 'ydata'), ('float *', 'ldata'), ('float *', 'pre_grad'), ('float *', 'all_cost'), ('float', 'a'), ('float', 'b'), ('int', 'numCases'), ('int', 'numTasks'), ('int', 'per_thread_case')]"
140,40,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
140,41,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
140,42,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
14002,2,opt_cond_itr,runs,"[('int', 'num_train_cases'), ('double *', 'opt_cond'), ('double', 'alpha_high'), ('double', 'alpha_high_prev'), ('int', 'high_label'), ('int', 'high_indx'), ('double', 'alpha_low'), ('double', 'alpha_low_prev'), ('int', 'low_label'), ('int', 'low_indx'), ('double *', 'kernel_val_mat')]"
14005,1,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
14011,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
14011,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
14011,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
14011,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
14011,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
14012,8,gpu_mix16_1,runs,"[('int32_t *', 'ip'), ('uint32_t', 'stride'), ('int32_t *', 'u'), ('int32_t *', 'v'), ('int32_t', 'numSamples'), ('int32_t', 'm2'), ('int32_t', 'mixbits'), ('int32_t', 'mixres')]"
14012,10,gpu_mix20_1,runs,"[('uint8_t *', 'ip'), ('uint32_t', 'stride'), ('int32_t *', 'u'), ('int32_t *', 'v'), ('int32_t', 'numSamples'), ('int32_t', 'mixres'), ('int32_t', 'm2'), ('int32_t', 'mixbits')]"
14012,11,gpu_mix20_2,runs,"[('uint8_t *', 'ip'), ('uint32_t', 'stride'), ('int32_t *', 'u'), ('int32_t *', 'v'), ('int32_t', 'numSamples')]"
14012,12,gpu_mix24_1_1,runs,"[('uint8_t *', 'ip'), ('uint32_t', 'stride'), ('int32_t *', 'u'), ('int32_t *', 'v'), ('int32_t', 'numSamples'), ('uint16_t *', 'shiftUV'), ('int32_t', 'mixres'), ('uint32_t', 'mask'), ('int32_t', 'm2'), ('int32_t', 'mixbits'), ('int32_t', 'shift')]"
14012,13,gpu_mix24_1_2,runs,"[('uint8_t *', 'ip'), ('uint32_t', 'stride'), ('int32_t *', 'u'), ('int32_t *', 'v'), ('int32_t', 'numSamples'), ('int32_t', 'mixres'), ('int32_t', 'm2'), ('int32_t', 'mixbits')]"
14012,14,gpu_mix24_2_1,runs,"[('uint8_t *', 'ip'), ('uint32_t', 'stride'), ('int32_t *', 'u'), ('int32_t *', 'v'), ('int32_t', 'numSamples'), ('uint16_t *', 'shiftUV'), ('uint32_t', 'mask'), ('int32_t', 'shift')]"
14012,15,gpu_mix24_2_2,runs,"[('uint8_t *', 'ip'), ('uint32_t', 'stride'), ('int32_t *', 'u'), ('int32_t *', 'v'), ('int32_t', 'numSamples')]"
14012,16,gpu_mix32_1,runs,"[('int64_t *', 'ip'), ('uint32_t', 'stride'), ('int32_t *', 'u'), ('int32_t *', 'v'), ('int32_t', 'numSamples'), ('uint16_t *', 'shiftUV'), ('int32_t', 'mixres'), ('uint32_t', 'mask'), ('int32_t', 'm2'), ('int32_t', 'mixbits'), ('int32_t', 'shift')]"
14012,17,gpu_mix32_2_1,runs,"[('int64_t *', 'ip'), ('uint32_t', 'stride'), ('int32_t *', 'u'), ('int32_t *', 'v'), ('int32_t', 'numSamples')]"
14012,18,gpu_mix32_2_2,runs,"[('int64_t *', 'ip'), ('uint32_t', 'stride'), ('int32_t *', 'u'), ('int32_t *', 'v'), ('int32_t', 'numSamples'), ('uint16_t *', 'shiftUV'), ('uint32_t', 'mask'), ('int32_t', 'shift')]"
14012,19,gpu_unmix16,runs,"[('int32_t *', 'u'), ('int32_t *', 'v'), ('int16_t *', 'out'), ('uint32_t', 'stride'), ('uint32_t *', 'numSamples'), ('int32_t *', 'mixbits'), ('int32_t *', 'mixres'), ('int32_t', 'theOutputPacketBytes'), ('uint32_t', 'frameLength')]"
14012,20,gpu_unmix20,runs,"[('int32_t *', 'u'), ('int32_t *', 'v'), ('uint8_t *', 'out'), ('uint32_t', 'stride'), ('uint32_t *', 'numSamples'), ('int32_t *', 'mixbits'), ('int32_t *', 'mixres'), ('int32_t', 'theOutputPacketBytes'), ('uint32_t', 'frameLength')]"
14012,21,gpu_unmix24,runs,"[('int32_t *', 'u'), ('int32_t *', 'v'), ('uint8_t *', 'out'), ('uint32_t', 'stride'), ('uint32_t *', 'numSamples'), ('int32_t *', 'mixbits'), ('int32_t *', 'mixres'), ('uint16_t *', 'shiftUV'), ('int32_t', 'bytesShifted'), ('int32_t', 'theOutputPacketBytes'), ('uint32_t', 'frameLength')]"
14012,22,gpu_unmix32,runs,"[('int32_t *', 'u'), ('int32_t *', 'v'), ('int32_t *', 'out'), ('uint32_t', 'stride'), ('uint32_t *', 'numSamples'), ('int32_t *', 'mixbits'), ('int32_t *', 'mixres'), ('uint16_t *', 'shiftUV'), ('int32_t', 'bytesShifted'), ('int32_t', 'theOutputPacketBytes'), ('uint32_t', 'frameLength')]"
14012,23,gpu_copyPredictorTo16,runs,"[('int32_t *', 'in'), ('int16_t *', 'out'), ('uint32_t', 'stride'), ('uint32_t *', 'numSamples'), ('int32_t', 'theOutputPacketBytes'), ('uint32_t', 'frameLength')]"
14012,24,gpu_copyPredictorTo20,runs,"[('int32_t *', 'in'), ('uint8_t *', 'out'), ('uint32_t', 'stride'), ('uint32_t *', 'numSamples'), ('int32_t', 'theOutputPacketBytes'), ('uint32_t', 'frameLength')]"
14012,25,gpu_copyPredictorTo24,runs,"[('int32_t *', 'in'), ('uint8_t *', 'out'), ('uint32_t', 'stride'), ('uint32_t *', 'numSamples'), ('int32_t', 'theOutputPacketBytes'), ('uint32_t', 'frameLength')]"
14012,26,gpu_copyPredictorTo24Shift,runs,"[('int32_t *', 'in'), ('uint16_t *', 'shift'), ('uint8_t *', 'out'), ('uint32_t', 'stride'), ('uint32_t *', 'numSamples'), ('int32_t', 'bytesShifted'), ('int32_t', 'theOutputPacketBytes'), ('uint32_t', 'frameLength')]"
14012,27,gpu_copyPredictorTo32,runs,"[('int32_t *', 'in'), ('int32_t *', 'out'), ('uint32_t', 'stride'), ('uint32_t *', 'numSamples'), ('int32_t', 'theOutputPacketBytes'), ('uint32_t', 'frameLength')]"
14012,28,gpu_copyPredictorTo32Shift,runs,"[('int32_t *', 'in'), ('uint16_t *', 'shift'), ('int32_t *', 'out'), ('uint32_t', 'stride'), ('uint32_t *', 'numSamples'), ('int32_t', 'bytesShifted'), ('int32_t', 'theOutputPacketBytes'), ('uint32_t', 'frameLength')]"
14012,29,call_kALACSearch,runs,"[('int16_t *', 'mCoefsU'), ('int16_t *', 'mCoefsV'), ('int32_t', 'kALACMaxCoefs')]"
14013,0,hello,runs,[]
14017,0,nms_kernel,runs,"[('const int', 'n_boxes'), ('const float', 'nms_overlap_thres'), ('const float *', 'dev_boxes'), ('unsigned long long *', 'dev_mask')]"
1402,180,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1402,320,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
14023,2,setupKernel,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
14036,0,updateCenters,runs,"[('float *', 'centers'), ('float *', 'images'), ('int *', 'updates'), ('int', 'noClusters')]"
14036,1,deltasBatch,runs,"[('float *', 'inputs'), ('float *', 'outputs'), ('float *', 'weights'), ('float *', 'weightsDeltas'), ('int', 'noInputs'), ('int', 'inputSize')]"
14036,2,deltasOne,runs,"[('float *', 'inputs'), ('float *', 'outputs'), ('float *', 'weights'), ('float *', 'weightsDeltas'), ('int', 'offsetInputImages'), ('int', 'inputSize')]"
14036,3,deltasBatch,runs,"[('float *', 'inputs'), ('float *', 'outputs'), ('float *', 'weights'), ('float *', 'weightsDeltas'), ('int', 'noInputs'), ('int', 'inputSize'), ('int', 'offsetHidden')]"
14036,4,deltasBatch,runs,"[('float *', 'inputs'), ('float *', 'outputs'), ('float *', 'weights'), ('float *', 'weightsDeltas'), ('int', 'noInputs'), ('int', 'inputSize')]"
14038,0,innerProd,runs,"[('float *', 'aa'), ('float *', 'bb'), ('float *', 'cc')]"
14038,1,innerProd,runs,"[('float *', 'aa'), ('float *', 'bb'), ('float *', 'cc')]"
14043,0,matVect,runs,"[('float *', 'A'), ('float *', 'v'), ('float *', 'r'), ('int', 'size')]"
14043,1,matMul,runs,"[('float *', 'A'), ('int', 'l_A'), ('int', 'c_A'), ('float *', 'B'), ('int', 'l_B'), ('int', 'c_B'), ('float *', 'C'), ('int', 'l_C'), ('int', 'c_C')]"
14044,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14045,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
14045,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
14045,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
14045,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
14045,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
14063,33,sync_conv_groups,runs,[]
14068,3,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
14068,5,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
14071,0,convolvePSF,runs,"[('int', 'width'), ('int', 'height'), ('int', 'imageCount'), ('short *', 'image'), ('short *', 'results'), ('float *', 'psf'), ('int', 'psfRad'), ('int', 'psfDim')]"
14072,0,nms_kernel,runs,"[('const int', 'n_boxes'), ('const float', 'nms_overlap_thres'), ('const float *', 'dev_boxes'), ('unsigned long long *', 'dev_mask')]"
14074,3,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
14074,5,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
14074,16,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
14074,17,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
14075,6,copy_kernel_tobuf,runs,"[('char *', 'dest'), ('char *', 'src'), ('int', 'rx_s'), ('int', 'rx_e'), ('int', 'ry_s'), ('int', 'ry_e'), ('int', 'rz_s'), ('int', 'rz_e'), ('int', 'x_step'), ('int', 'y_step'), ('int', 'z_step'), ('int', 'size_x'), ('int', 'size_y'), ('int', 'size_z'), ('int', 'buf_strides_x'), ('int', 'buf_strides_y'), ('int', 'buf_strides_z'), ('int', 'type_size'), ('int', 'dim'), ('int', 'OPS_soa')]"
14075,7,copy_kernel_frombuf,runs,"[('char *', 'dest'), ('char *', 'src'), ('int', 'rx_s'), ('int', 'rx_e'), ('int', 'ry_s'), ('int', 'ry_e'), ('int', 'rz_s'), ('int', 'rz_e'), ('int', 'x_step'), ('int', 'y_step'), ('int', 'z_step'), ('int', 'size_x'), ('int', 'size_y'), ('int', 'size_z'), ('int', 'buf_strides_x'), ('int', 'buf_strides_y'), ('int', 'buf_strides_z'), ('int', 'type_size'), ('int', 'dim'), ('int', 'OPS_soa')]"
14075,9,copy_kernel_tobuf,runs,"[('char *', 'dest'), ('char *', 'src'), ('int', 'rx_s'), ('int', 'rx_e'), ('int', 'ry_s'), ('int', 'ry_e'), ('int', 'rz_s'), ('int', 'rz_e'), ('int', 'x_step'), ('int', 'y_step'), ('int', 'z_step'), ('int', 'size_x'), ('int', 'size_y'), ('int', 'size_z'), ('int', 'buf_strides_x'), ('int', 'buf_strides_y'), ('int', 'buf_strides_z'), ('int', 'type_size'), ('int', 'dim'), ('int', 'OPS_soa')]"
14075,10,copy_kernel_frombuf,runs,"[('char *', 'dest'), ('char *', 'src'), ('int', 'rx_s'), ('int', 'rx_e'), ('int', 'ry_s'), ('int', 'ry_e'), ('int', 'rz_s'), ('int', 'rz_e'), ('int', 'x_step'), ('int', 'y_step'), ('int', 'z_step'), ('int', 'size_x'), ('int', 'size_y'), ('int', 'size_z'), ('int', 'buf_strides_x'), ('int', 'buf_strides_y'), ('int', 'buf_strides_z'), ('int', 'type_size'), ('int', 'dim'), ('int', 'OPS_soa')]"
14078,0,checkIndex,runs,[]
14078,2,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
14087,3,batch_crop_kernel,runs,"[('float *', 'input'), ('const int', 'nCropRows'), ('const int', 'nCropCols'), ('const int', 'iH'), ('const int', 'iW'), ('const int', 'nPlanes')]"
14087,4,batch_crop_kernel,runs,"[('float *', 'input'), ('const int', 'nCropRows'), ('const int', 'nCropCols'), ('const int', 'iH'), ('const int', 'iW'), ('const int', 'nPlanes')]"
14087,6,_fill_gradBias,runs,"[('float *', 'gradBias'), ('const float *', 'gradOutput'), ('float', 'scale'), ('int', 'batch_n'), ('int', 'output_n'), ('int', 'output_h'), ('int', 'output_w')]"
14087,11,cuda_graph_avgpool_bprop,runs,"[('float *', 'gradInput'), ('const float *', 'gradOutput'), ('const float *', 'clusters'), ('const int', 'nClusters'), ('const int', 'poolsize'), ('const int', 'dim'), ('const int', 'nClustersPerThread')]"
14087,12,cuda_graph_maxpool_bprop,runs,"[('float *', 'gradInput'), ('const float *', 'gradOutput'), ('const float *', 'indices'), ('const int', 'nClusters'), ('const int', 'dim'), ('const int', 'nClustersPerThread')]"
14087,13,modulus_updateGradInput_kernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'n')]"
14093,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
14097,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
14097,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
14097,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
14097,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
14097,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
141,3,cunn_SoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'nframe'), ('int', 'dim')]"
141,6,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
141,7,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
141,9,maxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
141,10,atomicmaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
141,14,cunn_ClassNLLCriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('int', 'sizeAverage'), ('int', 'ntarget')]"
141,15,cunn_ClassNLLCriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('float', 'grad'), ('int', 'ntarget')]"
141,16,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
141,17,subgradweight,runs,"[('float *', 'input'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'gradBias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW'), ('float', 'scale')]"
141,18,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
141,19,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
141,20,cunn_MSECriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeAverage')]"
141,21,cunn_MSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
141,26,max_output,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
141,27,max_gradInput,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
141,28,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
141,29,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
141,30,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
141,32,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
141,33,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
141,35,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
141,36,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
141,38,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride')]"
141,39,min_output,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
141,40,min_gradInput,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
14102,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
14102,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
14102,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
14102,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
14102,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
1411,21,sync_deconv_groups,runs,[]
1411,37,sync_conv_groups,runs,[]
14116,4,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
14116,15,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
14116,16,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
14116,18,THCudaTensor_kernel_indexCopy,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
14116,19,THCudaTensor_kernel_indexAdd,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
1412,5,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
1412,6,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
1412,7,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
1412,8,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
14121,0,AVERAGE_DEPTH_1D,runs,"[('int', 'envSizeX'), ('int', 'envSizeY'), ('float *', 'envData'), ('int', 'depth')]"
14128,1,get_layer,runs,"[('double *', 'input'), ('double *', 'matrix'), ('double *', 'result'), ('int', 'input_size'), ('int', 'hidden_size')]"
14128,4,calculate_error,runs,"[('double *', 'error_vector'), ('double *', 'gradient'), ('double *', 'layer'), ('int', 'N'), ('int', 'M')]"
14128,6,sum_matrix,runs,"[('double *', 'transition'), ('double *', 'gradient'), ('int', 'N'), ('int', 'M')]"
14129,2,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
14132,0,gpuSummationReduce,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
14137,0,fw,runs,"[('float *', 'adj_array'), ('int *', 'next_array'), ('int', 'k'), ('int', 'N')]"
1414,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1414,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
14141,7,emptyKernel,runs,[]
14142,7,cunn_SpatialLogSoftMax_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('int', 'classSize'), ('int', 'height'), ('int', 'width')]"
14142,8,cunn_SpatialLogSoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'classSize'), ('int', 'height'), ('int', 'width')]"
14142,12,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
14142,13,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
14142,27,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14142,29,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14142,30,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14142,58,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
14142,59,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
14148,0,gpu_mvprod,runs,"[('double *', 'x'), ('double *', 'y'), ('double', 'alpha'), ('int', 'NumUp'), ('int', 'NumDown'), ('int', 'dim'), ('double *', 'Umat'), ('double *', 'Down_data'), ('unsigned int *', 'Down_ind'), ('int', 'size_Down'), ('double *', 'Up_data'), ('unsigned int *', 'Up_ind'), ('int', 'size_Up'), ('int', 'rows_shared')]"
14160,33,sync_conv_groups,runs,[]
14163,0,matrixMultiplyShared,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
14174,3,laplacian,runs,"[('float *', 'dst'), ('const float *', 'src'), ('const size_t', 'width'), ('const size_t', 'height'), ('const size_t', 'pixelsPerThread')]"
14174,4,huber,runs,"[('float *', 'a'), ('const size_t', 'width'), ('const size_t', 'height'), ('const float', 'alpha'), ('const float', 'strength'), ('const size_t', 'pixelsPerThread'), ('float *', 'f')]"
14174,7,composeSingleSystem,runs,"[('const size_t', 'offset'), ('const float *', 'H'), ('const size_t', 'lowresWidth'), ('const size_t', 'lowresHeight'), ('const size_t', 'highresWidth'), ('const size_t', 'highresHeight'), ('const float', 'psfWidth'), ('const int', 'pixelRadius'), ('float *', 'systemMatrixVals'), ('int *', 'systemMatrixCols'), ('int *', 'systemMatrixRows')]"
14174,9,computeCSRColSums,runs,"[('float *', 'd_colSums'), ('const float *', 'd_systemMatrixVals'), ('const int *', 'd_systemMatrixRows'), ('const int *', 'd_systemMatrixCols'), ('const size_t', 'm'), ('const size_t', 'n')]"
14174,10,elementwiseDiv,runs,"[('float *', 'a'), ('const float *', 'b'), ('const size_t', 'len')]"
14174,11,divideByCSCColSums,runs,"[('const float *', 'values'), ('const int *', 'colPointers'), ('float *', 'pixels'), ('const size_t', 'n')]"
14182,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
14182,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
14182,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
14182,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
14182,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
14191,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
142,3,splitKernel,runs,"[('const unsigned int *', 'd_In'), ('unsigned int *', 'd_Out'), ('size_t', 'size'), ('unsigned int', 'bitPos'), ('unsigned int *', 'lastValue')]"
142,4,scatterKernel,runs,"[('const unsigned int *', 'd_In'), ('const unsigned int *', 'd_FalseKeyAddresses'), ('unsigned int *', 'd_Out'), ('const unsigned int', 'totalFalses'), ('size_t', 'size'), ('unsigned int', 'bitPos')]"
142,5,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
142,6,scanKernelInclusive,runs,"[('int *', 'c'), ('const int *', 'a'), ('size_t', 'size'), ('size_t', 'offset')]"
142,7,splitKernel,runs,"[('const unsigned int *', 'd_In'), ('unsigned int *', 'd_Out'), ('size_t', 'size'), ('unsigned int', 'bitPos'), ('unsigned int *', 'lastValue')]"
142,8,scatterKernel,runs,"[('const unsigned int *', 'd_In'), ('const unsigned int *', 'd_InPos'), ('const unsigned int *', 'd_FalseKeyAddresses'), ('unsigned int *', 'd_Out'), ('unsigned int *', 'd_OutPos'), ('const unsigned int', 'totalFalses'), ('size_t', 'size'), ('unsigned int', 'bitPos')]"
1420,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1420,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
14208,31,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
14208,32,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
14208,33,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
14221,0,squareKernel,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('int', 'threads_num')]"
14221,1,squareKernel,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('int', 'threads_num')]"
14223,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14232,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
14233,90,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
14233,91,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
14233,92,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
14233,93,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
14233,160,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
14237,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14238,0,AddPackKernel,runs,"[('unsigned long int *', 'codes'), ('int *', 'measures'), ('int', 'dimensionsCount'), ('int *', 'dimendionsSizes'), ('int', 'measuresCount'), ('int', 'currentCapacity'), ('int', 'fullCapacity'), ('int', 'packCount'), ('int *', 'packDimensions'), ('int *', 'packMeasures')]"
14244,6,trivial_map,runs,"[('int *', 'inp_d'), ('MyInt4 *', 'inp_lift'), ('int', 'inp_size')]"
14244,7,trivial_map,runs,"[('int *', 'inp_d'), ('MyInt4 *', 'inp_lift'), ('int', 'inp_size')]"
14244,8,trivial_map,runs,"[('int *', 'inp_d'), ('MyInt4 *', 'inp_lift'), ('int', 'inp_size')]"
14244,9,trivial_map,runs,"[('int *', 'inp_d'), ('MyInt4 *', 'inp_lift'), ('int', 'inp_size')]"
1425,4,kernel_getRotMatL,runs,"[('double *', 'devRotm'), ('double *', 'devnR'), ('int', 'nR')]"
1425,5,kernel_getRotMat,runs,"[('double *', 'devRotm'), ('double *', 'devnR'), ('int', 'nR')]"
1425,24,kernel_getRandomCTD,runs,"[('double *', 'dev_nt'), ('double *', 'dev_tran'), ('double *', 'dev_nd'), ('double *', 'dev_ramD'), ('double *', 'dev_nr'), ('double *', 'dev_ramR'), ('unsigned int', 'out'), ('int', 'rSize'), ('int', 'tSize'), ('int', 'dSize')]"
1425,25,kernel_getRandomCTD,runs,"[('double *', 'dev_nt'), ('double *', 'dev_tran'), ('double *', 'dev_nr'), ('double *', 'dev_ramR'), ('unsigned int', 'out'), ('int', 'rSize'), ('int', 'tSize')]"
1425,26,kernel_getRandomR,runs,"[('double *', 'dev_mat'), ('double *', 'dev_ramR'), ('int *', 'dev_nc')]"
1425,27,kernel_getRandomR,runs,"[('double *', 'dev_mat'), ('double *', 'dev_ramR')]"
14252,0,DiffuseHeat,runs,"[('float *', 'currentPoints'), ('float *', 'nextPoints'), ('const size_t', 'size'), ('double', 'dx'), ('double', 'dt'), ('const size_t', 'endTime')]"
14253,13,cunn_ClassNLLCriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('float', 'grad'), ('int', 'ntarget')]"
14253,20,cunn_MSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
14254,0,kernel_quicksort,runs,"[('int *', 'values'), ('int', 'n')]"
14254,1,gpu_distance,runs,"[('int *', 'data'), ('float *', 'distance'), ('int *', 'point'), ('int', 'n'), ('int', 'dim')]"
14259,0,findY,runs,"[('float *', 'x'), ('float *', 'y'), ('int', 'n'), ('float', 'h'), ('float', 'z'), ('int', 'zLoc'), ('float *', 'returnVal')]"
1426,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
1426,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1426,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1426,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
1426,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
1426,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
1426,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
1426,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
1426,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
1426,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1426,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
1426,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1426,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
1426,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
1426,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1426,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
1426,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1426,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
1426,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1426,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1426,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1426,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1426,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1426,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
1426,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1426,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1426,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1426,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1426,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1426,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1426,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1426,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1426,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1426,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1426,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1426,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1426,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1426,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
1426,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
1426,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
1426,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
1426,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1426,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1426,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1426,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1426,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1426,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1426,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
1426,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1426,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1426,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
1426,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1426,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
1426,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
1426,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
1426,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
1426,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
1426,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
1426,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
1426,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
1426,65,make_pillar_histo_kernel,runs,"[('const float *', 'dev_points'), ('float *', 'dev_pillar_x_in_coors'), ('float *', 'dev_pillar_y_in_coors'), ('float *', 'dev_pillar_z_in_coors'), ('float *', 'dev_pillar_i_in_coors'), ('int *', 'pillar_count_histo'), ('const int', 'num_points'), ('const int', 'max_points_per_pillar'), ('const int', 'GRID_X_SIZE'), ('const int', 'GRID_Y_SIZE'), ('const int', 'GRID_Z_SIZE'), ('const float', 'MIN_X_RANGE'), ('const float', 'MIN_Y_RANGE'), ('const float', 'MIN_Z_RANGE'), ('const float', 'PILLAR_X_SIZE'), ('const float', 'PILLAR_Y_SIZE'), ('const float', 'PILLAR_Z_SIZE'), ('const int', 'NUM_BOX_CORNERS')]"
1426,66,make_pillar_index_kernel,runs,"[('int *', 'dev_pillar_count_histo'), ('int *', 'dev_counter'), ('int *', 'dev_pillar_count'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('int *', 'dev_sparse_pillar_map'), ('const int', 'max_pillars'), ('const int', 'max_points_per_pillar'), ('const int', 'GRID_X_SIZE'), ('const float', 'PILLAR_X_SIZE'), ('const float', 'PILLAR_Y_SIZE'), ('const int', 'NUM_INDS_FOR_SCAN')]"
1426,67,make_pillar_feature_kernel,runs,"[('float *', 'dev_pillar_x_in_coors'), ('float *', 'dev_pillar_y_in_coors'), ('float *', 'dev_pillar_z_in_coors'), ('float *', 'dev_pillar_i_in_coors'), ('float *', 'dev_pillar_x'), ('float *', 'dev_pillar_y'), ('float *', 'dev_pillar_z'), ('float *', 'dev_pillar_i'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_num_points_per_pillar'), ('const int', 'max_points'), ('const int', 'GRID_X_SIZE')]"
1426,68,make_extra_network_input_kernel,runs,"[('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('float *', 'dev_x_coors_for_sub_shaped'), ('float *', 'dev_y_coors_for_sub_shaped'), ('float *', 'dev_pillar_feature_mask'), ('const int', 'MAX_NUM_POINTS_PER_PILLAR')]"
1426,69,filter_kernel,runs,"[('const float *', 'box_preds'), ('const float *', 'cls_preds'), ('const float *', 'dir_preds'), ('const int *', 'anchor_mask'), ('const float *', 'dev_anchors_px'), ('const float *', 'dev_anchors_py'), ('const float *', 'dev_anchors_pz'), ('const float *', 'dev_anchors_dx'), ('const float *', 'dev_anchors_dy'), ('const float *', 'dev_anchors_dz'), ('const float *', 'dev_anchors_ro'), ('float *', 'filtered_box'), ('float *', 'filtered_score'), ('int *', 'filtered_dir'), ('float *', 'box_for_nms'), ('int *', 'filter_count'), ('const float', 'FLOAT_MIN'), ('const float', 'FLOAT_MAX'), ('const float', 'score_threshold'), ('const int', 'NUM_BOX_CORNERS'), ('const int', 'NUM_OUTPUT_BOX_FEATURE')]"
1426,70,sort_boxes_by_indexes_kernel,runs,"[('float *', 'filtered_box'), ('int *', 'filtered_dir'), ('float *', 'box_for_nms'), ('int *', 'indexes'), ('int', 'filter_count'), ('float *', 'sorted_filtered_boxes'), ('int *', 'sorted_filtered_dir'), ('float *', 'sorted_box_for_nms'), ('const int', 'NUM_BOX_CORNERS'), ('const int', 'NUM_OUTPUT_BOX_FEATURE')]"
1426,71,nms_kernel,runs,"[('const int', 'n_boxes'), ('const float', 'nms_overlap_thresh'), ('const float *', 'dev_boxes'), ('unsigned long long *', 'dev_mask'), ('const int', 'NUM_BOX_CORNERS')]"
1426,72,scan_x,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
1426,73,scan_y,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
1426,75,scatter_kernel,runs,"[('int *', 'x_coors'), ('int *', 'y_coors'), ('float *', 'pfe_output'), ('float *', 'scattered_feature'), ('const int', 'MAX_NUM_PILLARS_'), ('const int', 'GRID_X_SIZE'), ('const int', 'GRID_Y_SIZE')]"
1426,78,computePointGradients1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dj_ang'), ('double *', 'pg24'), ('double *', 'pg05'), ('double *', 'pg15'), ('double *', 'pg25')]"
1426,79,computePointHessian0,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph93'), ('double *', 'ph103'), ('double *', 'ph113'), ('double *', 'ph123'), ('double *', 'ph94'), ('double *', 'ph133'), ('double *', 'ph104'), ('double *', 'ph143'), ('double *', 'ph114'), ('double *', 'ph153'), ('double *', 'ph95'), ('double *', 'ph163'), ('double *', 'ph105'), ('double *', 'ph173'), ('double *', 'ph115')]"
1426,80,computePointHessian1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph124'), ('double *', 'ph134'), ('double *', 'ph144'), ('double *', 'ph154'), ('double *', 'ph125'), ('double *', 'ph164'), ('double *', 'ph135'), ('double *', 'ph174'), ('double *', 'ph145')]"
1426,81,computePointHessian2,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph155'), ('double *', 'ph165'), ('double *', 'ph175')]"
1426,82,computeScoreList,runs,"[('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'e_x_cov_x'), ('double', 'gauss_d1'), ('double *', 'score')]"
1426,83,computeScoreGradientList,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('int', 'voxel_num'), ('double *', 'e_x_cov_x'), ('double *', 'cov_dxd_pi'), ('double', 'gauss_d1'), ('int', 'valid_voxel_num'), ('double *', 'score_gradients')]"
1426,84,computeExCovX,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centr_x'), ('double *', 'centr_y'), ('double *', 'centr_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22')]"
1426,85,updateExCovX,runs,"[('double *', 'e_x_cov_x'), ('double', 'gauss_d2'), ('int', 'valid_voxel_num')]"
1426,86,computeCovDxdPi,runs,"[('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'inverse_covariance'), ('int', 'voxel_num'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'point_gradients'), ('double *', 'cov_dxd_pi'), ('int', 'valid_voxel_num')]"
1426,87,computeHessianListS0,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_gradients'), ('double *', 'tmp_hessian'), ('int', 'valid_voxel_num')]"
1426,88,computeHessianListS1,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'hessians'), ('double *', 'e_x_cov_x'), ('double *', 'tmp_hessian'), ('double *', 'cov_dxd_pi'), ('double *', 'point_gradients'), ('int', 'valid_voxel_num')]"
1426,89,computeHessianListS2,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_hessians'), ('double *', 'hessians'), ('int', 'valid_voxel_num')]"
1426,91,sumScore,runs,"[('double *', 'score'), ('int', 'full_size'), ('int', 'half_size')]"
14262,0,matrixMean,runs,"[('float *', 'd_in'), ('float *', 'd_mean'), ('int', 'N')]"
14262,1,matrixSD,runs,"[('float *', 'd_in'), ('float *', 'd_mean'), ('float *', 'd_sd'), ('int', 'N')]"
14262,2,matrixNorm,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('float *', 'd_mean'), ('float *', 'd_sd'), ('int', 'N')]"
14264,0,createMovieRatingsKernel,runs,"[('const float *', 'weights'), ('const float *', 'initial_hidden_feature_probs'), ('float *', 'movie_rating_probs'), ('int', 'num_movies'), ('int', 'num_hidden_features')]"
14264,1,createFinalHiddenFeaturesKernel,runs,"[('const float *', 'weights'), ('const float *', 'movie_rating_probs'), ('float *', 'final_hidden_feature_probs'), ('int', 'num_movies'), ('int', 'num_hidden_features')]"
14271,2,copyBestPath,runs,"[('int', 'i'), ('int *', 'bestPathResult'), ('int *', 'pathResults')]"
14271,5,updateTrailsAtomic,runs,"[('float *', 'phero'), ('int *', 'paths'), ('float *', 'tourLengths')]"
14271,7,updateTrails,runs,"[('float *', 'phero'), ('int *', 'paths'), ('float *', 'tourLengths')]"
14271,8,checkPhero,runs,"[('float *', 'pheroSeq'), ('float *', 'phero')]"
14271,9,seqPheroUpdate,runs,"[('float *', 'phero'), ('float *', 'pheroReal'), ('int *', 'paths'), ('float *', 'tourLengths')]"
14278,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
1428,30,pointwise_add,runs,"[('float *', 'd_res'), ('const float *', 'd_op1'), ('const float *', 'd_op2'), ('const int', 'len')]"
1428,31,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
1428,51,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
1428,52,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
1428,53,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
1428,54,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
1428,185,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
14291,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
14291,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
14291,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
14291,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
14291,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
14291,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
14291,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
14291,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
14291,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
14291,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
14291,24,hello,runs,[]
14291,28,hello,runs,[]
14295,2,partialScan,runs,"[('unsigned int *', 'd_in'), ('unsigned int *', 'd_out'), ('unsigned int *', 'd_total'), ('size_t', 'n')]"
14295,3,mapScan,runs,"[('unsigned int *', 'd_array'), ('unsigned int *', 'd_total'), ('size_t', 'n')]"
14295,4,mapPredicate,runs,"[('unsigned int *', 'd_zeros'), ('unsigned int *', 'd_ones'), ('unsigned int *', 'd_in'), ('unsigned int', 'bit'), ('size_t', 'n')]"
14295,5,scatter,runs,"[('unsigned int *', 'd_inVals'), ('unsigned int *', 'd_outVals'), ('unsigned int *', 'd_inPos'), ('unsigned int *', 'd_outPos'), ('unsigned int *', 'd_zerosScan'), ('unsigned int *', 'd_onesScan'), ('unsigned int *', 'd_zerosPredicate'), ('unsigned int *', 'd_onesPredicate'), ('size_t', 'n')]"
14295,6,partialScan,runs,"[('unsigned int *', 'd_in'), ('unsigned int *', 'd_out'), ('unsigned int *', 'd_total'), ('size_t', 'n')]"
14295,7,mapScan,runs,"[('unsigned int *', 'd_array'), ('unsigned int *', 'd_total'), ('size_t', 'n')]"
14299,0,iterate,runs,"[('float *', 'originalMatrixD'), ('float *', 'solutionD'), ('int', 'originalMatrixWidth'), ('int', 'startingIndex')]"
14299,1,iterate,runs,"[('float *', 'originalMatrixD'), ('float *', 'solutionD'), ('int', 'originalMatrixWidth'), ('int', 'startingIndex')]"
14301,0,kernelKNNshared,runs,"[('const float *', 'g_uquery'), ('const float *', 'g_vpointset'), ('int *', 'g_indexes'), ('float *', 'g_distances'), ('const int', 'pointdim'), ('const int', 'triallength'), ('const int', 'signallength'), ('const int', 'kth'), ('const int', 'exclude')]"
14301,1,kernelKNN,runs,"[('const float *', 'g_uquery'), ('const float *', 'g_vpointset'), ('int *', 'g_indexes'), ('float *', 'g_distances'), ('int', 'pointdim'), ('int', 'triallength'), ('int', 'signallength'), ('int', 'kth'), ('int', 'exclude')]"
14301,2,kernelBFRSshared,runs,"[('const float *', 'g_uquery'), ('const float *', 'g_vpointset'), ('int *', 'g_npoints'), ('int', 'pointdim'), ('int', 'triallength'), ('int', 'signallength'), ('int', 'exclude'), ('float', 'radius')]"
14301,3,kernelBFRSMultishared,runs,"[('const float *', 'g_uquery'), ('const float *', 'g_vpointset'), ('int *', 'g_npoints'), ('int', 'pointdim'), ('int', 'triallength'), ('int', 'signallength'), ('int', 'exclude'), ('const float *', 'vecradius')]"
14301,4,kernelBFRSAllshared,runs,"[('const float *', 'g_uquery'), ('const float *', 'g_vpointset'), ('int *', 'g_npoints'), ('int', 'pointdim'), ('int', 'triallength'), ('int', 'signallength'), ('int', 'exclude'), ('const float *', 'vecradius')]"
14311,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14312,2,kernelVersionShim,runs,[]
14318,0,vectorMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
14318,1,vectorMultGPU,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
14322,0,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
14322,3,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
14322,5,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
14322,7,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14322,9,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
14322,11,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14322,12,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14322,14,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
14322,17,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
14322,20,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
14324,0,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14324,1,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14324,2,block_sum,runs,"[('const int *', 'input'), ('int *', 'per_block_results'), ('const size_t', 'n')]"
14324,3,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
14324,4,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14324,5,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14331,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14335,10,trivial_map,runs,"[('int *', 'inp_d'), ('MyInt4 *', 'inp_lift'), ('int', 'inp_size')]"
14335,11,trivial_map,runs,"[('int *', 'inp_d'), ('MyInt4 *', 'inp_lift'), ('int', 'inp_size')]"
14336,0,clearHistogram,runs,"[('uint *', 'd_Histogram'), ('uint', 'binCount')]"
14336,4,mergePartialHistogramsKernel,runs,"[('uint *', 'd_Histogram'), ('uint *', 'd_PartialHistograms'), ('uint', 'histogramCount'), ('uint', 'binCount')]"
14336,9,mergeHistogram64Kernel,runs,"[('uint *', 'd_Histogram'), ('uint *', 'd_PartialHistograms'), ('uint', 'histogramCount')]"
14336,13,mergeHistogram256Kernel,runs,"[('uint *', 'd_Histogram'), ('uint *', 'd_PartialHistograms'), ('uint', 'histogramCount')]"
14340,0,sum,runs,"[('int *', 'in'), ('int *', 'out')]"
14345,2,InitArrays,runs,"[('float *', 'ip'), ('float *', 'op'), ('float *', 'fp'), ('int *', 'kp'), ('int', 'ncols')]"
14345,5,reduceSingle,runs,"[('int *', 'idata'), ('int *', 'single'), ('int', 'nrows')]"
14345,6,iReduceSingle,runs,"[('int *', 'idata'), ('int *', 'single'), ('int', 'ncols')]"
14345,7,iReduceSingle2,runs,"[('int *', 'idata'), ('int *', 'single'), ('unsigned int', 'ncols')]"
14345,8,sReduceSingle,runs,"[('int *', 'idata'), ('int *', 'single'), ('unsigned int', 'ncols')]"
14345,9,reduceSum,runs,"[('int *', 'idata'), ('int *', 'odata'), ('unsigned int', 'ncols')]"
14345,10,iReduceSum,runs,"[('int *', 'idata'), ('int *', 'odata'), ('unsigned int', 'ncols')]"
14345,11,iReduceSum2,runs,"[('int *', 'idata'), ('int *', 'odata'), ('unsigned int', 'ncols')]"
14345,12,sReduceSum,runs,"[('int *', 'idata'), ('int *', 'odata'), ('unsigned int', 'ncols')]"
14352,0,MatrixMulKernel,runs,"[('int *', '_matrixA'), ('int *', '_matrixB'), ('int *', '_result'), ('int', '_width')]"
14353,10,relabelKernel,runs,"[('int *', 'components'), ('int', 'previousLabel'), ('int', 'newLabel'), ('const int', 'colsComponents')]"
14353,11,relabel2Kernel,runs,"[('int *', 'components'), ('int', 'previousLabel'), ('int', 'newLabel'), ('const int', 'colsComponents'), ('const int', 'idx'), ('const int', 'frameRows')]"
14353,12,relabelUnrollKernel,runs,"[('int *', 'components'), ('int', 'previousLabel'), ('int', 'newLabel'), ('const int', 'colsComponents'), ('const int', 'idx'), ('const int', 'frameRows'), ('const int', 'factor')]"
14353,21,normalize_weights_kernel,runs,"[('float_t *', 'weights'), ('int', 'Nparticles'), ('float_t *', 'partial_sums'), ('float_t *', 'CDF'), ('float_t *', 'u'), ('int *', 'seed')]"
14353,71,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
14353,72,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
14353,73,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
14353,75,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
14353,81,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
14353,83,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
14353,84,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
14353,85,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
14353,86,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
14353,87,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
14353,88,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
14353,91,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
14353,92,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
14353,93,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
14353,94,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
14353,95,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
14353,96,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
14353,97,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
14353,98,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
14353,99,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
14353,100,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
14353,101,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
14353,102,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
14353,104,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
14353,105,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
14353,108,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
14353,109,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
14353,110,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
14353,111,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
14353,112,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
14353,113,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
14353,114,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
14353,115,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
14353,122,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
14353,134,sortVerifyKernel,runs,"[('uint *', 'd_DstKey'), ('uint *', 'd_DstVal'), ('uint *', 'd_SrcKey'), ('uint *', 'errNum')]"
14356,0,fSigmoid,runs,"[('const float *', 'arguments'), ('float *', 'results'), ('const long', 'size')]"
14356,1,fDerSigmoid,runs,"[('const float *', 'arguments'), ('float *', 'results'), ('const long', 'size')]"
14356,2,fExp,runs,"[('const float *', 'arguments'), ('float *', 'results'), ('const long', 'size')]"
14356,3,fTanh,runs,"[('const float *', 'arguments'), ('float *', 'results'), ('const long', 'size')]"
14356,4,fNegation,runs,"[('const float *', 'arguments'), ('float *', 'results'), ('const long', 'size')]"
14356,5,fHadamard,runs,"[('const float *', 'argumentsA'), ('const float *', 'argumentsB'), ('float *', 'results'), ('const long', 'size')]"
14356,14,dropoutTrain,runs,"[('const float *', 'arguments'), ('float *', 'dropoutMask'), ('float *', 'results'), ('const float', 'dropoutFraction'), ('const long', 'size')]"
14356,15,dropoutTest,runs,"[('const float *', 'arguments'), ('float *', 'results'), ('const float', 'dropoutFraction'), ('const long', 'size')]"
14356,16,produceState2,runs,"[('const float *', 'arguments'), ('const int', 'argsSize'), ('const float *', 'weights'), ('const int *', 'topology'), ('const int', 'topSize'), ('float *', 'outStates')]"
14356,17,produceState3,runs,"[('const float *', 'arguments'), ('const int', 'argsSize'), ('const float *', 'weights'), ('const int *', 'topology'), ('const int', 'topSize'), ('float *', 'outStates')]"
14360,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14362,28,sync_conv_groups,runs,[]
14364,1,doGPUWork,runs,"[('int', 'numData'), ('int *', 'data')]"
14364,2,PermTestingDevice,runs,"[('int', 'numPermutations'), ('int', 'N'), ('int', 'V'), ('int', 'N_gp1'), ('double *', 'dataDevice'), ('int *', 'permutationsDevice'), ('double *', 'MaxTDevice')]"
14377,0,pointGenKernel,runs,"[('float *', 'points'), ('float *', 'dirs'), ('int', 'nelems'), ('float', 'minimum'), ('float', 'step')]"
14377,1,setupRandomKernel,runs,"[('curandState *', 'states'), ('unsigned long long', 'seed')]"
14377,7,histColorsKernel,runs,"[('float *', 'histColors'), ('curandState *', 'states')]"
14377,9,generateCurve,runs,"[('float', 't'), ('float', 'dx'), ('float *', 'out'), ('const float', 'ZMIN'), ('const size_t', 'ZSIZE')]"
14377,10,setupRandomKernel,runs,"[('curandState *', 'states'), ('unsigned long long', 'seed')]"
14377,11,mapKernel,runs,"[('float *', 'out'), ('int', 'functionCode'), ('float', 'frange_start'), ('float', 'dx')]"
14377,12,colorsKernel,runs,"[('float *', 'colors'), ('curandState *', 'states')]"
14377,13,randKernel,runs,"[('float *', 'out'), ('curandState *', 'states'), ('float', 'min'), ('float', 'scale')]"
14377,14,genColorsKernel,runs,"[('float *', 'colors'), ('int', 'nelems')]"
14377,15,pointGenKernel,runs,"[('float *', 'points'), ('float *', 'dirs'), ('int', 'nBBS0'), ('int', 'nelems'), ('float', 'minimum'), ('float', 'step')]"
14377,17,simple_sinf,runs,"[('float *', 'out'), ('const size_t', '_data_size'), ('int', 'fnCode'), ('const float', '_dx'), ('const float', '_frange_start')]"
14379,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
14393,0,resultant,runs,"[('unsigned char *', 'a'), ('unsigned char *', 'b'), ('unsigned char *', 'c')]"
14393,1,boxfilter_kernel,runs,"[('int', 'iw'), ('int', 'ih'), ('unsigned char *', 'source'), ('unsigned char *', 'dest'), ('int', 'bw'), ('int', 'bh')]"
14393,2,sobelfilter_kernel,runs,"[('int', 'iw'), ('int', 'ih'), ('unsigned char *', 'source'), ('unsigned char *', 'dest')]"
14393,3,convolve,runs,"[('unsigned char *', 'source'), ('int', 'width'), ('int', 'height'), ('int', 'paddingX'), ('int', 'paddingY'), ('ssize_t', 'kOffset'), ('int', 'kWidth'), ('int', 'kHeight'), ('unsigned char *', 'destination')]"
14394,0,kernel,runs,"[('int *', 'data'), ('int', 'size')]"
14395,0,cu_plus,runs,"[('float *', 'A'), ('const float *', 'B'), ('const int', 'n')]"
14395,1,cu_plus,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('const int', 'n')]"
14395,2,cu_plus,runs,"[('float *', 'A'), ('const float', 'b'), ('const int', 'n')]"
14395,3,cu_plus,runs,"[('const float *', 'A'), ('float *', 'B'), ('const float', 'c'), ('const int', 'n')]"
14395,4,cu_minus,runs,"[('float *', 'A'), ('const float *', 'B'), ('const int', 'n')]"
14395,5,cu_minus,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('const int', 'n')]"
14395,6,cu_minus,runs,"[('float *', 'A'), ('const float', 'b'), ('const int', 'n')]"
14395,7,cu_minus,runs,"[('const float *', 'A'), ('float *', 'B'), ('const float', 'c'), ('const int', 'n')]"
14395,8,cu_square,runs,"[('const float *', 'A'), ('float *', 'B'), ('const int', 'n')]"
14395,9,cu_sqrt,runs,"[('const float *', 'A'), ('float *', 'B'), ('const int', 'n')]"
14395,10,cu_elementWiseMultiply,runs,"[('float *', 'A'), ('const float *', 'B'), ('const int', 'n')]"
14395,11,cu_elementWiseMultiply,runs,"[('float *', 'A'), ('float', 'B'), ('const int', 'n')]"
14395,12,cu_elementWiseMultiply,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('const int', 'n')]"
14395,13,cu_elementWiseMultiply,runs,"[('const float *', 'A'), ('const float', 'B'), ('float *', 'C'), ('const int', 'n')]"
14395,14,cu_setAll,runs,"[('float *', 'A'), ('const float', 'val'), ('const int', 'n')]"
14395,15,cu_exp,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const int', 'n')]"
14395,16,cu_log,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const int', 'n')]"
14395,17,cu_pow,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const float', 'power'), ('const int', 'n')]"
14395,18,cu_divide,runs,"[('float *', 'numerator'), ('float', 'denominator'), ('const int', 'n')]"
14395,19,cu_divide,runs,"[('const float *', 'numerator'), ('float *', 'dst'), ('const float', 'denominator'), ('const int', 'n')]"
14395,20,cu_divide,runs,"[('const float', 'numerator'), ('const float *', 'denominator'), ('float *', 'dst'), ('const int', 'n')]"
14395,21,cu_divide,runs,"[('const float *', 'numerator'), ('const float *', 'denominator'), ('float *', 'dst'), ('const int', 'n')]"
14395,22,cu_sum,runs,"[('const float *', 'src'), ('float *', 'sum'), ('float *', 'global_mem'), ('const int', 'n')]"
14395,23,cu_minMaxLoc,runs,"[('const float *', 'src'), ('float *', 'minValue'), ('float *', 'maxValue'), ('int *', 'minLoc'), ('int *', 'maxLoc'), ('float *', 'minValCache'), ('float *', 'maxValCache'), ('int *', 'minLocCache'), ('int *', 'maxLocCache'), ('const int', 'n')]"
14395,24,cu_greaterThan,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const float', 'val'), ('const int', 'n')]"
14395,25,cu_greaterThanOrEqualTo,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const float', 'val'), ('const int', 'n')]"
14395,26,cu_lessThan,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const float', 'val'), ('const int', 'n')]"
14395,27,cu_lessThanOrEqualTo,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const float', 'val'), ('const int', 'n')]"
14395,28,cu_equalTo,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const float', 'val'), ('const int', 'n')]"
14395,29,cu_fliplr,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const int', 'rows'), ('const int', 'cols'), ('const int', 'n')]"
14395,30,cu_padding,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const int', 'rows1'), ('const int', 'cols1'), ('const int', 'cols2'), ('const int', 'n')]"
14395,31,cu_depadding,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const int', 'rows1'), ('const int', 'cols1'), ('const int', 'cols2'), ('const int', 'n')]"
14395,32,cu_repmat,runs,"[('const float *', 'a'), ('float *', 'dst'), ('const int', 'rowsa'), ('const int', 'colsa'), ('const int', 'rowsdst'), ('const int', 'colsdst'), ('const int', 'n')]"
14395,33,cu_kron,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'dst'), ('const int', 'rowsa'), ('const int', 'colsa'), ('const int', 'rowsdst'), ('const int', 'colsdst'), ('const int', 'n')]"
14395,34,cu_downSample,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const int', 'y_stride'), ('const int', 'x_stride'), ('const int', 'colssrc'), ('const int', 'n')]"
14395,35,cu_interpolation,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const int', 'colssrc'), ('const int', 'colsdst'), ('const int', '_stride'), ('const int', 'n')]"
14395,36,cu_getRange,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const int', 'xstart'), ('const int', 'xend'), ('const int', 'ystart'), ('const int', 'yend'), ('const int', 'colssrc'), ('const int', 'n')]"
14395,37,cu_copyMakeBorder,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const int', 'rowssrc'), ('const int', 'colssrc'), ('const int', 'up'), ('const int', 'down'), ('const int', 'left'), ('const int', 'right'), ('const int', 'n')]"
14395,38,cu_pooling_max,runs,"[('const float *', 'src'), ('float *', 'dst'), ('float *', 'loc'), ('const int', 'rowssrc'), ('const int', 'colssrc'), ('const int', 'rowsdst'), ('const int', 'colsdst'), ('const int', 'stridex'), ('const int', 'stridey'), ('const int', 'n')]"
14395,39,cu_pooling_mean,runs,"[('const float *', 'src'), ('float *', 'dst'), ('float *', 'loc'), ('const int', 'rowssrc'), ('const int', 'colssrc'), ('const int', 'rowsdst'), ('const int', 'colsdst'), ('const int', 'stridex'), ('const int', 'stridey'), ('const int', 'n')]"
14395,40,cu_pooling_overlap_max,runs,"[('const float *', 'src'), ('float *', 'dst'), ('float *', 'loc'), ('const int', 'rowssrc'), ('const int', 'colssrc'), ('const int', 'rowsdst'), ('const int', 'colsdst'), ('const int', 'sizex'), ('const int', 'sizey'), ('const int', 'n')]"
14395,41,cu_unpooling,runs,"[('const float *', 'src'), ('const float *', 'loc'), ('float *', 'dst'), ('const int', 'colsdst'), ('const int', 'n')]"
14395,42,cu_multiply,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'rowsa'), ('int', 'colsa'), ('int', 'rowsb'), ('int', 'colsb'), ('int', 'rowsc'), ('int', 'colsc')]"
14395,43,cu_transpose,runs,"[('const float *', 'src'), ('float *', 'dst'), ('int', 'colssrc'), ('int', 'colsdst'), ('int', 'n')]"
14395,44,cu_sigmoid,runs,"[('const float *', 'src'), ('float *', 'dst'), ('int', 'n')]"
14395,45,cu_dsigmoid,runs,"[('const float *', 'src'), ('float *', 'dst'), ('int', 'n')]"
14395,46,cu_dsigmoid_a,runs,"[('const float *', 'src'), ('float *', 'dst'), ('int', 'n')]"
14395,47,cu_relu,runs,"[('const float *', 'src'), ('float *', 'dst'), ('int', 'n')]"
14395,48,cu_drelu,runs,"[('const float *', 'src'), ('float *', 'dst'), ('int', 'n')]"
14395,49,cu_leaky_relu,runs,"[('const float *', 'src'), ('float *', 'dst'), ('int', 'n')]"
14395,50,cu_dleaky_relu,runs,"[('const float *', 'src'), ('float *', 'dst'), ('int', 'n')]"
14395,51,cu_tanh,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const int', 'n')]"
14395,52,cu_dtanh,runs,"[('const float *', 'src'), ('float *', 'dst'), ('const int', 'n')]"
14397,1,kernel,runs,"[('float *', 'x'), ('int', 'n')]"
1440,0,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
1440,1,add,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
14408,8,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'N')]"
14408,9,kernel,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'counter'), ('int', 'n')]"
14408,10,kernel,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'counter'), ('int', 'n')]"
14408,11,computeSumPerBlock,runs,"[('int *', 'a'), ('int', 'N')]"
14421,2,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
14421,4,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
14421,9,set_rngstate_kernel,runs,"[('curandStateMtgp32 *', 'state'), ('mtgp32_kernel_params *', 'kernel')]"
14421,15,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
14421,16,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
14421,17,THCudaTensor_kernel_indexFill,runs,"[('float *', 'tensor'), ('long *', 'stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim'), ('float', 'val')]"
14421,18,THCudaTensor_kernel_indexCopy,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
14421,19,THCudaTensor_kernel_indexAdd,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
14421,20,THCudaTensor_kernel_indexSelect_contiguous,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long', 'stride'), ('float *', 'index'), ('long', 'idxSize')]"
14421,22,THCudaTensor_copyUpperSymmetric,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'len')]"
14424,0,setupCuRandState,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
14424,5,convn_valid_kernel,runs,"[('float *', 'output'), ('float *', 'data'), ('float *', 'kernel'), ('const int', 'H'), ('const int', 'W'), ('const int', 'kH'), ('const int', 'kW')]"
14424,6,convn_same_kernel,runs,"[('float *', 'output'), ('float *', 'data'), ('float *', 'kernel'), ('const int', 'H'), ('const int', 'W'), ('const int', 'kH'), ('const int', 'kW')]"
14424,8,convn_full_kernel,runs,"[('float *', 'output'), ('float *', 'data'), ('float *', 'kernel'), ('int', 'H'), ('int', 'W'), ('int', 'kH'), ('int', 'kW')]"
14432,3,test_num_vgpr_num_sgpr,runs,[]
14434,0,update_positions,runs,"[('float', 'max_speed'), ('float *', 'outputs_d'), ('float *', 'sweepers_d')]"
14434,1,cuda_neural_net,runs,"[('float *', 'Weights_D'), ('int', 'num_per_sweeper'), ('int', 'num_per_layer'), ('int', 'num_per_input'), ('int', 'num_per_output'), ('int', 'num_weights'), ('int', 'num_layers'), ('float', 'response'), ('float *', 'inputs_d'), ('float *', 'outputs_d')]"
14434,2,calculate_distances,runs,"[('float *', 'sweeper_pos_v'), ('float *', 'mine_pos_v'), ('int', 'num_sweepers'), ('int', 'num_mines'), ('float *', 'distance_v'), ('float *', 'inputs'), ('int *', 'sweeper_score_v'), ('int', 'width'), ('int', 'height'), ('int', 'size')]"
14434,3,find_closest_mine,runs,"[('float *', 'mine_pos_v'), ('float *', 'distances_v'), ('int *', 'mineIdx_v'), ('int', 'num_sweeprs'), ('int', 'num_mines'), ('float *', 'inputs')]"
14435,25,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14436,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14439,1,cutoff_log_kernel,runs,"[('double *', 'device_array'), ('double', 'min_signal')]"
14439,3,weighting_kernel,runs,"[('double const *', 'matrices'), ('double const *', 'weights'), ('double *', 'results')]"
14439,4,weighting_kernel_transposed,runs,"[('double const *', 'matrices'), ('double const *', 'weights'), ('double *', 'results')]"
14439,5,transpose_kernel,runs,"[('double const *', 'matrices'), ('double *', 'transposed')]"
14439,6,assemble_tensors,runs,"[('double const *', 'tensor_input'), ('double *', 'tensors'), ('int', 'tensor_input_elements')]"
14439,8,multiply_arrays,runs,"[('double *', 'signals'), ('double const *', 'weights')]"
14440,0,Run_Me,runs,"[('int *', 'The_Array'), ('int', 'size')]"
14448,0,smoothGray,runs,"[('unsigned char *', 'imagem'), ('unsigned char *', 'saida'), ('unsigned int', 'cols'), ('unsigned int', 'linhas')]"
14448,1,smoothColor,runs,"[('unsigned char *', 'imagem'), ('unsigned char *', 'saida'), ('unsigned int', 'cols'), ('unsigned int', 'linhas')]"
14455,0,computeSquare,runs,"[('int *', 'd_in'), ('int *', 'd_out')]"
14458,30,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14459,1,block_volume,runs,"[('unsigned char *', 'image_p'), ('unsigned char *', 'dest_p'), ('int', 'srcWidth'), ('int', 'srcHeight'), ('int', 'srcDepth'), ('int', 'desWidth'), ('int', 'desHeight'), ('int', 'desDepth')]"
14463,6,kernel_calculate_vertex_V,runs,"[('float3 *', 'vbo_ptr'), ('float *', 'd_ptr')]"
14463,8,kernel_calculate_normal_V,runs,"[('float3 *', 'vbo_ptr'), ('float *', 'd_ptr')]"
14465,6,fillArray,runs,"[('float *', 'array'), ('float', 'value'), ('int', 'arrayLength')]"
1447,6,EmptyKernel,runs,[]
14471,16,SegmentAllocLocInit,runs,"[('ushort2 *', 'gSegments'), ('const uint32_t', 'segmentCount')]"
14472,1,cuda_kernel_texture_2d,runs,"[('unsigned char *', 'surface'), ('int', 'width'), ('int', 'height'), ('size_t', 'pitch'), ('float', 't')]"
14482,0,kernel_add,runs,"[('char *', 'newB'), ('char *', 'first'), ('char *', 'second'), ('int', 'size_biggest'), ('int', 'diff'), ('int *', 'size_newB')]"
14482,1,kernel_sub,runs,"[('char *', 'newB'), ('char *', 'first'), ('char *', 'second'), ('int', 'size_biggest'), ('int', 'diff'), ('int *', 'size_newB')]"
14482,2,kernel_mul,runs,"[('char *', 'newB'), ('char *', 'first'), ('char *', 'second'), ('int', 'size_first'), ('int', 'size_second'), ('int *', 'size_newB')]"
14482,3,kernel_div,runs,"[('char *', 'newB'), ('char *', 'first'), ('char *', 'second'), ('int', 'size_first'), ('int', 'size_second'), ('int *', 'size_newB'), ('char *', 'aux')]"
14484,0,histogram_cuda,runs,"[('int *', 'histogram'), ('float *', 'values'), ('size_t', 'nb'), ('float', 'bin_size'), ('float', 'min'), ('int', 'bins'), ('int', 'nb_thread')]"
14484,1,b_scan_reduce_cuda,runs,"[('int *', 'values'), ('int *', 'cumulative'), ('size_t', 'bins')]"
14484,2,max_min_cuda,runs,"[('float *', 'd_in1'), ('float *', 'd_in2'), ('float *', 'd_max'), ('float *', 'd_min'), ('size_t', 'nb')]"
14486,0,matrixMultiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
14486,1,matrixMultiplyShared,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
14486,2,matrixMultiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
14486,3,matrixMultiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
14486,9,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
14502,3,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int *', 'd'), ('int *', 'e'), ('int *', 'f')]"
14521,3,Kernel11,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14521,4,Kernel01,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14521,5,Kernel00,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14521,6,Kernel11,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14521,7,Kernel02,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14521,8,Kernel01,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14521,9,Kernel11,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14521,10,Kernel01,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14521,11,Kernel00,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14521,12,Kernel11,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14521,13,Kernel01,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14521,14,Kernel10,runs,"[('int', 'N'), ('int', 'M'), ('int', 'P'), ('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
14526,30,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14529,0,gameOfLifeKernel,runs,"[('unsigned char *', 'd_src'), ('unsigned char *', 'd_dst'), ('const size_t', 'width'), ('const size_t', 'height')]"
14534,20,rectified_linear_kernel,runs,"[('float4 __restrict *', 'output'), ('const float4 __restrict *', 'input'), ('float', 'negative_slope'), ('int', 'elem_count')]"
14534,50,add_upd_kernel,runs,"[('float4 __restrict *', 'output_buf'), ('const float4 __restrict *', 'input_buf1'), ('const float4 __restrict *', 'input_buf2'), ('float', 'alpha1'), ('float', 'alpha2'), ('int', 'elem_count')]"
14534,54,rectified_linear_upd_kernel,runs,"[('const float4 __restrict *', 'input'), ('float4 __restrict *', 'output'), ('uint4 __restrict *', 'bits_buffer'), ('float', 'negative_slope'), ('int', 'elem_count')]"
14534,55,rectified_linear_backprop_upd_kernel,runs,"[('float4 __restrict *', 'input_errors'), ('const float4 __restrict *', 'output_errors'), ('const uint4 __restrict *', 'bits_buffer'), ('float', 'negative_slope'), ('bool', 'add_update_to_destination'), ('int', 'elem_count')]"
14534,56,absolute_kernel,runs,"[('float4 __restrict *', 'output'), ('const float4 __restrict *', 'input'), ('int', 'elem_count')]"
14534,66,add_kernel,runs,"[('float4 __restrict *', 'output_buf'), ('const float4 __restrict *', 'input_buf1'), ('const float4 __restrict *', 'input_buf2'), ('float', 'alpha1'), ('float', 'alpha2'), ('int', 'elem_count')]"
14534,69,set_with_value_util_kernel,runs,"[('float4 __restrict *', 'buf'), ('float', 'v'), ('int', 'elem_count')]"
14534,70,set_with_value_util_kernel,runs,"[('int4 __restrict *', 'buf'), ('int', 'v'), ('int', 'elem_count')]"
14534,71,set_with_value_util_kernel,runs,"[('double2 __restrict *', 'buf'), ('double', 'v'), ('int', 'elem_count')]"
14534,73,apply_weight_decay_util_kernel,runs,"[('const float4 __restrict *', 'learning_rates'), ('float4 __restrict *', 'weights'), ('float', 'weight_decay'), ('int', 'elem_count')]"
14534,74,apply_gradient_with_weight_decay_util_kernel,runs,"[('const float2 __restrict *', 'gradient'), ('const float2 __restrict *', 'learning_rates'), ('float2 __restrict *', 'weights'), ('float', 'weight_decay'), ('int', 'elem_count')]"
14534,75,multiply_by_itself_training_util_kernel,runs,"[('const float4 __restrict *', 'input_buf'), ('float4 __restrict *', 'output_buf'), ('int', 'elem_count')]"
14534,76,copy_buffer_util_kernel,runs,"[('const float4 __restrict *', 'input_buf'), ('float4 __restrict *', 'output_buf'), ('int', 'elem_count')]"
14534,91,absolute_upd_kernel,runs,"[('const float4 __restrict *', 'input'), ('float4 __restrict *', 'output'), ('int', 'elem_count')]"
14534,92,absolute_deriviative_upd_kernel,runs,"[('float4 __restrict *', 'input_errors'), ('const float4 __restrict *', 'output_errors'), ('const float4 __restrict *', 'input_neurons'), ('bool', 'add_update_to_destination'), ('int', 'elem_count')]"
14537,0,subtract_psf_kernel,runs,"[('double *', 'res_p_trans'), ('const double *', 'psf_p_trans'), ('const int', 'stopx'), ('const int', 'stopy'), ('const int', 'diff'), ('const int', 'linsize'), ('const double', 'peak_x_gain')]"
14537,19,vis2ints,runs,"[('double', 'scale'), ('double2 *', 'vis_in'), ('int2 *', 'vis_out'), ('int', 'npts')]"
14537,20,set_bookmarks,runs,"[('int2 *', 'vis_in'), ('int', 'npts'), ('int', 'blocksize'), ('int', 'blockgrid'), ('int *', 'bookmarks')]"
14538,28,sync_conv_groups,runs,[]
14541,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14541,1,gpuSmMM,runs,"[('float *', 'Ad'), ('float *', 'Bd'), ('float *', 'Cd'), ('int', 'dimention')]"
14541,2,gpuMM,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
14541,3,MatrixMulKernel,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'Width')]"
14541,4,MatrixMulKernelTiled,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'Width')]"
14541,5,MatrixMulKernel,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'Width')]"
14541,6,MatrixMulKernelTiled,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'Width')]"
14541,7,gpu_matrixmult,runs,"[('int *', 'gpu_a'), ('int *', 'gpu_b'), ('int *', 'gpu_c'), ('int', 'N')]"
14541,8,gpuMM,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
14541,9,gpu_Comput,runs,"[('int *', 'h'), ('int', 'N'), ('int', 'T')]"
14541,13,gpuMM,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
14541,14,gpuMM,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'N')]"
14548,0,integrateSimple,runs,"[('float *', 'sum'), ('float', 'step'), ('int', 'threads'), ('int', 'blocks')]"
14548,1,integrateOptimised,runs,"[('int *', 'n'), ('float *', 'g_sum')]"
14548,2,sumReduce,runs,"[('int *', 'n'), ('float *', 'g_sum')]"
14559,0,vadd,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
14561,7,cudaAcc_GPS_kernel_mod3,runs,"[('int', 'NumDataPoints'), ('float2 *', 'FreqData'), ('float *', 'PowerSpectrum')]"
14561,15,cudaAcc_dev_t_funct,runs,"[('float', 'PulseThresh'), ('int', 'PulseMax'), ('int', 'di'), ('float *', 'dev_t_funct_cache'), ('float', 'pulse_display_thresh')]"
14564,37,cuda_debug_kernel,runs,[]
14564,75,cuda_debug_kernel,runs,[]
14581,33,sync_conv_groups,runs,[]
14582,25,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14584,0,reduce,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
14584,1,invertVectorElements,runs,"[('float *', 'vector'), ('int', 'n')]"
14585,32,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14588,0,CycleRoutineGPU,runs,"[('char *', 'CurrentState'), ('char *', 'NextState'), ('int', 'X'), ('int', 'Dimension')]"
14592,3,cunn_SoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'nframe'), ('int', 'dim')]"
14592,6,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
14592,7,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
14592,9,maxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14592,10,atomicmaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14592,14,cunn_ClassNLLCriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('int', 'sizeAverage'), ('int', 'ntarget')]"
14592,15,cunn_ClassNLLCriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('float', 'grad'), ('int', 'ntarget')]"
14592,16,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14592,17,subgradweight,runs,"[('float *', 'input'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'gradBias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW'), ('float', 'scale')]"
14592,18,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14592,19,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14592,20,cunn_MSECriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeAverage')]"
14592,21,cunn_MSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
14592,26,max_output,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
14592,27,max_gradInput,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
14592,28,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14592,29,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14592,30,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14592,32,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
14592,33,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
14592,35,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
14592,36,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
14592,38,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride')]"
14592,39,min_output,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
14592,40,min_gradInput,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
14598,7,emptyKernel,runs,[]
146,2,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
146,4,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
146,9,set_rngstate_kernel,runs,"[('curandStateMtgp32 *', 'state'), ('mtgp32_kernel_params *', 'kernel')]"
146,15,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
146,16,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
146,17,THCudaTensor_kernel_indexFill,runs,"[('float *', 'tensor'), ('long *', 'stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim'), ('float', 'val')]"
146,18,THCudaTensor_kernel_indexCopy,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
146,19,THCudaTensor_kernel_indexSelect_contiguous,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long', 'stride'), ('float *', 'index'), ('long', 'idxSize')]"
146,20,THCudaTensor_kernel_indexSelect,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long *', 'src_stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim')]"
146,21,THCudaTensor_copyUpperSymmetric,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'len')]"
14603,1,mergeHistogram256Kernel,runs,"[('uint *', 'd_Histogram'), ('uint *', 'd_PartialHistograms'), ('uint', 'histogramCount')]"
14603,4,mergeHistogram64Kernel,runs,"[('uint *', 'd_Histogram'), ('uint *', 'd_PartialHistograms'), ('uint', 'histogramCount')]"
14603,6,mergeHistogram256Kernel,runs,"[('uint *', 'd_Histogram'), ('uint *', 'd_PartialHistograms'), ('uint', 'histogramCount')]"
14603,8,mergeHistogram64Kernel,runs,"[('float *', 'd_Histogram'), ('float *', 'd_PartialHistograms'), ('uint', 'histogramCount')]"
14603,9,combine_im_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
14603,11,mergeHistogram256Kernel,runs,"[('float *', 'd_Histogram'), ('float *', 'd_PartialHistograms'), ('uint', 'histogramCount')]"
14607,30,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14613,0,MatrVectMul,runs,"[('int *', 'd_c'), ('int *', 'd_a'), ('int *', 'd_b')]"
14613,1,MatrVectMul,runs,"[('int *', 'd_c'), ('int *', 'd_a'), ('int *', 'd_b')]"
14613,2,kernal1,runs,"[('int *', 'A'), ('int *', 'B'), ('int', 'numElements')]"
14613,3,kernal2,runs,"[('int *', 'A'), ('int', 'k'), ('int', 'numElements')]"
14613,4,cuda_multi_matrix_on_vector,runs,"[('int *', 'matrix'), ('int *', 'vector'), ('int *', 'new_vector'), ('int', 'numElements')]"
14619,8,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
14624,3,test_num_vgpr_num_sgpr,runs,[]
14627,0,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
14627,1,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
14627,2,matrixMultiplyShared,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
14627,3,matrixMultiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
14627,4,scan,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
14636,1,smooth,runs,"[('unsigned char *', 'entrada'), ('unsigned char *', 'saida'), ('int', 'n_linhas'), ('int', 'n_colunas')]"
14646,1,ker_sparse_to_dense_assign,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
14646,2,ker_dense_to_sparse_subtract,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
14646,3,ker_sparse_to_dense_block_assign_and_multiply,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float', 'mult'), ('float *', 'src'), ('float *', 'trg')]"
14646,6,ker_dense_to_sparse_block_add,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float *', 'src'), ('float *', 'trg')]"
14653,25,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14656,0,Sobel_Kernel,runs,"[('unsigned int *', 'pic'), ('int *', 'result'), ('int', 'xsize'), ('int', 'ysize'), ('int', 'thresh')]"
14663,0,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
14663,3,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
14663,5,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
14663,7,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14663,9,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
14663,11,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14663,12,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14663,14,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
14663,17,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
14663,20,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
14665,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
14668,0,vec_add,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'size')]"
14671,0,testkernel,runs,[]
14684,0,decrement,runs,"[('char *', 'line'), ('char *', 'answer')]"
14686,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
147,0,searcher,runs,"[('const int *', 'M'), ('int *', 'res'), ('size_t *', 'itersNum')]"
14701,0,prime,runs,"[('int *', 'a'), ('int', 'count')]"
14701,1,cuSort,runs,"[('float *', 'data'), ('int', 'bucketSize'), ('int *', 'startPoint')]"
14702,0,computeCell,runs,"[('char *', 'cellData'), ('unsigned int *', 'width'), ('unsigned int *', 'height')]"
14707,0,kernel_trialDiv,runs,"[('long *', 'n'), ('int *', 'r')]"
14707,1,kernel_jacobi,runs,"[('long *', 'nArray'), ('long *', 'dArray'), ('long', 'len')]"
14707,2,kernel_lucas,runs,"[('long *', 'nArray'), ('long *', 'dArray'), ('int *', 'rArray'), ('long', 'len')]"
14710,9,cunn_MSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
14710,11,cunn_MultiMarginCriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeaverage')]"
14710,29,THCudaTensor_kernel_addcdiv,runs,"[('float *', 'data'), ('float', 'value'), ('float *', 'src1'), ('float *', 'src2'), ('long', 'size')]"
14714,0,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
14714,3,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
14714,5,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
14714,7,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14714,9,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
14714,11,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14714,12,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14714,14,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
14714,17,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
14714,20,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
14716,2,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
14716,4,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
14716,9,set_rngstate_kernel,runs,"[('curandStateMtgp32 *', 'state'), ('mtgp32_kernel_params *', 'kernel')]"
14716,15,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
14716,16,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
14716,17,THCudaTensor_kernel_indexFill,runs,"[('float *', 'tensor'), ('long *', 'stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim'), ('float', 'val')]"
14716,18,THCudaTensor_kernel_indexCopy,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
14716,19,THCudaTensor_kernel_indexAdd,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
14716,20,THCudaTensor_kernel_indexSelect_contiguous,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long', 'stride'), ('float *', 'index'), ('long', 'idxSize')]"
14716,22,THCudaTensor_copyUpperSymmetric,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'len')]"
1474,161,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1474,220,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
1474,221,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
1474,222,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
1474,227,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
1474,333,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
1474,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
14745,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
14745,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
14745,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
14745,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
14745,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
14748,13,jackpot_compactTest_gpu_ADD,runs,"[('uint32_t *', 'data'), ('uint32_t *', 'partial_sums'), ('int', 'len')]"
14762,3,cunn_SoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'nframe'), ('int', 'dim')]"
14762,6,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
14762,7,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
14762,13,cunn_ClassNLLCriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('int', 'sizeAverage'), ('int', 'ntarget')]"
14762,14,cunn_ClassNLLCriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('float', 'grad'), ('int', 'ntarget')]"
14762,15,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14762,16,subgradweight,runs,"[('float *', 'input'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'gradBias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW'), ('float', 'scale')]"
14762,17,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14762,18,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14762,19,cunn_OneVsAllMultiMarginCriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeaverage'), ('float *', 'positiveWeight')]"
14762,20,cunn_OneVsAllMultiMarginCriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeaverage'), ('float *', 'positiveWeight')]"
14762,21,cunn_MSECriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeAverage')]"
14762,22,cunn_MSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
14762,27,max_output,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
14762,28,max_gradInput,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
14762,29,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14762,30,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14762,31,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14762,33,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
14762,34,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
14762,36,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
14762,37,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
14762,39,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride')]"
14762,40,cunn_OneVsAllNLLCriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeaverage'), ('float *', 'positiveWeight')]"
14762,41,cunn_OneVsAllNLLCriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeaverage'), ('float *', 'positiveWeight')]"
14762,42,min_output,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
14762,43,min_gradInput,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
14764,1,process_coarseness_ak_pix,runs,"[('double *', 'output_ak'), ('double *', 'input_img'), ('int', 'colsize'), ('int', 'rowsize'), ('long', 'lenOf_ak')]"
14764,2,process_coarseness_ek_pix,runs,"[('double *', 'output_ak'), ('double *', 'output_ekh'), ('double *', 'output_ekv'), ('int', 'colsize'), ('int', 'rowsize'), ('long', 'lenOf_ek')]"
14764,3,kernel_conv,runs,"[('double2 *', 'd_c'), ('double *', 'd_a'), ('double2 *', 'd_b'), ('int *', 'd_row_vect'), ('int *', 'd_col_vect'), ('int', 'ma'), ('int', 'na'), ('int', 'mb'), ('int', 'nb'), ('int', 'mc'), ('int', 'nc')]"
14764,4,kennel_matrixQ,runs,"[('double *', 'd_P'), ('double *', 'd_px'), ('double *', 'd_py'), ('double *', 'd_Q'), ('int', 'Ng')]"
14768,1,matrixAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14768,2,enumsort,runs,"[('int *', 'deva'), ('int *', 'devn')]"
14768,4,quickSort,runs,"[('int *', 'x'), ('int *', 'dfirst'), ('int *', 'dlast'), ('int *', 'list')]"
14769,0,Denrho,runs,"[('float *', 'u_d'), ('float *', 'f_d'), ('int', 'ArraySizeX'), ('int', 'ArraySizeY')]"
14769,1,iteration,runs,"[('float *', 'f_d'), ('int', 'ArraySizeX'), ('int', 'ArraySizeY')]"
14772,30,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14775,0,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
14775,3,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
14775,5,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
14775,7,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14775,9,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
14775,11,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14775,12,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
14775,14,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
14775,17,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
14775,20,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
14786,31,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
14786,32,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
14786,33,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
14787,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14793,31,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
14793,32,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
14793,33,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
14797,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
148,0,fill_,runs,"[('float *', 'input'), ('float', 'value'), ('int', 'size')]"
148,1,add_,runs,"[('float *', 'input'), ('float', 'value'), ('int', 'size')]"
148,2,mul_,runs,"[('float *', 'input'), ('float', 'factor'), ('int', 'size')]"
148,3,Normalize_get_norm_,runs,"[('float *', 'input'), ('float *', 'norm'), ('int', 'size1'), ('int', 'size23'), ('int', 'size023')]"
148,4,Normalize_forward_,runs,"[('float *', 'input'), ('float *', 'norm'), ('float *', 'output'), ('int', 'size23'), ('int', 'size123'), ('int', 'size0123')]"
148,6,fix_border_,runs,"[('float *', 'input'), ('int', 'pad_size'), ('int', 'side'), ('int', 'size3'), ('int', 'size23')]"
148,9,downsample_,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'factor'), ('int', 'size3'), ('int', 'size')]"
14804,7,emptyKernel,runs,[]
14806,41,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
14806,42,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
14806,43,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
14806,44,kMultiSoftmaxCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('float *', 'top5Probs'), ('const int', 'numCases'), ('const int', 'numOut'), ('const int', 'setSize')]"
14806,48,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
14809,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
14809,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
14809,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
14809,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
14809,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
14823,30,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14825,1,cuda_accumulate_occ,runs,"[('float *', 'device_mapOcc'), ('int', 'numObjs'), ('int', 'numClusters'), ('int', 'clusterStart'), ('int', 'sub_numClusters'), ('float *', 'device_reduceOcc')]"
14826,31,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
14826,32,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
14826,33,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
14835,2,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
14835,4,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
14835,9,set_rngstate_kernel,runs,"[('curandStateMtgp32 *', 'state'), ('mtgp32_kernel_params *', 'kernel')]"
14835,15,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
14835,16,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
14835,17,THCudaTensor_kernel_indexFill,runs,"[('float *', 'tensor'), ('long *', 'stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim'), ('float', 'val')]"
14835,18,THCudaTensor_kernel_indexCopy,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
14835,19,THCudaTensor_kernel_indexSelect_contiguous,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long', 'stride'), ('float *', 'index'), ('long', 'idxSize')]"
14835,21,THCudaTensor_copyUpperSymmetric,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'len')]"
14846,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
14847,0,CudaCompute,runs,"[('SubBlock *', 'd_sbs'), ('float *', 'd_x'), ('float *', 'd_y'), ('int', 'nblocks'), ('int', 'mem_b_size'), ('int', 'nrows'), ('int', 'ncols'), ('float *', 'sub_y_arr')]"
14847,1,CudaMergeResults,runs,"[('SubBlock *', 'd_sbs'), ('float *', 'd_x'), ('float *', 'd_y'), ('int', 'nblocks'), ('int', 'mem_b_size'), ('int', 'nrows'), ('int', 'ncols'), ('float *', 'sub_y_arr')]"
14847,2,cudaDummy,runs,[]
14856,2,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
14856,4,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
14856,9,set_rngstate_kernel,runs,"[('curandStateMtgp32 *', 'state'), ('mtgp32_kernel_params *', 'kernel')]"
14856,15,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
14856,16,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
14856,17,THCudaTensor_kernel_indexFill,runs,"[('float *', 'tensor'), ('long *', 'stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim'), ('float', 'val')]"
14856,18,THCudaTensor_kernel_indexCopy,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
14856,19,THCudaTensor_kernel_indexAdd,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
14856,20,THCudaTensor_kernel_indexSelect_contiguous,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long', 'stride'), ('float *', 'index'), ('long', 'idxSize')]"
14856,22,THCudaTensor_copyUpperSymmetric,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'len')]"
14857,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14859,31,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
14859,32,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
14859,33,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
14869,0,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
14869,1,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
14869,2,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
14869,3,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
14869,4,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
14869,5,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
14869,6,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
14869,7,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
14869,8,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
14877,10,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
14877,11,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
14877,25,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14877,27,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14877,28,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14877,48,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
14877,49,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
14877,51,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
14877,52,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
14877,54,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride'), ('int', 'paddingValue')]"
1488,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1488,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
14887,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
14887,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
14887,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
14887,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
14887,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
14887,13,initGuessBuffers,runs,"[('const uchar4 *', 'srcImg'), ('float3 *', 'guess1'), ('float3 *', 'guess2'), ('const uint', 'nRows'), ('const uint', 'nCols')]"
14887,23,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
14887,34,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
14887,35,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
14887,36,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
14887,37,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
14887,38,hello,runs,[]
14887,42,hello,runs,[]
14888,0,transGPU,runs,"[('const float *', 'inMatrix'), ('float *', 'outMatrix'), ('const size_t', 'row'), ('const size_t', 'column')]"
14888,1,searchGPU,runs,"[('float *', 'data'), ('const float', 'x'), ('int *', 'result')]"
14888,2,calcIntegralGPU,runs,"[('float *', 'array'), ('const float', 'h'), ('const long', 'stepCount'), ('const int', 'threads'), ('const int', 'blocks')]"
14888,3,multMatrixGPU,runs,"[('const float *', 'matrixA'), ('const size_t', 'rowA'), ('const size_t', 'columnA'), ('const float *', 'matrixB'), ('const size_t', 'rowB'), ('const size_t', 'columnB'), ('float *', 'matrixC')]"
14889,1,check_if_unique,runs,"[('const unsigned *', 'keys'), ('unsigned *', 'is_unique'), ('size_t', 'kSize')]"
14889,3,prepare_indices,runs,"[('const unsigned', 'num_keys'), ('unsigned *', 'data')]"
1489,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
14892,36,fill_bspline_4,runs,"[('const float4 *', 'xyzq'), ('const int', 'ncoord'), ('const float *', 'recip'), ('const int', 'nfftx'), ('const int', 'nffty'), ('const int', 'nfftz'), ('int *', 'gix'), ('int *', 'giy'), ('int *', 'giz'), ('float *', 'charge'), ('float *', 'thetax'), ('float *', 'thetay'), ('float *', 'thetaz'), ('float *', 'dthetax'), ('float *', 'dthetay'), ('float *', 'dthetaz')]"
14892,64,change_theta,runs,"[('const int', 'ncoord'), ('const float3 *', 'theta'), ('float4 *', 'thetax'), ('float4 *', 'thetay'), ('float4 *', 'thetaz')]"
14903,31,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
14903,32,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
14903,33,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
14906,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
14909,1,countCellOccKernal,runs,"[('unsigned int *', 'd_hashArray'), ('unsigned int *', 'd_cellOccArray'), ('int', '_hashTableSize'), ('unsigned int', '_numPoints')]"
14909,4,testKernal,runs,[]
14909,5,fillIntZeroKernal,runs,"[('int *', '_bufferPtr'), ('int', 'size')]"
14911,28,sync_conv_groups,runs,[]
14914,1,feedbackward,runs,[]
1492,0,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
1492,1,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
14923,3,cunn_SoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'nframe'), ('int', 'dim'), ('int', 'stride')]"
14923,8,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
14923,9,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
14923,20,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14923,21,subgradweight,runs,"[('float *', 'input'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'gradBias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW'), ('float', 'scale')]"
14923,22,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14923,23,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14923,24,cunn_MSECriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeAverage')]"
14923,25,cunn_MSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
14923,35,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14923,36,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14923,37,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
14923,42,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
14923,43,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
14923,45,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
14923,46,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
14923,48,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride')]"
14924,7,tex_kernel,runs,"[('cudaTextureObject_t', 'texture_obj'), ('int', 'num_samples'), ('float *', 'output')]"
1493,0,find_max,runs,"[('int *', 'input'), ('int *', 'result'), ('int', 'n')]"
1493,1,find_max,runs,"[('int *', 'input'), ('int *', 'result'), ('int', 'n')]"
14931,31,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
14931,32,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
14931,33,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
14938,25,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14941,85,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
14941,86,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
14941,87,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
14941,88,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
14941,160,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
1495,4,CombineTwoChannels_Single,runs,"[('int *', 'OCTData_2Channls'), ('int *', 'OCTData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,5,CombineTwoChannels_Multi,runs,"[('int *', 'OCTData_2Channls'), ('int *', 'OCTData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,6,ReverseBackScanData,runs,"[('int *', 'OCTData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,7,GetMatrixA,runs,"[('int *', 'OCTData'), ('float *', 'MatrixA'), ('int', 'NumPolynomial'), ('int', 'OneDataSize')]"
1495,9,MinusByFittingFunction,runs,"[('int *', 'OCTData'), ('float *', 'PolyValue'), ('int', 'SizeZ')]"
1495,11,FrequencyAdjust,runs,"[('int *', 'OCTData'), ('float *', 'KSpaceData'), ('float *', 'PXScale'), ('int *', 'IndexArray'), ('int', 'CutIndex'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,14,ShiftFinalData,runs,"[('float *', 'AfterFFTData'), ('float *', 'ShiftData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'FinalSizeZ'), ('int', 'FinalDataSize')]"
1495,15,NormalizeData,runs,"[('float *', 'ShiftData'), ('float', 'MaxValue'), ('float', 'MinValue'), ('int', 'FinalDataSize')]"
1495,17,ZCalcBrightness,runs,"[('float *', 'DataArray'), ('float *', 'BrightArray'), ('int', 'size'), ('int', 'rows'), ('int', 'cols'), ('int', 'startIndex')]"
1495,22,ConnectPointsStatus,runs,"[('int *', 'PointType_BestN'), ('int *', 'ConnectStatus'), ('int', 'size'), ('int', 'rows'), ('int', 'ChooseBestN'), ('int', 'ConnectRadius')]"
1495,23,GetOtherSideView,runs,"[('float *', 'Data'), ('float *', 'OtherSideData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'FinalSizeZ')]"
1495,26,CombineTwoChannels_Single,runs,"[('int *', 'OCTData_2Channls'), ('int *', 'OCTData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,27,CombineTwoChannels_Multi,runs,"[('int *', 'OCTData_2Channls'), ('int *', 'OCTData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,28,ReverseBackScanData,runs,"[('int *', 'OCTData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,29,GetMatrixA,runs,"[('int *', 'OCTData'), ('float *', 'MatrixA'), ('int', 'NumPolynomial'), ('int', 'OneDataSize')]"
1495,31,MinusByFittingFunction,runs,"[('int *', 'OCTData'), ('float *', 'PolyValue'), ('int', 'SizeZ')]"
1495,33,FrequencyAdjust,runs,"[('int *', 'OCTData'), ('float *', 'KSpaceData'), ('float *', 'PXScale'), ('int *', 'IndexArray'), ('int', 'CutIndex'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,36,ShiftFinalData,runs,"[('float *', 'AfterFFTData'), ('float *', 'ShiftData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'FinalSizeZ'), ('int', 'FinalDataSize')]"
1495,37,NormalizeData,runs,"[('float *', 'ShiftData'), ('float', 'MaxValue'), ('float', 'MinValue'), ('int', 'FinalDataSize')]"
1495,39,ZCalcBrightness,runs,"[('float *', 'DataArray'), ('float *', 'BrightArray'), ('int', 'size'), ('int', 'rows'), ('int', 'cols'), ('int', 'startIndex')]"
1495,44,ConnectPointsStatus,runs,"[('int *', 'PointType_BestN'), ('int *', 'ConnectStatus'), ('int', 'size'), ('int', 'rows'), ('int', 'ChooseBestN'), ('int', 'ConnectRadius')]"
1495,45,GetOtherSideView,runs,"[('float *', 'Data'), ('float *', 'OtherSideData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'FinalSizeZ')]"
1495,51,CombineTwoChannels_Single,runs,"[('int *', 'OCTData_2Channls'), ('int *', 'OCTData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,52,CombineTwoChannels_Multi,runs,"[('int *', 'OCTData_2Channls'), ('int *', 'OCTData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,53,ReverseBackScanData,runs,"[('int *', 'OCTData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,54,GetMatrixA,runs,"[('int *', 'OCTData'), ('float *', 'MatrixA'), ('int', 'NumPolynomial'), ('int', 'OneDataSize')]"
1495,56,MinusByFittingFunction,runs,"[('int *', 'OCTData'), ('float *', 'PolyValue'), ('int', 'SizeZ')]"
1495,58,FrequencyAdjust,runs,"[('int *', 'OCTData'), ('float *', 'KSpaceData'), ('float *', 'PXScale'), ('int *', 'IndexArray'), ('int', 'CutIndex'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'SizeZ')]"
1495,61,ShiftFinalData,runs,"[('float *', 'AfterFFTData'), ('float *', 'ShiftData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'FinalSizeZ'), ('int', 'FinalDataSize')]"
1495,62,NormalizeData,runs,"[('float *', 'ShiftData'), ('float', 'MaxValue'), ('float', 'MinValue'), ('int', 'FinalDataSize')]"
1495,64,ZCalcBrightness,runs,"[('float *', 'DataArray'), ('float *', 'BrightArray'), ('int', 'size'), ('int', 'rows'), ('int', 'cols'), ('int', 'startIndex')]"
1495,69,ConnectPointsStatus,runs,"[('int *', 'PointType_BestN'), ('int *', 'ConnectStatus'), ('int', 'size'), ('int', 'rows'), ('int', 'ChooseBestN'), ('int', 'ConnectRadius')]"
1495,70,GetOtherSideView,runs,"[('float *', 'Data'), ('float *', 'OtherSideData'), ('int', 'SizeX'), ('int', 'SizeY'), ('int', 'FinalSizeZ')]"
14958,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
14964,0,funct,runs,"[('int', 'n'), ('int', 'k'), ('float *', 'x'), ('int *', 'qx')]"
14964,1,funct2,runs,"[('int', 'n'), ('int', 'k'), ('float *', 'x'), ('int *', 'qx')]"
14969,31,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
14969,32,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
14969,33,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
14970,9,stencil_1d,runs,"[('int', 'n'), ('double *', 'in'), ('double *', 'out')]"
14970,10,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14970,11,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14970,12,mykernel,runs,[]
14970,13,stencil_1d,runs,"[('int', 'n'), ('double *', 'in'), ('double *', 'out')]"
14970,14,printMat,runs,"[('const double *', 'A'), ('int', 'size')]"
14970,16,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14970,17,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14970,23,stencil_1d,runs,"[('int', 'n'), ('double *', 'in'), ('double *', 'out')]"
14970,24,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14970,26,mykernel,runs,[]
14970,28,printMat,runs,"[('const double *', 'A'), ('int', 'size')]"
14970,30,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
14977,0,reduceKernel,runs,"[('float *', 'array'), ('const size_t', 'array_size'), ('const unsigned int', 'op'), ('const size_t', 'step')]"
14977,2,scanKernel,runs,"[('unsigned int *', 'd_cdf'), ('unsigned int *', 'd_input'), ('const size_t', 'array_size')]"
14982,0,reduce,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
14982,1,invertVectorElements,runs,"[('float *', 'vector'), ('int', 'n')]"
14982,2,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
1499,1,CudaPermuteWeightsPVToCudnn,runs,"[('float *', 'dest'), ('float *', 'src'), ('int', 'numArbors'), ('int', 'outFeatures'), ('int', 'ny'), ('int', 'nx'), ('int', 'inFeatures')]"
1499,2,CudaPermutePVToCudnn,runs,"[('float *', 'dest'), ('float *', 'src'), ('int', 'outFeatures'), ('int', 'ny'), ('int', 'nx'), ('int', 'inFeatures'), ('int', 'manyScaleX'), ('int', 'manyScaleY'), ('int', 'cropX'), ('int', 'cropY')]"
1499,3,CudaPermuteWeightsPVToCudnn,runs,"[('float *', 'dest'), ('float *', 'src'), ('int', 'outFeatures'), ('int', 'ny'), ('int', 'nx'), ('int', 'inFeatures'), ('int', 'manyScaleX'), ('int', 'manyScaleY')]"
1499,4,CudaPermuteCudnnToPV,runs,"[('float *', 'dest'), ('float *', 'src'), ('int', 'outFeatures'), ('int', 'ny'), ('int', 'nx'), ('int', 'inFeatures'), ('int', 'manyScaleX'), ('int', 'manyScaleY')]"
15,0,SweHInit,runs,"[('double *', 'var_in1'), ('double *', 'var_in2'), ('double *', 'var_out'), ('int', 'size')]"
15,5,CopyVariable,runs,"[('double *', 'var_in'), ('double *', 'var_out'), ('int', 'size')]"
15,6,TopForcing,runs,"[('double', 'ppt'), ('double *', 'eff_rain'), ('int', 'size')]"
15,7,PondHeadInit,runs,"[('double *', 'ph'), ('int', 'size')]"
15,8,TopBottomBound2D,runs,"[('double *', 'Hs'), ('double *', 'Ztopo'), ('double *', 'K2n'), ('double *', 'K2s'), ('int', 'BC2D'), ('int', 'M'), ('int', 'N')]"
15,9,LeftRightBound2D,runs,"[('double *', 'Hs'), ('double *', 'Ztopo'), ('double *', 'K2e'), ('double *', 'K2w'), ('int', 'BC2D'), ('int', 'M'), ('int', 'N')]"
15,11,GetOutlet,runs,"[('double *', 'h'), ('double *', 'houtlet'), ('double *', 'u'), ('double *', 'uout'), ('double *', 'v'), ('double *', 'vout'), ('int', 'M'), ('int', 'N'), ('int', 't')]"
15,12,getqss,runs,"[('double *', 'IN'), ('double *', 'qss'), ('int', 'N'), ('int', 't')]"
15,13,VarPrint,runs,"[('double *', 'Var'), ('int', 'M'), ('int', 'N'), ('int', 'P')]"
15,14,vanGenuchtenIntial,runs,"[('double *', 'theta'), ('double *', 'K'), ('double *', 'Ksat'), ('double *', 'h'), ('int', 'size')]"
150,1,kInitIdentityMatrix,runs,"[('float *', 'a'), ('int', 'size'), ('int', 'num_elements')]"
15001,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
15007,0,mult_dist,runs,"[('int *', 'd_A'), ('int *', 'd_B'), ('int *', 'd_C')]"
15019,0,gamma_norm_kernel,runs,"[('float *', 'img'), ('int', 'image_height'), ('int', 'image_width'), ('int', 'image_step')]"
15019,2,histogram_kernel,runs,"[('float *', 'magnitude'), ('float *', 'phase'), ('float *', 'histograms'), ('int', 'input_width'), ('int', 'input_height'), ('int', 'cell_grid_width'), ('int', 'cell_grid_height'), ('int', 'magnitude_step'), ('int', 'phase_step'), ('int', 'histograms_step'), ('int', 'cell_width'), ('int', 'cell_height'), ('int', 'num_bins')]"
15019,3,block_normalization_kernel,runs,"[('float *', 'histograms'), ('float *', 'descriptor'), ('int', 'histograms_step'), ('int', 'block_grid_width'), ('int', 'block_grid_height'), ('int', 'block_width'), ('int', 'block_height'), ('int', 'num_bins'), ('int', 'cell_grid_width'), ('int', 'block_stride_x'), ('int', 'block_stride_y')]"
15022,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
15022,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
15022,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
15022,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
15022,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
15023,0,calcEnergyParallel,runs,"[('int *', 'atoms'), ('int', 'numAtoms'), ('int *', 'energies'), ('int', 'numEnergies')]"
15023,9,aggregateEnergies,runs,"[('double *', 'energies'), ('int', 'numEnergies'), ('int', 'interval'), ('int', 'batchSize')]"
15023,11,aggregateEnergies,runs,"[('double *', 'energies'), ('int', 'numEnergies'), ('int', 'interval'), ('int', 'batchSize')]"
15023,14,aggregateEnergies,runs,"[('double *', 'energies'), ('int', 'numEnergies'), ('int', 'interval'), ('int', 'batchSize')]"
15023,18,aggregateEnergies,runs,"[('double *', 'energies'), ('int', 'numEnergies'), ('int', 'interval'), ('int', 'batchSize')]"
15023,21,CoalescedKernel,runs,"[('int *', 'x'), ('int *', 'y'), ('int *', 'z'), ('int *', 'sum')]"
15028,0,block_sum,runs,"[('const float *', 'input'), ('float *', 'per_block_results'), ('const size_t', 'n')]"
15029,2,addVectors,runs,"[('const int', 'entries'), ('const float *', 'a'), ('const float *', 'b'), ('float *', 'ab')]"
15045,0,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
15048,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
15053,29,sync_conv_groups,runs,[]
15055,1,addSIMD,runs,"[('unsigned int *', 'data1'), ('unsigned int *', 'data2')]"
15055,4,erosion2,runs,"[('uint8_t *', 'inData'), ('uint8_t *', 'outData'), ('int', 'radiusX'), ('int', 'radiusY'), ('int', 'width'), ('int', 'height')]"
15055,5,erosion,runs,"[('uint8_t *', 'inData'), ('uint8_t *', 'outData'), ('int', 'radiusX'), ('int', 'radiusY'), ('int', 'width'), ('int', 'height')]"
15055,7,thresholdSIMD,runs,"[('unsigned int *', 'data'), ('unsigned int', 'threshold')]"
15055,8,convolution,runs,"[('uint8_t *', 'inData'), ('uint8_t *', 'outData'), ('int', 'width'), ('int', 'height'), ('float *', 'kernel'), ('int', 'kwidth'), ('int', 'kheight'), ('float', 'ksum')]"
15063,0,CalcInput,runs,"[('float *', 'screen'), ('float *', 'weight'), ('float *', 'd_Votes'), ('int', 'stride')]"
15063,1,FirstHidden,runs,"[('float *', 'input'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'd_numVotes'), ('float *', 'd_votes')]"
15063,2,OutputLayer,runs,"[('float *', 'hiddenVotes'), ('float *', 'weight'), ('int', 'd_numHiddenNodes'), ('float *', 'd_votes')]"
15063,3,GreyScreen,runs,"[('float *', 'd_pixelsR'), ('float *', 'd_pixelsG'), ('float *', 'd_pixelsB'), ('float *', 'd_reducePixels'), ('int', 'numPixels')]"
15063,4,ApplyPool5,runs,"[('float *', 'input'), ('float *', 'output')]"
15063,5,ApplySecondPool,runs,"[('float *', 'input'), ('float *', 'output')]"
15063,6,ApplyMat5,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'matrix')]"
15063,7,ApplyMat3,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'matrix')]"
15063,8,CombineScreen,runs,"[('float *', 'd_postEdge1'), ('float *', 'd_postEdge2'), ('float *', 'd_postGradient1'), ('float *', 'd_postGradient2'), ('float *', 'd_postGradient3'), ('float *', 'd_postSobel3LR'), ('float *', 'd_postSobel3UD'), ('float *', 'd_postSmooth31'), ('float *', 'd_output')]"
15063,9,updateInput,runs,"[('float *', 'screen'), ('float *', 'weight'), ('float *', 'd_Votes')]"
15063,12,updateOutputWeights,runs,"[('float *', 'd_weights'), ('float', 'error'), ('float', 'lr'), ('int', 'keypress'), ('int', 'numHiddenNeurons'), ('float *', 'outputTotals'), ('int', 'numInput')]"
15063,13,updateHiddenWeights,runs,"[('float *', 'd_weights'), ('float', 'error'), ('float', 'lr'), ('int', 'keyPress'), ('float *', 'd_outputweights'), ('int', 'screenSize'), ('int', 'numHiddenNeurons'), ('float *', 'd_bias'), ('float *', 'firstFire')]"
1507,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
1507,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1507,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1507,3,set_zero_kernel,runs,"[('float *', 'src'), ('int', 'size')]"
1507,5,binarize_weights_mean_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary'), ('float *', 'mean_arr_gpu')]"
1507,8,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
1507,9,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
1507,10,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
1507,12,im2col_align_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col'), ('const int', 'bit_align')]"
1507,19,transpose_uint32_kernel,runs,"[('uint32_t *', 'src'), ('uint32_t *', 'dst'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'src_align'), ('int', 'dst_align')]"
1507,21,repack_input_kernel,runs,"[('float *', 'input'), ('float *', 're_packed_input'), ('int', 'w'), ('int', 'h'), ('int', 'c')]"
1507,32,convolve_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad')]"
1507,33,convolve_bin_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad'), ('int', 'new_lda'), ('float *', 'mean_arr_gpu')]"
1507,35,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
1507,37,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
1507,39,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
1507,40,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
1507,41,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1507,42,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
1507,43,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1507,44,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
1507,47,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1507,48,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1507,49,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1507,50,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
1507,51,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1507,52,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1507,53,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1507,54,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1507,55,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1507,56,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1507,57,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1507,58,mask_kernel_new_api,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
1507,59,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
1507,60,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1507,61,simple_copy_kernel,runs,"[('int', 'size'), ('float *', 'src'), ('float *', 'dst')]"
1507,62,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1507,65,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
1507,66,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
1507,67,simple_input_shortcut_kernel,runs,"[('float *', 'in'), ('int', 'size'), ('float *', 'add'), ('float *', 'out')]"
1507,68,input_shortcut_kernel,runs,"[('float *', 'in'), ('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
1507,69,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1507,70,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1507,71,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1507,72,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
1507,73,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
1507,74,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1507,75,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
1507,76,softmax_kernel_new_api,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
1507,77,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
1507,78,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
1507,79,fix_nan_and_inf_kernel,runs,"[('float *', 'input'), ('size_t', 'size')]"
1507,80,is_nan_or_inf_kernel,runs,"[('float *', 'input'), ('size_t', 'size'), ('int *', 'pinned_return')]"
1507,81,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
1507,83,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
1507,84,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
1507,85,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
1507,86,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
15074,0,VecAdd,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C')]"
15076,0,kernel_offset,runs,"[('int *', 'key'), ('int *', 'idx'), ('int *', 'offset'), ('int', 'size')]"
15089,3,test_num_vgpr_num_sgpr,runs,[]
15090,1,setupRandStates,runs,"[('curandState_t *', 'state'), ('unsigned int', 'seed')]"
15093,3,cunn_SoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'nframe'), ('int', 'dim')]"
15093,6,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15093,7,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15093,13,cunn_ClassNLLCriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('int', 'sizeAverage'), ('int', 'ntarget'), ('float *', 'weights'), ('bool', 'apply_weights')]"
15093,14,cunn_ClassNLLCriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('float', 'grad'), ('int', 'ntarget'), ('float *', 'weights'), ('bool', 'apply_weights')]"
15093,15,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
15093,16,subgradweight,runs,"[('float *', 'input'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'gradBias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW'), ('float', 'scale')]"
15093,17,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
15093,18,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
15093,19,cunn_MSECriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeAverage')]"
15093,20,cunn_MSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
15093,25,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
15093,26,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
15093,27,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
15093,29,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
15093,30,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
15093,32,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
15093,33,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
15093,35,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride')]"
15095,29,sync_conv_groups,runs,[]
15096,4,precalculateABC,runs,"[('float4 *', 'ABCm'), ('float *', 'M'), ('float', 'timestep'), ('float', 'alpha'), ('unsigned int', 'numPoints')]"
15096,5,updateDisplacements_k,runs,"[('float4 *', 'Ui_t'), ('float4 *', 'Ui_tminusdt'), ('float *', 'M'), ('float4 *', 'Ri'), ('float4 *', 'Fi'), ('int', 'maxNumForces'), ('float4 *', 'ABC'), ('unsigned int', 'numPoints')]"
15099,2,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
15099,4,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
15099,9,THCudaTensor_kernel_indexFill,runs,"[('float *', 'tensor'), ('long *', 'stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim'), ('float', 'val')]"
15099,10,THCudaTensor_kernel_indexCopy,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
15099,11,THCudaTensor_kernel_indexSelect_contiguous,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long', 'stride'), ('float *', 'index'), ('long', 'idxSize')]"
15099,12,THCudaTensor_kernel_indexSelect,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long *', 'src_stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim')]"
15099,13,THCudaTensor_copyUpperSymmetric,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'len')]"
151,0,cuComputeDistanceTexture,runs,"[('int', 'wA'), ('float *', 'B'), ('int', 'wB'), ('int', 'pB'), ('int', 'dim'), ('float *', 'AB')]"
151,1,cuComputeDistanceGlobal,runs,"[('float *', 'A'), ('int', 'wA'), ('int', 'pA'), ('float *', 'B'), ('int', 'wB'), ('int', 'pB'), ('int', 'dim'), ('float *', 'AB')]"
151,2,cuInsertionSort,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'k')]"
151,3,cuParallelSqrt,runs,"[('float *', 'dist'), ('int', 'width')]"
151,5,cuComputeDistanceGlobal,runs,"[('float *', 'A'), ('int', 'wA'), ('int', 'pA'), ('float *', 'B'), ('int', 'wB'), ('int', 'pB'), ('int', 'dim'), ('float *', 'AB')]"
151,6,cuInsertionSort,runs,"[('float *', 'dist'), ('int', 'dist_pitch'), ('int *', 'ind'), ('int', 'ind_pitch'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
151,7,cuParallelSqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('int', 'k')]"
151,8,cuComputeNorm,runs,"[('float *', 'mat'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('float *', 'norm')]"
151,9,cuAddRNorm,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('float *', 'vec')]"
151,10,cuAddQNormAndSqrt,runs,"[('float *', 'vec1'), ('float *', 'vec2'), ('int', 'width')]"
151,11,cuInsertionSort,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'k')]"
151,12,cuComputeNorm,runs,"[('float *', 'mat'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('float *', 'norm')]"
151,13,cuAddRNorm,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('float *', 'vec')]"
151,14,cuInsertionSort,runs,"[('float *', 'dist'), ('int', 'dist_pitch'), ('int *', 'ind'), ('int', 'ind_pitch'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
151,15,cuAddQNormAndSqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('float *', 'q'), ('int', 'k')]"
151,16,compute_distances,runs,"[('float *', 'ref'), ('int', 'ref_width'), ('int', 'ref_pitch'), ('float *', 'query'), ('int', 'query_width'), ('int', 'query_pitch'), ('int', 'height'), ('float *', 'dist')]"
151,17,compute_distance_texture,runs,"[('cudaTextureObject_t', 'ref'), ('int', 'ref_width'), ('float *', 'query'), ('int', 'query_width'), ('int', 'query_pitch'), ('int', 'height'), ('float *', 'dist')]"
151,18,modified_insertion_sort,runs,"[('float *', 'dist'), ('int', 'dist_pitch'), ('int *', 'index'), ('int', 'index_pitch'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
151,19,compute_sqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('int', 'k')]"
151,20,compute_squared_norm,runs,"[('float *', 'array'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('float *', 'norm')]"
151,21,add_reference_points_norm,runs,"[('float *', 'array'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('float *', 'norm')]"
151,22,add_query_points_norm_and_sqrt,runs,"[('float *', 'array'), ('int', 'width'), ('int', 'pitch'), ('int', 'k'), ('float *', 'norm')]"
15112,1,convolution_kernel,runs,"[('unsigned char *', 'A'), ('unsigned char *', 'B')]"
15113,2,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
15113,4,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
15113,9,set_rngstate_kernel,runs,"[('curandStateMtgp32 *', 'state'), ('mtgp32_kernel_params *', 'kernel')]"
15113,15,sampleMultinomialWithReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'normDistPrefixSum')]"
15113,16,sampleMultinomialWithoutReplacement,runs,"[('curandStateMtgp32 *', 'state'), ('int', 'totalSamples'), ('int', 'sample'), ('float *', 'dest'), ('long', 'distributions'), ('int', 'categories'), ('float *', 'origDist'), ('float *', 'normDistPrefixSum')]"
15113,17,THCudaTensor_kernel_indexFill,runs,"[('float *', 'tensor'), ('long *', 'stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim'), ('float', 'val')]"
15113,18,THCudaTensor_kernel_indexCopy,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
15113,19,THCudaTensor_kernel_indexAdd,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
15113,20,THCudaTensor_kernel_indexSelect_contiguous,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long', 'stride'), ('float *', 'index'), ('long', 'idxSize')]"
15113,22,THCudaTensor_copyUpperSymmetric,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'len')]"
15116,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
15120,0,calcKernel,runs,"[('float *', 'd_in'), ('float *', 'd_out')]"
15122,0,testKernel,runs,"[('float *', 'd_matrixA'), ('float *', 'd_matrixB'), ('float *', 'd_matrixC'), ('const unsigned int', 'ah'), ('const unsigned int', 'aw'), ('const unsigned int', 'bh'), ('const unsigned int', 'bw')]"
1513,21,indices_offset_addition,runs,"[('int64_t *', 'indices'), ('int64_t *', 'offsets'), ('int64_t *', 'output_indices'), ('int', 'batch_size')]"
1513,23,GatherKernel,runs,"[('const float *', 'params'), ('int64_t', 'num_features'), ('int', 'embed_size'), ('int', 'batch_size'), ('int', 'query_nnz'), ('const int64_t *', 'indices'), ('float *', 'ret')]"
1513,24,OneHotKernel,runs,"[('const float *', 'params'), ('int64_t', 'num_features'), ('int', 'embed_size'), ('int', 'batch_size'), ('const int64_t *', 'indices'), ('float *', 'ret')]"
1513,25,GatherBackwardFuseSgdKernel,runs,"[('const float *', 'grads'), ('int64_t', 'num_features'), ('int', 'embed_size'), ('int', 'batch_size'), ('int', 'query_nnz'), ('const int64_t *', 'indices'), ('float', 'lr'), ('float *', 'params')]"
1513,30,box_encode_kernel,runs,"[('float *', 'targets_dx'), ('float *', 'targets_dy'), ('float *', 'targets_dw'), ('float *', 'targets_dh'), ('float4 *', 'boxes'), ('float4 *', 'anchors'), ('float', 'wx'), ('float', 'wy'), ('float', 'ww'), ('float', 'wh'), ('size_t', 'gt'), ('size_t', 'idxJump')]"
1513,36,box_iou_cuda_kernel,runs,"[('float *', 'box_iou'), ('float4 *', 'box1'), ('float4 *', 'box2'), ('long', 'M'), ('long', 'N'), ('int', 'idxJump')]"
1513,48,init_topp_id_val,runs,"[('int *', 'topp_id_val_buf'), ('int *', 'topp_offset_buf'), ('const int', 'batch_size'), ('const int', 'vocab_size')]"
1513,56,build_sequence_length_padding_offset,runs,"[('const int *', 'sequence_length'), ('const int', 'batch_size'), ('const int', 'max_seq_len'), ('int *', 'valid_word_num'), ('int *', 'tmp_mask_offset')]"
1513,62,topp_initialization_kernel,runs,"[('bool *', 'finished'), ('int *', 'sequence_length'), ('int *', 'word_ids'), ('int *', 'topp_id_val_buf'), ('int *', 'topp_offset_buf'), ('const int', 'batch_size'), ('const int', 'vocab_size'), ('const int', 'start_id')]"
15139,0,GaussianBlurCuda,runs,"[('unsigned char *', 'pic'), ('unsigned char *', 'outpic'), ('double *', 'mask'), ('int *', 'size')]"
15142,0,VectorAdd,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'n')]"
15142,2,SumaMatricesCU,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'width')]"
15144,12,helloWorldParallel,runs,[]
15158,1,testKernel,runs,[]
15158,4,testKernel4,runs,"[('float *', 'data1'), ('float *', 'data2')]"
15158,5,testKernel4r,runs,"[('float *', 'data1'), ('float *', 'data2')]"
15158,8,addDiffuseKernel,runs,"[('float *', 'data'), ('int', 'x'), ('int', 'y'), ('float', 'pressure')]"
15158,9,subDiffuseKernel,runs,"[('float *', 'data'), ('int', 'x'), ('int', 'y'), ('float', 'pressure')]"
15178,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15178,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15180,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15180,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15188,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
15188,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
15189,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15189,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15193,0,cuda_hello,runs,[]
15193,1,squareFunc,runs,"[('unsigned int *', 'd_in'), ('unsigned int *', 'd_out')]"
15196,0,matrixMultiplicationKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
15199,0,vector_add_cu,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15199,1,vector_add_cu,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15199,2,vector_add_cu,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15199,3,vector_add_cu,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15200,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
15200,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
15206,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15206,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15208,0,gpu_update_sign,runs,"[('int *', 'G'), ('double *', 'w'), ('int', 'k'), ('int', 'n'), ('int *', 'temp'), ('int *', 'flag'), ('int', 'it_b'), ('int', 'it_t')]"
15208,1,gpu_get_neighors,runs,"[('int *', 'neighbors'), ('int', 'n'), ('int', 'k')]"
15208,2,gpu_update_sign,runs,"[('int *', 'G'), ('double *', 'w'), ('int *', 'neighbors'), ('int', 'k'), ('int', 'n'), ('int *', 'temp'), ('int *', 'flag'), ('int', 'it_b'), ('int', 'it_t')]"
15208,3,gpu_get_neighors,runs,"[('int *', 'neighbors'), ('int', 'n'), ('int', 'k')]"
15208,4,gpu_update_sign,runs,"[('int *', 'G'), ('double *', 'w'), ('int *', 'neighbors'), ('int', 'k'), ('int', 'n'), ('int *', 'temp'), ('int *', 'flag'), ('int', 'it_b'), ('int', 'it_t')]"
15213,0,vecadd,runs,"[('int *', 'v0'), ('int *', 'v1'), ('std::size_t', 'size')]"
15213,1,donothing,runs,[]
15213,2,matadd,runs,"[('int *', 'm0'), ('int *', 'm1'), ('std::size_t', 'w'), ('std::size_t', 'h')]"
15213,3,fill,runs,"[('int *', 'v'), ('std::size_t', 'size')]"
15213,4,fill,runs,"[('int *', 'v'), ('std::size_t', 'size')]"
15213,5,fill,runs,"[('int *', 'v'), ('std::size_t', 'size')]"
15213,6,vecadd,runs,"[('int *', 'v0'), ('int *', 'v1'), ('std::size_t', 'size')]"
15213,7,vecadd,runs,"[('int *', 'v0'), ('int *', 'v1'), ('std::size_t', 'size')]"
15213,8,grayscale,runs,"[('unsigned char *', 'rgb'), ('unsigned char *', 'g'), ('std::size_t', 'cols'), ('std::size_t', 'rows')]"
15213,11,fill,runs,"[('int *', 'm'), ('std::size_t', 'w'), ('std::size_t', 'h')]"
15213,12,vecadd,runs,"[('int *', 'v0'), ('int *', 'v1'), ('std::size_t', 'size')]"
15213,13,addMat,runs,"[('float *', 'mA_d'), ('float *', 'mB_d'), ('std::size_t', 'w'), ('std::size_t', 'h')]"
15213,14,grayscale,runs,"[('unsigned char *', 'rgb'), ('unsigned char *', 'g'), ('std::size_t', 'cols'), ('std::size_t', 'rows')]"
15213,15,donothing,runs,[]
15213,16,fill,runs,"[('int *', 'v'), ('std::size_t', 'size')]"
15213,17,vecadd,runs,"[('int *', 'v0'), ('int *', 'v1'), ('std::size_t', 'size')]"
15214,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15214,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15217,0,testKernel,runs,[]
15218,0,kernel,runs,[]
15218,1,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
15218,2,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15224,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15224,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15241,0,cudaKernel,runs,"[('int', 'n'), ('double *', 'gpuWeights'), ('int *', 'gpuG'), ('int *', 'gpuTempGrid'), ('int *', 'flag')]"
15241,1,cudaKernel,runs,"[('int', 'n'), ('double *', 'gpuWeights'), ('int *', 'gpuG'), ('int *', 'gpuTempGrid'), ('int *', 'flag')]"
15241,2,cudaKernel,runs,"[('int', 'n'), ('double *', 'gpuWeights'), ('int *', 'gpuG'), ('int *', 'gpuTempGrid'), ('int *', 'flag')]"
15252,2,LEShift,runs,"[('particle *', 'parts'), ('dbl', 'LEshear')]"
15259,3,vsub,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
15259,4,vmul,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
15259,5,vdiv,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
15259,6,dummy,runs,[]
15260,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15260,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15261,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15261,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15276,16,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
15276,19,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
15276,21,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
15276,23,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
15276,25,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
15276,27,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
15276,28,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
15276,30,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
15276,33,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
15276,36,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
15285,3,rho,runs,"[('float *', 'x'), ('int', 'size'), ('float', 'lambda')]"
15285,17,subpixel_enchancement,runs,"[('float *', 'd0'), ('float *', 'c2'), ('float *', 'out'), ('int', 'size'), ('int', 'dim23'), ('int', 'disp_max')]"
15285,19,Normalize_get_norm_,runs,"[('float *', 'input'), ('float *', 'norm'), ('int', 'size1'), ('int', 'size23'), ('int', 'size023')]"
15285,27,remove_nonvisible,runs,"[('float *', 'y'), ('int', 'size'), ('int', 'size3')]"
15285,28,remove_occluded,runs,"[('float *', 'y'), ('int', 'size'), ('int', 'size3')]"
15285,29,remove_white,runs,"[('float *', 'x'), ('float *', 'y'), ('int', 'size')]"
15285,30,copy_fill,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size'), ('int', 'in_size2'), ('int', 'in_size3'), ('int', 'out_size2'), ('int', 'out_size3')]"
15285,31,cunn_SpatialLogSoftMax_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('int', 'feature_size'), ('int', 'spatial_size'), ('int', 'data_size'), ('float', 'constant')]"
15285,32,cunn_SpatialLogSoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'feature_size'), ('int', 'spatial_size'), ('int', 'data_size')]"
15286,21,sync_deconv_groups,runs,[]
15286,37,sync_conv_groups,runs,[]
15294,2,initializeElementsTo,runs,"[('int', 'initialValue'), ('int *', 'a'), ('int', 'N')]"
15294,3,printSuccessForCorrectExecutionConfiguration,runs,[]
153,0,run_reduction,runs,"[('bool *', 'con'), ('bool *', 'blockCon'), ('int *', 'ActiveList'), ('int', 'nActiveBlock'), ('int *', 'blockSizes')]"
153,3,CopyOutBack,runs,"[('float4 *', 'd_tetT'), ('float *', 'd_vertT'), ('int *', 'd_vertMem'), ('int *', 'd_vertMemOutside'), ('int *', 'd_BlockSizes'), ('int *', 'd_ActiveList'), ('int', 'm_maxNumInVert'), ('int', 'm_maxNumTotalTets'), ('int', 'm_maxVertMappingInside'), ('int', 'm_maxVertMappingOutside')]"
153,4,run_reduction,runs,"[('int *', 'con'), ('int *', 'blockCon'), ('int *', 'ActiveList'), ('int', 'nActiveBlock'), ('int *', 'blockSizes')]"
15303,0,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
15303,1,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
15312,0,updateEigenValue,runs,"[('int *', 'd_rowPtr'), ('int *', 'd_col'), ('float *', 'd_val'), ('float *', 'd_b'), ('float *', 'd_temp'), ('float *', 'd_normAb'), ('float *', 'd_alpha1'), ('float *', 'd_alpha2'), ('int', 'n')]"
15312,1,updateEigenVector,runs,"[('float *', 'd_b'), ('float *', 'd_temp'), ('float *', 'normAb'), ('int', 'n')]"
15315,0,add,runs,"[('int *', 'a'), ('int *', 'c')]"
15315,1,hola,runs,[]
15315,2,elevar_al_cuadrado,runs,"[('float *', 'd_salida'), ('float *', 'd_entrada')]"
15319,0,VectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
15330,0,testKernel,runs,[]
15337,6,set_volume_to_constant,runs,"[('float *', 'out'), ('float', 'value')]"
15337,19,kernel_normalize_and_add_to_output,runs,"[('float *', 'dev_vol_in'), ('float *', 'dev_vol_out'), ('float *', 'dev_accumulate_weights'), ('float *', 'dev_accumulate_values')]"
15337,30,magnitude_threshold_kernel,runs,"[('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z'), ('float', 'gamma')]"
15337,31,gradient_and_subtract_kernel,runs,"[('float *', 'in'), ('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z')]"
15337,32,multiply_by_beta_kernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'beta')]"
15337,33,subtract_kernel,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out')]"
15340,0,cpy,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15340,6,reduce,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n')]"
15340,10,cpy,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n')]"
15343,5,Add,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
15343,6,suma_GPU,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
15343,7,solve_GPU,runs,"[('int', 'a'), ('int', 'b'), ('int', 'c'), ('int *', 'x1'), ('int *', 'x2')]"
15343,9,invierte,runs,"[('float *', 'a'), ('float *', 'b')]"
15343,11,suma,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
15343,12,add,runs,"[('float *', 'A'), ('float *', 'C')]"
15343,13,Add,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
15346,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
15346,1,sub,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
15346,2,mul,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
15346,3,div,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
15353,0,kernel,runs,"[('float *', 'indata'), ('float *', 'outdata')]"
15353,1,RevealNumber,runs,"[('int *', 'number'), ('unsigned int', 'number_size')]"
15353,5,writeKernel,runs,"[('float *', 'vec'), ('int', 'len')]"
15353,8,useSingleTexture,runs,"[('cudaTextureObject_t', 'tex'), ('float *', 'pout')]"
15353,9,useNoTexture,runs,"[('float *', 'pin'), ('float *', 'pout'), ('int', 'len')]"
15363,1,DeviceMultiply,runs,"[('double *', 'left'), ('double *', 'right'), ('double *', 'result'), ('int', 'left_rows'), ('int', 'left_cols'), ('int', 'right_cols')]"
15365,0,kernel,runs,[]
15365,1,kernel,runs,[]
15365,2,kernel,runs,[]
15367,0,sieveOfEratosthenesCUDA,runs,"[('char *', 'primes'), ('uint64_t', 'max')]"
1538,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
1538,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1538,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1538,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
1538,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
1538,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
1538,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
1538,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
1538,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1538,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
1538,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
1538,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
1538,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1538,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
1538,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1538,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
1538,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1538,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1538,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1538,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
1538,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1538,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1538,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1538,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1538,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1538,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1538,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1538,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1538,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1538,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1538,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1538,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
1538,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
1538,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
1538,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
1538,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1538,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1538,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1538,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1538,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1538,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1538,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
1538,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1538,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1538,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
1538,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1538,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
1538,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
1538,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
1538,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
1538,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
1538,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
1538,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
1538,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
1538,66,make_pillar_index_kernel,runs,"[('int *', 'dev_pillar_count_histo'), ('int *', 'dev_counter'), ('int *', 'dev_pillar_count'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('int *', 'dev_sparse_pillar_map'), ('const int', 'max_pillars'), ('const int', 'max_points_per_pillar'), ('const int', 'GRID_X_SIZE'), ('const float', 'PILLAR_X_SIZE'), ('const float', 'PILLAR_Y_SIZE'), ('const int', 'NUM_INDS_FOR_SCAN')]"
1538,67,make_pillar_feature_kernel,runs,"[('float *', 'dev_pillar_x_in_coors'), ('float *', 'dev_pillar_y_in_coors'), ('float *', 'dev_pillar_z_in_coors'), ('float *', 'dev_pillar_i_in_coors'), ('float *', 'dev_pillar_x'), ('float *', 'dev_pillar_y'), ('float *', 'dev_pillar_z'), ('float *', 'dev_pillar_i'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_num_points_per_pillar'), ('const int', 'max_points'), ('const int', 'GRID_X_SIZE')]"
1538,68,make_extra_network_input_kernel,runs,"[('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('float *', 'dev_x_coors_for_sub_shaped'), ('float *', 'dev_y_coors_for_sub_shaped'), ('float *', 'dev_pillar_feature_mask'), ('const int', 'MAX_NUM_POINTS_PER_PILLAR')]"
1538,73,scan_y,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
1538,75,scatter_kernel,runs,"[('int *', 'x_coors'), ('int *', 'y_coors'), ('float *', 'pfe_output'), ('float *', 'scattered_feature'), ('const int', 'MAX_NUM_PILLARS_'), ('const int', 'GRID_X_SIZE'), ('const int', 'GRID_Y_SIZE')]"
1538,78,computePointGradients1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dj_ang'), ('double *', 'pg24'), ('double *', 'pg05'), ('double *', 'pg15'), ('double *', 'pg25')]"
1538,79,computePointHessian0,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph93'), ('double *', 'ph103'), ('double *', 'ph113'), ('double *', 'ph123'), ('double *', 'ph94'), ('double *', 'ph133'), ('double *', 'ph104'), ('double *', 'ph143'), ('double *', 'ph114'), ('double *', 'ph153'), ('double *', 'ph95'), ('double *', 'ph163'), ('double *', 'ph105'), ('double *', 'ph173'), ('double *', 'ph115')]"
1538,80,computePointHessian1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph124'), ('double *', 'ph134'), ('double *', 'ph144'), ('double *', 'ph154'), ('double *', 'ph125'), ('double *', 'ph164'), ('double *', 'ph135'), ('double *', 'ph174'), ('double *', 'ph145')]"
1538,81,computePointHessian2,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph155'), ('double *', 'ph165'), ('double *', 'ph175')]"
1538,82,computeScoreList,runs,"[('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'e_x_cov_x'), ('double', 'gauss_d1'), ('double *', 'score')]"
1538,83,computeScoreGradientList,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('int', 'voxel_num'), ('double *', 'e_x_cov_x'), ('double *', 'cov_dxd_pi'), ('double', 'gauss_d1'), ('int', 'valid_voxel_num'), ('double *', 'score_gradients')]"
1538,84,computeExCovX,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centr_x'), ('double *', 'centr_y'), ('double *', 'centr_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22')]"
1538,85,updateExCovX,runs,"[('double *', 'e_x_cov_x'), ('double', 'gauss_d2'), ('int', 'valid_voxel_num')]"
1538,86,computeCovDxdPi,runs,"[('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'inverse_covariance'), ('int', 'voxel_num'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'point_gradients'), ('double *', 'cov_dxd_pi'), ('int', 'valid_voxel_num')]"
1538,87,computeHessianListS0,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_gradients'), ('double *', 'tmp_hessian'), ('int', 'valid_voxel_num')]"
1538,88,computeHessianListS1,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'hessians'), ('double *', 'e_x_cov_x'), ('double *', 'tmp_hessian'), ('double *', 'cov_dxd_pi'), ('double *', 'point_gradients'), ('int', 'valid_voxel_num')]"
1538,89,computeHessianListS2,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_hessians'), ('double *', 'hessians'), ('int', 'valid_voxel_num')]"
1538,91,sumScore,runs,"[('double *', 'score'), ('int', 'full_size'), ('int', 'half_size')]"
15386,28,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
15386,31,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
15386,43,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
15386,44,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
15386,55,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
15389,3,generate_sources,runs,"[('curandState *', 'state'), ('int', 'n'), ('uint32_t *', 'verts')]"
15389,4,generate_destinations,runs,"[('curandState *', 'state'), ('int', 'n'), ('const uint32_t *', 'sources'), ('uint32_t *', 'destinations')]"
15393,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15393,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
15393,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
15393,8,null_kernel,runs,[]
15393,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
15394,0,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
15394,1,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
15394,9,simple_reduction,runs,"[('int *', 'shared_var'), ('int *', 'input_values'), ('int', 'N'), ('int', 'iters')]"
15394,11,helloFromGPU,runs,[]
15394,12,lots_of_float_compute,runs,"[('float *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('float *', 'outputs')]"
15394,13,lots_of_double_compute,runs,"[('double *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('double *', 'outputs')]"
15394,14,fmad_kernel,runs,"[('double', 'x'), ('double', 'y'), ('double *', 'out')]"
15394,15,kernel,runs,"[('float *', 'F'), ('double *', 'D')]"
15394,18,standard_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
15394,19,intrinsic_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
15394,20,atomics,runs,"[('int *', 'shared_var'), ('int *', 'values_read'), ('int', 'N'), ('int', 'iters')]"
15394,21,unsafe,runs,"[('int *', 'shared_var'), ('int *', 'values_read'), ('int', 'N'), ('int', 'iters')]"
15394,23,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
15394,24,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
15394,25,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
15394,26,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
15394,27,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
15394,28,printThreadIndex,runs,"[('int *', 'A'), ('const int', 'nx'), ('const int', 'ny')]"
15394,29,checkIndex,runs,[]
15394,30,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
15394,31,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
15394,32,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
15394,33,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,37,sumMatrixOnGPU2D,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'NX'), ('int', 'NY')]"
15394,44,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,45,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,46,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,47,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,48,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,49,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,50,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,51,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,53,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,54,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,56,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,59,host_api_kernel,runs,"[('float *', 'randomValues'), ('float *', 'out'), ('int', 'N')]"
15394,60,device_api_kernel,runs,"[('curandState *', 'states'), ('float *', 'out'), ('int', 'N')]"
15394,62,refill_randoms,runs,"[('float *', 'dRand'), ('int', 'N'), ('curandState *', 'states')]"
15394,64,refill_randoms,runs,"[('float *', 'dRand'), ('int', 'N'), ('curandState *', 'states')]"
15394,65,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
15394,66,sumArraysZeroCopy,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
15394,69,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
15394,70,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
15394,71,warmup,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
15394,72,copyRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
15394,73,copyCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
15394,74,transposeNaiveRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
15394,75,transposeNaiveCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
15394,76,transposeUnroll4Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
15394,77,transposeUnroll4Col,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
15394,78,transposeDiagonalRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
15394,79,transposeDiagonalCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
15394,81,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
15394,84,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
15394,85,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
15394,86,readOffsetUnroll2,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
15394,87,readOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
15394,88,writeOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
15394,89,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
15394,90,writeOffsetUnroll2,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
15394,91,writeOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
15394,92,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
15394,93,iKernel,runs,"[('float *', 'src'), ('float *', 'dst')]"
15394,94,iKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
15394,95,kernel_add_wavelet,runs,"[('float *', 'g_u2'), ('float', 'wavelets'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'ngpus')]"
15394,96,kernel_2dfd_last,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
15394,97,kernel_2dfd,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
15394,124,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out')]"
15394,132,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'N')]"
15394,133,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,136,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,152,reduceGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,153,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,154,reduceSmemDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,155,reduceGmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,156,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,157,reduceSmemUnrollDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,158,reduceNeighboredGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,159,reduceNeighboredSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
15394,174,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
15394,179,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
15394,192,kernel,runs,"[('float *', 'g_data'), ('float', 'value')]"
15394,193,checkIndex,runs,[]
15402,0,cudaKernel,runs,[]
15404,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
15404,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
15405,0,kernelCompact,runs,"[('float *', 'devSrc'), ('float *', 'devDst'), ('unsigned int *', 'devPredicate'), ('unsigned int *', 'devPos'), ('int', 'numCirs'), ('int', 'offset')]"
15405,2,preScan,runs,"[('unsigned int *', 'deviceInput'), ('unsigned int *', 'deviceOutput'), ('int', 'cnt'), ('unsigned int *', 'deviceSum')]"
15405,3,addInc,runs,"[('unsigned int *', 'deviceInput'), ('unsigned int *', 'deviceOutput'), ('int', 'eleCnt'), ('unsigned int *', 'deviceInc')]"
15405,14,kernelFormBinStart,runs,"[('int *', 'devOutputBinStart'), ('unsigned int *', 'devInputBinCirPairBin'), ('unsigned int', 'bcPairLen')]"
15410,3,countIndices,runs,"[('int *', 'indices'), ('unsigned int *', 'histo'), ('int', 'size')]"
15410,6,fillZero,runs,"[('int *', 'c_red'), ('int', 'size')]"
15412,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
15412,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
15412,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
15412,3,set_zero_kernel,runs,"[('float *', 'src'), ('int', 'size')]"
15412,5,binarize_weights_mean_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary'), ('float *', 'mean_arr_gpu')]"
15412,8,calc_avg_activation_kernel,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'channels'), ('int', 'batches')]"
15412,9,assisted_activation_kernel,runs,"[('float', 'alpha'), ('float *', 'output'), ('float *', 'gt_gpu'), ('float *', 'a_avg_gpu'), ('int', 'size'), ('int', 'channels'), ('int', 'batches')]"
15412,10,assisted_activation2_kernel,runs,"[('float', 'alpha'), ('float *', 'output'), ('float *', 'gt_gpu'), ('float *', 'a_avg_gpu'), ('int', 'size'), ('int', 'channels'), ('int', 'batches')]"
15412,11,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
15412,12,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
15412,13,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
15412,15,im2col_align_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col'), ('const int', 'bit_align')]"
15412,22,transpose_uint32_kernel,runs,"[('uint32_t *', 'src'), ('uint32_t *', 'dst'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'src_align'), ('int', 'dst_align')]"
15412,23,transpose_uint32_kernel_2,runs,"[('uint32_t *', 'src'), ('uint32_t *', 'dst'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'src_align'), ('int', 'dst_align')]"
15412,24,repack_input_kernel,runs,"[('float *', 'input'), ('float *', 're_packed_input'), ('int', 'w'), ('int', 'h'), ('int', 'c')]"
15412,25,repack_input_kernel_2,runs,"[('float *', 'input'), ('float *', 're_packed_input'), ('int', 'w'), ('int', 'h'), ('int', 'c')]"
15412,35,convolve_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad')]"
15412,36,convolve_bin_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad'), ('int', 'new_lda'), ('float *', 'mean_arr_gpu')]"
15412,37,convolve_bin_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad'), ('int', 'new_lda'), ('float *', 'mean_arr_gpu')]"
15412,39,compare_2_arrays_kernel,runs,"[('float *', 'one'), ('float *', 'two'), ('int', 'size')]"
15412,40,mean_array_kernel,runs,"[('float *', 'src'), ('int', 'size'), ('float', 'alpha'), ('float *', 'avg')]"
15412,41,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'scale'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('int', 'current_size')]"
15412,43,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('int', 'current_size')]"
15412,45,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
15412,46,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
15412,47,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
15412,48,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
15412,49,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
15412,50,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
15412,53,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
15412,54,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
15412,55,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
15412,56,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
15412,57,constrain_weight_updates_kernel,runs,"[('int', 'N'), ('float', 'coef'), ('float *', 'weights_gpu'), ('float *', 'weight_updates_gpu')]"
15412,58,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
15412,59,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
15412,60,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
15412,61,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
15412,62,constrain_min_max_kernel,runs,"[('int', 'N'), ('float', 'MIN'), ('float', 'MAX'), ('float *', 'X'), ('int', 'INCX')]"
15412,63,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
15412,64,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
15412,65,scal_add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float', 'BETA'), ('float *', 'X'), ('int', 'INCX')]"
15412,66,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
15412,67,mask_kernel_new_api,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
15412,68,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
15412,69,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
15412,70,simple_copy_kernel,runs,"[('int', 'size'), ('float *', 'src'), ('float *', 'dst')]"
15412,71,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
15412,75,inverse_variance_kernel,runs,"[('int', 'size'), ('float *', 'src'), ('float *', 'dst'), ('float', 'epsilon')]"
15412,76,normalize_scale_bias_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'scales'), ('float *', 'biases'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('int', 'inverse_variance'), ('float', 'epsilon')]"
15412,77,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
15412,82,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
15412,83,simple_input_shortcut_kernel,runs,"[('float *', 'in'), ('int', 'size'), ('float *', 'add'), ('float *', 'out')]"
15412,84,input_shortcut_kernel,runs,"[('float *', 'in'), ('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
15412,85,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
15412,86,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
15412,87,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
15412,88,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
15412,89,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
15412,90,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
15412,91,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
15412,92,softmax_kernel_new_api,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
15412,93,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
15412,94,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
15412,95,fix_nan_and_inf_kernel,runs,"[('float *', 'input'), ('size_t', 'size')]"
15412,96,reset_nan_and_inf_kernel,runs,"[('float *', 'input'), ('size_t', 'size')]"
15412,97,is_nan_or_inf_kernel,runs,"[('float *', 'input'), ('size_t', 'size'), ('int *', 'pinned_return')]"
15412,99,sum_of_mults_kernel,runs,"[('float *', 'a1'), ('float *', 'a2'), ('float *', 'b1'), ('float *', 'b2'), ('size_t', 'size'), ('float *', 'dst')]"
15412,101,scale_channels_kernel,runs,"[('float *', 'in_w_h_c'), ('int', 'size'), ('int', 'channel_size'), ('int', 'batch_size'), ('int', 'scale_wh'), ('float *', 'scales_c'), ('float *', 'out')]"
15412,103,sam_kernel,runs,"[('float *', 'in_w_h_c'), ('int', 'size'), ('int', 'channel_size'), ('float *', 'scales_c'), ('float *', 'out')]"
15412,104,backward_sam_kernel,runs,"[('float *', 'in_w_h_c_delta'), ('int', 'size'), ('int', 'channel_size'), ('float *', 'in_scales_c'), ('float *', 'out_from_delta'), ('float *', 'in_from_output'), ('float *', 'out_state_delta')]"
15412,106,stretch_weights_kernel,runs,"[('const float *', 'src_weight_gpu'), ('float *', 'weight_deform_gpu'), ('int', 'nweights'), ('int', 'n'), ('int', 'kernel_size'), ('float', 'scale'), ('int', 'reverse')]"
15412,107,sway_and_flip_weights_kernel,runs,"[('const float *', 'src_weight_gpu'), ('float *', 'weight_deform_gpu'), ('int', 'nweights'), ('int', 'n'), ('int', 'kernel_size'), ('int', 'angle'), ('int', 'reverse')]"
15412,108,rotate_weights_kernel,runs,"[('const float *', 'src_weight_gpu'), ('float *', 'weight_deform_gpu'), ('int', 'nweights'), ('int', 'n'), ('int', 'kernel_size'), ('int', 'reverse')]"
15412,109,stretch_sway_flip_weights_kernel,runs,"[('const float *', 'src_weight_gpu'), ('float *', 'weight_deform_gpu'), ('int', 'nweights'), ('int', 'n'), ('int', 'kernel_size'), ('float', 'angle'), ('int', 'reverse')]"
15412,110,reduce_and_expand_array_kernel,runs,"[('const float *', 'src_gpu'), ('float *', 'dst_gpu'), ('int', 'current_size'), ('int', 'groups')]"
15412,111,expand_array_kernel,runs,"[('const float *', 'src_gpu'), ('float *', 'dst_gpu'), ('int', 'current_size'), ('int', 'groups')]"
15412,112,mult_inverse_array_kernel,runs,"[('const float *', 'src_gpu'), ('float *', 'dst_gpu'), ('int', 'size'), ('const float', 'eps')]"
15412,113,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
15412,115,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
15412,118,set_scales_dropblock_kernel,runs,"[('float *', 'drop_blocks_scale'), ('int', 'block_size_w'), ('int', 'block_size_h'), ('int', 'outputs'), ('int', 'batch')]"
15412,119,scale_dropblock_kernel,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'outputs'), ('float *', 'drop_blocks_scale')]"
15412,120,backward_dropblock_kernel,runs,"[('float *', 'pass'), ('float *', 'delta'), ('int', 'size')]"
15412,121,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
15412,123,backward_maxpool_depth_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
15412,124,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride_x'), ('int', 'stride_y'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
15412,125,forward_zero_nonmax_kernel,runs,"[('int', 'n'), ('float *', 'input'), ('float *', 'output')]"
15412,126,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride_x'), ('int', 'stride_y'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
15412,127,backward_zero_nonmax_kernel,runs,"[('int', 'n'), ('int *', 'indexes'), ('float *', 'prev_delta')]"
15412,128,forward_local_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride_x'), ('int', 'stride_y'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output')]"
15412,129,backward_local_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride_x'), ('int', 'stride_y'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta')]"
15412,135,activate_array_hard_mish_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'activation_input'), ('float *', 'output_gpu')]"
15412,146,gradient_array_mish_kernel,runs,"[('int', 'n'), ('float *', 'activation_input_gpu'), ('float *', 'delta')]"
15412,147,gradient_array_hard_mish_kernel,runs,"[('int', 'n'), ('float *', 'activation_input_gpu'), ('float *', 'delta')]"
15412,157,activate_array_normalize_channels_kernel,runs,"[('float *', 'x'), ('int', 'size'), ('int', 'batch'), ('int', 'channels'), ('int', 'wh_step'), ('float *', 'output_gpu')]"
15412,159,gradient_array_normalize_channels_softmax_kernel,runs,"[('float *', 'x'), ('int', 'size'), ('int', 'batch'), ('int', 'channels'), ('int', 'wh_step'), ('float *', 'delta_gpu')]"
15412,160,gradient_array_normalize_channels_kernel,runs,"[('float *', 'x'), ('int', 'size'), ('int', 'batch'), ('int', 'channels'), ('int', 'wh_step'), ('float *', 'delta_gpu')]"
15414,4,computeTemporalSmoothRmatrices,runs,"[('const float *', 'Rmatrices'), ('uint32_t', 'numSamples'), ('uint32_t', 'subArraySize'), ('uint32_t', 'numSubArrays'), ('const uint32_t *', 'subArraySizes'), ('uint32_t', 'temporalSmoothing'), ('float *', 'TempRmatrices')]"
15414,21,computeTemporalSmoothRmatrices,runs,"[('const float *', 'Rmatrices'), ('uint32_t', 'numSamples'), ('uint32_t', 'subArraySize'), ('uint32_t', 'numSubArrays'), ('const uint32_t *', 'subArraySizes'), ('uint32_t', 'temporalSmoothing'), ('float *', 'TempRmatrices')]"
15414,23,fillUnusedDiagonal,runs,"[('float *', 'Rmatrices'), ('uint32_t', 'numSamples'), ('uint32_t', 'subArraySize'), ('const uint32_t *', 'subArraySizes')]"
1542,2,from_2D_texture_to_memory_space,runs,"[('cudaTextureObject_t', 'texture_source'), ('float *', 'destination'), ('size_t', 'w'), ('size_t', 'h')]"
1542,5,copyp2p,runs,"[('int4 __restrict__ *', 'dest'), ('int4 const __restrict__ *', 'src'), ('size_t', 'num_elems')]"
1542,12,increment,runs,"[('char *', 'data'), ('size_t', 'length')]"
1542,15,increment,runs,"[('char *', 'data'), ('size_t', 'length')]"
15424,0,Max_Interleaved_Addressing_Global,runs,"[('float *', 'data'), ('int', 'data_size')]"
15424,1,Max_Interleaved_Addressing_Shared,runs,"[('float *', 'data'), ('int', 'data_size')]"
15424,2,Max_Sequential_Addressing_Shared,runs,"[('float *', 'data'), ('int', 'data_size')]"
15425,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15425,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
15425,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
15425,8,null_kernel,runs,[]
15425,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
15440,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15440,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15451,21,sync_deconv_groups,runs,[]
15451,37,sync_conv_groups,runs,[]
15454,1,add,runs,"[('int', 'n'), ('float', 'a'), ('float *', 'x'), ('float *', 'y')]"
15455,0,MatrixMulKernel,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'Width')]"
15455,1,Matrix_Mul_Kernel,runs,"[('float *', 'd_M'), ('float *', 'd_N'), ('float *', 'd_P'), ('int', 'Width')]"
15455,2,color_to_grey,runs,"[('uchar3 *', 'input_image'), ('uchar3 *', 'output_image'), ('int', 'width'), ('int', 'height')]"
15455,3,blurKernel,runs,"[('uchar3 *', 'in'), ('uchar3 *', 'out'), ('int', 'w'), ('int', 'h')]"
15455,4,vecAddKernel,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
15459,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15459,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15462,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15462,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15481,0,kernel,runs,[]
15481,1,kernel,runs,[]
15481,2,kernel,runs,[]
15481,3,kernel,runs,[]
15488,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
15488,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
15492,0,tensor_1d_equals,runs,"[('const int', 'n'), ('const DTYPE *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const DTYPE *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('int *', 'eq_flag')]"
15492,1,tensor_2d_equals,runs,"[('const int', 'n'), ('const int', 'c'), ('const DTYPE *', 'x'), ('const int', 'offset_x'), ('const int', 'n_x'), ('const int', 'c_x'), ('const DTYPE *', 'y'), ('const int', 'offset_y'), ('const int', 'n_y'), ('const int', 'c_y'), ('int *', 'eq_flag')]"
15492,2,tensor_3d_equals,runs,"[('const int', 'n'), ('const int', 'c'), ('const int', 'h'), ('const DTYPE *', 'x'), ('const int', 'offset_x'), ('const int', 'n_x'), ('const int', 'c_x'), ('const int', 'h_x'), ('const DTYPE *', 'y'), ('const int', 'offset_y'), ('const int', 'n_y'), ('const int', 'c_y'), ('const int', 'h_y'), ('int *', 'eq_flag')]"
15492,3,tensor_4d_equals,runs,"[('const int', 'n'), ('const int', 'c'), ('const int', 'h'), ('const int', 'w'), ('const DTYPE *', 'x'), ('const int', 'offset_x'), ('const int', 'n_x'), ('const int', 'c_x'), ('const int', 'h_x'), ('const int', 'w_x'), ('const DTYPE *', 'y'), ('const int', 'offset_y'), ('const int', 'n_y'), ('const int', 'c_y'), ('const int', 'h_y'), ('const int', 'w_y'), ('int *', 'eq_flag')]"
15492,4,tensor_5d_equals,runs,"[('const int', 'n'), ('const int', 'c'), ('const int', 'd'), ('const int', 'h'), ('const int', 'w'), ('const DTYPE *', 'x'), ('const int', 'offset_x'), ('const int', 'n_x'), ('const int', 'c_x'), ('const int', 'd_x'), ('const int', 'h_x'), ('const int', 'w_x'), ('const DTYPE *', 'y'), ('const int', 'offset_y'), ('const int', 'n_y'), ('const int', 'c_y'), ('const int', 'd_y'), ('const int', 'h_y'), ('const int', 'w_y'), ('int *', 'eq_flag')]"
15494,0,warmup,runs,"[('float *', 'in'), ('float *', 'out'), ('const int', 'nx'), ('const int', 'ny')]"
15494,1,copyGlobalRow,runs,"[('float *', 'in'), ('float *', 'out'), ('const int', 'nx'), ('const int', 'ny')]"
15494,2,copyGlobalCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
15494,3,transposeGlobalRow,runs,"[('float *', 'in'), ('float *', 'out'), ('const int', 'nx'), ('const int', 'ny')]"
15494,4,transposeGlobalCol,runs,"[('float *', 'in'), ('float *', 'out'), ('const int', 'nx'), ('const int', 'ny')]"
15495,54,sync_conv_groups,runs,[]
15498,0,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15498,1,rgb_to_xyY,runs,"[('float *', 'd_r'), ('float *', 'd_g'), ('float *', 'd_b'), ('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float', 'delta'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
15498,2,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
15498,3,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
15498,5,histo_atomic,runs,"[('unsigned int *', 'out_histo'), ('const float *', 'd_in'), ('int', 'num_bins'), ('int', 'size'), ('float', 'min_val'), ('float', 'range')]"
15498,10,naive_normalized_cross_correlation,runs,"[('float *', 'd_response'), ('unsigned char *', 'd_original'), ('unsigned char *', 'd_template'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_height'), ('int', 'template_half_width'), ('int', 'template_width'), ('int', 'template_size'), ('float', 'template_mean')]"
15498,11,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
15498,12,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
15498,13,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
15498,15,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
15498,27,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15498,28,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
15498,29,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
15498,30,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
15498,31,hello,runs,[]
15498,35,hello,runs,[]
15498,40,sgemm_gpu_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
15498,41,resized,runs,"[('unsigned char *', 'imgData'), ('int', 'width'), ('float', 'scale_factor'), ('cudaTextureObject_t', 'texObj')]"
15498,42,createResizedImage,runs,"[('unsigned char *', 'imageScaledData'), ('int', 'scaled_width'), ('float', 'scale_factor'), ('cudaTextureObject_t', 'texObj')]"
15498,43,init,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
15498,44,init,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
15498,45,device_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
15498,46,sgemm_gpu_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
15498,47,idx_print,runs,[]
15498,48,print_from_gpu,runs,[]
15498,59,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15498,60,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
15498,61,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
15498,62,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
15498,63,hello,runs,[]
15498,67,hello,runs,[]
15505,20,normal_kernel,runs,"[('int', 'seed'), ('float *', 'data'), ('int', 'n'), ('float', 'mean'), ('float', 'std')]"
15505,21,normal_kerneld,runs,"[('int', 'seed'), ('double *', 'data'), ('int', 'n'), ('double', 'mean'), ('double', 'std')]"
15505,22,add_normal_kernel,runs,"[('int', 'seed'), ('float *', 'data'), ('int', 'n'), ('float', 'mean'), ('float', 'std')]"
15505,23,add_normal_kerneld,runs,"[('int', 'seed'), ('double *', 'data'), ('int', 'n'), ('double', 'mean'), ('double', 'std')]"
15505,24,rand_init_kernel,runs,"[('int', 'seed'), ('curandStatePhilox4_32_10_t *', 'states'), ('int', 'n')]"
15505,25,rand_zero_kernel,runs,"[('float *', 'data'), ('int', 'n'), ('float', 'p'), ('curandStatePhilox4_32_10_t *', 'states')]"
15505,26,shift_kernel,runs,"[('float const *', 'in'), ('float *', 'out'), ('int', 'X'), ('int', 'Y'), ('int', 'C'), ('int', 'dx'), ('int', 'dy'), ('float const', 'beta')]"
15505,27,unshift_kernel,runs,"[('float const *', 'in'), ('float *', 'out'), ('int', 'X'), ('int', 'Y'), ('int', 'C'), ('int', 'dx'), ('int', 'dy'), ('float const', 'beta')]"
15505,28,clip_kernel,runs,"[('float *', 'v'), ('int', 'n'), ('float', 'limit')]"
15505,29,sqrt_kernel,runs,"[('float *', 'v'), ('int', 'n')]"
15505,30,abs_kernel,runs,"[('float *', 'v'), ('int', 'n')]"
15505,31,pow_kernel,runs,"[('float *', 'v'), ('int', 'n'), ('float', 'e')]"
15505,32,exp_kernel,runs,"[('float *', 'v'), ('int', 'n')]"
15505,33,times_kernel,runs,"[('float *', 'v'), ('float *', 'other'), ('int', 'n')]"
15505,34,divide_kernel,runs,"[('float *', 'v'), ('float *', 'other'), ('int', 'n')]"
15505,35,times_scalar,runs,"[('float *', 'v'), ('float', 'other'), ('int', 'n')]"
15505,36,add_scalar,runs,"[('float *', 'v'), ('float', 'other'), ('int', 'n')]"
15505,37,clip_kerneld,runs,"[('double *', 'v'), ('int', 'n'), ('double', 'limit')]"
15505,38,sqrt_kerneld,runs,"[('double *', 'v'), ('int', 'n')]"
15505,39,abs_kerneld,runs,"[('double *', 'v'), ('int', 'n')]"
15505,40,pow_kerneld,runs,"[('double *', 'v'), ('int', 'n'), ('double', 'e')]"
15505,41,exp_kerneld,runs,"[('double *', 'v'), ('int', 'n')]"
15505,42,times_kerneld,runs,"[('double *', 'v'), ('double *', 'other'), ('int', 'n')]"
15505,43,divide_kerneld,runs,"[('double *', 'v'), ('double *', 'other'), ('int', 'n')]"
15505,44,times_scalard,runs,"[('double *', 'v'), ('double', 'other'), ('int', 'n')]"
15505,45,add_scalard,runs,"[('double *', 'v'), ('double', 'other'), ('int', 'n')]"
15524,0,subtract,runs,"[('float *', 'd_dst'), ('float *', 'd_src_1'), ('float *', 'd_src_2'), ('int', 'len')]"
15524,1,add,runs,"[('float *', 'd_dst'), ('float *', 'd_src_1'), ('int', 'len')]"
15524,2,compare,runs,"[('float *', 'd_ip_v'), ('float *', 'd_ip_ir'), ('int', 'len')]"
15524,3,average,runs,"[('float *', 'd_ip_v'), ('float *', 'd_ip_ir'), ('int', 'app_len')]"
15524,4,convolutionRowsKernel_v1,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'filter_Rad'), ('int', 'Halo_steps')]"
15524,5,convolutionColumnsKernel_v1,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'pitch'), ('int', 'filter_Rad'), ('int', 'Halo_steps')]"
15524,6,convolutionRowsKernel_down_smp,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'n_imageW'), ('int', 'imageH'), ('int', 'filter_Rad'), ('int', 'Halo_steps')]"
15524,7,convolutionColumnsKernel_down_smp,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'n_imageH'), ('int', 'pitch'), ('int', 'filter_Rad'), ('int', 'Halo_steps')]"
15524,8,convolutionRowsKernel_up_smp,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'n_imageW'), ('int', 'imageH'), ('int', 'filter_Rad'), ('int', 'Halo_steps')]"
15524,9,convolutionColumnsKernel_up_smp,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'n_imageH'), ('int', 'pitch'), ('int', 'filter_Rad'), ('int', 'Halo_steps')]"
15524,10,d_transpose,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
15524,13,dwt_per_X,runs,"[('float *', 'd_ip'), ('int', 'rows'), ('int', 'cols'), ('int', 'cA_cols'), ('int', 'filt_len'), ('int', 'Halo_steps'), ('float *', 'd_cL'), ('float *', 'd_cH')]"
15524,14,dwt_per_X_O,runs,"[('float *', 'd_ip'), ('int', 'rows'), ('int', 'cols'), ('int', 'cA_cols'), ('int', 'filt_len'), ('int', 'Halo_steps'), ('float *', 'd_cL'), ('float *', 'd_cH')]"
15524,15,dwt_per_X_E,runs,"[('float *', 'd_ip'), ('int', 'rows'), ('int', 'cols'), ('int', 'cA_cols'), ('int', 'filt_len'), ('int', 'Halo_steps'), ('float *', 'd_cL'), ('float *', 'd_cH')]"
15524,16,dwt_per_Y,runs,"[('float *', 'd_ip'), ('int', 'rows'), ('int', 'cols'), ('int', 'cA_rows'), ('int', 'filt_len'), ('int', 'Halo_steps'), ('float *', 'd_cL'), ('float *', 'd_cH')]"
15524,17,dwt_per_Y_E,runs,"[('float *', 'd_ip'), ('int', 'rows'), ('int', 'cols'), ('int', 'cA_rows'), ('int', 'filt_len'), ('int', 'Halo_steps'), ('float *', 'd_cL'), ('float *', 'd_cH')]"
15524,18,dwt_per_Y_O,runs,"[('float *', 'd_ip'), ('int', 'rows'), ('int', 'cols'), ('int', 'cA_rows'), ('int', 'filt_len'), ('int', 'Halo_steps'), ('float *', 'd_cL'), ('float *', 'd_cH')]"
15524,19,idwt_per_X_1,runs,"[('float *', 'd_dst'), ('float *', 'src_A'), ('float *', 'src_D'), ('int', 'rows'), ('int', 'cols'), ('int', 'next_cols'), ('int', 'filt_len'), ('int', 'halo')]"
15524,20,idwt_per_Y_1,runs,"[('float *', 'd_dst'), ('float *', 'src_A'), ('float *', 'src_D'), ('int', 'rows'), ('int', 'cols'), ('int', 'next_rows'), ('int', 'filt_len'), ('int', 'halo')]"
15524,21,dwt_compare,runs,"[('float *', 'd_ip_v'), ('float *', 'd_ip_ir'), ('int', 'len')]"
15524,22,dwt_average,runs,"[('float *', 'd_ip_v'), ('float *', 'd_ip_ir'), ('int', 'app_len')]"
1553,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1553,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1553,3,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1553,4,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1553,5,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1553,6,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
15531,1,removeBorder,runs,"[('float *', 'dst'), ('const unsigned int', 'size'), ('const unsigned int', 'delta'), ('const unsigned int', 'blockSize'), ('const float', 'remplace')]"
15531,2,removeBorderGridFlipd,runs,"[('float *', 'dst'), ('const unsigned int', 'size'), ('const unsigned int', 'delta'), ('const unsigned int', 'blockSize'), ('const float', 'remplace')]"
15531,3,fma,runs,"[('float *', 'realSpace'), ('const unsigned int', 'size'), ('const float', 'alpha'), ('const float', 'delta')]"
15531,4,updateMask,runs,"[('float *', 'realSpace1'), ('float *', 'realSpace2'), ('const unsigned int', 'size'), ('const unsigned int', 'deltaCross')]"
15531,5,compensateMissingDatakernel,runs,"[('float *', 'errosArray'), ('float *', 'crossErrosArray'), ('const unsigned int', 'size'), ('float', 'val')]"
15531,6,copyAndRemove,runs,"[('float *', 'errosArray'), ('unsigned int *', '_encodedPosition_d'), ('float *', '_mismatch_d'), ('const unsigned int', 'i'), ('const float', 'val')]"
15531,7,setConditionement,runs,"[('unsigned', 'size'), ('unsigned *', 'listIndex'), ('float *', 'listValueAtIndex'), ('float *', 'realSpaceArray'), ('unsigned', 'nbVar'), ('unsigned', 'var')]"
15542,0,Kernel_norme,runs,"[('float *', 'Vd'), ('float *', 'Nd'), ('int *', 'Vp'), ('int *', 'Vnp'), ('int', 'N'), ('int', 'C'), ('int', 'nr_max_val')]"
15542,1,Kernel_gaus,runs,"[('float *', 'Vd'), ('float *', 'Ris'), ('float *', 'Nd'), ('int', 'N'), ('int', 'C'), ('int', 'dim_indici'), ('int *', 'ind'), ('float', 'sigma'), ('int *', 'Vp'), ('int *', 'Vnp'), ('int', 'nr_max_val')]"
15542,2,Kernel_lineare,runs,"[('float *', 'Vd'), ('float *', 'Ris'), ('int', 'N'), ('int', 'C'), ('int', 'dim_indici'), ('int *', 'ind'), ('int *', 'Vp'), ('int *', 'Vnp'), ('int', 'nr_max_val')]"
15542,3,Kernel_polimoniale,runs,"[('float *', 'Vd'), ('float *', 'Ris'), ('int', 'N'), ('int', 'C'), ('int', 'dim_indici'), ('int *', 'ind'), ('int *', 'Vp'), ('int *', 'Vnp'), ('int', 'nr_max_val'), ('int', 's')]"
15562,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
15562,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
15562,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
15562,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
15562,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
15569,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15569,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15576,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
15576,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
15576,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
15576,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
15576,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
15576,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
15576,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15576,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
15576,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
15576,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
15576,24,hello,runs,[]
15576,28,hello,runs,[]
15583,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
15587,0,kernel_initializeRand,runs,"[('curandState *', 'randomGeneratorStateArray'), ('unsigned long', 'seed'), ('int', 'totalNumThreads')]"
15587,1,kernel_generatePoints,runs,"[('curandState *', 'globalState'), ('int *', 'counts'), ('int', 'totalNumThreads')]"
15587,4,initArray,runs,"[('uint32_t *', 'path'), ('double *', 'approx'), ('uint32_t *', 'top_k'), ('int', 'n')]"
15587,5,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
15588,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
15588,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
1561,7,emptyKernel,runs,[]
15611,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15611,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
15611,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
15611,8,null_kernel,runs,[]
15611,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
15612,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
15612,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
15612,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
15612,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
15612,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
15612,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
15615,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15615,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15618,0,computeHeatmap,runs,"[('float *', 'desiredAgentsX'), ('float *', 'desiredAgentsY'), ('int', 'n'), ('int *', 'heatmap'), ('size_t', 'heatmap_pitch'), ('int *', 'scaled_heatmap'), ('size_t', 'scaled_heatmap_pitch')]"
15618,1,computeScaledHeatmap,runs,"[('int *', 'heatmap'), ('size_t', 'heatmap_pitch'), ('int *', 'scaled_heatmap'), ('size_t', 'scaled_heatmap_pitch')]"
15618,3,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
15618,4,computePositionParallel,runs,"[('float *', 'agentsX'), ('float *', 'agentsY'), ('float *', 'destX'), ('float *', 'destY'), ('float *', 'destR'), ('int', 'n'), ('int *', 'reached')]"
15621,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
15621,23,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
15627,0,kernel,runs,[]
15627,1,kernel,runs,[]
15627,2,kernel,runs,[]
15627,3,kernel,runs,[]
15631,0,hello_from_gpu,runs,[]
15631,1,hello_from_gpu,runs,[]
15631,2,hello_from_gpu,runs,[]
15631,3,hello_from_gpu,runs,[]
15631,7,gpu_touch,runs,"[('uint64_t *', 'x'), ('const size_t', 'size')]"
15635,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15635,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15637,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
15637,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
1564,0,cuke_gradient,runs,"[('unsigned char *', 'surface'), ('int', 'width'), ('int', 'height'), ('size_t', 'pitch'), ('float', 't')]"
1564,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1564,6,cuke_sinGrid,runs,"[('unsigned char *', 'surface'), ('int', 'width'), ('int', 'height'), ('size_t', 'pitch'), ('float', 't')]"
15641,0,foo,runs,[]
15641,1,mult,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
15641,2,blur,runs,"[('int *', 'B'), ('int *', 'G'), ('int *', 'R'), ('int *', 'RB'), ('int *', 'RG'), ('int *', 'RR'), ('int *', 'K'), ('int', 'rows'), ('int', 'cols'), ('int', 'krows'), ('int', 'kcols')]"
15641,3,Kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
15641,5,alligned_access,runs,"[('float *', 'a'), ('int', 'max')]"
15641,6,offset_access,runs,"[('float *', 'a'), ('int', 's'), ('int', 'max')]"
15641,7,strided_access,runs,"[('float *', 'a'), ('int', 's'), ('int', 'max')]"
15641,8,transpose_v0,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15641,9,transpose_v1,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15641,10,transpose_v2,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15641,11,transpose_v3,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15641,12,transpose_v4,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
15641,13,matmul_v0,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
15641,14,matmul_v1,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
15641,15,reduce_v0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
15641,16,reduce_v1,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
15641,17,reduce_v2,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
15641,18,reduce_v3,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
15641,19,reduce_v4,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
15641,20,reduce_v5,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
15641,21,prefixSumForward,runs,"[('float *', 'arr'), ('int', 'step')]"
15641,22,prefixSumBackward,runs,"[('float *', 'arr'), ('int', 'step')]"
15641,23,prefixSum,runs,"[('float *', 'arr'), ('int', 'step')]"
15641,25,kernel,runs,"[('int *', 'arr'), ('int', 'offset_min'), ('int', 'n')]"
15648,91,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
15648,104,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
15648,105,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
15648,106,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
15648,107,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
15648,185,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
15649,23,sync_deconv_groups,runs,[]
15649,41,sync_conv_groups,runs,[]
1565,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
1565,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1565,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1565,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
1565,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
1565,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
1565,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
1565,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
1565,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
1565,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1565,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
1565,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1565,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
1565,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
1565,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1565,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
1565,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1565,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
1565,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1565,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1565,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1565,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1565,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1565,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
1565,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1565,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1565,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1565,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1565,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1565,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1565,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1565,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1565,32,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
1565,33,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1565,34,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1565,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1565,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1565,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
1565,38,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
1565,39,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
1565,40,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1565,41,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1565,42,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1565,43,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
1565,44,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1565,45,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1565,46,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
1565,47,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1565,48,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
1565,49,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
1565,50,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
1565,52,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
1565,53,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
1565,54,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
1565,55,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
15650,175,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15650,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15675,2,kernel,runs,[]
15675,3,vevAdd,runs,"[('int', 'N'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
15675,4,stencil,runs,"[('int *', 'in'), ('int *', 'out')]"
15678,0,polynomial_expansion,runs,"[('float *', 'poly'), ('int', 'degree'), ('int', 'n'), ('float *', 'array')]"
15680,36,assignColIds,runs,"[('int *', 'colIds'), ('const int *', 'colOffsets')]"
15686,0,kernel,runs,[]
15686,1,kernel,runs,[]
15686,2,kernel,runs,[]
15686,3,kernel,runs,[]
1569,180,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1569,320,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15692,0,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
15692,2,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
15692,3,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
15692,4,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
15692,5,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
15696,5,DiamondStep,runs,"[('uint8_t *', 'matrix'), ('unsigned *', 'random'), ('int', 'currentSize'), ('int', 'matrixSize'), ('int', 'randValue')]"
15696,6,SquareStep,runs,"[('uint8_t *', 'matrix'), ('unsigned *', 'random'), ('int', 'currentSize'), ('int', 'matrixSize'), ('int', 'maxRowThread'), ('int', 'maxColThread'), ('int', 'randValue')]"
157,0,convertToChar,runs,"[('float *', 'input'), ('unsigned char *', 'ucharInput'), ('int', 'width'), ('int', 'height')]"
157,1,convertToGrayScale,runs,"[('unsigned char *', 'ucharImg'), ('unsigned char *', 'grayImg'), ('int', 'width'), ('int', 'height')]"
157,2,hist_eq,runs,"[('unsigned char *', 'deviceCharImg'), ('float *', 'output'), ('float *', 'cdf'), ('float', 'cdfmin'), ('int', 'size')]"
157,3,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('unsigned int *', 'histo'), ('long', 'size')]"
157,4,scan,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
157,5,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
157,6,total,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
157,7,vecAddKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
157,8,matrixMultiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
157,9,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
157,11,matrixMultiplyShared,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
15701,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
15710,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15710,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
15710,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
15710,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
15710,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
15710,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
15710,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15718,0,matMult,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
15719,0,histogram_kernel,runs,"[('float *', 'I'), ('float *', 'minI'), ('float *', 'maxI'), ('float *', 'mask'), ('int', 'nbins'), ('int', 'c'), ('int', 'h'), ('int', 'w'), ('float *', 'hist')]"
15719,1,hist_remap2_kernel,runs,"[('float *', 'I'), ('int', 'nI'), ('float *', 'mI'), ('float *', 'histJ'), ('float *', 'cumJ'), ('float *', '_minJ'), ('float *', '_maxJ'), ('int', 'nbins'), ('float *', '_sortI'), ('int *', '_idxI'), ('float *', 'R'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15719,4,avg_vote_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('int *', 'corrAB'), ('int', 'patch'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15719,5,blend_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('float *', 'M'), ('float *', 'AP'), ('float', 'alpha'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15719,6,patchmatch2_conv_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'AP'), ('float *', 'BP'), ('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int', 'patch'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15719,7,patchmatch2_argmax_kernel,runs,"[('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int *', 'corrAB'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15719,8,upsample_corr_kernel,runs,"[('int *', 'curr_corr'), ('int *', 'next_corr'), ('int', 'curr_h'), ('int', 'curr_w'), ('int', 'next_h'), ('int', 'next_w')]"
15719,10,Ring_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('float *', 'M'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15719,11,Ring2_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('int *', 'mask'), ('int *', 'm'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15719,12,patchmatch_r_conv_kernel,runs,"[('float *', 'input'), ('float *', 'target'), ('float *', 'conv'), ('int', 'patch'), ('int', 'stride'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
15719,13,patchmatch_r_argmax_kernel,runs,"[('float *', 'conv'), ('float *', 'target'), ('float *', 'match'), ('int *', 'correspondence'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
15733,0,MatrixMul,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
15733,1,vectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
15733,2,conv_2d,runs,"[('int *', 'Mat'), ('int *', 'res'), ('int', 'n')]"
15733,3,conv_1d,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n'), ('int', 'm')]"
15733,4,vectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
15733,5,conv_1d,runs,"[('int *', 'a'), ('int *', 'c'), ('int', 'n')]"
15733,6,tile_MatrixMul,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n'), ('int', 'tile_size')]"
1574,32,computeCost,runs,"[('const double *', 'Params'), ('const float *', 'uproj'), ('const float *', 'mu'), ('const float *', 'W'), ('const int *', 'ioff'), ('const bool *', 'iW'), ('float *', 'cmax')]"
1574,33,bestFilter,runs,"[('const double *', 'Params'), ('const bool *', 'iW'), ('const float *', 'cmax'), ('int *', 'id')]"
1574,34,average_snips,runs,"[('const double *', 'Params'), ('const int *', 'ioff'), ('const int *', 'id'), ('const float *', 'uproj'), ('const float *', 'cmax'), ('const int *', 'iList'), ('float *', 'cf'), ('float *', 'WU')]"
1574,35,count_spikes,runs,"[('const double *', 'Params'), ('const int *', 'id'), ('int *', 'nsp')]"
1574,39,max1D,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('float *', 'conv_sig')]"
1574,41,copy_sort_int,runs,"[('const int *', 'orig'), ('const unsigned int *', 'sort_idx'), ('const unsigned int', 'nitems'), ('int *', 'sorted')]"
1574,42,copy_sort_int,runs,"[('const float *', 'orig'), ('const unsigned int *', 'sort_idx'), ('const unsigned int', 'nitems'), ('float *', 'sorted')]"
1574,43,computeCost,runs,"[('const double *', 'Params'), ('const float *', 'uproj'), ('const float *', 'mu'), ('const float *', 'W'), ('const bool *', 'match'), ('const int *', 'iC'), ('const int *', 'call'), ('float *', 'cmax')]"
1574,44,bestFilter,runs,"[('const double *', 'Params'), ('const bool *', 'match'), ('const int *', 'iC'), ('const int *', 'call'), ('const float *', 'cmax'), ('int *', 'id'), ('float *', 'cx')]"
1574,45,average_snips,runs,"[('const double *', 'Params'), ('const int *', 'iC'), ('const int *', 'call'), ('const int *', 'id'), ('const float *', 'uproj'), ('const float *', 'cmax'), ('float *', 'WU')]"
1574,46,average_snips_v2,runs,"[('const double *', 'Params'), ('const int *', 'iC'), ('const int *', 'call'), ('const int *', 'id'), ('const float *', 'uproj'), ('const float *', 'cmax'), ('float *', 'WU')]"
1574,47,average_snips_v3,runs,"[('const double *', 'Params'), ('const int *', 'ioff'), ('const int *', 'id'), ('const float *', 'uproj'), ('const float *', 'cmax'), ('float *', 'bigArray')]"
1574,48,sum_dWU,runs,"[('const double *', 'Params'), ('const float *', 'bigArray'), ('float *', 'WU')]"
1574,49,count_spikes,runs,"[('const double *', 'Params'), ('const int *', 'id'), ('int *', 'nsp'), ('const float *', 'x'), ('float *', 'V')]"
1574,50,computeCost,runs,"[('const double *', 'Params'), ('const float *', 'Ws'), ('const float *', 'mus'), ('const float *', 'W'), ('const float *', 'mu'), ('const bool *', 'iMatch'), ('const int *', 'iC'), ('const int *', 'Wh'), ('float *', 'cmax')]"
1574,51,bestFilter,runs,"[('const double *', 'Params'), ('const bool *', 'iMatch'), ('const int *', 'Wh'), ('const float *', 'cmax'), ('const float *', 'mus'), ('int *', 'id'), ('float *', 'x')]"
1574,52,crossFilter,runs,"[('const double *', 'Params'), ('const float *', 'W1'), ('const float *', 'W2'), ('const float *', 'UtU'), ('float *', 'WtW')]"
15741,0,histogram_kernel,runs,"[('float *', 'I'), ('float *', 'minI'), ('float *', 'maxI'), ('float *', 'mask'), ('int', 'nbins'), ('int', 'c'), ('int', 'h'), ('int', 'w'), ('float *', 'hist')]"
15741,1,hist_remap2_kernel,runs,"[('float *', 'I'), ('int', 'nI'), ('float *', 'mI'), ('float *', 'histJ'), ('float *', 'cumJ'), ('float *', '_minJ'), ('float *', '_maxJ'), ('int', 'nbins'), ('float *', '_sortI'), ('int *', '_idxI'), ('float *', 'R'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15741,4,avg_vote_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('int *', 'corrAB'), ('int', 'patch'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15741,5,blend_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('float *', 'M'), ('float *', 'AP'), ('float', 'alpha'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15741,6,patchmatch2_conv_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'AP'), ('float *', 'BP'), ('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int', 'patch'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15741,7,patchmatch2_argmax_kernel,runs,"[('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int *', 'corrAB'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15741,8,upsample_corr_kernel,runs,"[('int *', 'curr_corr'), ('int *', 'next_corr'), ('int', 'curr_h'), ('int', 'curr_w'), ('int', 'next_h'), ('int', 'next_w')]"
15741,10,Ring_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('float *', 'M'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15741,11,Ring2_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('int *', 'mask'), ('int *', 'm'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
15741,12,patchmatch_r_conv_kernel,runs,"[('float *', 'input'), ('float *', 'target'), ('float *', 'conv'), ('int', 'patch'), ('int', 'stride'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
15741,13,patchmatch_r_argmax_kernel,runs,"[('float *', 'conv'), ('float *', 'target'), ('float *', 'match'), ('int *', 'correspondence'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
15753,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15753,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15755,4,absoluteDifferenceCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
15755,5,bitwiseAndCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
15755,6,bitwiseOrCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
15755,7,bitwiseXorCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
15755,10,copyCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
15755,13,flipCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('bool', 'horizontal'), ('bool', 'vertical')]"
15755,14,histogramCuda,runs,"[('const uint8_t *', 'data'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'histogram')]"
15755,15,invertCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
15755,16,isEqualCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'isEqual')]"
15755,17,lookupTableCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint8_t *', 'table')]"
15755,18,maximumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
15755,19,minimumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
15755,20,projectionProfileHorizontalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
15755,21,projectionProfileVerticalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
15755,22,rotateCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('float', 'inXStart'), ('float', 'inYStart'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('float', 'cosAngle'), ('float', 'sinAngle')]"
15755,24,setPixelCuda,runs,"[('uint8_t *', 'in'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'pointX'), ('uint32_t *', 'pointY'), ('uint32_t', 'pointSize'), ('uint32_t', 'value')]"
15755,25,subtractCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
15755,29,isAnyEqualCuda,runs,"[('const uint8_t *', 'image'), ('uint8_t *', 'value'), ('size_t', 'valueCount'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'differenceCount')]"
15758,0,hello_from_gpu,runs,[]
15758,1,hello_from_gpu,runs,[]
15758,2,hello_from_gpu,runs,[]
15758,3,hello_from_gpu,runs,[]
15758,7,gpu_touch,runs,"[('uint64_t *', 'x'), ('const size_t', 'size')]"
1576,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
1576,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
1576,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
1576,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
1576,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
15765,0,divergence_test_ker,runs,[]
15765,1,matrix_mult_ker,runs,"[('float *', 'matrix_a'), ('float *', 'matrix_b'), ('float *', 'output_matrix'), ('int', 'N')]"
15771,0,cudaKernel,runs,[]
15777,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15777,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15778,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1578,21,sync_deconv_groups,runs,[]
1578,37,sync_conv_groups,runs,[]
15780,90,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
15780,91,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
15781,2,convertRGBtoGrayScale,runs,"[('uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'width'), ('int', 'height'), ('int', 'channels')]"
1579,86,kernel,runs,"[('float *', 'a'), ('size_t', 'N')]"
1579,89,update_inverse_cuda,runs,"[('float *', 'Ainv'), ('float *', 'u'), ('int', 'N'), ('int', 'rowstride'), ('int', 'k')]"
15824,0,update,runs,"[('float *', 'weights'), ('float *', 'grad'), ('float', 'lr'), ('int', 'N')]"
15824,1,transposeCoalesced,runs,"[('float *', 'odata'), ('const float *', 'idata'), ('int', 'idata_rows'), ('int', 'idata_cols')]"
15824,2,transposeNaive,runs,"[('float *', 'odata'), ('const float *', 'idata'), ('int', 'idata_rows'), ('int', 'idata_cols')]"
15824,3,SoftmaxLossBackprop,runs,"[('const int *', 'label'), ('int', 'num_labels'), ('int', 'batch_size'), ('float *', 'diff')]"
15824,4,matrixMultiplyShared,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
15824,5,matrixMultiplyNaive,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'K'), ('int', 'M')]"
15826,7,compute_Gamma_kernel,runs,"[('double *', 'Gamma'), ('int', 'Gamma_n'), ('int', 'Gamma_ld'), ('double *', 'N'), ('int', 'N_r'), ('int', 'N_c'), ('int', 'N_ld'), ('double *', 'G'), ('int', 'G_r'), ('int', 'G_c'), ('int', 'G_ld'), ('int *', 'random_vertex_vector'), ('double *', 'exp_V'), ('double *', 'exp_delta_V')]"
15826,8,read_G_matrix_kernel,runs,"[('int', 'S'), ('int', 'vertex_index'), ('int *', 'i_index'), ('int *', 'j_index'), ('bool *', 'is_Bennett'), ('double *', 'exp_Vj'), ('double *', 'N_ptr'), ('int', 'LD_N'), ('double *', 'G_ptr'), ('int', 'LD_G'), ('double *', 'result_ptr'), ('int', 'incr')]"
15826,9,compute_row_on_Gamma_matrix_kernel,runs,"[('int', 'row_index'), ('int', 'vertex_index'), ('int *', 'indices'), ('double *', 'exp_V'), ('double *', 'N_ptr'), ('int', 'LD_N'), ('double *', 'G_ptr'), ('int', 'LD_G'), ('double *', 'row_ptr'), ('int', 'incr')]"
15826,10,compute_col_on_Gamma_matrix_kernel,runs,"[('int', 'col_index'), ('int', 'vertex_index'), ('int *', 'indices'), ('double *', 'exp_V'), ('double *', 'N_ptr'), ('int', 'LD_N'), ('double *', 'G_ptr'), ('int', 'LD_G'), ('double *', 'col_ptr'), ('int', 'incr')]"
15826,11,compute_G_cols_kernel,runs,"[('int', 'N_i'), ('int', 'N_r'), ('int', 'N_c'), ('int *', 'p_ptr'), ('double *', 'exp_V_ptr'), ('double *', 'N_ptr'), ('int', 'N_ld'), ('double *', 'G_ptr'), ('int', 'G_ld'), ('double *', 'G_cols_ptr'), ('int', 'G_cols_ld')]"
15826,12,compute_d_vector_kernel,runs,"[('int', 'N_i'), ('int *', 'd_ind'), ('double *', 'd_ptr'), ('int *', 'p_ptr'), ('double *', 'N_ptr'), ('int', 'N_ld')]"
15832,0,printThreadIDs,runs,[]
15832,4,hello_world,runs,[]
15832,5,displayAttributeValues,runs,[]
15845,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
15845,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
15845,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
15845,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
15845,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
15845,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
15845,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
15845,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
15845,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
15845,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
15845,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
15845,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
15845,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
15845,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
15845,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
15845,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
15845,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
15852,3,_calculate_edge_num,runs,"[('long *', 'edge_num'), ('const long *', 'edge_num_sum'), ('const long *', 'edge_idx_sort'), ('const int', 'b'), ('const int', 'n'), ('const int', 'orig_p_num'), ('const long', 'p_num')]"
15852,4,_calculate_wnp,runs,"[('const long *', 'edge_num'), ('const long *', 'edge_start_idx'), ('float *', 'weight'), ('long *', 'ind'), ('const int', 'b'), ('const int', 'n'), ('const int', 'orig_p_num'), ('const int', 'p_num')]"
15852,5,_roll_array,runs,"[('const float *', 'array'), ('const long *', 'step'), ('float *', 'new_array'), ('const int', 'b'), ('const int', 'n'), ('const int', 'd')]"
15858,0,hello_from_gpu,runs,[]
15858,1,hello_from_gpu,runs,[]
15858,2,hello_from_gpu,runs,[]
15858,3,hello_from_gpu,runs,[]
15858,7,gpu_touch,runs,"[('uint64_t *', 'x'), ('const size_t', 'size')]"
15872,175,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15872,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15873,0,odd,runs,"[('unsigned *', 'v'), ('unsigned', 'base')]"
15873,1,even,runs,"[('unsigned *', 'v'), ('unsigned', 'base')]"
15880,1,init,runs,"[('int', 'order'), ('double *', 'C')]"
15882,174,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15882,315,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15899,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
15899,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
15900,204,cuda_debug_kernel,runs,[]
15903,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15903,1,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15903,4,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15903,9,hello,runs,[]
15911,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
15911,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
15911,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
15911,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
15911,25,PadMatrixInLeadingDimensionKernel,runs,"[('const int8_t *', 'src'), ('int8_t *', 'dst'), ('int', 'col_src'), ('int', 'col_dst')]"
15911,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
15917,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15917,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15923,172,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15923,313,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
15924,0,sum,runs,"[('int *', 'dest'), ('int', 'a'), ('int', 'b')]"
15924,1,vector_add,runs,"[('double const *', 'A'), ('double const *', 'B'), ('double *', 'C'), ('int const', 'N')]"
15928,0,mc_kernel_call,runs,"[('float *', 'd_s'), ('float', 'T'), ('float', 'K'), ('float', 'S0'), ('float', 'sigma'), ('float', 'mu'), ('float', 'r'), ('float', 'dt'), ('float *', 'd_normals'), ('unsigned', 'N_STEPS'), ('unsigned', 'N_PATHS')]"
15928,1,mc_kernel_put,runs,"[('float *', 'd_s'), ('float', 'T'), ('float', 'K'), ('float', 'S0'), ('float', 'sigma'), ('float', 'mu'), ('float', 'r'), ('float', 'dt'), ('float *', 'd_normals'), ('unsigned', 'N_STEPS'), ('unsigned', 'N_PATHS')]"
15929,1,kernel_hardswish,runs,"[('const float *', 'input_'), ('float *', 'output_'), ('int', 'n_data_size_')]"
15929,3,mish_kernel,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'num_elem')]"
1593,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
1593,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
15937,0,VecAddInt32,runs,"[('int32_t *', 'in0'), ('int32_t *', 'in1'), ('int32_t *', 'out'), ('int', 'cnt')]"
15937,1,VecAddFp32,runs,"[('float *', 'in0'), ('float *', 'in1'), ('float *', 'out'), ('int', 'cnt')]"
15937,2,VecSubInt32,runs,"[('int32_t *', 'in0'), ('int32_t *', 'in1'), ('int32_t *', 'out'), ('int', 'cnt')]"
15937,3,VecSubFp32,runs,"[('float *', 'in0'), ('float *', 'in1'), ('float *', 'out'), ('int', 'cnt')]"
1594,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
1594,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1594,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1594,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
1594,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
1594,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
1594,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
1594,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
1594,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
1594,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1594,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
1594,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1594,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
1594,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
1594,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1594,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
1594,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1594,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
1594,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1594,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1594,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1594,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1594,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1594,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
1594,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1594,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1594,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1594,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1594,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1594,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1594,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1594,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1594,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1594,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1594,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1594,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1594,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1594,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
1594,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
1594,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
1594,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
1594,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1594,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1594,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1594,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1594,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1594,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1594,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
1594,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1594,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1594,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
1594,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1594,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
1594,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
1594,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
1594,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
1594,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
1594,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
1594,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
1594,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
15944,7,refine_dilateFPPlaneDepthMapXpYp_kernel,runs,"[('float *', 'fpPlaneDepthMap'), ('int', 'fpPlaneDepthMap_p'), ('float *', 'maskMap'), ('int', 'maskMap_p'), ('int', 'width'), ('int', 'height'), ('int', 'xp'), ('int', 'yp'), ('float', 'fpPlaneDepth')]"
15944,16,refine_computeBestDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float3 *', 'isims'), ('int', 'isims_p'), ('float3 *', 'idpts'), ('int', 'idpts_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
15944,17,refine_fuseThreeDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float *', 'isimLst'), ('int', 'isimLst_p'), ('float *', 'idptLst'), ('int', 'idptLst_p'), ('float *', 'isimAct'), ('int', 'isimAct_p'), ('float *', 'idptAct'), ('int', 'idptAct_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
15944,93,generateGaussian_kernel,runs,"[('float *', 'og'), ('float', 'delta'), ('int', 'radius')]"
15950,0,swapOnKernel,runs,"[('int *', 'a'), ('int', 'size')]"
15953,5,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1596,0,gpu_calculation,runs,"[('float', 'c0r'), ('float', 'c0i'), ('float', 'float_step'), ('float', 'imag_step'), ('int *', 'results'), ('unsigned', 'n'), ('int', 'W'), ('int', 'H'), ('int', 'inicial')]"
15969,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
15969,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
15969,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
15969,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
15969,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
15969,15,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
15969,17,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15969,18,cubic,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15969,29,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15969,30,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
15969,31,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
15969,32,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
15969,33,hello,runs,[]
15969,37,hello,runs,[]
15976,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
15976,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1598,3,update_cluster,runs,"[('int *', 'cluster'), ('float *', 'centroid'), ('float *', 'B_c'), ('float *', 'G_c'), ('float *', 'R_c'), ('int', 'size_image'), ('int', 'n_threads'), ('int', 'k'), ('float *', 'Bdata'), ('float *', 'Gdata'), ('float *', 'Rdata'), ('float *', 'nValue')]"
1598,5,update_cluster,runs,"[('int *', 'cluster'), ('float *', 'centroid'), ('float *', 'B_c'), ('float *', 'G_c'), ('float *', 'R_c'), ('int', 'size_image'), ('int', 'n_threads'), ('int', 'K'), ('float *', 'Bdata'), ('float *', 'Gdata'), ('float *', 'Rdata'), ('float *', 'nValue')]"
15981,0,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
15981,1,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
15992,0,calculateSpaceTimeK,runs,"[('spacePoint *', 'SPBox'), ('int', 'nRows'), ('int', 'nCols'), ('float', 'left'), ('float', 'right'), ('float', 'top'), ('float', 'bottom'), ('blackHole *', 'BH'), ('int', 'nBlackHoles')]"
15992,1,calculateSpaceTimeKSHM,runs,"[('spacePoint *', 'SPBox'), ('int', 'nRows'), ('int', 'nCols'), ('float', 'left'), ('float', 'right'), ('float', 'top'), ('float', 'bottom'), ('blackHole *', 'BH'), ('int', 'nBlackHoles'), ('int', 'bhSize')]"
15992,2,calculateAsteroidsK,runs,"[('asteroid *', 'AST'), ('int', 'nAsteroids'), ('blackHole *', 'BH'), ('int', 'nBlackHoles'), ('float', 'dt')]"
15992,3,calculateAsteroidsKSHM,runs,"[('asteroid *', 'AST'), ('int', 'nAsteroids'), ('blackHole *', 'BH'), ('int', 'nBlackHoles'), ('float', 'dt'), ('int', 'bhSize')]"
15997,0,cuComputeDistanceGlobal,runs,"[('float *', 'A'), ('int', 'wA'), ('float *', 'B'), ('int', 'wB'), ('int', 'dim'), ('float *', 'AB')]"
15997,1,cuInsertionSort,runs,"[('float *', 'dist'), ('long *', 'ind'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
15997,2,cuParallelSqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'k')]"
15998,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
15998,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
15998,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
15998,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
15998,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
15998,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
15998,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
15998,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
15998,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
15998,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
15998,24,hello,runs,[]
15998,28,hello,runs,[]
160,0,kernel_rescale_u,runs,"[('double *', 'u_dev'), ('int', 'N')]"
160,1,kernel_calc_uu,runs,"[('double *', 'u_dev'), ('double *', 'uu_dev')]"
16009,6,GammasRGB,runs,"[('float3 __restrict__ *', 'inOutImg'), ('int', 'imgWidth'), ('int', 'imgHeight'), ('int', 'imgPitch')]"
16009,7,ApplyWeighting,runs,"[('float3 __restrict__ *', 'inOutImg'), ('const float3 __restrict__ *', 'finalImg'), ('const float3 __restrict__ *', 'weight'), ('int', 'imgWidth'), ('int', 'imgHeight'), ('int', 'imgPitch'), ('float', 'threshold')]"
16009,8,conjugateComplexMulKernel,runs,"[('const float2 __restrict__ *', 'aIn'), ('float2 __restrict__ *', 'bInOut'), ('int', 'maxElem')]"
16009,12,ComputeKernelParam,runs,"[('float3 __restrict__ *', 'kernelImg'), ('int', 'imgWidth'), ('int', 'imgHeight'), ('int', 'imgOutPitch'), ('float', 'Dth'), ('float', 'Dtr'), ('float', 'kDetail'), ('float', 'kDenoise'), ('float', 'kStretch'), ('float', 'kShrink')]"
16009,13,ComputeRobustnessMask,runs,"[('const float3 __restrict__ *', 'rawImgRef'), ('const float3 __restrict__ *', 'rawImgMoved'), ('float4 __restrict__ *', 'robustnessMask'), ('cudaTextureObject_t', 'texUV'), ('int', 'imgWidth'), ('int', 'imgHeight'), ('int', 'imgPitch'), ('int', 'maskPitch'), ('float', 'alpha'), ('float', 'beta'), ('float', 'thresholdM')]"
16009,21,ComputeDerivativesKernel,runs,"[('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float *', 'Ix'), ('float *', 'Iy'), ('float *', 'Iz'), ('cudaTextureObject_t', 'texSource'), ('cudaTextureObject_t', 'texTarget')]"
16009,28,getOptimalShifts,runs,"[('float2 __restrict__ *', 'optimalShifts'), ('const float2 __restrict__ *', 'bestShifts'), ('int', 'imageCount'), ('int', 'tileCountX'), ('int', 'tileCountY'), ('int', 'optimalShiftsPitch'), ('int', 'referenceImage'), ('int', 'imageToTrack')]"
16012,91,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
16012,104,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
16012,105,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
16012,106,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
16012,107,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
16012,185,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
16016,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16016,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16017,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16017,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16020,28,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
16020,31,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
16020,43,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
16020,44,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
16020,55,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
16024,0,NextQTur,runs,"[('float *', 'Qt'), ('float *', 'Pt')]"
16024,1,Sqrt,runs,"[('float *', 'Q'), ('float *', 'P'), ('float *', 'Qt'), ('float *', 'Pt'), ('float *', 'Eg'), ('float *', 'Epg')]"
16024,2,addcuda,runs,"[('float *', 'Q'), ('float *', 'P'), ('float *', 'Qt'), ('float *', 'Pt'), ('float *', 'Eg'), ('float *', 'Epg')]"
1603,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
1603,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1603,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1603,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
1603,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
1603,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
1603,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
1603,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
1603,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
1603,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1603,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
1603,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1603,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
1603,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
1603,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1603,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
1603,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1603,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
1603,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1603,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1603,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1603,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1603,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1603,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
1603,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1603,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1603,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1603,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1603,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1603,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1603,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1603,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1603,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1603,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1603,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1603,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1603,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1603,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
1603,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
1603,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
1603,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
1603,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1603,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1603,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1603,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1603,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1603,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1603,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
1603,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1603,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1603,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
1603,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1603,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
1603,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
1603,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
1603,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
1603,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
1603,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
1603,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
1603,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
16032,175,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16032,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16034,1,vec_initIndex,runs,"[('int', 'n'), ('int *', 'index')]"
16034,2,vec_computeLocalMaxima,runs,"[('int', 'n'), ('int *', 'localMaxima'), ('int', 'sizeImage'), ('float *', 'input'), ('int', 'sizeFilt'), ('int', 'edgeSizeReject')]"
16034,3,vec_eraseNonLocalMaxima,runs,"[('int', 'n'), ('float *', 'input'), ('int *', 'localMaxima')]"
16034,5,vec_set,runs,"[('int', 'n'), ('double *', 'result'), ('double', 'value')]"
16034,6,vec_add,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,7,vec_sub,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,8,vec_mul,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,9,vec_mul_fl,runs,"[('int', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
16034,10,vec_div,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,11,vec_negate,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,12,vec_addScalar,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double', 'y')]"
16034,13,vec_subScalar,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double', 'y')]"
16034,14,vec_mulScalar,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double', 'y')]"
16034,15,vec_divScalar,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double', 'y')]"
16034,16,vec_scalarAdd,runs,"[('int', 'n'), ('double *', 'result'), ('double', 'x'), ('double *', 'y')]"
16034,17,vec_scalarSub,runs,"[('int', 'n'), ('double *', 'result'), ('double', 'x'), ('double *', 'y')]"
16034,18,vec_scalarMul,runs,"[('int', 'n'), ('double *', 'result'), ('double', 'x'), ('double *', 'y')]"
16034,19,vec_scalarDiv,runs,"[('int', 'n'), ('double *', 'result'), ('double', 'x'), ('double *', 'y')]"
16034,20,vec_lt,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,21,vec_lte,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,22,vec_eq,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,23,vec_gte,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,24,vec_gt,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,25,vec_ne,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,26,vec_ltScalar,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double', 'y')]"
16034,27,vec_lteScalar,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double', 'y')]"
16034,28,vec_eqScalar,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double', 'y')]"
16034,29,vec_gteScalar,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double', 'y')]"
16034,30,vec_gtScalar,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double', 'y')]"
16034,31,vec_neScalar,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double', 'y')]"
16034,32,vec_acos,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,33,vec_acosh,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,34,vec_asin,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,35,vec_asinh,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,36,vec_atan,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,37,vec_atanh,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,38,vec_cbrt,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,39,vec_ceil,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,40,vec_cos,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,41,vec_cosh,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,42,vec_cospi,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,43,vec_erfc,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,44,vec_erfcinv,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'y')]"
16034,45,vec_erfcx,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,46,vec_erf,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,47,vec_erfinv,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'y')]"
16034,48,vec_exp10,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,49,vec_exp2,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,50,vec_exp,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,51,vec_expm1,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,52,vec_fabs,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,53,vec_floor,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,54,vec_j0,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,55,vec_j1,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,56,vec_lgamma,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,57,vec_log10,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,58,vec_log1p,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,59,vec_log2,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,60,vec_logb,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,61,vec_log,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,62,vec_normcdf,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'y')]"
16034,63,vec_normcdfinv,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'y')]"
16034,64,vec_rcbrt,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,65,vec_rint,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,66,vec_round,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,67,vec_rsqrt,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,68,vec_sin,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,69,vec_sinh,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,70,vec_sinpi,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,71,vec_sqrt,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,72,vec_tan,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,73,vec_tanh,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,74,vec_tgamma,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,75,vec_trunc,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,76,vec_y0,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,77,vec_y1,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x')]"
16034,78,vec_copysign,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,79,vec_fdim,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,80,vec_fdivide,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,81,vec_fmax,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,82,vec_fmin,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,83,vec_fmod,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,84,vec_hypot,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,85,vec_nextafter,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,86,vec_pow,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,87,vec_remainder,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,88,vec_testkernel,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'x'), ('double *', 'y')]"
16034,89,vec_computePSF_phase,runs,"[('int', 'n'), ('double *', 'realOutput'), ('double *', 'imagOutput'), ('double *', 'kx'), ('double *', 'ky'), ('double *', 'kz'), ('double *', 'pupil'), ('double *', 'phase'), ('double', 'dx'), ('double', 'dy'), ('double', 'dz')]"
16034,90,vec_computePSF_phaseN,runs,"[('int', 'n'), ('double *', 'kx'), ('double *', 'ky'), ('double *', 'kz'), ('double *', 'pupil'), ('double *', 'phase'), ('double', 'dx'), ('double', 'dy'), ('double', 'dz'), ('int *', 'sparseIndexEvenDisk'), ('int *', 'sparseIndexOddDisk'), ('double *', 'fft')]"
16034,91,vec_computePSF_phaseNwithOil,runs,"[('int', 'n'), ('double *', 'kx'), ('double *', 'ky'), ('double *', 'kz'), ('double *', 'kz_is_imag'), ('double *', 'kz_oil'), ('double *', 'kz_oil_is_imag'), ('double *', 'pupil'), ('double *', 'phase'), ('double', 'dx'), ('double', 'dy'), ('double', 'dz'), ('double', 'dz_oil'), ('int *', 'sparseIndexEvenDisk'), ('int *', 'sparseIndexOddDisk'), ('double *', 'fft')]"
16034,92,vec_computePSF_phaseNMany,runs,"[('int', 'n'), ('int', 'sizePart'), ('int', 'sizeTot'), ('double *', 'kx'), ('double *', 'ky'), ('double *', 'kz'), ('double *', 'pupil'), ('double *', 'phase'), ('double *', 'position'), ('int *', 'sparseIndexEvenDisk'), ('int *', 'sparseIndexOddDisk'), ('double *', 'fft'), ('int', 'many')]"
16034,93,vec_computePSF_phaseNMany_f,runs,"[('int', 'n'), ('int', 'sizePart'), ('int', 'sizeTot'), ('float *', 'kx'), ('float *', 'ky'), ('float *', 'kz'), ('float *', 'pupil'), ('float *', 'phase'), ('float *', 'position'), ('int *', 'sparseIndexEvenDisk'), ('int *', 'sparseIndexOddDisk'), ('float *', 'fft'), ('int', 'many')]"
16034,94,vec_computePSF_phaseNManywithOil_f,runs,"[('int', 'n'), ('int', 'sizePart'), ('int', 'sizeTot'), ('float *', 'kx'), ('float *', 'ky'), ('float *', 'kz'), ('float *', 'kz_is_imag'), ('float *', 'kz_oil'), ('float *', 'kz_oil_is_imag'), ('float *', 'pupil'), ('float *', 'phase'), ('float *', 'position'), ('int *', 'sparseIndexEvenDisk'), ('int *', 'sparseIndexOddDisk'), ('float *', 'fft'), ('int', 'many')]"
16034,95,vec_thetest,runs,"[('int', 'n'), ('float *', 'kz_is_imag')]"
16034,96,vec_computePSF_signal,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'real'), ('double *', 'imag'), ('double', 'divide')]"
16034,97,vec_computePSF_signalN,runs,"[('int', 'n'), ('double *', 'result'), ('double', 'divide'), ('int *', 'sparseIndexEvenShiftOutput'), ('int *', 'sparseIndexOddShiftOutput'), ('double *', 'fft')]"
16034,98,vec_computePSF_signalN2,runs,"[('int', 'n'), ('double', 'divide'), ('int *', 'sparseIndexEvenShiftOutput'), ('int *', 'sparseIndexOddShiftOutput'), ('double *', 'fft'), ('int *', 'sparseIndexEvenShiftOutputNext'), ('int *', 'sparseIndexOddShiftOutputNext'), ('double *', 'psffft')]"
16034,99,vec_computePSF_signalN2Many,runs,"[('int', 'n'), ('int', 'sizePart'), ('int', 'sizeTot'), ('double', 'divide'), ('int *', 'sparseIndexEvenShiftOutput'), ('int *', 'sparseIndexOddShiftOutput'), ('double *', 'fft'), ('int *', 'sparseIndexEvenShiftOutputNext'), ('int *', 'sparseIndexOddShiftOutputNext'), ('double *', 'psffft')]"
16034,100,vec_computePSF_signalN2Many_f,runs,"[('int', 'n'), ('int', 'sizePart'), ('int', 'sizeTot'), ('float', 'divide'), ('int *', 'sparseIndexEvenShiftOutput'), ('int *', 'sparseIndexOddShiftOutput'), ('float *', 'fft'), ('int *', 'sparseIndexEvenShiftOutputNext'), ('int *', 'sparseIndexOddShiftOutputNext'), ('float *', 'psffft')]"
16034,101,vec_computePSF_signalsqrt,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'real'), ('double *', 'imag'), ('double', 'divide')]"
16034,102,vec_computePSF_signalNsqrt,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'fft'), ('double', 'divide'), ('int *', 'sparseIndexEvenShift2D'), ('int *', 'sparseIndexOddShift2D')]"
16034,103,vec_computePSF_signalNsqrtMany,runs,"[('int', 'n'), ('int', 'sizeSubImage'), ('double *', 'result'), ('double *', 'fft'), ('double', 'divide'), ('int *', 'sparseIndexEvenShift2D'), ('int *', 'sparseIndexOddShift2D')]"
16034,104,vec_computePSF_signalNsqrtMany_f,runs,"[('int', 'n'), ('int', 'sizeSubImage'), ('float *', 'result'), ('float *', 'fft'), ('float', 'divide'), ('int *', 'sparseIndexEvenShift2D'), ('int *', 'sparseIndexOddShift2D')]"
16034,105,vec_computePSF_signalNsqrtMany_fcrop,runs,"[('int', 'n'), ('int', 'sizeSubImage'), ('int', 'sizeSubImageFull'), ('float *', 'result'), ('float *', 'fft'), ('float', 'divide'), ('int *', 'sparseIndexEvenShift2D'), ('int *', 'sparseIndexOddShift2D')]"
16034,106,vec_mulMany,runs,"[('int', 'n'), ('int', 'sizeKernel'), ('double *', 'result'), ('double *', 'x'), ('double *', 'kernel')]"
16034,107,vec_divScalarMany,runs,"[('int', 'n'), ('int', 'sizeSubImage'), ('double *', 'result'), ('double *', 'x'), ('double *', 'div')]"
16034,108,vec_mulMany_f,runs,"[('int', 'n'), ('int', 'sizeKernel'), ('float *', 'result'), ('float *', 'x'), ('float *', 'kernel')]"
16034,109,vec_computeModelMany1,runs,"[('int', 'n'), ('int', 'sizeImage'), ('double *', 'result'), ('double *', 'x'), ('double *', 'amplitude'), ('double', 'background')]"
16034,110,vec_computeModelMany2,runs,"[('int', 'n'), ('int', 'sizeImage'), ('double *', 'result'), ('double *', 'x'), ('double *', 'amplitude'), ('double *', 'background')]"
16034,111,vec_computeModelMany3,runs,"[('int', 'n'), ('int', 'sizeImage'), ('double *', 'result'), ('double *', 'x'), ('double *', 'amplitude'), ('double *', 'background')]"
16034,112,vec_computeModelMany1_scmos,runs,"[('int', 'n'), ('int', 'sizeImage'), ('double *', 'result'), ('double *', 'x'), ('double *', 'amplitude'), ('double', 'background'), ('double *', 'scmos')]"
16034,113,vec_computeModelMany2_scmos,runs,"[('int', 'n'), ('int', 'sizeImage'), ('double *', 'result'), ('double *', 'x'), ('double *', 'amplitude'), ('double *', 'background'), ('double *', 'scmos')]"
16034,114,vec_computeModelMany3_scmos,runs,"[('int', 'n'), ('int', 'sizeImage'), ('double *', 'result'), ('double *', 'x'), ('double *', 'amplitude'), ('double *', 'background'), ('double *', 'scmos')]"
16034,115,vec_divScalarMany_f,runs,"[('int', 'n'), ('int', 'sizeSubImage'), ('float *', 'result'), ('double *', 'resultDouble'), ('float *', 'x'), ('float *', 'div')]"
16034,116,vec_computePoissonLikelihood,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'image'), ('double *', 'model')]"
16034,117,vec_computeGaussianLikelihood,runs,"[('int', 'n'), ('double *', 'result'), ('double *', 'image'), ('double *', 'model')]"
16034,118,vec_addPhotonsAndBackgroundManyReshuffle,runs,"[('int', 'n'), ('int', 'sizeSubImage'), ('int', 'numberPSFperModel'), ('double *', 'output'), ('double *', 'input'), ('double *', 'photonAndBackground')]"
16034,119,vec_addPhotonsAndBackgroundManyReshuffle_scmos,runs,"[('int', 'n'), ('int', 'sizeSubImage'), ('int', 'numberPSFperModel'), ('double *', 'output'), ('double *', 'input'), ('double *', 'photonAndBackground'), ('double *', 'scmos')]"
16034,120,vec_addPhotonsAndBackgroundMany,runs,"[('int', 'n'), ('int', 'sizeSubImage'), ('double *', 'output'), ('double *', 'input'), ('double *', 'photonAndBackground')]"
16034,121,vec_addPhotonsAndBackgroundMany_scmos,runs,"[('int', 'n'), ('int', 'sizeSubImage'), ('double *', 'output'), ('double *', 'input'), ('double *', 'photonAndBackground'), ('double *', 'scmos')]"
16034,122,vec_addPhotonsAndBackgroundMany_f,runs,"[('int', 'n'), ('int', 'sizeSubImage'), ('float *', 'output'), ('float *', 'input'), ('float *', 'photonAndBackground')]"
16034,123,vec_double2float,runs,"[('int', 'n'), ('float *', 'output'), ('double *', 'input')]"
16034,124,vec_float2double,runs,"[('int', 'n'), ('double *', 'output'), ('float *', 'input')]"
16034,125,vec_complexeConjugateKernel,runs,"[('int', 'n'), ('int', 'sizeInput'), ('float *', 'output'), ('float *', 'input'), ('float *', 'inputKernel')]"
16034,126,vec_makeResultCorrelation,runs,"[('int', 'n'), ('int', 'sizeInput'), ('int', 'sizeFullPadded'), ('float *', 'output'), ('float *', 'input'), ('int *', 'sparse')]"
16034,127,vec_divScalarFloat,runs,"[('int', 'n'), ('float *', 'result'), ('float *', 'x'), ('float', 'y')]"
16034,128,vec_computeCRLB,runs,"[('int', 'n'), ('int', 'sizeMatrix'), ('double *', 'output'), ('double *', 'input'), ('double', 'h')]"
16034,129,vec_divCorrelation,runs,"[('int', 'n'), ('float *', 'x'), ('int', 'sizeImage'), ('float *', 'varImage'), ('float *', 'varPSF')]"
16037,7,myset,runs,"[('unsigned long long *', 'p'), ('unsigned long long', 'v'), ('long long', 'n')]"
16037,31,generate_sources,runs,"[('curandState *', 'state'), ('int', 'n'), ('uint32_t *', 'verts')]"
16037,32,generate_destinations,runs,"[('curandState *', 'state'), ('int', 'n'), ('const uint32_t *', 'sources'), ('uint32_t *', 'destinations')]"
16039,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16039,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16046,13,setupRandomStatesKernel,runs,"[('curandState __restrict__ *', 'states'), ('unsigned long long', 'seed'), ('int', 'count')]"
16053,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16053,227,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
16053,228,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
16053,229,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16053,234,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
16053,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
16053,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16057,0,glcm_calculation,runs,"[('int *', 'A'), ('int *', 'glcm'), ('float *', 'glcmNorm'), ('const int', 'nx'), ('const int', 'ny'), ('int', 'maxx')]"
16057,1,glcm_calculation_nol,runs,"[('int *', 'A'), ('int *', 'glcm'), ('const int', 'nx'), ('const int', 'ny'), ('int', 'maxx')]"
16057,2,glcm_calculation_180,runs,"[('int *', 'A'), ('int *', 'glcm'), ('const int', 'nx'), ('const int', 'ny'), ('int', 'max')]"
16057,3,glcm_calculation_270,runs,"[('int *', 'A'), ('int *', 'glcm'), ('const int', 'nx'), ('const int', 'ny'), ('int', 'max')]"
16057,4,glcm_calculation_90,runs,"[('int *', 'A'), ('int *', 'glcm'), ('const int', 'nx'), ('const int', 'ny'), ('int', 'max')]"
16057,5,glcm_calculation_45,runs,"[('int *', 'A'), ('int *', 'glcm'), ('const int', 'nx'), ('const int', 'ny'), ('int', 'max')]"
16057,6,glcm_calculation_135,runs,"[('int *', 'A'), ('int *', 'glcm'), ('const int', 'nx'), ('const int', 'ny'), ('int', 'max')]"
16057,7,glcm_calculation_225,runs,"[('int *', 'A'), ('int *', 'glcm'), ('const int', 'nx'), ('const int', 'ny'), ('int', 'max')]"
16057,8,glcm_calculation_315,runs,"[('int *', 'A'), ('int *', 'glcm'), ('const int', 'nx'), ('const int', 'ny'), ('int', 'max')]"
16057,9,normalization,runs,"[('int *', 'glcm'), ('float *', 'norm'), ('int', 'max'), ('int', 'sum')]"
16057,10,calculate_contrast,runs,"[('float *', 'norm'), ('float *', 'contrast'), ('int *', 'dif'), ('int', 'max'), ('float', 'sum'), ('int', 'size')]"
16057,11,calculate_entropy,runs,"[('float *', 'norm'), ('float *', 'entropy'), ('int', 'max'), ('float', 'sum'), ('int', 'size')]"
16057,12,calculate_idm,runs,"[('float *', 'norm'), ('float *', 'idm'), ('int *', 'dif'), ('int', 'max'), ('float', 'sum'), ('int', 'size')]"
16057,13,calculate_correlation,runs,"[('float *', 'norm'), ('float *', 'corelation'), ('float *', 'miu_x'), ('float *', 'miu_y'), ('float *', 'stdx'), ('float *', 'stdy'), ('int *', 'ikj'), ('float *', 'dif_variance'), ('int', 'max'), ('float', 'sum'), ('int', 'size')]"
16057,17,calculate_IMC,runs,"[('float *', 'norm'), ('float *', 'IMC'), ('float *', 'HX'), ('float *', 'HY'), ('float *', 'entropy'), ('float *', 'px'), ('float *', 'py'), ('float *', 'HXY'), ('int', 'max'), ('float', 'sum'), ('int', 'size')]"
16057,18,calculate_ASM,runs,"[('float *', 'norm'), ('float *', 'ASM'), ('int', 'max'), ('float', 'sum'), ('int', 'size')]"
16057,19,Div0,runs,"[('int *', 'matrix'), ('int *', 'newMatrix'), ('int', 'nx'), ('int', 'ny'), ('int', 'Max')]"
16057,20,Div45,runs,"[('int *', 'matrix'), ('int *', 'newMatrix'), ('int', 'nx'), ('int', 'ny'), ('int', 'Max')]"
16057,21,Div90,runs,"[('int *', 'matrix'), ('int *', 'newMatrix'), ('int', 'nx'), ('int', 'ny'), ('int', 'Max')]"
16057,22,Div135,runs,"[('int *', 'matrix'), ('int *', 'newMatrix'), ('int', 'nx'), ('int', 'ny'), ('int', 'Max')]"
16057,23,Div180,runs,"[('int *', 'matrix'), ('int *', 'newMatrix'), ('int', 'nx'), ('int', 'ny'), ('int', 'Max')]"
16057,24,Div225,runs,"[('int *', 'matrix'), ('int *', 'newMatrix'), ('int', 'nx'), ('int', 'ny'), ('int', 'Max')]"
16057,25,Div270,runs,"[('int *', 'matrix'), ('int *', 'newMatrix'), ('int', 'nx'), ('int', 'ny'), ('int', 'Max')]"
16057,26,Div315,runs,"[('int *', 'matrix'), ('int *', 'newMatrix'), ('int', 'nx'), ('int', 'ny'), ('int', 'Max')]"
16057,27,Mul,runs,"[('float *', 'newMatrix'), ('float *', 'mulMatrix'), ('int', 'Max'), ('float *', 'sumMatrix')]"
16057,28,Jumlah,runs,"[('float *', 'sumMatrix'), ('float *', 'mulMatrix')]"
16057,29,normalization,runs,"[('int *', 'glcm'), ('float *', 'norm'), ('int', 'Max'), ('int', 'sum')]"
16057,30,calculate_contrast,runs,"[('float *', 'norm'), ('float *', 'contrast'), ('int *', 'dif'), ('int', 'max'), ('float', 'sum'), ('int', 'size')]"
16057,31,calculate_entropy,runs,"[('float *', 'norm'), ('float *', 'entropy'), ('int', 'max'), ('float', 'sum'), ('int', 'size')]"
16057,32,calculate_idm,runs,"[('float *', 'norm'), ('float *', 'idm'), ('int *', 'dif'), ('int', 'max'), ('float', 'sum'), ('int', 'size')]"
16057,33,calculate_correlation,runs,"[('float *', 'norm'), ('float *', 'corelation'), ('float *', 'miu_x'), ('float *', 'miu_y'), ('float *', 'stdx'), ('float *', 'stdy'), ('int *', 'ikj'), ('float *', 'dif_variance'), ('int', 'max'), ('float', 'sum'), ('int', 'size')]"
16057,37,calculate_IMC,runs,"[('float *', 'norm'), ('float *', 'IMC'), ('float *', 'HX'), ('float *', 'HY'), ('float *', 'entropy'), ('float *', 'px'), ('float *', 'py'), ('float *', 'HXY'), ('int', 'max'), ('float', 'sum'), ('int', 'size')]"
16057,38,calculate_ASM,runs,"[('float *', 'norm'), ('float *', 'ASM'), ('float *', 'mulMatrix'), ('int', 'Max')]"
16059,2,vectorAdd,runs,"[('const uint16_t *', 'A'), ('const uint16_t *', 'B'), ('uint16_t *', 'C'), ('uint32_t', 'numElements')]"
16059,3,vectorAdd,runs,"[('uint16_t *', 'A'), ('const uint16_t *', 'B'), ('int32_t', 'numElements')]"
16068,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16068,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16077,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16077,23,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
16079,0,TgvUpscaleFloat2Kernel,runs,"[('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float', 'scale'), ('float2 *', 'out')]"
16079,1,TgvUpscaleMaskedKernel,runs,"[('float *', 'mask'), ('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float', 'scale'), ('float *', 'out')]"
16079,6,TgvComputeOpticalFlowVectorKernel,runs,"[('const float *', 'u'), ('const float2 *', 'tv2'), ('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float2 *', 'warpUV')]"
16079,10,TgvComputeOpticalFlowVectorMaskedKernel,runs,"[('const float *', 'u'), ('const float2 *', 'tv2'), ('float *', 'mask'), ('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float2 *', 'warpUV')]"
16079,11,TgvCloneKernel,runs,"[('float *', 'dst'), ('float *', 'src'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
16079,12,TgvCloneKernel2,runs,"[('float2 *', 'dst'), ('float2 *', 'src'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
16079,24,TgvConvertKBKernel,runs,"[('float2 *', 'disparity'), ('float', 'focalx'), ('float', 'focaly'), ('float', 'cx'), ('float', 'cy'), ('float', 'd1'), ('float', 'd2'), ('float', 'd3'), ('float', 'd4'), ('float', 't1'), ('float', 't2'), ('float', 't3'), ('float3 *', 'X'), ('float *', 'depth'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
16079,26,TgvMedianFilterKernel3,runs,"[('float *', 'u'), ('float *', 'v'), ('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float *', 'outputu'), ('float *', 'outputv')]"
16079,27,TgvMedianFilter3DKernel3,runs,"[('float *', 'X'), ('float *', 'Y'), ('float *', 'Z'), ('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float *', 'X1'), ('float *', 'Y1'), ('float *', 'Z1')]"
16079,30,TgvSolveEtaKernel,runs,"[('float', 'alpha0'), ('float', 'alpha1'), ('float *', 'atensor'), ('float *', 'btensor'), ('float *', 'ctensor'), ('float *', 'etau'), ('float *', 'etav1'), ('float *', 'etav2'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
16079,31,TgvSolveEtaMaskedKernel,runs,"[('float *', 'mask'), ('float', 'alpha0'), ('float', 'alpha1'), ('float *', 'atensor'), ('float *', 'btensor'), ('float *', 'ctensor'), ('float *', 'etau'), ('float *', 'etav1'), ('float *', 'etav2'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
16079,32,TgvThresholdingL1Kernel,runs,"[('float2 *', 'Tp'), ('float *', 'u_'), ('float *', 'Iu'), ('float *', 'Iz'), ('float', 'lambda'), ('float', 'tau'), ('float *', 'eta_u'), ('float *', 'u'), ('float *', 'us'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
16079,33,TgvSolveTpKernel,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float2 *', 'p'), ('float2 *', 'Tp'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
16079,34,TgvThresholdingL1MaskedKernel,runs,"[('float2 *', 'Tp'), ('float *', 'u_'), ('float *', 'Iu'), ('float *', 'Iz'), ('float *', 'mask'), ('float', 'lambda'), ('float', 'tau'), ('float *', 'eta_u'), ('float *', 'u'), ('float *', 'us'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
16079,35,TgvSolveTpMaskedKernel,runs,"[('float *', 'mask'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float2 *', 'p'), ('float2 *', 'Tp'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
16079,36,TgvUpdateDualVariablesTGVKernel,runs,"[('float *', 'u_'), ('float2 *', 'v_'), ('float', 'alpha0'), ('float', 'alpha1'), ('float', 'sigma'), ('float', 'eta_p'), ('float', 'eta_q'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float4 *', 'grad_v'), ('float2 *', 'p'), ('float4 *', 'q'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
16079,37,TgvUpdateDualVariablesTGVMaskedKernel,runs,"[('float *', 'mask'), ('float *', 'u_'), ('float2 *', 'v_'), ('float', 'alpha0'), ('float', 'alpha1'), ('float', 'sigma'), ('float', 'eta_p'), ('float', 'eta_q'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float4 *', 'grad_v'), ('float2 *', 'p'), ('float4 *', 'q'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
1608,17,mul_by_veff_real_real_gpu_kernel,runs,"[('int', 'nr__'), ('double *', 'buf__'), ('double const *', 'veff__')]"
1608,33,update_density_rg_1_real_gpu_kernel,runs,"[('int', 'size__'), ('double const *', 'psi_rg__'), ('double', 'wt__'), ('double *', 'density_rg__')]"
16083,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16083,340,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16091,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
16091,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
16091,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
16091,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
16091,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
16091,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
16091,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
16091,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
16091,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
16091,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
16091,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
16091,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
16091,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
16091,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
16091,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
16091,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
16091,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
16096,0,matrixSigmoid,runs,"[('double *', 'a'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,1,matrixClip,runs,"[('double *', 'a'), ('double', 'min'), ('double', 'max'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,2,matrixMultiply,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc'), ('int', 'ac'), ('int', 'bc')]"
16096,3,matrixSubScalarInverse,runs,"[('double *', 'a'), ('double', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,4,matrixTranspose,runs,"[('double *', 'a'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,5,matrixAddScalar,runs,"[('double *', 'a'), ('double', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,6,matrixHadamard,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,7,matrixTanh,runs,"[('double *', 'a'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,8,matrixAdd,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,9,matrixSub,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,10,matrixSubScalar,runs,"[('double *', 'a'), ('double', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,11,matrixLogit,runs,"[('double *', 'a'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,12,matrixMultiplyScalar,runs,"[('double *', 'a'), ('double', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,13,matrixDivisionScalar,runs,"[('double *', 'a'), ('double', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
16096,14,matrixExp,runs,"[('double *', 'a'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
161,0,euclidean_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,1,euclidean_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,2,maximum_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,3,maximum_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,4,manhattan_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,5,manhattan_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,6,canberra_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,7,canberra_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,8,binary_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,9,binary_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,10,minkowski_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,11,minkowski_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,12,dot_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,13,dot_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
161,14,getColNorms,runs,"[('int', 'rows'), ('int', 'cols'), ('float *', 'da'), ('int', 'lda'), ('float *', 'colNorms')]"
161,15,gpuFindMax,runs,"[('int', 'n'), ('float *', 'data'), ('int', 'threadWorkLoad'), ('int *', 'maxIndex')]"
161,16,gpuSwapCol,runs,"[('int', 'rows'), ('float *', 'dArray'), ('int', 'coli'), ('int *', 'dColj'), ('int *', 'dPivot')]"
161,17,makeHVector,runs,"[('int', 'rows'), ('float *', 'input'), ('float *', 'output')]"
161,18,UpdateHHNorms,runs,"[('int', 'cols'), ('float *', 'dV'), ('float *', 'dNorms')]"
161,19,gpuKendall,runs,"[('const float *', 'a'), ('size_t', 'na'), ('const float *', 'b'), ('size_t', 'nb'), ('size_t', 'sampleSize'), ('double *', 'results')]"
161,20,getRestricted,runs,"[('int', 'countx'), ('int', 'county'), ('int', 'rows'), ('int', 'cols'), ('float *', 'mX'), ('int', 'mXdim'), ('float *', 'vY'), ('int', 'vYdim'), ('float *', 'mQ'), ('int', 'mQdim'), ('float *', 'mR'), ('int', 'mRdim'), ('float *', 'vectB'), ('int', 'vectBdim')]"
161,21,getUnrestricted,runs,"[('int', 'countx'), ('int', 'county'), ('int', 'rows'), ('int', 'cols'), ('float *', 'mX'), ('int', 'mXdim'), ('float *', 'vY'), ('int', 'vYdim'), ('float *', 'mQ'), ('int', 'mQdim'), ('float *', 'mR'), ('int', 'mRdim'), ('float *', 'vectB'), ('int', 'vectBdim')]"
161,22,ftest,runs,"[('int', 'diagFlag'), ('int', 'p'), ('int', 'rows'), ('int', 'colsx'), ('int', 'colsy'), ('int', 'rCols'), ('int', 'unrCols'), ('float *', 'obs'), ('int', 'obsDim'), ('float *', 'rCoeffs'), ('int', 'rCoeffsDim'), ('float *', 'unrCoeffs'), ('int', 'unrCoeffsDim'), ('float *', 'rdata'), ('int', 'rdataDim'), ('float *', 'unrdata'), ('int', 'unrdataDim'), ('float *', 'dfStats')]"
161,36,gpuMeans,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('float *', 'means'), ('float *', 'numPairs')]"
161,37,gpuSD,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'means'), ('const float *', 'numPairs'), ('float *', 'sds')]"
161,38,gpuPMCC,runs,"[('const float *', 'vectsa'), ('size_t', 'na'), ('const float *', 'vectsb'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'numPairs'), ('const float *', 'means'), ('const float *', 'sds'), ('float *', 'correlations')]"
161,39,gpuMeansNoTest,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('float *', 'means'), ('float *', 'numPairs')]"
161,40,gpuSDNoTest,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'means'), ('const float *', 'numPairs'), ('float *', 'sds')]"
161,41,gpuPMCCNoTest,runs,"[('const float *', 'vectsa'), ('size_t', 'na'), ('const float *', 'vectsb'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'numPairs'), ('const float *', 'means'), ('const float *', 'sds'), ('float *', 'correlations')]"
161,42,gpuSignif,runs,"[('const float *', 'gpuNumPairs'), ('const float *', 'gpuCorrelations'), ('size_t', 'n'), ('float *', 'gpuTScores')]"
161,43,dUpdateSignif,runs,"[('const float *', 'gpuData'), ('size_t', 'n'), ('float *', 'gpuResults')]"
161,44,noNAsPmccMeans,runs,"[('int', 'nRows'), ('int', 'nCols'), ('float *', 'a'), ('float *', 'means')]"
161,45,scale,runs,"[('float', 'knot_max'), ('int', 'nx'), ('int', 'nsamples'), ('float *', 'x'), ('int', 'pitch_x')]"
161,46,get_bin_scores,runs,"[('int', 'nbins'), ('int', 'order'), ('int', 'nknots'), ('float *', 'knots'), ('int', 'nsamples'), ('int', 'nx'), ('float *', 'x'), ('int', 'pitch_x'), ('float *', 'bins'), ('int', 'pitch_bins')]"
161,47,get_entropy,runs,"[('int', 'nbins'), ('int', 'nsamples'), ('int', 'nx'), ('float *', 'bin_scores'), ('int', 'pitch_bin_scores'), ('float *', 'entropies')]"
161,48,get_mi,runs,"[('int', 'nbins'), ('int', 'nsamples'), ('int', 'nx'), ('float *', 'x_bin_scores'), ('int', 'pitch_x_bin_scores'), ('float *', 'entropies_x'), ('int', 'ny'), ('float *', 'y_bin_scores'), ('int', 'pitch_y_bin_scores'), ('float *', 'entropies_y'), ('float *', 'mis'), ('int', 'pitch_mis')]"
1610,0,estimationKernel,runs,"[('float *', 'data'), ('size_t', 'n'), ('float *', 'kernelEstimation'), ('size_t', 'es'), ('float', 'dx'), ('float', 'h')]"
1610,3,SumReduction,runs,"[('int *', 'input'), ('int', 'n')]"
1610,4,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
1610,5,checkIndex,runs,[]
1610,6,vectorAdd,runs,"[('int', 'numElements'), ('float *', 'x'), ('float *', 'y')]"
16102,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16102,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16108,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16108,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16114,0,kernel_example,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
16117,0,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16117,1,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16117,2,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16117,9,kernel,runs,[]
16117,10,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
16117,11,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
16117,15,kernel,runs,"[('uchar4 *', 'ptr'), ('int', 'ticks')]"
16117,16,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16117,18,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16117,19,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
16117,20,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
16117,21,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16117,22,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
16117,23,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16117,25,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
16117,28,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
16117,29,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
16117,30,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
16117,31,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
16117,33,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16126,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16126,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
16126,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16126,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16126,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
16130,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16130,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16134,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16134,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16135,171,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16135,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16136,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16136,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16138,6,jackpot_compactTest_gpu_ADD,runs,"[('uint32_t *', 'data'), ('uint32_t *', 'partial_sums'), ('int', 'len')]"
1614,0,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
1614,1,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
1614,2,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
1614,3,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
1614,4,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
1614,5,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
16149,0,testKernel2D,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('size_t', 'pitch')]"
16151,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16151,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16152,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16152,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16159,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16159,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16163,15,set_array_double,runs,"[('double *', 'a'), ('double', 'value'), ('size_t', 'len')]"
16163,16,STREAM_Copy,runs,"[('float *', 'a'), ('float *', 'b'), ('size_t', 'len')]"
16163,17,STREAM_Copy_double,runs,"[('double *', 'a'), ('double *', 'b'), ('size_t', 'len')]"
16163,18,STREAM_Copy_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('size_t', 'len')]"
16163,19,STREAM_Copy_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('size_t', 'len')]"
16163,20,STREAM_Scale,runs,"[('float *', 'a'), ('float *', 'b'), ('float', 'scale'), ('size_t', 'len')]"
16163,21,STREAM_Scale_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double', 'scale'), ('size_t', 'len')]"
16163,22,STREAM_Scale_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float', 'scale'), ('size_t', 'len')]"
16163,23,STREAM_Scale_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double', 'scale'), ('size_t', 'len')]"
16163,24,STREAM_Add,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('size_t', 'len')]"
16163,25,STREAM_Add_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('size_t', 'len')]"
16163,26,STREAM_Add_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('size_t', 'len')]"
16163,27,STREAM_Add_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('size_t', 'len')]"
16163,28,STREAM_Triad,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float', 'scalar'), ('size_t', 'len')]"
16163,29,STREAM_Triad_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double', 'scalar'), ('size_t', 'len')]"
16163,30,STREAM_Triad_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float', 'scalar'), ('size_t', 'len')]"
16163,31,STREAM_Triad_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double', 'scalar'), ('size_t', 'len')]"
1617,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
1617,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
1617,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
1617,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
1617,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
1617,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
16178,0,hello_world,runs,[]
16184,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16184,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16186,2,dot,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16186,3,_cuda_add_scalar,runs,"[('int *', 'in'), ('int', 'scalar'), ('int', 'n')]"
16186,7,matrixMult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'width')]"
16186,8,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
162,6,entrySearch_max_int_kernel,runs,"[('int *', 'g_iarr'), ('int *', 'g_maxarr'), ('int', 'size')]"
162,205,init,runs,"[('int *', 'vector'), ('int', 'N'), ('int', 'val')]"
162,208,bin_start,runs,"[('int *', 'binStart'), ('int *', 'binEnd'), ('int *', 'partBin'), ('int', 'nparts')]"
1620,0,reduce1,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'g_size')]"
1620,1,reduce2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'g_size')]"
1620,2,reduce3,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'g_size')]"
1620,3,reduce4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'g_size')]"
1620,4,reduce5,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'g_size')]"
16206,1,tridiag_x_matrix_k,runs,"[('float', 'p_d'), ('float', 'p_m'), ('float', 'p_u'), ('float *', 'u'), ('int', 'n')]"
16206,2,tridiag_x_matrix_k,runs,"[('float *', 'p_d'), ('float *', 'p_m'), ('float *', 'p_u'), ('float *', 'u'), ('int', 'n')]"
16206,3,Tri_k,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float', 'norm'), ('int', 'n')]"
16206,4,boundaryCondition_k,runs,"[('float *', 'payoff'), ('size_t', 'spotSize'), ('float', 'strike')]"
16206,5,initPayoff_k,runs,"[('float *', 'payoff'), ('float', 'dx'), ('float', 'Smin'), ('float', 'strike'), ('size_t', 'P1'), ('size_t', 'P2')]"
16206,6,interStep_k,runs,"[('float *', 'payoff'), ('size_t', 'scheduleCounter'), ('float', 'dx'), ('float', 'Smin'), ('size_t', 'P1'), ('size_t', 'P2'), ('float', 'barrier')]"
16206,9,pcr_k,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float *', 'y'), ('int', 'n')]"
16206,10,pcr_k,runs,"[('float', 'a'), ('float', 'b'), ('float', 'c'), ('float *', 'y'), ('int', 'n')]"
1621,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
16217,177,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16217,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16222,0,matrix_t,runs,"[('int *', 'data'), ('int *', 'out'), ('int *', 'rows'), ('int *', 'cols')]"
16222,1,matrix_count,runs,"[('int *', 'data'), ('int *', 'count'), ('int *', 'rows'), ('int *', 'cols')]"
16222,2,sum_reduc,runs,"[('int *', 'data'), ('int *', 'len'), ('int *', 'width')]"
16231,2,littleBinoticSort,runs,"[('int *', 'arr'), ('int', 'num'), ('int', 'numMax')]"
16242,0,findAllMins,runs,"[('int *', 'adjMat'), ('int *', 'outVec'), ('size_t', 'gSize')]"
16242,1,relax,runs,"[('int *', 'U'), ('int *', 'F'), ('int *', 'd'), ('size_t', 'gSize'), ('int *', 'adjMat')]"
16242,2,min,runs,"[('int *', 'U'), ('int *', 'd'), ('int *', 'outDel'), ('int *', 'minOutEdges'), ('size_t', 'gSize'), ('int', 'useD')]"
16242,3,update,runs,"[('int *', 'U'), ('int *', 'F'), ('int *', 'd'), ('int *', 'del'), ('size_t', 'gSize')]"
16242,4,init,runs,"[('int *', 'U'), ('int *', 'F'), ('int *', 'd'), ('int', 'startNode'), ('size_t', 'gSize')]"
16244,3,channels_first,runs,"[('float *', 'input'), ('float *', 'rinput'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'pad_size')]"
16244,4,Correlation_forward,runs,"[('float *', 'output'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16244,5,Correlation_backward_input1,runs,"[('int', 'item'), ('float *', 'gradInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16244,6,Correlation_backward_input2,runs,"[('int', 'item'), ('float *', 'gradInput2'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16244,9,channels_first,runs,"[('float *', 'input'), ('float *', 'rinput'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'pad_size')]"
16244,10,Correlation_forward,runs,"[('float *', 'output'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16244,11,Correlation_backward_input1,runs,"[('int', 'item'), ('float *', 'gradInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16244,12,Correlation_backward_input2,runs,"[('int', 'item'), ('float *', 'gradInput2'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16252,3,MatrixMultiplication__CudaKernel,runs,"[('int *', 'in_tabA'), ('int *', 'in_tabB'), ('int *', 'out_tabC'), ('int', 'outTabWidth')]"
16256,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
16259,7,refine_dilateFPPlaneDepthMapXpYp_kernel,runs,"[('float *', 'fpPlaneDepthMap'), ('int', 'fpPlaneDepthMap_p'), ('float *', 'maskMap'), ('int', 'maskMap_p'), ('int', 'width'), ('int', 'height'), ('int', 'xp'), ('int', 'yp'), ('float', 'fpPlaneDepth')]"
16259,16,refine_computeBestDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float3 *', 'isims'), ('int', 'isims_p'), ('float3 *', 'idpts'), ('int', 'idpts_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
16259,17,refine_fuseThreeDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float *', 'isimLst'), ('int', 'isimLst_p'), ('float *', 'idptLst'), ('int', 'idptLst_p'), ('float *', 'isimAct'), ('int', 'isimAct_p'), ('float *', 'idptAct'), ('int', 'idptAct_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
16259,79,generateGaussian_kernel,runs,"[('float *', 'og'), ('float', 'delta'), ('int', 'radius')]"
16270,91,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
16270,104,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
16270,105,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
16270,106,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
16270,107,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
16270,185,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
16271,7,kernel_s,runs,"[('unsigned int *', 'ind'), ('const size_t', 'nbn'), ('const unsigned int', 'ne')]"
16271,8,kernel_m,runs,"[('unsigned int *', 'ind'), ('unsigned int *', 'scand'), ('unsigned int', 'shift'), ('const unsigned int', 'ne')]"
16275,16,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
16275,19,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
16275,21,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
16275,23,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
16275,25,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
16275,27,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
16275,28,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
16275,30,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
16275,33,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
16275,36,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
16279,43,sync_conv_groups,runs,[]
16297,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
16309,2,end_coloring_mark,runs,[]
16309,50,permute_colors_kernel,runs,"[('int', 'num_rows'), ('int *', 'row_colors'), ('int *', 'color_permutation')]"
16309,51,reverse_colors_kernel,runs,"[('int', 'num_rows'), ('int', 'max_color'), ('int *', 'row_colors')]"
16309,81,profileLevelUp_kernel,runs,[]
16309,82,profileLevelDown_kernel,runs,[]
16309,83,profileLevelZero_kernel,runs,[]
16309,84,profilePhaseSetup_kernel,runs,[]
16309,85,profilePhaseSolve_kernel,runs,[]
16309,86,profilePhaseNone_kernel,runs,[]
16309,87,profileSubphaseMatrixColoring_kernel,runs,[]
16309,88,profileSubphaseSmootherSetup_kernel,runs,[]
16309,89,profileSubphaseFindAggregates_kernel,runs,[]
16309,90,profileSubphaseComputeRestriction_kernel,runs,[]
16309,91,profileSubphaseComputeCoarseA_kernel,runs,[]
16309,92,profileSubphaseNone_kernel,runs,[]
16309,93,profileSubphaseTruncateP_kernel,runs,[]
1631,16,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
1631,19,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
1631,21,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
1631,23,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
1631,25,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
1631,27,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
1631,28,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
1631,30,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
1631,33,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
1631,36,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
16312,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16312,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16318,0,vectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
16319,0,normalize_energy_gpu,runs,"[('float *', 'ksn2e'), ('float *', 'ksn2f'), ('double', 'omega_re'), ('double', 'omega_im'), ('float *', 'nm2v_re'), ('float *', 'nm2v_im'), ('int', 'nfermi'), ('int', 'norbs'), ('int', 'nvirt'), ('int', 'vstart')]"
16319,1,padding_nm2v,runs,"[('float *', 'nm2v_re'), ('float *', 'nm2v_im'), ('int', 'nfermi'), ('int', 'norbs'), ('int', 'nvirt'), ('int', 'vstart')]"
16320,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16320,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16321,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16321,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
16321,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16321,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16321,25,PadMatrixInLeadingDimensionKernel,runs,"[('const int8_t *', 'src'), ('int8_t *', 'dst'), ('int', 'col_src'), ('int', 'col_dst')]"
16321,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
16322,0,test,runs,[]
16322,3,ReferenceGemm_kernel,runs,"[('int', 'M'), ('int', 'N'), ('int', 'K'), ('float', 'alpha'), ('float const *', 'A'), ('int', 'lda'), ('float const *', 'B'), ('int', 'ldb'), ('float', 'beta'), ('float *', 'C'), ('int', 'ldc')]"
16323,0,kernel_update_velocities,runs,"[('float4 *', 'd_uv'), ('float4 *', 'd_velocities_buffer'), ('int', 'numel')]"
16323,1,kernel_update_models,runs,"[('float4 *', 'd_positions'), ('float4 *', 'd_modelBuffer'), ('int', 'numel')]"
16323,2,kernel_grey,runs,"[('float4 *', 'd_Iin'), ('float *', 'd_Iout'), ('int', 'numel')]"
16323,3,kernel_partials,runs,"[('float *', 'd_f1ptr'), ('float *', 'd_f1dx'), ('float *', 'd_f1dy'), ('int', 'H'), ('int', 'W')]"
16323,4,kernel_sub,runs,"[('float *', 'd_f1ptr'), ('float *', 'd_f2ptr'), ('float *', 'd_dt'), ('int', 'H'), ('int', 'W')]"
16323,5,kernel_optflow,runs,"[('float *', 'd_dx1'), ('float *', 'd_dy1'), ('float *', 'd_dx2'), ('float *', 'd_dy2'), ('float *', 'd_dt'), ('float4 *', 'uv'), ('float4 *', 'uv1'), ('int', 'H'), ('int', 'W')]"
16323,6,kernel_fill,runs,"[('float4 *', 'd_dx1'), ('float', 'val'), ('int', 'numel')]"
16323,7,kernel_blur,runs,"[('float *', 'd_I'), ('float *', 'd_Ib'), ('int', 'H'), ('int', 'W')]"
16323,9,kernel_convert,runs,"[('uchar3 *', 'd_Iin'), ('float4 *', 'd_Iout'), ('int', 'numel')]"
16323,10,kernel_update,runs,"[('float4 *', 'd_positions'), ('float4 *', 'd_og_positions'), ('float4 *', 'd_velocities'), ('float *', 'd_masses'), ('size_t', 'numel')]"
1633,4,absoluteDifferenceCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1633,5,bitwiseAndCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1633,6,bitwiseOrCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1633,7,bitwiseXorCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1633,10,copyCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1633,13,flipCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('bool', 'horizontal'), ('bool', 'vertical')]"
1633,14,histogramCuda,runs,"[('const uint8_t *', 'data'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'histogram')]"
1633,15,invertCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1633,16,isEqualCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'isEqual')]"
1633,17,lookupTableCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint8_t *', 'table')]"
1633,18,maximumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1633,19,minimumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1633,20,projectionProfileHorizontalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
1633,21,projectionProfileVerticalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
1633,22,rotateCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('float', 'inXStart'), ('float', 'inYStart'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('float', 'cosAngle'), ('float', 'sinAngle')]"
1633,24,setPixelCuda,runs,"[('uint8_t *', 'in'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'pointX'), ('uint32_t *', 'pointY'), ('uint32_t', 'pointSize'), ('uint32_t', 'value')]"
1633,25,subtractCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1633,29,isAnyEqualCuda,runs,"[('const uint8_t *', 'image'), ('uint8_t *', 'value'), ('size_t', 'valueCount'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'differenceCount')]"
16331,3,channels_first,runs,"[('float *', 'input'), ('float *', 'rinput'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'pad_size')]"
16331,4,Correlation_forward,runs,"[('float *', 'output'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16331,5,Correlation_backward_input1,runs,"[('int', 'item'), ('float *', 'gradInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16331,6,Correlation_backward_input2,runs,"[('int', 'item'), ('float *', 'gradInput2'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16331,9,channels_first,runs,"[('float *', 'input'), ('float *', 'rinput'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'pad_size')]"
16331,10,Correlation_forward,runs,"[('float *', 'output'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16331,11,Correlation_backward_input1,runs,"[('int', 'item'), ('float *', 'gradInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16331,12,Correlation_backward_input2,runs,"[('int', 'item'), ('float *', 'gradInput2'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
16339,0,sum,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c')]"
16340,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
16342,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
16347,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
16358,90,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
16358,103,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
16358,104,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
16358,105,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
16358,106,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
16358,184,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
16362,1,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
16363,2,reduction,runs,"[('bool *', 'B'), ('int *', 'number'), ('int', 'order')]"
16363,3,logicalkernel,runs,"[('bool *', 'A'), ('bool *', 'B'), ('int *', 'neighbours'), ('int', 'order'), ('int', 'degree')]"
16375,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16375,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16377,0,vectorAdd,runs,"[('const int *', 'a'), ('const int *', 'b'), ('int *', 'c'), ('int', 'N')]"
16377,1,staticReverse,runs,"[('int *', 'd'), ('int', 'n')]"
16377,2,dynamicReverse,runs,"[('int *', 'd'), ('int', 'n')]"
16381,0,stencil_1d,runs,"[('int *', 'in'), ('int *', 'out')]"
16381,1,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16381,2,kernel,runs,"[('int *', 'd_vec'), ('int', 'n')]"
16388,1,saxpy,runs,"[('int', 'n'), ('float', 'a'), ('float *', 'x'), ('float *', 'y'), ('char *', 'ad'), ('char *', 'bd')]"
16389,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'size')]"
16389,2,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'size')]"
16389,4,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16389,5,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'size')]"
16389,7,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'size')]"
16394,34,sync_conv_groups,runs,[]
16397,0,vectorTransformKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'Result')]"
16397,3,convolution_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'filter')]"
16397,4,vectorAddKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'Result')]"
16397,5,vectorAddKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'Result')]"
16397,6,vectorAddKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'Result')]"
16397,7,vec_add_kernel,runs,"[('float *', 'c'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
16397,8,vectorAddKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'Result')]"
16397,9,encryptKernel,runs,"[('char *', 'deviceDataIn'), ('char *', 'deviceDataOut'), ('int', 'n'), ('char *', 'key'), ('int', 'keySize')]"
16397,10,decryptKernel,runs,"[('char *', 'deviceDataIn'), ('char *', 'deviceDataOut'), ('int', 'n'), ('char *', 'key'), ('int', 'keySize')]"
16397,11,encryptKernel,runs,"[('char *', 'deviceDataIn'), ('char *', 'deviceDataOut'), ('int', 'n')]"
16397,12,decryptKernel,runs,"[('char *', 'deviceDataIn'), ('char *', 'deviceDataOut'), ('int', 'n')]"
16408,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16408,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
16408,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16408,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16408,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
16413,1,KNearestNeighborsGPU,runs,"[('float3 *', 'dataArray'), ('int *', 'result'), ('int', 'cnt')]"
16416,92,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16416,93,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16420,179,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16420,320,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16427,1,horspool_match,runs,"[('char *', 'text'), ('char *', 'pattern'), ('int *', 'shift_table'), ('unsigned int *', 'num_matches'), ('int', 'chunk_size'), ('int', 'num_chunks'), ('int', 'text_size'), ('int', 'pat_len')]"
16427,3,horspool_match,runs,"[('char *', 'text'), ('char *', 'pattern'), ('int *', 'shift_table'), ('unsigned int *', 'num_matches'), ('int', 'chunk_size'), ('int', 'num_chunks'), ('int', 'text_size'), ('int', 'pat_len'), ('unsigned int *', 'd_output')]"
1643,11,FluffyTail,runs,"[('const uint2 *', 'source'), ('uint2 *', 'destination'), ('const int *', 'sourceIndexes'), ('int *', 'destinationIndexes')]"
16443,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16443,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16444,1,convolution_rgb,runs,"[('unsigned char *', 'N'), ('float *', 'M'), ('unsigned char *', 'g'), ('std::size_t', 'cols'), ('std::size_t', 'rows'), ('std::size_t', 'mask_size')]"
16444,2,grayscale,runs,"[('unsigned char *', 'rgb'), ('unsigned char *', 'g'), ('std::size_t', 'cols'), ('std::size_t', 'rows')]"
16444,3,convolution_global_memory_gray,runs,"[('unsigned char *', 'N'), ('float *', 'M'), ('unsigned char *', 'g'), ('std::size_t', 'cols'), ('std::size_t', 'rows'), ('std::size_t', 'mask_size')]"
16448,185,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16448,326,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16449,4,generate_sources,runs,"[('curandState *', 'state'), ('int', 'n'), ('uint32_t *', 'verts')]"
16449,5,generate_destinations,runs,"[('curandState *', 'state'), ('int', 'n'), ('const uint32_t *', 'sources'), ('uint32_t *', 'destinations')]"
16449,13,myset,runs,"[('unsigned long long *', 'p'), ('unsigned long long', 'v'), ('long long', 'n')]"
16453,0,vector_add,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
16453,1,cuda_hello,runs,[]
16453,2,cuda_hello,runs,[]
16453,3,cuda_hello,runs,[]
16457,4,kernelF,runs,"[('const float *', 'd_xAx'), ('const float *', 'd_bx'), ('const float *', 'd_c'), ('float *', 'd_y')]"
16457,5,kernelGradf,runs,"[('const float *', 'd_x'), ('float *', 'd_grad'), ('float *', 'A'), ('float *', 'b'), ('const size_t', 'len')]"
16457,10,update2,runs,"[('float *', 'alphaMinusBeta_out'), ('const float *', 'rho'), ('const float *', 'yDotZ'), ('const float *', 'alpha')]"
16457,11,update3,runs,"[('float *', 'rho_out'), ('float *', 'H0_out'), ('const float *', 'yDotS'), ('const float *', 'yDotY')]"
16457,12,kernelF,runs,"[('const float *', 'd_xAx'), ('const float *', 'd_bx'), ('const float *', 'd_c'), ('float *', 'd_y')]"
16457,13,kernelGradf,runs,"[('const float *', 'd_x'), ('float *', 'd_grad'), ('float *', 'A'), ('float *', 'b'), ('const size_t', 'len')]"
16457,16,kernelF,runs,"[('const float *', 'd_x'), ('float *', 'd_y')]"
16457,17,kernelGradf,runs,"[('const float *', 'd_x'), ('float *', 'd_grad')]"
16461,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16461,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16468,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16468,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
1647,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1647,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16470,1,set_all_zero_kernel,runs,"[('double *', 'ua_gpu'), ('double *', 'ub_gpu'), ('double *', 'uc_gpu')]"
16470,2,wireless_src_pulse_kernel,runs,"[('int', 'step'), ('double', 'amp'), ('double', 'MAX_TIME'), ('double', 'TIME_STEP'), ('int', 'radius'), ('int', 'source_active'), ('int', 'src_x'), ('int', 'src_y'), ('double *', 'ua_gpu'), ('double *', 'ub_gpu'), ('double *', 'uc_gpu')]"
16493,2,brickSort,runs,"[('int *', 'array'), ('int', 'arrayLen'), ('int', 'p')]"
16493,4,bitonic_sort,runs,"[('int *', 'arrayIn'), ('int *', 'arrayOut'), ('int', 'arrayLen'), ('int', 'chunkSize')]"
16494,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16494,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
16494,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16494,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16494,25,PadMatrixInLeadingDimensionKernel,runs,"[('const int8_t *', 'src'), ('int8_t *', 'dst'), ('int', 'col_src'), ('int', 'col_dst')]"
16494,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
165,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
165,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
165,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
165,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
165,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
165,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
165,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
165,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
165,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
165,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
165,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
165,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
165,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
165,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
165,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
165,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
165,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
16521,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
1653,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1653,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16533,0,apply_activation_function,runs,"[('float *', 'input'), ('float *', 'output'), ('const int', 'N')]"
16533,1,makeError,runs,"[('float *', 'err'), ('float *', 'output'), ('unsigned int', 'Y'), ('const int', 'N')]"
16533,2,apply_grad,runs,"[('float *', 'output'), ('float *', 'grad'), ('const int', 'N')]"
16542,6,cuSearchDoublet,runs,"[('const int *', 'nSpM'), ('const float *', 'spMmat'), ('const int *', 'nSpB'), ('const float *', 'spBmat'), ('const int *', 'nSpT'), ('const float *', 'spTmat'), ('const float *', 'deltaRMin'), ('const float *', 'deltaRMax'), ('const float *', 'cotThetaMax'), ('const float *', 'collisionRegionMin'), ('const float *', 'collisionRegionMax'), ('int *', 'nSpMcomp'), ('int *', 'nSpBcompPerSpM_Max'), ('int *', 'nSpTcompPerSpM_Max'), ('int *', 'nSpBcompPerSpM'), ('int *', 'nSpTcompPerSpM'), ('int *', 'McompIndex'), ('int *', 'BcompIndex'), ('int *', 'tmpBcompIndex'), ('int *', 'TcompIndex'), ('int *', 'tmpTcompIndex')]"
16553,0,kernelSum_Column_Matrix,runs,"[('float *', 'matrix'), ('float *', 'array'), ('int', 'tam')]"
16553,1,kernelVector_x_constant,runs,"[('float *', 'arr'), ('int', 'n'), ('int', 'k')]"
16553,2,kernelSuma_Vectores,runs,"[('float *', 'array_A'), ('float *', 'array_B'), ('int', '_size')]"
16553,3,myFirstKernel,runs,[]
16553,4,kernelVector_suma_constante,runs,"[('float *', 'array'), ('int', '_size'), ('int', '_constant')]"
16557,1,calcCDFnormalized,runs,"[('const unsigned int *', 'histo'), ('float *', 'cdf'), ('size_t', 'width'), ('size_t', 'height')]"
16557,2,calcCDF,runs,"[('float *', 'cdf'), ('unsigned int *', 'histo'), ('int', 'imageWidth'), ('int', 'imageHeight'), ('int', 'length')]"
16570,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16570,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
16570,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16570,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16570,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
16575,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16575,319,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16577,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
16586,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
16589,0,MSELossBackprop,runs,"[('float *', 'grad_data'), ('float *', 'output'), ('float *', 'target'), ('float *', 'mask'), ('int', 'batch_size')]"
16595,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16595,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16598,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16598,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16602,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16602,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16612,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
16612,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
16612,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
16612,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
16612,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
16612,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
16612,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
16612,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
16612,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
16612,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
16612,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
16612,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
16612,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
16612,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
16612,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
16612,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
16612,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
16612,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
16612,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
16612,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
16612,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
16612,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
16612,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
16612,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
16612,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
16612,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
16612,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
16612,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
16612,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
16612,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
16612,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
16612,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
16612,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
16612,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
16612,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
16612,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
16612,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
16612,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
16612,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
16612,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
16612,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
16612,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
16612,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
16612,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
16612,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
16612,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
16612,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
16612,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
16612,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
16612,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
16612,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
16612,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
16612,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
16612,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
16612,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
16612,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
16612,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
16612,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
16612,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
16612,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
16615,0,grayscale,runs,"[('unsigned char *', 'data_rgb'), ('unsigned char *', 'data_gray'), ('std::size_t', 'rows'), ('std::size_t', 'cols')]"
16615,5,grayscale,runs,"[('unsigned char *', 'data_rgb'), ('unsigned char *', 'data_gray'), ('std::size_t', 'rows'), ('std::size_t', 'cols')]"
16625,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16625,340,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16626,90,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16626,91,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16640,0,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
16640,1,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
16647,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16647,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16653,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16653,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
16653,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16653,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16653,25,PadMatrixInLeadingDimensionKernel,runs,"[('const int8_t *', 'src'), ('int8_t *', 'dst'), ('int', 'col_src'), ('int', 'col_dst')]"
16653,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
16673,0,init,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
16673,1,init,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
16673,2,sgemm_gpu_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,3,device_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16673,4,createResizedImage,runs,"[('unsigned char *', 'imageScaledData'), ('int', 'scaled_width'), ('float', 'scale_factor'), ('cudaTextureObject_t', 'texObj')]"
16673,14,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
16673,15,simple_saxpy_kernel,runs,"[('float *', 'y'), ('const float *', 'x'), ('const float', 'alpha'), ('const float', 'beta')]"
16673,16,iterative_saxpy_kernel,runs,"[('float *', 'y'), ('const float *', 'x'), ('const float', 'alpha'), ('const float', 'beta'), ('int', 'n_loop')]"
16673,19,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
16673,21,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
16673,23,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
16673,25,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
16673,26,child_kernel,runs,"[('int *', 'data'), ('int', 'seed')]"
16673,31,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
16673,33,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
16673,35,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
16673,37,vecAdd_kernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
16673,38,sgemm_gpu_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,39,reduction_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in'), ('unsigned int', 'size')]"
16673,43,atomic_reduction_kernel,runs,"[('float *', 'data_out'), ('float *', 'data_in'), ('int', 'size')]"
16673,44,reduction_kernel_1,runs,"[('float *', 'g_out'), ('float *', 'g_in'), ('unsigned int', 'size')]"
16673,45,reduction_kernel_2,runs,"[('float *', 'g_out'), ('float *', 'g_in'), ('unsigned int', 'size')]"
16673,46,idx_print,runs,[]
16673,51,global_reduction_kernel,runs,"[('float *', 'data_out'), ('float *', 'data_in'), ('int', 'stride'), ('int', 'size')]"
16673,52,reduction_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in'), ('unsigned int', 'size')]"
16673,53,reduction_kernel,runs,"[('float *', 'g_out'), ('float *', 'g_in'), ('unsigned int', 'size')]"
16673,54,reduction_kernel,runs,"[('float *', 'g_out'), ('float *', 'g_in'), ('unsigned int', 'size')]"
16673,55,sgemm_gpu_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,57,fmaf_kernel,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_z'), ('int', 'size')]"
16673,59,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,60,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,61,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,62,sgemm_kernel_A,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,63,sgemm_kernel_B,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,64,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,65,sgemm_kernel_A,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,66,sgemm_kernel_B,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,67,sgemm_kernel_A,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,68,sgemm_kernel_B,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,69,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,71,sgemm_kernel_B,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,72,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,74,predicate_kernel,runs,"[('float *', 'd_predicates'), ('float *', 'd_input'), ('int', 'length')]"
16673,75,pack_kernel,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('float *', 'd_predicates'), ('float *', 'd_scanned'), ('int', 'length')]"
16673,76,split_kernel,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('float *', 'd_predicates'), ('float *', 'd_scanned'), ('int', 'length')]"
16673,77,convolution_kernel_v1,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('float *', 'd_filter'), ('int', 'num_row'), ('int', 'num_col'), ('int', 'filter_size')]"
16673,81,scan_v2_kernel,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('int', 'length')]"
16673,82,scan_v1_kernel,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('int', 'length')]"
16673,83,sgemm_kernel,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'M'), ('int', 'N'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,84,sgemm_kernel_v2,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'M'), ('int', 'N'), ('int', 'K'), ('float', 'alpha'), ('float', 'beta')]"
16673,85,calculateHistogram,runs,"[('unsigned int *', 'imageHistogram'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('cudaTextureObject_t', 'texObj')]"
16673,86,calculateBodyForce,runs,"[('float4 *', 'p'), ('float4 *', 'v'), ('float', 'dt'), ('int', 'n')]"
16673,87,device_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16673,88,device_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16673,89,device_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
16673,90,print_from_gpu,runs,[]
16673,94,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
16673,102,generate_kernel,runs,"[('unsigned int *', 'generated_out'), ('curandState_t *', 'state')]"
16673,103,generate_uniform_kernel,runs,"[('float *', 'generated_out'), ('curandState_t *', 'state')]"
16673,104,float2half_kernel,runs,"[('half *', 'out'), ('float *', 'in')]"
16677,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16677,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16678,6,set_volume_to_constant,runs,"[('float *', 'out'), ('float', 'value')]"
16678,19,kernel_normalize_and_add_to_output,runs,"[('float *', 'dev_vol_in'), ('float *', 'dev_vol_out'), ('float *', 'dev_accumulate_weights'), ('float *', 'dev_accumulate_values')]"
16678,30,magnitude_threshold_kernel,runs,"[('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z'), ('float', 'gamma')]"
16678,31,gradient_and_subtract_kernel,runs,"[('float *', 'in'), ('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z')]"
16678,32,multiply_by_beta_kernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'beta')]"
16678,33,subtract_kernel,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out')]"
16690,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
16690,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
16690,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
16690,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
16690,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
16697,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16697,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16700,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16700,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16702,0,gpu_add,runs,"[('int *', 'gpu_numbers'), ('const int', 'numberCount')]"
16702,1,gpu_add,runs,"[('int *', 'big_set_numbers'), ('const int', 'big_set_count'), ('int *', 'tiny_set_numbers'), ('const int', 'tiny_set_count')]"
16702,2,gpu_add,runs,"[('int *', 'gpu_numbers'), ('const int', 'numberCount')]"
16702,4,gpu_add,runs,"[('int *', 'gpu_numbers'), ('const int', 'numberCount')]"
16702,5,gpu_add,runs,"[('int *', 'gpu_numbers'), ('const int', 'numberCount')]"
16702,6,gpu_add,runs,"[('int *', 'gpu_numbers'), ('const int', 'numberCount')]"
16702,7,gpu_add,runs,"[('int *', 'big_set_numbers'), ('const int', 'big_set_count'), ('int *', 'tiny_set_numbers'), ('const int', 'tiny_set_count')]"
16703,177,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16703,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16708,182,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16708,323,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16709,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
16709,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
16712,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
16712,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
16712,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
16712,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
16712,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
16712,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
16713,1,mandelbrot,runs,"[('int', 'nb_ligne'), ('int', 'nb_col'), ('float', 'seuil'), ('float', 'x_min'), ('float', 'x_max'), ('float', 'y_min'), ('float', 'y_max'), ('float *', 'res')]"
16713,2,somme,runs,"[('int', 'taille'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
16713,3,prod,runs,"[('int', 'taille'), ('float *', 'a'), ('float', 'b'), ('float *', 'c')]"
16713,4,counthits,runs,"[('int', 'n'), ('uint *', 'hitsp'), ('unsigned', 'decalage_index')]"
16734,39,VecAdd,runs,"[('const int *', 'A'), ('const int *', 'B'), ('int *', 'C'), ('int', 'size')]"
16742,177,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16742,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16748,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16748,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16755,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
16755,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
16755,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
16755,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
16755,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
16755,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
16755,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
16758,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16758,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
16766,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
16767,0,logistic_func,runs,"[('float *', 'log_func_v'), ('float *', 'betas'), ('float *', 'data')]"
16767,1,log_gradient,runs,"[('float *', 'log_func_v'), ('float *', 'gradient'), ('float *', 'betas'), ('float *', 'data'), ('int *', 'yvec')]"
16767,2,mult,runs,"[('int *', 'results'), ('int *', 'data'), ('int *', 'vec')]"
16769,0,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
16769,1,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
16772,177,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16772,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16779,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
16783,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16783,23,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
16794,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16794,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16796,21,sync_deconv_groups,runs,[]
16799,0,drawGray,runs,"[('unsigned char *', 'optr'), ('const float *', 'outSrc')]"
16799,1,drawColor,runs,"[('unsigned char *', 'optr'), ('const float *', 'red'), ('const float *', 'green'), ('const float *', 'blue')]"
16799,2,kernel,runs,"[('float *', 'red'), ('float *', 'green'), ('float *', 'blue'), ('unsigned long', 'N')]"
16799,3,setup_rands,runs,"[('curandState *', 'rand'), ('unsigned long', 'seed'), ('unsigned long', 'N')]"
16799,4,randomize,runs,"[('float *', 'array'), ('curandState *', 'rand'), ('unsigned long', 'N')]"
16802,1,gpu_efield,runs,"[('double *', 'fi'), ('double *', 'ex'), ('double *', 'ey'), ('double *', 'ez')]"
16802,8,gpu_init_equilibrium,runs,"[('double *', 'f0'), ('double *', 'f1'), ('double *', 'h0'), ('double *', 'h1'), ('double *', 'temp0'), ('double *', 'temp1'), ('double *', 'r'), ('double *', 'c'), ('double *', 'u'), ('double *', 'v'), ('double *', 'w'), ('double *', 'ex'), ('double *', 'ey'), ('double *', 'ez'), ('double *', 'temp')]"
16802,11,gpu_stream,runs,"[('double *', 'f0'), ('double *', 'f1'), ('double *', 'f2'), ('double *', 'h0'), ('double *', 'h1'), ('double *', 'h2'), ('double *', 'temp0'), ('double *', 'temp1'), ('double *', 'temp2')]"
16804,0,vector_add,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
16805,1,simpleMPIKernel,runs,"[('float *', 'input'), ('float *', 'output')]"
16805,2,increment_kernel,runs,"[('int *', 'g_data'), ('int', 'inc_value')]"
16805,3,simple_vbo_kernel,runs,"[('float4 *', 'pos'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'time')]"
1682,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1682,340,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16823,0,Add,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_c'), ('int', 'N')]"
16823,1,Add,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_c'), ('int', 'N')]"
16828,0,MatAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'ROW'), ('int', 'COLUMNS')]"
16828,1,matrixMul,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'ROW'), ('int', 'COLUMNS'), ('int', 'temp')]"
16828,2,MatMulInt,runs,"[('int *', 'a'), ('int', 'b'), ('int *', 'c'), ('int', 'ROW'), ('int', 'COLUMNS')]"
16850,0,foo,runs,[]
16850,1,mult,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
16850,2,blur,runs,"[('int *', 'B'), ('int *', 'G'), ('int *', 'R'), ('int *', 'RB'), ('int *', 'RG'), ('int *', 'RR'), ('int *', 'K'), ('int', 'rows'), ('int', 'cols'), ('int', 'krows'), ('int', 'kcols')]"
16850,3,Kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
16850,5,alligned_access,runs,"[('float *', 'a'), ('int', 'max')]"
16850,6,offset_access,runs,"[('float *', 'a'), ('int', 's'), ('int', 'max')]"
16850,7,strided_access,runs,"[('float *', 'a'), ('int', 's'), ('int', 'max')]"
16850,8,transpose_v0,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
16850,9,transpose_v1,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
16850,10,transpose_v2,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
16850,11,transpose_v3,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
16850,12,transpose_v4,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
16850,13,matmul_v0,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
16850,14,matmul_v1,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
16850,15,reduce_v0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
16850,16,reduce_v1,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
16850,17,reduce_v2,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
16850,18,reduce_v3,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
16850,19,reduce_v4,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
16850,20,reduce_v5,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
16850,21,prefixSumForward,runs,"[('float *', 'arr'), ('int', 'step')]"
16850,22,prefixSumBackward,runs,"[('float *', 'arr'), ('int', 'step')]"
16850,23,prefixSum,runs,"[('float *', 'arr'), ('int', 'step')]"
16850,25,kernel,runs,"[('int *', 'arr'), ('int', 'offset_min'), ('int', 'n')]"
16851,0,cube,runs,"[('long *', 'deviceOutput'), ('long *', 'deviceInput')]"
16854,0,square,runs,"[('int *', 'array'), ('int', 'n')]"
16857,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16857,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16858,0,print_mat,runs,"[('float *', 'mat'), ('int', 'row'), ('int', 'col')]"
16858,1,value_mul_matrix,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('int', 'row'), ('int', 'col'), ('float', 'v')]"
16858,2,value_add_matrix,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('int', 'row'), ('int', 'col'), ('float', 'v')]"
16858,3,matrix_mul_matrix,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'col_A'), ('int', 'col_B'), ('int', 'row_C'), ('int', 'col_C')]"
16858,4,matrix_add_matrix,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'mat3'), ('int', 'row'), ('int', 'col'), ('int', 'sign')]"
16858,5,max_norm_matrix,runs,"[('float *', 'mat1'), ('int', 'row'), ('int', 'col'), ('int *', 'norm'), ('float *', 'final_norm')]"
16858,6,seq_max_norm,runs,"[('float *', 'mat1'), ('int', 'row'), ('int', 'col'), ('float *', 'norm')]"
16867,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16867,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1687,0,recipSummation,runs,"[('double *', 'data'), ('double *', 'recip'), ('int', 'len')]"
16870,2,relu_ker,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'N')]"
16870,3,debug_ker,runs,"[('float *', 'ptr'), ('int', 'addr')]"
16872,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16872,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16873,0,calc,runs,"[('float *', 'points'), ('float *', 'resPoints'), ('int', 'dt'), ('int', 'size')]"
16882,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16882,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16884,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16884,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
16884,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16884,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16884,31,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
1689,0,add_diff,runs,"[('float *', 'a'), ('const float *', 'x'), ('const float *', 'y'), ('const float', 'c'), ('int', 'size')]"
16890,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
16893,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16893,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16894,8,init,runs,"[('uint32_t *', 'v'), ('uint32_t', 'val'), ('uint32_t', 'n')]"
16894,30,print,runs,[]
16894,43,init,runs,"[('uint32_t *', 'v'), ('uint32_t', 'val'), ('uint32_t', 'n')]"
16894,71,init,runs,"[('uint32_t *', 'v'), ('uint32_t', 'val'), ('uint32_t', 'n')]"
16897,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
16902,0,Add,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_c'), ('int', 'N')]"
16902,1,Add,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_c'), ('int', 'N')]"
16910,0,sumChannels,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('float *', 'datasum'), ('int *', 'kkmax'), ('const int *', 'iC')]"
16910,1,Conv1D,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('const float *', 'W'), ('float *', 'conv_sig')]"
16910,2,bestFilter,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('float *', 'err'), ('int *', 'ftype'), ('int *', 'kkmax'), ('int *', 'kall')]"
16910,3,cleanup_spikes,runs,"[('const double *', 'Params'), ('const float *', 'err'), ('const int *', 'ftype'), ('float *', 'x'), ('int *', 'st'), ('int *', 'id'), ('int *', 'counter')]"
16910,4,cleanup_heights,runs,"[('const double *', 'Params'), ('const float *', 'x'), ('const int *', 'st'), ('const int *', 'id'), ('int *', 'st1'), ('int *', 'id1'), ('int *', 'counter')]"
16910,5,extract_snips,runs,"[('const double *', 'Params'), ('const int *', 'st'), ('const int *', 'id'), ('const int *', 'counter'), ('const float *', 'dataraw'), ('float *', 'WU')]"
16910,6,extract_snips2,runs,"[('const double *', 'Params'), ('const float *', 'err'), ('const int *', 'st'), ('const int *', 'id'), ('const int *', 'counter'), ('const int *', 'kk'), ('const int *', 'iC'), ('const float *', 'W'), ('float *', 'WU')]"
16910,7,blankdWU,runs,"[('const double *', 'Params'), ('const double *', 'dWU'), ('const int *', 'iC'), ('const int *', 'iW'), ('double *', 'dWUblank')]"
16910,8,getwtw,runs,"[('const double *', 'Params'), ('const double *', 'dWU'), ('double *', 'wtw')]"
16910,9,getU,runs,"[('const double *', 'Params'), ('const double *', 'dWU'), ('double *', 'W'), ('double *', 'U')]"
16910,10,getW,runs,"[('const double *', 'Params'), ('double *', 'wtw'), ('double *', 'W')]"
16910,11,reNormalize,runs,"[('const double *', 'Params'), ('const double *', 'A'), ('const double *', 'B'), ('double *', 'W'), ('double *', 'U'), ('double *', 'mu')]"
16910,12,spaceFilter,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('const float *', 'U'), ('const int *', 'iC'), ('const int *', 'iW'), ('float *', 'dprod')]"
16910,13,spaceFilterUpdate,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('const float *', 'U'), ('const bool *', 'UtU'), ('const int *', 'iC'), ('const int *', 'iW'), ('float *', 'dprod'), ('const int *', 'st'), ('const int *', 'id'), ('const int *', 'counter')]"
16910,14,timeFilter,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('const float *', 'W'), ('float *', 'conv_sig')]"
16910,15,timeFilterUpdate,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('const float *', 'W'), ('const bool *', 'UtU'), ('float *', 'conv_sig'), ('const int *', 'st'), ('const int *', 'id'), ('const int *', 'counter')]"
16910,16,bestFilter,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('const float *', 'mu'), ('float *', 'err'), ('float *', 'eloss'), ('int *', 'ftype')]"
16910,17,bestFilterUpdate,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('const float *', 'mu'), ('float *', 'err'), ('float *', 'eloss'), ('int *', 'ftype'), ('const int *', 'st'), ('const int *', 'id'), ('const int *', 'counter')]"
16910,18,cleanup_spikes,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('const float *', 'mu'), ('const float *', 'err'), ('const float *', 'eloss'), ('const int *', 'ftype'), ('int *', 'st'), ('int *', 'id'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int *', 'counter')]"
16910,19,extractFEAT,runs,"[('const double *', 'Params'), ('const int *', 'st'), ('const int *', 'id'), ('const int *', 'counter'), ('const float *', 'dout'), ('const int *', 'iList'), ('const float *', 'mu'), ('float *', 'd_feat')]"
16910,20,subtract_spikes,runs,"[('const double *', 'Params'), ('const int *', 'st'), ('const int *', 'id'), ('const float *', 'x'), ('const int *', 'counter'), ('float *', 'dataraw'), ('const float *', 'W'), ('const float *', 'U')]"
16910,21,average_snips,runs,"[('const double *', 'Params'), ('const int *', 'st'), ('const int *', 'id'), ('const float *', 'x'), ('const float *', 'y'), ('const int *', 'counter'), ('const float *', 'dataraw'), ('const float *', 'W'), ('const float *', 'U'), ('double *', 'WU'), ('int *', 'nsp'), ('const float *', 'mu'), ('const float *', 'z')]"
16910,22,computePCfeatures,runs,"[('const double *', 'Params'), ('const int *', 'counter'), ('const float *', 'dataraw'), ('const int *', 'st'), ('const int *', 'id'), ('const float *', 'x'), ('const float *', 'W'), ('const float *', 'U'), ('const float *', 'mu'), ('const int *', 'iW'), ('const int *', 'iC'), ('const float *', 'wPCA'), ('float *', 'featPC')]"
16910,23,addback_spikes,runs,"[('const double *', 'Params'), ('const int *', 'st'), ('const int *', 'id'), ('const float *', 'x'), ('const int *', 'count'), ('float *', 'dataraw'), ('const float *', 'W'), ('const float *', 'U'), ('const int', 'iter'), ('const float *', 'spkscore')]"
16910,24,Conv1D,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('const float *', 'W'), ('float *', 'conv_sig')]"
16910,25,computeProjections,runs,"[('const double *', 'Params'), ('const float *', 'dataraw'), ('const int *', 'iC'), ('const int *', 'st'), ('const int *', 'id'), ('const float *', 'W'), ('float *', 'feat')]"
16910,26,maxChannels,runs,"[('const double *', 'Params'), ('const float *', 'dataraw'), ('const float *', 'data'), ('const int *', 'iC'), ('int *', 'st'), ('int *', 'id'), ('int *', 'counter')]"
16910,27,max1D,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('float *', 'conv_sig')]"
16910,28,computeCost,runs,"[('const double *', 'Params'), ('const float *', 'uproj'), ('const float *', 'mu'), ('const float *', 'W'), ('const bool *', 'match'), ('const int *', 'iC'), ('const int *', 'call'), ('float *', 'cmax')]"
16910,29,bestFilter,runs,"[('const double *', 'Params'), ('const bool *', 'match'), ('const int *', 'iC'), ('const int *', 'call'), ('const float *', 'cmax'), ('int *', 'id'), ('float *', 'cx')]"
16910,30,average_snips,runs,"[('const double *', 'Params'), ('const int *', 'iC'), ('const int *', 'call'), ('const int *', 'id'), ('const float *', 'uproj'), ('const float *', 'cmax'), ('float *', 'WU')]"
16910,31,average_snips_v3,runs,"[('const double *', 'Params'), ('const int *', 'ioff'), ('const int *', 'id'), ('const float *', 'uproj'), ('const float *', 'cmax'), ('float *', 'bigArray')]"
16910,32,sum_dWU,runs,"[('const double *', 'Params'), ('const float *', 'bigArray'), ('float *', 'WU')]"
16910,33,count_spikes,runs,"[('const double *', 'Params'), ('const int *', 'id'), ('int *', 'nsp'), ('const float *', 'x'), ('float *', 'V')]"
16910,34,computeCost,runs,"[('const double *', 'Params'), ('const float *', 'Ws'), ('const float *', 'mus'), ('const float *', 'W'), ('const float *', 'mu'), ('const bool *', 'iMatch'), ('const int *', 'iC'), ('const int *', 'Wh'), ('float *', 'cmax')]"
16910,35,bestFilter,runs,"[('const double *', 'Params'), ('const bool *', 'iMatch'), ('const int *', 'Wh'), ('const float *', 'cmax'), ('const float *', 'mus'), ('int *', 'id'), ('float *', 'x')]"
16910,36,crossFilter,runs,"[('const double *', 'Params'), ('const float *', 'W1'), ('const float *', 'W2'), ('const float *', 'UtU'), ('float *', 'WtW')]"
16911,0,ballquery_batch_p_cuda_,runs,"[('int', 'n'), ('int', 'meanActive'), ('float', 'radius'), ('const float *', 'xyz'), ('const int *', 'batch_idxs'), ('const int *', 'batch_offsets'), ('int *', 'idx'), ('int *', 'start_len'), ('int *', 'cumsum')]"
16911,3,get_iou_cuda_,runs,"[('int', 'nInstance'), ('int', 'nProposal'), ('int *', 'proposals_idx'), ('int *', 'proposals_offset'), ('long *', 'instance_labels'), ('int *', 'instance_pointnum'), ('float *', 'proposals_iou')]"
16911,4,roipool_fp_cuda_,runs,"[('int', 'nProposal'), ('int', 'C'), ('float *', 'feats'), ('int *', 'proposals_offset'), ('float *', 'output_feats'), ('int *', 'output_maxidx')]"
16911,5,roipool_bp_cuda_,runs,"[('int', 'nProposal'), ('int', 'C'), ('float *', 'd_feats'), ('int *', 'proposals_offset'), ('int *', 'output_maxidx'), ('float *', 'd_output_feats')]"
16911,6,sec_mean_cuda_,runs,"[('int', 'nProposal'), ('int', 'C'), ('float *', 'inp'), ('int *', 'offsets'), ('float *', 'out')]"
16911,7,sec_min_cuda_,runs,"[('int', 'nProposal'), ('int', 'C'), ('float *', 'inp'), ('int *', 'offsets'), ('float *', 'out')]"
16911,8,sec_max_cuda_,runs,"[('int', 'nProposal'), ('int', 'C'), ('float *', 'inp'), ('int *', 'offsets'), ('float *', 'out')]"
16913,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
16915,0,c_code,runs,[]
16920,6,cuSearchDoublet,runs,"[('const int *', 'nSpM'), ('const float *', 'spMmat'), ('const int *', 'nSpB'), ('const float *', 'spBmat'), ('const int *', 'nSpT'), ('const float *', 'spTmat'), ('const float *', 'deltaRMin'), ('const float *', 'deltaRMax'), ('const float *', 'cotThetaMax'), ('const float *', 'collisionRegionMin'), ('const float *', 'collisionRegionMax'), ('int *', 'nSpMcomp'), ('int *', 'nSpBcompPerSpM_Max'), ('int *', 'nSpTcompPerSpM_Max'), ('int *', 'nSpBcompPerSpM'), ('int *', 'nSpTcompPerSpM'), ('int *', 'McompIndex'), ('int *', 'BcompIndex'), ('int *', 'tmpBcompIndex'), ('int *', 'TcompIndex'), ('int *', 'tmpTcompIndex')]"
16922,7,myset,runs,"[('unsigned long long *', 'p'), ('unsigned long long', 'v'), ('long long', 'n')]"
16922,31,generate_sources,runs,"[('curandState *', 'state'), ('int', 'n'), ('uint32_t *', 'verts')]"
16922,32,generate_destinations,runs,"[('curandState *', 'state'), ('int', 'n'), ('const uint32_t *', 'sources'), ('uint32_t *', 'destinations')]"
16923,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16923,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16924,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16924,20,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
16947,0,amean,runs,"[('float *', 'A'), ('float *', 'S')]"
1695,5,quark_filter_gpu_sm2,runs,"[('const uint32_t', 'threads'), ('const uint32_t *', 'd_hash'), ('uint32_t *', 'd_branch2'), ('uint32_t *', 'd_NonceBranch')]"
1695,18,lyra2Z_gpu_hash_32_sm2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash'), ('uint32_t *', 'resNonces')]"
1695,20,lyra2Z_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash')]"
1695,21,lyra2Z_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint2 *', 'g_hash'), ('uint32_t *', 'resNonces')]"
1695,27,lyra2_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint64_t *', 'g_hash')]"
1695,28,lyra2_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint2 *', 'g_hash')]"
1695,30,lyra2_gpu_hash_64_3,runs,"[('uint32_t', 'threads'), ('uint2 *', 'd_hash_512'), ('const uint32_t', 'round')]"
16951,182,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16951,323,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16961,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16961,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1697,0,cudaising,runs,"[('int *', 'G'), ('double *', 'w'), ('int *', 'newG')]"
1697,1,cudaising,runs,"[('int *', 'G'), ('double *', 'w'), ('int *', 'newG'), ('int', 'n'), ('int', 'workperthread')]"
16972,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
16972,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
16974,1,escolhePais,runs,"[('unsigned int', 'n'), ('unsigned int', 'np'), ('int *', 'paisAle'), ('double *', 'fitness'), ('int *', 'pool')]"
16974,2,cruza,runs,"[('unsigned int', 'n'), ('unsigned int', 'np'), ('int *', 'cidadesAle'), ('int *', 'pop'), ('int *', 'newPop'), ('int *', 'poolPais'), ('int *', 'mutacoes')]"
16974,3,preencheGenes,runs,"[('unsigned int', 'n'), ('unsigned int', 'np'), ('int *', 'genes')]"
16974,4,popInicial,runs,"[('unsigned int', 'n'), ('unsigned int', 'np'), ('int *', 'v'), ('int *', 'genes'), ('int *', 'ale')]"
16974,5,init,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states')]"
16974,6,setRandom,runs,"[('curandState_t *', 'states'), ('int *', 'numbers'), ('int', 'max')]"
16982,0,init_image_array_GPU,runs,"[('unsigned long long int *', 'image'), ('int', 'pixels_per_image')]"
16987,6,cuSearchDoublet,runs,"[('const int *', 'nSpM'), ('const float *', 'spMmat'), ('const int *', 'nSpB'), ('const float *', 'spBmat'), ('const int *', 'nSpT'), ('const float *', 'spTmat'), ('const float *', 'deltaRMin'), ('const float *', 'deltaRMax'), ('const float *', 'cotThetaMax'), ('const float *', 'collisionRegionMin'), ('const float *', 'collisionRegionMax'), ('int *', 'nSpMcomp'), ('int *', 'nSpBcompPerSpM_Max'), ('int *', 'nSpTcompPerSpM_Max'), ('int *', 'nSpBcompPerSpM'), ('int *', 'nSpTcompPerSpM'), ('int *', 'McompIndex'), ('int *', 'BcompIndex'), ('int *', 'tmpBcompIndex'), ('int *', 'TcompIndex'), ('int *', 'tmpTcompIndex')]"
16991,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
16991,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
16991,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16991,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
16991,31,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
16995,1,initializeSobel,runs,"[('float *', 'd_sobelKernelX'), ('float *', 'd_sobelKernelY')]"
16995,2,Conv2D,runs,"[('float *', 'd_image'), ('float *', 'kernel'), ('float *', 'd_result'), ('int', 'width'), ('int', 'height'), ('int', 'kernelSize')]"
16995,3,magnitudeImage,runs,"[('float *', 'd_gradientX'), ('float *', 'd_gradientY'), ('float *', 'd_gradientMag'), ('int', 'width'), ('int', 'height')]"
16995,4,nonMaxSuppressionDevice,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'd_gradientX'), ('float *', 'd_gradientY'), ('float *', 'd_gradientMag'), ('float *', 'd_nonMax')]"
16995,5,computeSum,runs,"[('float *', 'd_filteredImage'), ('float *', 'd_imageSumGrid'), ('unsigned int', 'n')]"
16995,6,highHysterisis,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'd_nonMax'), ('float', 'highThreshold'), ('float *', 'd_highThreshHyst')]"
16995,7,lowHysterisis,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'd_nonMax'), ('float *', 'd_highThreshHyst'), ('float', 'lowThreshold'), ('float *', 'd_lowThreshHyst')]"
16996,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
16996,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
170,1,conv_vertical_naive_output,runs,"[('const int', 'n'), ('float *', 'y'), ('const float *', 'x'), ('const float *', 'w'), ('const int', 'iH'), ('const int', 'iW'), ('const int', 'kL')]"
170,2,conv_vertical_naive_gradInput,runs,"[('const int', 'n'), ('float *', 'dx'), ('const float *', 'dy'), ('const float *', 'w'), ('const int', 'oH'), ('const int', 'oW'), ('const int', 'kL')]"
170,3,conv_vertical_naive_gradParam,runs,"[('const int', 'n'), ('float *', 'dw'), ('const float *', 'x'), ('const float *', 'dy'), ('const int', 'kL'), ('const int', 'oH'), ('const int', 'oW')]"
170,4,conv_vertical_naive_gradWeight,runs,"[('const int', 'n'), ('float *', 'y'), ('const float *', 'x'), ('const int', 'kL'), ('const int', 'iC')]"
170,6,conv_horizontal_naive_output,runs,"[('const int', 'n'), ('float *', 'y'), ('const float *', 'x'), ('const float *', 'w'), ('const int', 'iH'), ('const int', 'iW'), ('const int', 'kL')]"
170,7,conv_horizontal_naive_gradInput,runs,"[('const int', 'n'), ('float *', 'dx'), ('const float *', 'dy'), ('const float *', 'w'), ('const int', 'oH'), ('const int', 'oW'), ('const int', 'kL')]"
170,8,conv_horizontal_naive_gradParam,runs,"[('const int', 'n'), ('float *', 'dw'), ('const float *', 'x'), ('const float *', 'dy'), ('const int', 'kL'), ('const int', 'oH'), ('const int', 'oW')]"
170,9,conv_horizontal_naive_gradWeight,runs,"[('const int', 'n'), ('float *', 'y'), ('const float *', 'x'), ('const int', 'kL'), ('const int', 'iC')]"
17000,7,myset,runs,"[('unsigned long long *', 'p'), ('unsigned long long', 'v'), ('long long', 'n')]"
17000,38,generate_sources,runs,"[('curandState *', 'state'), ('int', 'n'), ('uint32_t *', 'verts')]"
17000,39,generate_destinations,runs,"[('curandState *', 'state'), ('int', 'n'), ('const uint32_t *', 'sources'), ('uint32_t *', 'destinations')]"
17001,124,KernelVersionShim,runs,[]
17003,185,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17003,326,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17005,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
17005,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
17005,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17005,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17005,25,PadMatrixInLeadingDimensionKernel,runs,"[('const int8_t *', 'src'), ('int8_t *', 'dst'), ('int', 'col_src'), ('int', 'col_dst')]"
17005,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
17007,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17007,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17013,1,_hSigmoidKer,runs,"[('float const *', 'in'), ('float *', 'out'), ('int', 'size')]"
17013,2,prelu_kernel,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'num_elem'), ('int', 'input_size'), ('int', 'fm_size'), ('const float *', 'gamma')]"
17013,7,mish_kernel,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'num_elem')]"
17030,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17030,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17031,0,square,runs,"[('int *', 'array'), ('int', 'n')]"
17034,4,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
17035,2,kernel,runs,"[('float *', 'id'), ('float *', 'od'), ('int', 'w'), ('int', 'h'), ('int', 'depth')]"
17041,2,find_all_sums_hub_kernel,runs,"[('int *', 'hub'), ('int', 'nhub'), ('double *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('double *', 'sum_weight_result')]"
17041,3,find_all_sums_kernel,runs,"[('bool *', 'mask'), ('double *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('double *', 'sum_weight_result'), ('int', 'width'), ('int', 'height')]"
17041,4,next_move_kernel,runs,"[('int *', 'rat_count'), ('int *', 'healthy_rat_count'), ('int *', 'exposed_rat_count'), ('int *', 'infectious_rat_count'), ('double *', 'node_weight'), ('double *', 'sum_weight_result'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('int', 'width'), ('int', 'height'), ('double', 'batch_fraction')]"
17041,8,find_all_sums_hub_kernel,runs,"[('int *', 'hub'), ('int', 'nhub'), ('double *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('double *', 'sum_weight_result')]"
17041,9,find_all_sums_kernel,runs,"[('bool *', 'mask'), ('double *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('double *', 'sum_weight_result'), ('int', 'width'), ('int', 'height')]"
17041,10,next_move_hub_kernel,runs,"[('int *', 'hub'), ('int', 'nhub'), ('int *', 'rat_count'), ('int *', 'healthy_rat_count'), ('int *', 'exposed_rat_count'), ('int *', 'infectious_rat_count'), ('double *', 'node_weight'), ('double *', 'sum_weight_result'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('int', 'width'), ('int', 'height'), ('double', 'batch_fraction')]"
17041,11,next_move_kernel,runs,"[('bool *', 'mask'), ('int *', 'rat_count'), ('int *', 'healthy_rat_count'), ('int *', 'exposed_rat_count'), ('int *', 'infectious_rat_count'), ('double *', 'node_weight'), ('double *', 'sum_weight_result'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('int', 'width'), ('int', 'height'), ('double', 'batch_fraction')]"
17041,15,find_all_sums_hub_kernel,runs,"[('int *', 'hub'), ('int', 'nhub'), ('double *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('double *', 'neighbor_accum_weight_result'), ('double *', 'sum_weight_result')]"
17041,16,find_all_sums_kernel,runs,"[('bool *', 'mask'), ('double *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('double *', 'neighbor_accum_weight_result'), ('double *', 'sum_weight_result'), ('int', 'width'), ('int', 'height')]"
17041,19,find_all_sums_hub_kernel,runs,"[('int *', 'hub'), ('int', 'nhub'), ('double *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('double *', 'neighbor_accum_weight_result'), ('double *', 'sum_weight_result')]"
17041,20,find_all_sums_kernel,runs,"[('bool *', 'mask'), ('double *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('double *', 'neighbor_accum_weight_result'), ('double *', 'sum_weight_result'), ('int', 'width'), ('int', 'height')]"
17041,25,find_all_sums_hub_kernel,runs,"[('int *', 'hub'), ('int', 'nhub'), ('float *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('float *', 'neighbor_accum_weight_result'), ('float *', 'sum_weight_result')]"
17041,26,find_all_sums_kernel,runs,"[('bool *', 'mask'), ('float *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('float *', 'neighbor_accum_weight_result'), ('float *', 'sum_weight_result'), ('int', 'width'), ('int', 'height')]"
17041,29,find_all_sums_hub_kernel,runs,"[('int *', 'hub'), ('int', 'nhub'), ('double *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('double *', 'neighbor_accum_weight_result'), ('double *', 'sum_weight_result')]"
17041,30,find_all_sums_kernel,runs,"[('bool *', 'mask'), ('double *', 'node_weight'), ('int *', 'neighbor'), ('int *', 'neighbor_start'), ('double *', 'neighbor_accum_weight_result'), ('double *', 'sum_weight_result'), ('int', 'width'), ('int', 'height')]"
17041,31,compute_infection_prob_kernel,runs,"[('double', 'alpha'), ('double', 'beta'), ('int *', 'infectious_rat_count'), ('int *', 'exposed_rat_count'), ('int *', 'rat_count'), ('double *', 'infection_prob_result'), ('int', 'width'), ('int', 'height')]"
17048,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17048,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17058,0,pi_estimation,runs,"[('float *', 'pi'), ('curandState *', 'states')]"
17061,0,cuda_say_hi,runs,[]
17061,1,vector_addition,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
17064,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
17064,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
1707,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1707,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17070,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b'), ('int', 'size')]"
17070,1,suma_vectores,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b'), ('int', 'size')]"
17070,2,matrixSum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'size')]"
17070,3,matrixMult,runs,"[('int *', 'm'), ('int *', 'n'), ('int *', 'p'), ('int', 'size')]"
17070,4,matrixMult,runs,"[('int *', 'm'), ('int *', 'n'), ('int *', 'p'), ('int', 'size')]"
17070,5,matrixMult,runs,"[('int *', 'm'), ('int *', 'n'), ('int *', 'p'), ('int', 'size')]"
17070,6,matrixMult,runs,"[('int *', 'm'), ('int *', 'n'), ('int *', 'p'), ('int', 'size')]"
17070,7,matrixSum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'size')]"
17070,8,matrixMult,runs,"[('int *', 'm'), ('int *', 'n'), ('int *', 'p'), ('int', 'size')]"
17070,9,Saxx_device,runs,"[('float *', 'x'), ('float *', 'c'), ('float', 'xb'), ('int', 'n')]"
17070,10,Saxy_device,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'd'), ('float', 'xb'), ('float', 'yb'), ('int', 'n')]"
17070,11,matrixSum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'size')]"
17070,12,matrixMult,runs,"[('int *', 'm'), ('int *', 'n'), ('int *', 'p'), ('int', 'size')]"
17077,1,fitness_kernel,runs,"[('int *', 'chromosome'), ('int *', 'collision')]"
17077,2,updatePhi_kernel,runs,"[('int', 'n'), ('bool *', 'd_flags'), ('float *', 'd_energy'), ('float *', 'd_fatigue'), ('float', 'theta')]"
17078,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17078,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17079,0,divergence_test_ker,runs,[]
17079,1,matrix_mult_ker,runs,"[('float *', 'matrix_a'), ('float *', 'matrix_b'), ('float *', 'output_matrix'), ('int', 'N')]"
1708,0,kernel,runs,[]
1708,1,detect_edges,runs,"[('unsigned char *', 'in'), ('unsigned char *', 'out')]"
17084,0,print_from_gpu,runs,[]
17084,1,gpu_vector_add,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
17086,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
17086,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
17086,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17086,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17086,25,PadMatrixInLeadingDimensionKernel,runs,"[('const int8_t *', 'src'), ('int8_t *', 'dst'), ('int', 'col_src'), ('int', 'col_dst')]"
17086,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
17091,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
17095,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17095,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1711,75,sync_conv_groups,runs,[]
17111,0,square,runs,"[('int *', 'array'), ('int', 'n')]"
17127,0,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
17127,1,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
17131,2,NodesApplyTramplingEffectKernel,runs,"[('float *', 'target'), ('float *', 'distanceToPath'), ('int', 'graphW'), ('int', 'graphH'), ('float', 'pathThickness'), ('float', 'tramplingCoefficient')]"
17134,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
17139,1,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17140,6,cuSearchDoublet,runs,"[('const int *', 'nSpM'), ('const float *', 'spMmat'), ('const int *', 'nSpB'), ('const float *', 'spBmat'), ('const int *', 'nSpT'), ('const float *', 'spTmat'), ('const float *', 'deltaRMin'), ('const float *', 'deltaRMax'), ('const float *', 'cotThetaMax'), ('const float *', 'collisionRegionMin'), ('const float *', 'collisionRegionMax'), ('int *', 'nSpMcomp'), ('int *', 'nSpBcompPerSpM_Max'), ('int *', 'nSpTcompPerSpM_Max'), ('int *', 'nSpBcompPerSpM'), ('int *', 'nSpTcompPerSpM'), ('int *', 'McompIndex'), ('int *', 'BcompIndex'), ('int *', 'tmpBcompIndex'), ('int *', 'TcompIndex'), ('int *', 'tmpTcompIndex')]"
17141,0,GaussianNBSumKernel,runs,"[('const float *', 'd_data'), ('const int *', 'd_labels'), ('float *', 'feature_means_'), ('int *', 'class_count_'), ('unsigned int', 'n_samples_'), ('unsigned int', 'n_classes_'), ('unsigned int', 'n_features_')]"
17141,1,GaussianNBMeanKernel,runs,"[('float *', 'feature_means_'), ('int *', 'class_count_'), ('float *', 'class_priors_'), ('unsigned int', 'n_samples_'), ('unsigned int', 'n_classes_'), ('unsigned int', 'n_features_')]"
17141,2,GaussianNBVarKernel,runs,"[('const float *', 'd_data'), ('const int *', 'd_labels'), ('const float *', 'feature_means_'), ('float *', 'feature_vars_'), ('const int *', 'class_count_'), ('const unsigned int', 'n_samples_'), ('const unsigned int', 'n_classes_'), ('const unsigned int', 'n_features_')]"
17141,4,MultinomialNBCalcKernel,runs,"[('const float *', 'd_data'), ('const int *', 'd_labels'), ('float *', 'feature_probs'), ('float *', 'class_priors'), ('unsigned int', 'n_samples_'), ('unsigned int', 'n_classes_'), ('unsigned int', 'n_features_')]"
17141,5,MultinomialNBLearnKernel,runs,"[('float *', 'feature_probs'), ('float *', 'class_priors'), ('const float *', 'd_row_sums'), ('unsigned int', 'n_samples_'), ('unsigned int', 'n_classes_'), ('unsigned int', 'n_features_')]"
17141,7,BernoulliNBCalcKernel,runs,"[('const float *', 'd_data'), ('const int *', 'd_labels'), ('float *', 'feature_probs'), ('float *', 'class_count_'), ('unsigned int', 'n_samples_'), ('unsigned int', 'n_classes_'), ('unsigned int', 'n_features_')]"
17141,8,BernoulliNBLearnKernel,runs,"[('float *', 'feature_probs'), ('float *', 'class_count_'), ('const float *', 'd_row_sums'), ('unsigned int', 'n_samples_'), ('unsigned int', 'n_classes_'), ('unsigned int', 'n_features_')]"
17141,10,ComplementNBCalcKernel,runs,"[('const float *', 'd_data'), ('const int *', 'd_labels'), ('float *', 'per_class_feature_sum_'), ('float *', 'per_feature_sum_'), ('unsigned int', 'n_samples_'), ('unsigned int', 'n_features_')]"
17141,11,ComplementNBLearnKernel,runs,"[('float *', 'feature_weights_'), ('float *', 'per_class_feature_sum_'), ('float *', 'per_feature_sum_'), ('float *', 'per_class_sum_'), ('float', 'all_sum_'), ('unsigned int', 'n_classes_'), ('unsigned int', 'n_features_')]"
17141,12,ComplementNBNormalizeKernel,runs,"[('float *', 'feature_weights_'), ('float *', 'per_class_sum_'), ('unsigned int', 'n_classes_'), ('unsigned int', 'n_features_')]"
17143,0,updateQueueKernel,runs,"[('int *', 'queueu'), ('int *', 'queueSize'), ('const int *', 'startPoints'), ('const int *', 'endPoints'), ('const int *', 'visitedArray'), ('const int *', 'currentVertex')]"
17143,1,processQueueKernel,runs,"[('int *', 'parentArray'), ('double *', 'resultWeightArray'), ('const int *', 'queue'), ('const int *', 'startPoints'), ('const int *', 'endPoints'), ('const double *', 'weightArray')]"
17144,0,merge_sort,runs,"[('int *', 'datas'), ('int', 'n')]"
17144,1,do_sum_merge,runs,"[('int *', 'datas'), ('int', 'n')]"
17144,3,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
17144,4,timedReduction,runs,"[('const float *', 'input'), ('float *', 'output'), ('clock_t *', 'timer')]"
1715,6,mprts_update_offsets,runs,"[('int', 'nr_total_blocks'), ('uint *', 'd_off'), ('uint *', 'd_spine_sums')]"
1715,7,k_count_received,runs,"[('int', 'nr_total_blocks'), ('uint *', 'd_n_recv_by_block'), ('uint *', 'd_spine_cnts')]"
1715,8,k_reorder_send_buf_total,runs,"[('int', 'nr_prts'), ('int', 'nr_total_blocks'), ('uint *', 'd_bidx'), ('uint *', 'd_sums'), ('float4 *', 'd_xi4'), ('float4 *', 'd_pxi4'), ('float4 *', 'd_xchg_xi4'), ('float4 *', 'd_xchg_pxi4')]"
1715,22,k_zero_comp_xyz,runs,"[('float *', 'data'), ('uint', 'n'), ('uint', 'stride')]"
17153,0,helloWorld,runs,[]
17153,1,operator_matmul_h,runs,"[('const float *', 'input1'), ('const float *', 'input2'), ('float *', 'output'), ('int', 'height'), ('int', 'k'), ('int', 'width'), ('int', 'broadcast')]"
17153,2,operator_transpose_h,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'height'), ('int', 'width')]"
17153,3,operator_mean_h,runs,"[('const float *', 'input1'), ('float *', 'output'), ('const int *', 'input1_shape'), ('int', 'input1_dims'), ('const int *', 'temp_shape'), ('int', 'dim'), ('int', 'dim_stride'), ('int', 'size')]"
17153,4,operator_sum_h,runs,"[('const float *', 'input1'), ('float *', 'output'), ('const int *', 'input1_shape'), ('int', 'input1_dims'), ('const int *', 'temp_shape'), ('int', 'dim'), ('int', 'dim_stride'), ('int', 'size')]"
17153,5,storage_xavier,runs,"[('float *', 'a'), ('int', 'size'), ('float', 'scale'), ('curandState *', 'cs')]"
17153,14,dCategoricalCrossEntropyCost,runs,"[('float *', 'predictions'), ('float *', 'target'), ('float *', 'dY'), ('int', 'size')]"
17153,15,categoricalCrossEntropyCost,runs,"[('float *', 'predictions'), ('float *', 'target'), ('int', 'size'), ('float *', 'cost')]"
17156,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17156,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17159,0,simOBEcudaCrossPoltest,runs,"[('double *', 'AC'), ('const double *', 'delays'), ('const double *', 'alphas'), ('const double *', 'betas'), ('const double', 'w'), ('const double', 'FWHM'), ('const double', 'g12'), ('const double', 'g13'), ('const double', 'g23'), ('const double', 't_min')]"
17159,1,simOBEcudaCoPolTest,runs,"[('double *', 'AC'), ('const double *', 'Delaylist'), ('const double', 'w'), ('const double', 'FWHM'), ('const double', 'G1'), ('const double', 'G2'), ('const double', 'G3'), ('const double', 't_min')]"
17165,0,vecAdd,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
17165,1,vecAdd,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
17165,2,vecAdd,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
17179,10,sigmoidKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'edge')]"
17185,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
17185,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
17185,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17185,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17185,31,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
17202,0,cuComputeDistanceGlobal,runs,"[('float *', 'A'), ('int', 'wA'), ('float *', 'B'), ('int', 'wB'), ('int', 'dim'), ('float *', 'AB')]"
17202,1,cuInsertionSort,runs,"[('float *', 'dist'), ('long *', 'ind'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
17202,2,cuParallelSqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'k')]"
17204,0,drawGray,runs,"[('unsigned char *', 'optr'), ('const float *', 'outSrc')]"
17204,1,drawColor,runs,"[('unsigned char *', 'optr'), ('const float *', 'red'), ('const float *', 'green'), ('const float *', 'blue')]"
17204,2,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17204,3,kernel,runs,"[('float *', 'red'), ('float *', 'green'), ('float *', 'blue'), ('unsigned long', 'N')]"
17204,4,setup_rands,runs,"[('curandState *', 'rand'), ('unsigned long', 'seed'), ('unsigned long', 'N')]"
17204,5,randomize,runs,"[('float *', 'array'), ('curandState *', 'rand'), ('unsigned long', 'N')]"
17205,0,extract_boundary_kernel,runs,"[('float *', 'maskIn'), ('int *', 'boundryPixelArray'), ('int', 'source_nchannel'), ('int', 'source_width'), ('int', 'source_height')]"
17205,1,merge_without_blend_kernel,runs,"[('float *', 'srcimg'), ('float *', 'targetimg'), ('float *', 'outimg'), ('int *', 'boundary_array'), ('int', 'source_nchannel'), ('int', 'source_width'), ('int', 'source_height')]"
17205,2,poisson_jacobi_kernel,runs,"[('float *', 'targetimg'), ('float *', 'outimg'), ('int *', 'boundary_array'), ('int', 'c'), ('int', 'w'), ('int', 'h'), ('int', 'boundBoxMinX'), ('int', 'boundBoxMaxX'), ('int', 'boundBoxMinY'), ('int', 'boundBoxMaxY')]"
1721,33,gSetSparse,runs,"[('float *', 'out'), ('const size_t *', 'indices'), ('const float *', 'values'), ('int', 'length')]"
1721,40,gMaxPoolingForward,runs,"[('float *', 'out'), ('int', 'outRows'), ('int', 'outCols'), ('float *', 'in'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
1721,41,gMaxPoolingBackward,runs,"[('float *', 'adj'), ('int', 'adjRows'), ('int', 'adjCols'), ('float *', 'in'), ('float *', 'adjIn'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
1721,44,gGetValueByKey,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('int *', 'indeces'), ('int', 'n')]"
1721,47,gScatterAdd,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
1721,48,gScatterUpdate,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
1721,49,gGather,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
17214,0,Sobel,runs,"[('const unsigned short *', 'in'), ('unsigned char *', 'out'), ('const unsigned int', 'width'), ('const unsigned int', 'height')]"
17219,0,square,runs,"[('int *', 'array'), ('int', 'n')]"
17229,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17229,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17244,0,Pi_GPU,runs,"[('float *', 'x'), ('float *', 'y'), ('int *', 'totalCounts'), ('int', 'N')]"
17244,2,Multiply_Matrix_GPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'BLOCK_SIZE'), ('int', 'N')]"
17245,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
17245,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
17245,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
17245,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
17245,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
17245,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
17247,6,cuSearchDoublet,runs,"[('const int *', 'nSpM'), ('const float *', 'spMmat'), ('const int *', 'nSpB'), ('const float *', 'spBmat'), ('const int *', 'nSpT'), ('const float *', 'spTmat'), ('const float *', 'deltaRMin'), ('const float *', 'deltaRMax'), ('const float *', 'cotThetaMax'), ('const float *', 'collisionRegionMin'), ('const float *', 'collisionRegionMax'), ('int *', 'nSpMcomp'), ('int *', 'nSpBcompPerSpM_Max'), ('int *', 'nSpTcompPerSpM_Max'), ('int *', 'nSpBcompPerSpM'), ('int *', 'nSpTcompPerSpM'), ('int *', 'McompIndex'), ('int *', 'BcompIndex'), ('int *', 'tmpBcompIndex'), ('int *', 'TcompIndex'), ('int *', 'tmpTcompIndex')]"
17249,21,sync_deconv_groups,runs,[]
17249,37,sync_conv_groups,runs,[]
17261,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
17261,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
17261,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17261,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17261,25,PadMatrixInLeadingDimensionKernel,runs,"[('const int8_t *', 'src'), ('int8_t *', 'dst'), ('int', 'col_src'), ('int', 'col_dst')]"
17261,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
17264,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
17264,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
17264,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
17264,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
17264,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
17264,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
17269,0,k_vector_x_constante,runs,"[('int *', 'arr'), ('int *', 'answer'), ('int', 'n'), ('int', 'k')]"
17269,1,kernel_1,runs,"[('int', 'columns'), ('int', 'rows'), ('float *', 'mat1'), ('float *', 'matanswer')]"
17269,2,kernel_2_shared,runs,"[('int', 'columns'), ('int', 'rows'), ('float *', 'mat1'), ('float *', 'matanswer')]"
17269,3,kernel_1,runs,"[('int', 'columns'), ('int', 'rows'), ('float *', 'mat1'), ('float *', 'matanswer')]"
17269,4,kernel_2_shared,runs,"[('int', 'columns'), ('int', 'rows'), ('float *', 'mat1'), ('float *', 'matanswer')]"
17272,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17272,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17279,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17279,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17280,1,maxReduce,runs,"[('int *', 'd_idata'), ('int *', 'd_odata')]"
17286,88,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
17287,0,vecAdd,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'N')]"
173,4,increment_kernel,runs,"[('int *', 'g_data'), ('int', 'inc_value')]"
173,5,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
173,6,sequence_gpu,runs,"[('int *', 'd_ptr'), ('int', 'length')]"
173,7,timedReduction,runs,"[('const float *', 'input'), ('float *', 'output'), ('clock_t *', 'timer')]"
17302,186,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17302,327,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17313,0,calc_freq,runs,"[('int *', 'freq'), ('int', 'file_size'), ('char *', 'buffer'), ('int', 'total_threads')]"
17313,1,count_sort,runs,"[('int *', 'x'), ('int *', 'y'), ('int', 'size')]"
17313,2,calc,runs,"[('float *', 'result'), ('float *', 'b'), ('float *', 'a'), ('int', 'size')]"
17320,3,median_filter_2d,runs,"[('unsigned char *', 'input'), ('unsigned char *', 'output'), ('int', 'width'), ('int', 'height')]"
17320,4,median_filter_2d_sm,runs,"[('unsigned char *', 'input'), ('unsigned char *', 'output'), ('int', 'width'), ('int', 'height')]"
17321,0,GPU_mt_info,runs,[]
17321,1,GPU_vector_add,runs,"[('int *', 'left'), ('int *', 'right'), ('int *', 'result')]"
17321,2,GPU_increment_number,runs,"[('int *', 'buffer'), ('int', 'initial')]"
17327,15,testMemset,runs,"[('float *', 'array'), ('float', 'value'), ('int', 'N')]"
17337,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
17337,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
17355,2,gpu_RNG_setup,runs,"[('curandState *', 'state'), ('unsigned long', 'seed'), ('int', 'N')]"
17355,24,gpu_totalTemp_kernel,runs,"[('int', 'N'), ('double *', 'partialT'), ('double *', 'totalT')]"
17355,25,gpu_reduce_kernel,runs,"[('int', 'N'), ('float *', 'vector'), ('float *', 'sum')]"
17358,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17358,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17363,0,kernel_push1_atomic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_pull_left'), ('int *', 'g_pull_right'), ('int *', 'g_pull_down'), ('int *', 'g_pull_up'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1')]"
17363,1,kernel_relabel_atomic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_pull_left'), ('int *', 'g_pull_right'), ('int *', 'g_pull_down'), ('int *', 'g_pull_up'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1')]"
17363,3,kernel_push2_atomic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_pull_left'), ('int *', 'g_pull_right'), ('int *', 'g_pull_down'), ('int *', 'g_pull_up'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1')]"
17363,4,kernel_End,runs,"[('int *', 'g_stochastic'), ('int *', 'g_count_blocks'), ('int *', 'g_counter')]"
17363,5,kernel_push1_start_atomic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1'), ('int *', 'd_relabel'), ('int *', 'd_stochastic'), ('int *', 'd_counter'), ('bool *', 'd_finish')]"
17363,7,kernel_push2_stochastic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_pull_left'), ('int *', 'g_pull_right'), ('int *', 'g_pull_down'), ('int *', 'g_pull_up'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1'), ('int *', 'd_relabel'), ('int *', 'd_stochastic'), ('int *', 'd_counter'), ('bool *', 'd_finish'), ('int *', 'g_block_num')]"
17363,8,kernel_bfs_t,runs,"[('int *', 'g_push_reser'), ('int *', 'g_sink_weight'), ('int *', 'g_graph_height'), ('bool *', 'g_pixel_mask'), ('int', 'vertex_num'), ('int', 'width'), ('int', 'height'), ('int', 'vertex_num1'), ('int', 'width1'), ('int', 'height1')]"
17363,9,kernel_push_stochastic1,runs,"[('int *', 'g_push_reser'), ('int *', 's_push_reser'), ('int *', 'g_count_blocks'), ('bool *', 'g_finish'), ('int *', 'g_block_num'), ('int', 'width1')]"
17363,10,kernel_push_atomic2,runs,"[('int *', 'g_terminate'), ('int *', 'g_push_reser'), ('int *', 's_push_reser'), ('int *', 'g_block_num'), ('int', 'width1')]"
17363,11,kernel_push_stochastic2,runs,"[('int *', 'g_terminate'), ('int *', 'g_relabel_mask'), ('int *', 'g_push_reser'), ('int *', 's_push_reser'), ('int *', 'd_stochastic'), ('int *', 'g_block_num'), ('int', 'width1')]"
17363,12,kernel_push1_start_stochastic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1'), ('int *', 'd_relabel'), ('int *', 'd_stochastic'), ('int *', 'd_counter'), ('bool *', 'd_finish')]"
17363,13,kernel_bfs,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_graph_height'), ('bool *', 'g_pixel_mask'), ('int', 'vertex_num'), ('int', 'width'), ('int', 'height'), ('int', 'vertex_num1'), ('int', 'width1'), ('int', 'height1'), ('bool *', 'g_over'), ('int *', 'g_counter')]"
17363,14,kernel_push1_atomic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_pull_left'), ('int *', 'g_pull_right'), ('int *', 'g_pull_down'), ('int *', 'g_pull_up'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1')]"
17363,15,kernel_relabel_atomic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_pull_left'), ('int *', 'g_pull_right'), ('int *', 'g_pull_down'), ('int *', 'g_pull_up'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1')]"
17363,17,kernel_push2_atomic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_pull_left'), ('int *', 'g_pull_right'), ('int *', 'g_pull_down'), ('int *', 'g_pull_up'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1')]"
17363,18,kernel_End,runs,"[('int *', 'g_stochastic'), ('int *', 'g_count_blocks'), ('int *', 'g_counter')]"
17363,19,kernel_push1_start_atomic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1'), ('int *', 'd_relabel'), ('int *', 'd_stochastic'), ('int *', 'd_counter'), ('bool *', 'd_finish')]"
17363,21,kernel_push2_stochastic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_pull_left'), ('int *', 'g_pull_right'), ('int *', 'g_pull_down'), ('int *', 'g_pull_up'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1'), ('int *', 'd_relabel'), ('int *', 'd_stochastic'), ('int *', 'd_counter'), ('bool *', 'd_finish'), ('int *', 'g_block_num')]"
17363,22,kernel_bfs_t,runs,"[('int *', 'g_push_reser'), ('int *', 'g_sink_weight'), ('int *', 'g_graph_height'), ('bool *', 'g_pixel_mask'), ('int', 'vertex_num'), ('int', 'width'), ('int', 'height'), ('int', 'vertex_num1'), ('int', 'width1'), ('int', 'height1')]"
17363,23,kernel_push_stochastic1,runs,"[('int *', 'g_push_reser'), ('int *', 's_push_reser'), ('int *', 'g_count_blocks'), ('bool *', 'g_finish'), ('int *', 'g_block_num'), ('int', 'width1')]"
17363,24,kernel_push_atomic2,runs,"[('int *', 'g_terminate'), ('int *', 'g_push_reser'), ('int *', 's_push_reser'), ('int *', 'g_block_num'), ('int', 'width1')]"
17363,25,kernel_push_stochastic2,runs,"[('int *', 'g_terminate'), ('int *', 'g_relabel_mask'), ('int *', 'g_push_reser'), ('int *', 's_push_reser'), ('int *', 'd_stochastic'), ('int *', 'g_block_num'), ('int', 'width1')]"
17363,26,kernel_push1_start_stochastic,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_sink_weight'), ('int *', 'g_push_reser'), ('int *', 'g_relabel_mask'), ('int *', 'g_graph_height'), ('int *', 'g_height_write'), ('int', 'graph_size'), ('int', 'width'), ('int', 'rows'), ('int', 'graph_size1'), ('int', 'width1'), ('int', 'rows1'), ('int *', 'd_relabel'), ('int *', 'd_stochastic'), ('int *', 'd_counter'), ('bool *', 'd_finish')]"
17363,27,kernel_bfs,runs,"[('int *', 'g_left_weight'), ('int *', 'g_right_weight'), ('int *', 'g_down_weight'), ('int *', 'g_up_weight'), ('int *', 'g_graph_height'), ('bool *', 'g_pixel_mask'), ('int', 'vertex_num'), ('int', 'width'), ('int', 'height'), ('int', 'vertex_num1'), ('int', 'width1'), ('int', 'height1'), ('bool *', 'g_over'), ('int *', 'g_counter')]"
17365,2,hello,runs,[]
17365,3,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
17371,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17371,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17375,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
17375,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
17375,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
17375,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
17375,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
17379,3,VectorAdd,runs,"[('int *', 'a'), ('int *', 'r'), ('int', 'n'), ('double', 'gamma')]"
17379,4,SumaColMatrizKernel,runs,"[('int', 'M'), ('int', 'N'), ('float *', 'Md'), ('float *', 'Nd')]"
1738,6,cosineKernel,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'outN'), ('float *', 'outD1'), ('float *', 'outD2'), ('int', 'size')]"
1738,7,ladKernel,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'out'), ('int', 'size')]"
1738,8,maxKernel,runs,"[('float *', 'array'), ('int', 'size'), ('float *', 'max')]"
1738,9,minKernel,runs,"[('float *', 'array'), ('int', 'size'), ('float *', 'min')]"
17383,7,emptyKernel,runs,[]
17388,0,initCurandStates,runs,"[('curandState *', 'randStates'), ('int', 'numThreads'), ('int', 'seed')]"
17388,5,cumulativeOffspringToAncestorKernel,runs,"[('const int *', 'cumulativeOffspring'), ('int *', 'ancestor'), ('int', 'numParticles')]"
17389,5,set_unavailable,runs,"[('bool *', 'available'), ('int', 'n_rows'), ('const int *', 'idx'), ('int', 'n_selected')]"
17389,6,update_priority,runs,"[('int *', 'new_priority'), ('int', 'n_selected'), ('const int *', 'new_idx'), ('int', 'n_ws'), ('const int *', 'idx'), ('const int *', 'priority')]"
17389,7,emptyMarkerKernel,runs,[]
17389,9,postprocess_matrix,runs,"[('float *', 'matrix'), ('long *', 'long_indices'), ('int *', 'indices'), ('unsigned int', 'N_POINTS'), ('unsigned int', 'K')]"
17389,11,to_float,runs,"[('float *', 'out'), ('int *', 'in'), ('int', 'size')]"
17389,12,build_actual_output,runs,"[('int *', 'output'), ('int', 'n_rows'), ('int', 'k'), ('const int *', 'idx_labels'), ('const int64_t *', 'indices')]"
17389,13,build_expected_output,runs,"[('int *', 'output'), ('int', 'n_rows'), ('int', 'k'), ('const int *', 'labels')]"
17389,14,nan_kernel,runs,"[('float *', 'data'), ('const bool *', 'mask'), ('int', 'len'), ('float', 'nan')]"
17389,26,naiveHistKernel,runs,"[('int *', 'bins'), ('int', 'nbins'), ('int *', 'in'), ('int', 'nrows')]"
17412,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17412,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17424,0,mvm_gpu,runs,"[('double *', 'A_cuda'), ('double *', 'X_cuda'), ('double *', 'Y_cuda'), ('int *', 'm_locals_cuda'), ('int *', 'A_all_pos_cuda'), ('int', 'n'), ('int', 'nthreads')]"
17426,22,knn_assign_gmem_deinterleave1,runs,"[('uint32_t', 'length'), ('uint16_t', 'k'), ('uint32_t *', 'neighbors')]"
17426,23,knn_assign_gmem_deinterleave2,runs,"[('uint32_t', 'length'), ('uint16_t', 'k'), ('uint32_t *', 'neighbors')]"
17432,1,derivativeError,runs,"[('float *', 'output'), ('float *', 'actual'), ('float *', 'deriv_err')]"
17432,2,backPropagate,runs,"[('float *', 'deriv_err'), ('float *', 'prev_deriv_err'), ('float *', 'wieghts'), ('float *', 'output')]"
17434,0,print_gpu,runs,[]
17444,0,kernel,runs,"[('float *', 'w_vect'), ('float *', 'train'), ('float *', 'partition'), ('int', 'rows'), ('int', 'cols')]"
17447,1,cuda_kernel_initRND,runs,"[('unsigned long', 'seed'), ('curandState *', 'States')]"
17448,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17448,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1747,0,recipSummation,runs,"[('double *', 'data'), ('double *', 'recip'), ('int', 'len')]"
17479,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17479,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17481,8,clock_block,runs,"[('clock_t *', 'd'), ('clock_t', 'clock_count')]"
175,0,rgbUtoGreyF_kernel,runs,"[('int', 'width'), ('int', 'height'), ('unsigned int *', 'rgbU'), ('float *', 'grey')]"
175,1,rgbUtoLab3F_kernel,runs,"[('int', 'width'), ('int', 'height'), ('float', 'gamma'), ('unsigned int *', 'rgbU'), ('float *', 'devL'), ('float *', 'devA'), ('float *', 'devB')]"
175,2,normalizeLab_kernel,runs,"[('uint', 'width'), ('uint', 'height'), ('float *', 'devL'), ('float *', 'devA'), ('float *', 'devB')]"
175,3,mirrorImage_kernel,runs,"[('uint', 'width'), ('uint', 'height'), ('uint', 'border'), ('uint', 'borderWidth'), ('uint', 'borderHeight'), ('float *', 'devInput'), ('float *', 'devOutput')]"
175,4,mirrorImage_kernel,runs,"[('uint', 'width'), ('uint', 'height'), ('uint', 'border'), ('uint', 'borderWidth'), ('uint', 'borderHeight'), ('int *', 'devInput'), ('int *', 'devOutput')]"
175,5,unMirrorImage_kernel,runs,"[('uint', 'width'), ('uint', 'height'), ('uint', 'border'), ('uint', 'borderWidth'), ('uint', 'borderHeight'), ('float *', 'devInput'), ('float *', 'devOutput')]"
175,6,quantizeImage_kernel,runs,"[('uint', 'width'), ('uint', 'height'), ('uint', 'nbins'), ('float *', 'devInput'), ('int *', 'devOutput')]"
175,11,FindMaxMinPerGrid,runs,"[('int', 'p_nGridSize'), ('int', 'p_nEigNum'), ('float *', 'p_devMax'), ('float *', 'p_devMin'), ('float *', 'p_devReduceMax'), ('float *', 'p_devReduceMin'), ('int', 'p_nMaxLevel')]"
175,22,combine_kernel,runs,"[('int', 'nPixels'), ('int', 'cuePitchInFloats'), ('float *', 'devBg'), ('float *', 'devCga'), ('float *', 'devCgb'), ('float *', 'devTg'), ('float *', 'devMpb'), ('float *', 'devCombinedg')]"
175,23,combine_kernel,runs,"[('int', 'nPixels'), ('int', 'cuePitchInFloats'), ('float *', 'devBg'), ('float *', 'devCga'), ('float *', 'devCgb'), ('float *', 'devTg'), ('float *', 'devMpb'), ('float *', 'devCombinedg')]"
175,26,integrateBins,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nbins'), ('int *', 'devImage'), ('int', 'binPitch'), ('int *', 'devIntegrals')]"
175,27,integrateBinsT,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nbins'), ('int', 'binPitch'), ('int *', 'devIntegrals')]"
175,35,fillImage,runs,"[('int', 'width'), ('int', 'height'), ('int', 'value'), ('int *', 'devOutput')]"
175,42,fillImage,runs,"[('int', 'width'), ('int', 'height'), ('int', 'value'), ('int *', 'devOutput')]"
175,47,assignInitialClusters,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nPixels'), ('int', 'clusterCount'), ('int *', 'cluster'), ('int', 'filterCount'), ('float *', 'responses'), ('int *', 'intResponses')]"
175,48,assignInitialClusters_64,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nPixels'), ('int', 'clusterCount'), ('int *', 'cluster'), ('int', 'filterCount'), ('float *', 'responses'), ('int *', 'intResponses')]"
175,49,findCentroids,runs,"[('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
175,50,findCentroids_64,runs,"[('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
175,51,findCentroidsAtomicFreeLocal,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
175,52,findCentroidsAtomicFreeLocal_64,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
175,53,findCentroidsAtomicFreeReduce,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
175,54,findCentroidsAtomicFreeReduce_64,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
175,55,finishCentroids,runs,"[('int *', 'centroidMass'), ('unsigned int *', 'centroidCount'), ('float *', 'centroids')]"
175,56,finishCentroids_64,runs,"[('int *', 'centroidMass'), ('unsigned int *', 'centroidCount'), ('float *', 'centroids')]"
175,59,findLabels,runs,"[('int', 'nPixels'), ('int', 'filterCount'), ('int', 'clusterCount'), ('float *', 'responses'), ('float *', 'centroids'), ('int *', 'clusters'), ('int *', 'changes')]"
175,60,findDiffLabels,runs,"[('float *', 'devDiff'), ('int', 'diffPitchInFloats'), ('int', 'nPoints'), ('int', 'nClusters'), ('int *', 'devClusters'), ('int *', 'devChanges')]"
175,61,findDiffLabelsAtomicFree,runs,"[('float *', 'devDiff'), ('int', 'diffPitchInFloats'), ('int', 'nPoints'), ('int', 'nClusters'), ('int *', 'devClusters'), ('int *', 'devChanges')]"
175,64,assignInitialClusters,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nPixels'), ('int', 'clusterCount'), ('int *', 'cluster'), ('int', 'filterCount'), ('float *', 'responses'), ('int *', 'intResponses')]"
175,65,findCentroids,runs,"[('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
175,66,findCentroidsAtomicFreeLocal,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
175,67,findCentroidsAtomicFreeReduce,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
175,68,finishCentroids,runs,"[('int *', 'centroidMass'), ('unsigned int *', 'centroidCount'), ('float *', 'centroids')]"
175,71,findLabels,runs,"[('int', 'nPixels'), ('int', 'filterCount'), ('int', 'clusterCount'), ('float *', 'responses'), ('float *', 'centroids'), ('int *', 'clusters'), ('int *', 'changes')]"
175,72,findDiffLabels,runs,"[('float *', 'devDiff'), ('int', 'diffPitchInFloats'), ('int', 'nPoints'), ('int', 'nClusters'), ('int *', 'devClusters'), ('int *', 'devChanges')]"
175,73,findDiffLabelsAtomicFree,runs,"[('float *', 'devDiff'), ('int', 'diffPitchInFloats'), ('int', 'nPoints'), ('int', 'nClusters'), ('int *', 'devClusters'), ('int *', 'devChanges')]"
175,74,assignInitialClusters,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nPixels'), ('int', 'clusterCount'), ('int *', 'cluster'), ('int', 'filterCount'), ('float *', 'responses'), ('int *', 'intResponses')]"
175,75,findCentroidsAtomicFreeLocal,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
175,76,findCentroidsAtomicFreeReduce,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
175,77,finishCentroids,runs,"[('int *', 'centroidMass'), ('unsigned int *', 'centroidCount'), ('float *', 'centroids')]"
175,80,findDiffLabelsAtomicFree,runs,"[('float *', 'devDiff'), ('int', 'diffPitchInFloats'), ('int', 'nPoints'), ('int', 'nClusters'), ('int *', 'devClusters'), ('int *', 'devChanges')]"
17502,6,cuSearchDoublet,runs,"[('const int *', 'nSpM'), ('const float *', 'spMmat'), ('const int *', 'nSpB'), ('const float *', 'spBmat'), ('const int *', 'nSpT'), ('const float *', 'spTmat'), ('const float *', 'deltaRMin'), ('const float *', 'deltaRMax'), ('const float *', 'cotThetaMax'), ('const float *', 'collisionRegionMin'), ('const float *', 'collisionRegionMax'), ('int *', 'nSpMcomp'), ('int *', 'nSpBcompPerSpM_Max'), ('int *', 'nSpTcompPerSpM_Max'), ('int *', 'nSpBcompPerSpM'), ('int *', 'nSpTcompPerSpM'), ('int *', 'McompIndex'), ('int *', 'BcompIndex'), ('int *', 'tmpBcompIndex'), ('int *', 'TcompIndex'), ('int *', 'tmpTcompIndex')]"
17504,201,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17504,342,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17510,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17510,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17512,1,scale_centroids,runs,"[('int', 'd'), ('int', 'k'), ('int *', 'counts'), ('double *', 'centroids')]"
17512,2,self_dots,runs,"[('int', 'n'), ('int', 'd'), ('double *', 'data'), ('double *', 'dots')]"
17512,3,all_dots,runs,"[('int', 'n'), ('int', 'k'), ('double *', 'data_dots'), ('double *', 'centroid_dots'), ('double *', 'dots')]"
17514,0,MultiplyGPUMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 't')]"
17514,1,MultiplyGPU,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 't')]"
17519,0,rand_init,runs,"[('long *', 'a'), ('long', 'seed')]"
1752,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1752,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1752,4,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
1752,5,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
1752,6,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
1752,7,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
1752,8,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
1752,9,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1752,10,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
1752,11,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
1752,12,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1752,13,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
1752,14,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1752,15,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
1752,16,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1752,17,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1752,18,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1752,19,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1752,20,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1752,21,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
1752,22,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1752,23,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1752,24,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1752,25,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1752,26,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1752,27,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1752,28,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1752,29,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
1752,30,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1752,31,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1752,32,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1752,33,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1752,34,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
1752,35,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
1752,36,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1752,37,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1752,38,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
1752,39,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
1752,40,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1752,41,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
1752,44,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
1752,47,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
1752,51,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1752,52,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1752,53,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
1752,55,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
1752,56,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
1752,57,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
1752,58,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
1752,59,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1752,60,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
1752,61,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
1752,62,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
1752,63,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
1752,64,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1752,65,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
1752,66,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1752,67,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
1752,68,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1752,69,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
1752,70,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
1752,71,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1752,72,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1752,73,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
1752,74,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1752,75,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1752,76,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1752,77,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1752,78,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1752,79,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1752,80,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1752,81,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
1752,82,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
1752,83,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
1752,84,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
1752,85,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
1752,86,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
1752,87,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
1752,88,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
1752,89,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
1752,90,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
1752,91,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1752,92,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1752,93,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1752,94,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1752,95,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1752,96,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
1752,97,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
1752,98,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1752,99,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
1752,100,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
1752,101,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1752,102,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
1752,103,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
1752,104,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
1752,107,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
1752,110,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
17526,0,square,runs,"[('int *', 'array'), ('int', 'n')]"
1753,0,kmeans_exp_kernel,runs,"[('float *', 'DIST'), ('float', 'pw')]"
1753,1,exp_kernel,runs,"[('float *', 'DIST'), ('float', 'pw')]"
1753,3,add_img,runs,"[('float *', 'image_padded'), ('float *', 'ave1'), ('float *', 'ave2'), ('int', 'nx'), ('int', 'ny'), ('int', 'nima')]"
1753,4,mul_ctf,runs,"[('float *', 'image'), ('int', 'nx'), ('int', 'ny'), ('float', 'defocus'), ('float', 'cs'), ('float', 'voltage'), ('float', 'apix'), ('float', 'bfactor'), ('float', 'ampcont')]"
1753,11,complexmult_conj_kernal,runs,"[('float *', 'afft'), ('const float *', 'bfft'), ('int', 'totaltc')]"
1753,12,complexmult_kernal,runs,"[('float *', 'afft'), ('const float *', 'bfft'), ('int', 'totaltc')]"
1753,17,mult_kernel,runs,"[('float *', 'data'), ('const float', 'scale'), ('const int', 'realtc')]"
1753,18,mult_complex_eff_kernal,runs,"[('float *', 'data'), ('const float *', 'src_data'), ('const int', 'nx'), ('const int', 'nxy'), ('const int', 'size')]"
1753,19,mcfauto_kernal,runs,"[('const float *', 'data1'), ('float *', 'data2'), ('const int', 'totaltc')]"
1753,20,swap_middle_row,runs,"[('float *', 'data'), ('const int', 'num_threads'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'xodd'), ('const int', 'yodd'), ('const int', 'offset')]"
1753,21,swap_middle_column,runs,"[('float *', 'data'), ('const int', 'num_threads'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'xodd'), ('const int', 'yodd'), ('const int', 'offset')]"
1753,22,swap_bot_left_top_right,runs,"[('float *', 'data'), ('const int', 'num_threads'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'xodd'), ('const int', 'yodd'), ('const int', 'offset')]"
1753,23,swap_top_left_bot_right,runs,"[('float *', 'data'), ('const int', 'num_threads'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'xodd'), ('const int', 'yodd'), ('const int', 'offset')]"
1753,24,middle_to_right,runs,"[('float *', 'data'), ('const int', 'nx'), ('const int', 'ny')]"
1753,25,middle_to_top,runs,"[('float *', 'data'), ('const int', 'nx'), ('const int', 'ny')]"
1753,26,subtract_kernal,runs,"[('float *', 'data'), ('float', 'f'), ('const int', 'totaltc')]"
1753,28,column_sum,runs,"[('const float *', 'data'), ('float *', 'sum'), ('int', 'nx'), ('int', 'ny'), ('int', 'num_threads'), ('int', 'offset')]"
1753,29,rotate_180,runs,"[('float *', 'data'), ('int', 'nx'), ('int', 'nxy'), ('int', 'offset'), ('unsigned int', 'size')]"
1753,30,mean_kernal,runs,"[('const float *', 'data'), ('float *', 'device_stats'), ('const int', 'size'), ('const int', 'num_calcs'), ('const int', 'num_threads'), ('const int', 'offset')]"
1753,31,meansquare_kernal,runs,"[('const float *', 'data'), ('float *', 'device_stats'), ('const int', 'size'), ('const int', 'num_calcs'), ('const int', 'num_threads'), ('const int', 'offset')]"
1753,32,sumup_kernal,runs,"[('const float *', 'data'), ('float *', 'device_stats'), ('const int', 'size'), ('const int', 'dim2size'), ('const int', 'num_threads'), ('const int', 'offset')]"
1753,33,dot_cmp_kernaldm,runs,"[('const float *', 'data1'), ('const float *', 'data2'), ('const float *', 'dm'), ('float *', 'device_soln'), ('const int', 'size'), ('const int', 'num_threads'), ('const int', 'offset')]"
1753,34,dot_cmp_kernal,runs,"[('const float *', 'data1'), ('const float *', 'data2'), ('float *', 'device_soln'), ('const int', 'size'), ('const int', 'num_threads'), ('const int', 'offset')]"
1753,35,dot_cmp_kernal_reduce,runs,"[('float *', 'g_idata1'), ('float *', 'g_idata2'), ('float *', 'g_odata')]"
1753,36,kernal_reduce,runs,"[('float *', 'g_idata'), ('float *', 'g_odata')]"
1753,37,norm_kernal,runs,"[('float *', 'data'), ('float', 'mean'), ('float', 'var'), ('int', 'totaltc')]"
1753,38,stats_kernal,runs,"[('const float *', 'data'), ('float *', 'device_soln'), ('const int', 'size'), ('const int', 'num_calcs'), ('const int', 'num_threads'), ('const int', 'offset')]"
1753,39,ccc_cmp_kernaldm,runs,"[('const float *', 'data1'), ('const float *', 'data2'), ('const float *', 'dm'), ('float *', 'device_soln'), ('const int', 'size'), ('const int', 'num_calcs'), ('const int', 'num_threads'), ('const int', 'offset')]"
1753,40,ccc_cmp_kernal,runs,"[('const float *', 'data1'), ('const float *', 'data2'), ('float *', 'device_soln'), ('const int', 'size'), ('const int', 'num_calcs'), ('const int', 'num_threads'), ('const int', 'offset')]"
1753,41,fsc_tomo_cmp_kernal,runs,"[('const float *', 'data1'), ('const float *', 'data2'), ('float *', 'device_soln'), ('const float', 'data1threshold'), ('const float', 'data2threshold'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'nz'), ('const int', 'offset')]"
1753,42,get_edgemean_kernal,runs,"[('const float *', 'data'), ('float *', 'edgemean'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'nz')]"
1753,43,tovalue_kernal,runs,"[('float *', 'data'), ('const float', 'value'), ('const int', 'totaltc')]"
1753,47,dsa_sumup_kernal,runs,"[('float *', 'results'), ('const int', 'inx'), ('const int', 'iny')]"
17539,7,refine_dilateFPPlaneDepthMapXpYp_kernel,runs,"[('float *', 'fpPlaneDepthMap'), ('int', 'fpPlaneDepthMap_p'), ('float *', 'maskMap'), ('int', 'maskMap_p'), ('int', 'width'), ('int', 'height'), ('int', 'xp'), ('int', 'yp'), ('float', 'fpPlaneDepth')]"
17539,16,refine_computeBestDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float3 *', 'isims'), ('int', 'isims_p'), ('float3 *', 'idpts'), ('int', 'idpts_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
17539,17,refine_fuseThreeDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float *', 'isimLst'), ('int', 'isimLst_p'), ('float *', 'idptLst'), ('int', 'idptLst_p'), ('float *', 'isimAct'), ('int', 'isimAct_p'), ('float *', 'idptAct'), ('int', 'idptAct_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
17539,79,generateGaussian_kernel,runs,"[('float *', 'og'), ('float', 'delta'), ('int', 'radius')]"
17540,0,my_memsetIdx,runs,"[('int *', 'dg_array'), ('int', 'size'), ('int', 'scale')]"
17541,0,initCurandStates,runs,"[('curandState *', 'randStates'), ('int', 'numThreads'), ('int', 'seed')]"
17541,5,cumulativeOffspringToAncestorKernel,runs,"[('const int *', 'cumulativeOffspring'), ('int *', 'ancestor'), ('int', 'numParticles')]"
17543,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
17543,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
17543,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
17543,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
17543,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
17543,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
17543,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
17543,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
17543,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
17543,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
17543,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
17543,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
17543,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
17543,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
17543,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
17543,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
17543,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
17547,204,cuda_debug_kernel,runs,[]
17550,0,calculateDotProductsAndReduceGPU,runs,"[('int *', 'vec1'), ('int *', 'vec2'), ('int *', 'reduced'), ('int', 'numElements')]"
17551,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17551,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17556,23,sync_deconv_groups,runs,[]
17556,39,sync_conv_groups,runs,[]
17563,0,matrixMul,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'aF'), ('int', 'aC'), ('int', 'bF'), ('int', 'bC'), ('int', 'cF'), ('int', 'cC')]"
17563,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
17564,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17564,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17567,0,helloFromGPU,runs,[]
17567,1,GPUVectorSum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'VECTOR_QNT')]"
17571,1,render_init,runs,"[('int', 'max_x'), ('int', 'max_y'), ('curandState *', 'rand_state')]"
17573,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17573,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17575,0,addArrayGPU,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17575,5,addTen,runs,"[('float *', 'd'), ('int', 'count')]"
17576,0,dist_calc,runs,"[('float *', 'coord'), ('int *', 'close_num'), ('int *', 'close_flag'), ('int *', 'close_idx'), ('int', 'num_atom'), ('int', 'num_atom2')]"
17576,3,sum_V,runs,"[('float *', 'V'), ('float *', 'V_s'), ('int', 'num_atom'), ('int', 'num_atom2'), ('int *', 'Ele'), ('float *', 'vdW')]"
17576,4,FF_calc,runs,"[('float *', 'q_S_ref_dS'), ('float *', 'WK'), ('float *', 'vdW'), ('int', 'num_q'), ('int', 'num_ele'), ('float', 'c1'), ('float', 'r_m'), ('float *', 'FF_table'), ('float', 'rho')]"
17576,5,create_FF_full_HyPred,runs,"[('float *', 'FF_table'), ('float *', 'V'), ('float', 'c2_F'), ('float *', 'c2_H'), ('int *', 'Ele'), ('float *', 'FF_full'), ('int', 'num_q'), ('int', 'num_ele'), ('int', 'num_atom'), ('int', 'num_atom2')]"
17576,6,create_FF_full_FoXS,runs,"[('float *', 'FF_table'), ('float *', 'V'), ('float', 'c2'), ('int *', 'Ele'), ('float *', 'FF_full'), ('int', 'num_q'), ('int', 'num_ele'), ('int', 'num_atom'), ('int', 'num_atom2')]"
17576,7,create_FF_full_FoXS_surf_grad,runs,"[('float *', 'FF_table'), ('float *', 'V'), ('float', 'c2'), ('int *', 'Ele'), ('float *', 'FF_full'), ('float *', 'surf_grad'), ('int', 'num_q'), ('int', 'num_ele'), ('int', 'num_atom'), ('int', 'num_atom2')]"
17576,18,sum_S_calc,runs,"[('float *', 'S_calcc'), ('float *', 'f_ptxc'), ('float *', 'f_ptyc'), ('float *', 'f_ptzc'), ('float *', 'S_calc'), ('float *', 'Aq'), ('float *', 'q_S_ref_dS'), ('int', 'num_q'), ('int', 'num_atom'), ('int', 'num_atom2'), ('float', 'alpha'), ('float', 'k_chi'), ('float *', 'sigma2')]"
17576,19,force_calc,runs,"[('float *', 'Force'), ('int', 'num_atom'), ('int', 'num_q'), ('float *', 'f_ptxc'), ('float *', 'f_ptyc'), ('float *', 'f_ptzc'), ('int', 'num_atom2'), ('int', 'num_q2'), ('int *', 'Ele'), ('float', 'force_ramp')]"
17576,20,force_calc_EMA,runs,"[('float *', 'Force'), ('double *', 'Force_old'), ('int', 'num_atom'), ('int', 'num_q'), ('float *', 'f_ptxc'), ('float *', 'f_ptyc'), ('float *', 'f_ptzc'), ('int', 'num_atom2'), ('int', 'num_q2'), ('int *', 'Ele'), ('double', 'EMA_norm'), ('float', 'force_ramp')]"
17580,35,sync_ssim_conv_groups,runs,[]
17580,71,sync_conv_groups,runs,[]
17580,132,sync_gdn_groups,runs,[]
17581,4,knapsackGPU,runs,"[('int *', 'dp'), ('int', 'row'), ('int *', 'd_value'), ('int *', 'd_weight'), ('int', 'capacity')]"
17581,5,knapsackGPU2,runs,"[('int *', 'dp'), ('int *', 'd_value'), ('int *', 'd_weight'), ('int', 'capacity'), ('int', 'n')]"
17581,6,sharpeningFilter,runs,"[('unsigned char *', 'srcImage'), ('unsigned char *', 'dstImage'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('int', 'channel')]"
17581,17,boxFilter,runs,"[('unsigned char *', 'srcImage'), ('unsigned char *', 'dstImage'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('int', 'channel')]"
17581,18,kernel,runs,"[('float *', 'x'), ('int', 'n')]"
17581,19,medianFilter,runs,"[('unsigned char *', 'srcImage'), ('unsigned char *', 'dstImage'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('int', 'channel')]"
17581,20,naive_normalized_cross_correlation,runs,"[('float *', 'd_response'), ('unsigned char *', 'd_original'), ('unsigned char *', 'd_template'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_height'), ('int', 'template_half_width'), ('int', 'template_width'), ('int', 'template_size'), ('float', 'template_mean')]"
17581,21,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
17581,22,naive_normalized_cross_correlation,runs,"[('float *', 'd_response'), ('unsigned char *', 'd_original'), ('unsigned char *', 'd_template'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_height'), ('int', 'template_half_width'), ('int', 'template_width'), ('int', 'template_size'), ('float', 'template_mean')]"
17581,23,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
17581,24,device_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17581,25,gpu_matrix_mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
17581,26,gpu_square_matrix_mult,runs,"[('int *', 'd_a'), ('int *', 'd_b'), ('int *', 'd_result'), ('int', 'n')]"
17581,27,gpu_matrix_transpose,runs,"[('int *', 'mat_in'), ('int *', 'mat_out'), ('unsigned int', 'rows'), ('unsigned int', 'cols')]"
17581,28,increment_kernel,runs,"[('int *', 'g_data'), ('int', 'inc_value')]"
17581,29,vectorAddGPU,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'N')]"
17581,30,laplacianFilter,runs,"[('unsigned char *', 'srcImage'), ('unsigned char *', 'dstImage'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
176,43,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
176,44,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
176,45,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
176,46,kArgMaxColumnwise,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
176,47,kArgMaxRowwise,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
176,48,kArgMinColumnwise,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
176,49,kArgMinRowwise,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
176,50,kMultiSoftmaxCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('float *', 'top5Probs'), ('const int', 'numCases'), ('const int', 'numOut'), ('const int', 'setSize')]"
176,54,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
17610,13,gaussdensity_direct_tex,runs,"[('int', 'natoms'), ('const float4 *', 'xyzr'), ('const float4 *', 'colors'), ('float', 'gridspacing'), ('unsigned int', 'z'), ('float *', 'densitygrid'), ('float3 *', 'voltexmap'), ('float', 'invisovalue')]"
17610,14,gaussdensity_direct_alt,runs,"[('int', 'natoms'), ('const float4 *', 'xyzr'), ('float', 'gridspacing'), ('unsigned int', 'z'), ('float *', 'densitygrid')]"
17610,16,sortAtomsGenCellListsAlt,runs,"[('unsigned int', 'natoms'), ('const float4 *', 'xyzr_d'), ('const float4 *', 'color_d'), ('const unsigned int *', 'atomIndex_d'), ('unsigned int *', 'sorted_atomIndex_d'), ('const unsigned int *', 'atomHash_d'), ('float4 *', 'sorted_xyzr_d'), ('float4 *', 'sorted_color_d'), ('uint2 *', 'cellStartEnd_d')]"
17611,7,refine_dilateFPPlaneDepthMapXpYp_kernel,runs,"[('float *', 'fpPlaneDepthMap'), ('int', 'fpPlaneDepthMap_p'), ('float *', 'maskMap'), ('int', 'maskMap_p'), ('int', 'width'), ('int', 'height'), ('int', 'xp'), ('int', 'yp'), ('float', 'fpPlaneDepth')]"
17611,16,refine_computeBestDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float3 *', 'isims'), ('int', 'isims_p'), ('float3 *', 'idpts'), ('int', 'idpts_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
17611,17,refine_fuseThreeDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float *', 'isimLst'), ('int', 'isimLst_p'), ('float *', 'idptLst'), ('int', 'idptLst_p'), ('float *', 'isimAct'), ('int', 'isimAct_p'), ('float *', 'idptAct'), ('int', 'idptAct_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
17611,78,generateGaussian_kernel,runs,"[('float *', 'og'), ('float', 'delta'), ('int', 'radius')]"
17617,3,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
17623,80,createLookupKernel,runs,"[('const int *', 'inds'), ('int', 'total'), ('int *', 'output')]"
17623,100,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
17623,101,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
17623,102,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
17632,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
17632,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
17632,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17632,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17632,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
17633,0,_slowKernel,runs,"[('char *', 'ptr'), ('int', 'sz')]"
17643,1,yoloKernel,runs,"[('const int', 'n'), ('const float *', 'input'), ('float *', 'output'), ('const int *', 'anchors'), ('int', 'anchor_num'), ('int', 'classes'), ('int', 'height'), ('int', 'width'), ('float', 'down_stride'), ('float', 'thresh')]"
17647,0,x6,runs,"[('float *', 'x7'), ('float *', 'x8'), ('float *', 'x9'), ('int', 'x10')]"
17647,1,x6,runs,"[('float *', 'x7'), ('float *', 'x8'), ('float *', 'x9'), ('int', 'x10')]"
17647,2,x15,runs,"[('float *', 'x16'), ('float *', 'x17'), ('float *', 'x18'), ('int', 'x19')]"
17647,3,x24,runs,"[('float *', 'x25'), ('float *', 'x26'), ('float *', 'x27'), ('int', 'x28')]"
17647,4,x33,runs,"[('float *', 'x34'), ('float *', 'x35'), ('float *', 'x36'), ('int', 'x37')]"
17647,5,x3,runs,"[('int *', 'x4'), ('int', 'x5'), ('int', 'x6')]"
17647,6,x2,runs,"[('float *', 'x3'), ('float', 'x4'), ('int', 'x5')]"
17655,5,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
17655,6,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
17655,7,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
17655,8,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
17659,5,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
17659,6,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
17659,7,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
17659,8,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
17659,9,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
17659,10,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
17659,11,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
17659,12,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
17659,13,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
17659,14,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
17659,15,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
17659,16,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
17659,17,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
17659,18,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
17659,19,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('float *', 'dist'), ('int *', 'idx'), ('float *', 'val')]"
17661,90,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
17661,103,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
17661,104,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
17661,105,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
17661,106,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
17661,184,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
17662,0,_slowKernel,runs,"[('char *', 'ptr'), ('int', 'sz')]"
17667,19,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
17667,20,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
17667,21,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
17671,0,test,runs,[]
17671,3,ReferenceGemm_kernel,runs,"[('int', 'M'), ('int', 'N'), ('int', 'K'), ('float', 'alpha'), ('float const *', 'A'), ('int', 'lda'), ('float const *', 'B'), ('int', 'ldb'), ('float', 'beta'), ('float *', 'C'), ('int', 'ldc')]"
17672,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17672,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17673,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17673,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17675,5,update_priority,runs,"[('int *', 'new_priority'), ('int', 'n_selected'), ('const int *', 'new_idx'), ('int', 'n_ws'), ('const int *', 'idx'), ('const int *', 'priority')]"
17675,6,emptyMarkerKernel,runs,[]
17675,8,postprocess_matrix,runs,"[('float *', 'matrix'), ('long *', 'long_indices'), ('int *', 'indices'), ('unsigned int', 'N_POINTS'), ('unsigned int', 'K')]"
17681,1,kernel_updateFullMatrix,runs,"[('float *', 'device_fullMatrix'), ('float *', 'B'), ('float *', 'V'), ('float *', 'Cm'), ('float *', 'Em'), ('float *', 'Rm'), ('float', 'dt'), ('unsigned int', 'nComp')]"
17681,2,kernel_forwardElimination,runs,"[('float *', 'fullMatrix'), ('float *', 'B'), ('unsigned int', 'nComp')]"
17686,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
17687,12,kernel_Phi4_Phi6,runs,"[('const int', 'N'), ('double *', 't'), ('double *', 'q'), ('const double', 'lambda'), ('const double', 'g')]"
17687,13,kernelAddMullSqr,runs,"[('const int', 'N'), ('double *', 'S'), ('double *', 'A'), ('double', 'm')]"
17687,14,kernelCulcRhoReal,runs,"[('const int', 'N'), ('double *', 'rho'), ('double *', 'q'), ('double *', 'p'), ('const double', 'lambda'), ('const double', 'g')]"
17687,16,kernelSyncBuf,runs,"[('double *', 'A'), ('double *', 'A0')]"
17687,17,kernelGetOmega,runs,"[('const int', 'N'), ('double *', 'omega'), ('double *', 'kSqr'), ('const double', 'sigma2'), ('const double', 'sigma4'), ('const double', 'lambda'), ('const double', 'g')]"
17687,20,kernelGetPhi2,runs,"[('const int', 'N'), ('double *', 'T'), ('double *', 'q')]"
17687,21,kernelGetPhi3,runs,"[('const int', 'N'), ('double *', 'T'), ('double *', 'q')]"
17687,22,kernelGetPhi5,runs,"[('const int', 'N'), ('double *', 'T'), ('double *', 'q')]"
1769,0,wlcss_cuda_kernel,runs,"[('int32_t *', 'd_mss'), ('int32_t *', 'd_mss_offsets'), ('int32_t *', 'd_ts'), ('int32_t *', 'd_ss'), ('int32_t *', 'd_tlen'), ('int32_t *', 'd_toffsets'), ('int32_t *', 'd_slen'), ('int32_t *', 'd_soffsets'), ('int32_t *', 'd_params')]"
1769,1,wlcss_cuda_kernel,runs,"[('int32_t *', 'd_mss'), ('int32_t *', 'd_mss_offsets'), ('int32_t *', 'd_ts'), ('int32_t *', 'd_ss'), ('int32_t *', 'd_tlen'), ('int32_t *', 'd_toffsets'), ('int32_t *', 'd_slen'), ('int32_t *', 'd_soffsets'), ('int32_t *', 'd_params')]"
1769,2,wlcss_cuda_kernel,runs,"[('int32_t *', 'd_mss'), ('int32_t *', 'd_mss_offsets'), ('int32_t *', 'd_ts'), ('int32_t *', 'd_ss'), ('int32_t *', 'd_tlen'), ('int32_t *', 'd_toffsets'), ('int32_t *', 'd_slen'), ('int32_t *', 'd_soffsets'), ('int32_t *', 'd_params'), ('int32_t *', 'd_tmp_windows'), ('int32_t *', 'd_tmp_windows_offsets')]"
1769,3,wlcss_cuda_kernel,runs,"[('int32_t *', 'd_mss'), ('int32_t *', 'd_mss_offsets'), ('int32_t *', 'd_ts'), ('int32_t *', 'd_ss'), ('int32_t *', 'd_tlen'), ('int32_t *', 'd_toffsets'), ('int32_t *', 'd_slen'), ('int32_t *', 'd_soffsets'), ('int32_t *', 'd_params'), ('int32_t *', 'd_tmp_windows'), ('int32_t *', 'd_tmp_windows_offsets'), ('int32_t *', 'd_3d_cost_matrix')]"
1769,4,wlcss_cuda_kernel,runs,"[('int32_t *', 'd_mss'), ('int32_t *', 'd_mss_offsets'), ('int32_t *', 'd_ts'), ('int32_t *', 'd_ss'), ('int32_t *', 'd_tlen'), ('int32_t *', 'd_toffsets'), ('int32_t *', 'd_slen'), ('int32_t *', 'd_soffsets'), ('int32_t *', 'd_params'), ('int32_t *', 'd_tmp_windows'), ('int32_t *', 'd_tmp_windows_offsets'), ('int32_t *', 'd_2d_cost_matrix')]"
1769,5,wlcss_cuda_kernel,runs,"[('int32_t *', 'd_mss'), ('int32_t *', 'd_mss_offsets'), ('int32_t *', 'd_ts'), ('int32_t *', 'd_ss'), ('int32_t *', 'd_tlen'), ('int32_t *', 'd_toffsets'), ('int32_t *', 'd_slen'), ('int32_t *', 'd_soffsets'), ('int32_t *', 'd_params'), ('int32_t *', 'd_tmp_windows'), ('int32_t *', 'd_tmp_windows_offsets')]"
1769,6,wlcss_cuda_kernel,runs,"[('int32_t *', 'd_mss'), ('int32_t *', 'd_mss_offsets'), ('int32_t *', 'd_ts'), ('int32_t *', 'd_ss'), ('int32_t *', 'd_tlen'), ('int32_t *', 'd_toffsets'), ('int32_t *', 'd_slen'), ('int32_t *', 'd_soffsets'), ('int32_t *', 'd_params'), ('int32_t *', 'd_tmp_windows'), ('int32_t *', 'd_tmp_windows_offsets'), ('int32_t *', 'd_3d_cost_matrix')]"
1769,7,wlcss_cuda_kernel,runs,"[('int32_t *', 'd_mss'), ('int32_t *', 'd_mss_offsets'), ('int32_t *', 'd_ts'), ('int32_t *', 'd_ss'), ('int32_t *', 'd_tlen'), ('int32_t *', 'd_toffsets'), ('int32_t *', 'd_slen'), ('int32_t *', 'd_soffsets'), ('int32_t *', 'd_params')]"
1769,8,wlcss_cuda_kernel,runs,"[('int32_t *', 'd_mss'), ('int32_t *', 'd_mss_offsets'), ('int32_t *', 'd_ts'), ('int32_t *', 'd_ss'), ('int32_t *', 'd_tlen'), ('int32_t *', 'd_toffsets'), ('int32_t *', 'd_slen'), ('int32_t *', 'd_soffsets'), ('int32_t *', 'd_params'), ('int32_t *', 'd_3d_cost_matrix')]"
1769,9,wlcss_cuda_kernel,runs,"[('int32_t *', 'd_mss'), ('int32_t *', 'd_mss_offsets'), ('int32_t *', 'd_ts'), ('int32_t *', 'd_ss'), ('int32_t *', 'd_tlen'), ('int32_t *', 'd_toffsets'), ('int32_t *', 'd_slen'), ('int32_t *', 'd_soffsets'), ('int32_t *', 'd_params'), ('int32_t *', 'd_tmp_windows'), ('int32_t *', 'd_tmp_windows_offsets'), ('int32_t *', 'd_2d_cost_matrix')]"
1769,10,wlcss_cuda_kernel,runs,"[('int32_t *', 'd_mss'), ('int32_t *', 'd_mss_offsets'), ('int32_t *', 'd_ts'), ('int32_t *', 'd_ss'), ('int32_t *', 'd_tlen'), ('int32_t *', 'd_toffsets'), ('int32_t *', 'd_slen'), ('int32_t *', 'd_soffsets'), ('int32_t *', 'd_params'), ('int32_t *', 'd_2d_cost_matrix')]"
17690,0,MMul,runs,"[('float *', 'm'), ('float *', 'd'), ('float *', 'p'), ('int', 'n')]"
17691,0,histo_MultiBlock,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
17691,1,histo_MonoBlock,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
17697,1,fill_u32,runs,"[('unsigned int *', 'y'), ('unsigned int', 'elem'), ('unsigned int', 'len')]"
17697,2,u8_to_f32,runs,"[('const unsigned char *', 'x'), ('float *', 'y'), ('unsigned int', 'len')]"
17697,3,u8_to_one_hot_f32,runs,"[('const unsigned char *', 'x'), ('unsigned int', 'nclasses'), ('float *', 'y'), ('unsigned int', 'len')]"
17697,4,broadcast,runs,"[('const float *', 'x'), ('float *', 'y'), ('unsigned int', 'c'), ('unsigned int', 'len')]"
17697,5,broadcast_backward,runs,"[('float *', 'dx'), ('const float *', 'dy'), ('unsigned int', 'c'), ('unsigned int', 'len')]"
17697,6,add,runs,"[('const float *', 'x1'), ('const float *', 'x2'), ('float *', 'y'), ('unsigned int', 'len')]"
17697,7,cross_entropy_forward,runs,"[('unsigned int', 'batch_size'), ('unsigned int', 'nclasses'), ('const float *', 'x'), ('const float *', 't'), ('float *', 'y')]"
17697,8,cross_entropy_backward,runs,"[('const float *', 'x'), ('float *', 'dx'), ('const float *', 't'), ('float *', 'dy'), ('unsigned int', 'len')]"
17697,9,reduce_sum_partial,runs,"[('const float *', 'input'), ('float *', 'output'), ('unsigned int', 'len')]"
17697,10,reduce_sum_final,runs,"[('const float *', 'x'), ('float *', 'y'), ('unsigned int', 'len')]"
17697,11,reverse_conv_filter,runs,"[('const float *', 'x'), ('float', 'beta'), ('float *', 'y'), ('unsigned int', 'filter_len'), ('unsigned int', 'len')]"
17697,12,sgd_with_momentum,runs,"[('float *', 'w'), ('const float *', 'dw'), ('float', 'learning_rate'), ('float', 'momentum'), ('float *', 'v'), ('unsigned int', 'len')]"
17698,0,square,runs,"[('int *', 'array'), ('int', 'n')]"
17704,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17704,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17714,2,kernel_looping,runs,"[('float *', 'point'), ('unsigned int', 'num')]"
17714,5,init,runs,"[('uint32_t *', 'v'), ('uint32_t', 'val'), ('uint32_t', 'n')]"
17714,21,analyze,runs,"[('const float *', 'input'), ('float *', 'sum'), ('int', 'numElements')]"
17714,22,sum,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
17718,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
17718,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
17718,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17718,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17718,31,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
1772,96,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
1772,97,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
1772,98,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
1772,99,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
1772,170,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
17724,8,matMultCUDA,runs,"[('const float *', 'a'), ('int', 'lda'), ('const float *', 'b'), ('int', 'ldb'), ('float *', 'c'), ('int', 'ldc'), ('int', 'n')]"
17725,1,kernel,runs,"[('cudaSurfaceObject_t', 'input'), ('cudaSurfaceObject_t', 'output'), ('int', 'width'), ('int', 'height')]"
17725,2,kernel,runs,"[('cudaSurfaceObject_t', 'input'), ('cudaSurfaceObject_t', 'output'), ('int', 'width'), ('int', 'height')]"
17727,0,dev_const,runs,"[('float *', 'px'), ('float', 'k')]"
17727,8,uint_arithm,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('unsigned int', 'u1'), ('unsigned int', 'u2')]"
17727,9,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
17733,0,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17733,1,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17733,2,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17733,9,kernel,runs,[]
17733,10,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
17733,11,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
17733,14,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
17733,15,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17733,17,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17733,18,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
17733,19,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
17733,20,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17733,21,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
17733,22,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17733,24,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
17752,0,SHelloWorld,runs,[]
17752,4,RPkernel,runs,"[('int', 'k'), ('int', 'n'), ('float *', 'sub_searchPoints'), ('float *', 'referencePoints'), ('float *', 'dist')]"
17752,5,SPkernel,runs,"[('int', 'k'), ('int', 'm'), ('int', 'n'), ('float *', 'searchPoints'), ('float *', 'referencePoints'), ('int *', 'indices')]"
17752,6,kernel,runs,"[('int', 'k'), ('int', 'n'), ('float *', 'sub_searchPoints'), ('float *', 'referencePoints'), ('float *', 'dist')]"
17752,7,kernel,runs,"[('int', 'k'), ('int', 'm'), ('int', 'n'), ('float *', 'searchPoints'), ('float *', 'referencePoints'), ('int *', 'indices')]"
17752,8,kernel,runs,"[('int', 'k'), ('int', 'n'), ('float *', 'sub_searchPoints'), ('float *', 'referencePoints'), ('float *', 'dist')]"
17752,10,kernel1,runs,"[('int', 'k'), ('int', 'm'), ('int', 'n'), ('float *', 'searchPoints'), ('float *', 'referencePoints'), ('int *', 'indices')]"
17752,11,kernel2,runs,"[('int', 'k'), ('int', 'n'), ('float *', 'sub_searchPoints'), ('float *', 'referencePoints'), ('float *', 'dist')]"
17752,12,RPkernel,runs,"[('int', 'k'), ('int', 'n'), ('float *', 'sub_searchPoints'), ('float *', 'referencePoints'), ('float *', 'dist')]"
17752,13,SPkernel,runs,"[('int', 'k'), ('int', 'm'), ('int', 'n'), ('float *', 'searchPoints'), ('float *', 'referencePoints'), ('int *', 'indices')]"
17752,14,kernel4,runs,"[('int', 'k'), ('int', 'n'), ('int', 'bias'), ('float *', 'searchPoints'), ('float *', 'referencePoints'), ('float *', 'dist')]"
17756,8,add,runs,"[('float *', 'vec_a'), ('float *', 'vec_b'), ('float *', 'vec_c'), ('int', 'n')]"
17758,11,write_to_surface,runs,"[('const float *', 'data'), ('cudaSurfaceObject_t', 'surface'), ('const int', 'width'), ('const int', 'height')]"
17761,0,LoadStoreViaSharedMemory,runs,"[('int *', 'In'), ('int *', 'Out')]"
17761,1,CudaImageSmooth,runs,"[('unsigned char *', 'In'), ('unsigned char *', 'Out'), ('int', 'width'), ('int', 'height'), ('int', 'fsize')]"
17761,2,MatrixMult,runs,"[('int *', 'M'), ('int *', 'N'), ('int *', 'P'), ('int', 'width')]"
17762,0,matrixAddKernel,runs,"[('double *', 'c'), ('const double *', 'a'), ('const double *', 'b')]"
17762,1,matrixSubtractKernel,runs,"[('double *', 'c'), ('const double *', 'a'), ('const double *', 'b')]"
17762,2,matrixMultiplyKernel,runs,"[('double *', 'c'), ('const double *', 'a'), ('const double *', 'b')]"
17762,3,matrixDivideKernel,runs,"[('double *', 'c'), ('const double *', 'a'), ('const double *', 'b')]"
17763,1,render_init,runs,"[('int', 'max_x'), ('int', 'max_y'), ('curandState *', 'rand_state')]"
17763,4,hello_kernel,runs,[]
17763,5,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17763,6,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b'), ('int', 'size')]"
17763,7,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
17763,8,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17763,9,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
17763,10,stencil_1d,runs,"[('int *', 'in'), ('int *', 'out')]"
1777,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
1777,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
17771,6,set_volume_to_constant,runs,"[('float *', 'out'), ('float', 'value')]"
17771,19,kernel_normalize_and_add_to_output,runs,"[('float *', 'dev_vol_in'), ('float *', 'dev_vol_out'), ('float *', 'dev_accumulate_weights'), ('float *', 'dev_accumulate_values')]"
17771,30,magnitude_threshold_kernel,runs,"[('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z'), ('float', 'gamma')]"
17771,31,gradient_and_subtract_kernel,runs,"[('float *', 'in'), ('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z')]"
17771,32,multiply_by_beta_kernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'beta')]"
17771,33,subtract_kernel,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out')]"
17780,0,kern_vec_add_,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'r'), ('size_t', 'dim')]"
17781,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
17781,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
17781,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17781,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
17781,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
17786,0,cudaKernel,runs,"[('int *', 'n'), ('int', 'limit')]"
178,0,_GEFrkernel_cuda,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float *', 'dev_recon'), ('float *', 'dev_G'), ('float *', 'dev_E'), ('float *', 'dev_F')]"
178,1,_sGkernel_cuda,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float *', 'dev_G'), ('float *', 'dev_suma')]"
178,2,_weightInnerkernel_cuda,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float', 'beta'), ('float *', 'dev_F'), ('float *', 'dev_G'), ('float *', 'dev_wg8'), ('float *', 'dev_recon')]"
178,3,_weightTopkernel_cuda,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float', 'beta'), ('float *', 'dev_F'), ('float *', 'dev_G'), ('float *', 'dev_wg5'), ('float *', 'dev_recon')]"
178,4,_weightBottomkernel_cuda,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float', 'beta'), ('float *', 'dev_F'), ('float *', 'dev_G'), ('float *', 'dev_wg5'), ('float *', 'dev_recon')]"
178,5,_weightLeftkernel_cuda,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float', 'beta'), ('float *', 'dev_F'), ('float *', 'dev_G'), ('float *', 'dev_wg5'), ('float *', 'dev_recon')]"
178,6,_weightRightkernel_cuda,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float', 'beta'), ('float *', 'dev_F'), ('float *', 'dev_G'), ('float *', 'dev_wg5'), ('float *', 'dev_recon')]"
178,7,_weightTLeftkernel_cuda,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float', 'beta'), ('float *', 'dev_F'), ('float *', 'dev_G'), ('float *', 'dev_wg3'), ('float *', 'dev_recon')]"
178,8,_weightTRightkernel_cuda,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float', 'beta'), ('float *', 'dev_F'), ('float *', 'dev_G'), ('float *', 'dev_wg3'), ('float *', 'dev_recon')]"
178,9,_weightBLeftkernel_cuda,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float', 'beta'), ('float *', 'dev_F'), ('float *', 'dev_G'), ('float *', 'dev_wg3'), ('float *', 'dev_recon')]"
178,10,_weightBRightkernel_cuda,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float', 'beta'), ('float *', 'dev_F'), ('float *', 'dev_G'), ('float *', 'dev_wg3'), ('float *', 'dev_recon')]"
178,11,_kernelpp_cuda,runs,"[('int', 'num_projections'), ('float', 'mov'), ('int', 'num_pixels'), ('int', 'num_grid'), ('int', 'num_slices'), ('float *', 'dev_gridx'), ('float *', 'dev_gridy'), ('float *', 'dev_suma'), ('float *', 'dev_E'), ('float *', 'dev_data'), ('float *', 'dev_recon'), ('float *', 'dev_theta')]"
178,12,_kernel_clearsuma_cuda,runs,"[('int', 'num_grid'), ('float *', 'dev_suma')]"
178,13,_kernel_clearsuna_EFG,runs,"[('int', 'num_slices'), ('int', 'num_grid'), ('float *', 'dev_EFG')]"
17803,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17803,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17806,6,set_volume_to_constant,runs,"[('float *', 'out'), ('float', 'value')]"
17806,19,kernel_normalize_and_add_to_output,runs,"[('float *', 'dev_vol_in'), ('float *', 'dev_vol_out'), ('float *', 'dev_accumulate_weights'), ('float *', 'dev_accumulate_values')]"
17806,30,magnitude_threshold_kernel,runs,"[('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z'), ('float', 'gamma')]"
17806,31,gradient_and_subtract_kernel,runs,"[('float *', 'in'), ('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z')]"
17806,32,multiply_by_beta_kernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'beta')]"
17806,33,subtract_kernel,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out')]"
17807,0,BFS_UNIFIED,runs,"[('int', 'source'), ('int *', 'edges'), ('int *', 'dest'), ('int *', 'label'), ('int *', 'visited'), ('int *', 'c_frontier_tail'), ('int *', 'c_frontier'), ('int *', 'p_frontier_tail'), ('int *', 'p_frontier')]"
17807,1,device_BFS,runs,"[('const int *', 'edges'), ('const int *', 'dests'), ('int *', 'labels'), ('int *', 'visited'), ('int *', 'c_frontier_tail'), ('int *', 'c_frontier'), ('int *', 'p_frontier_tail'), ('int *', 'p_frontier')]"
17807,2,frontier_init_kernel,runs,"[('int *', 'p_frontier_tail_d'), ('int *', 'c_frontier_tail_d'), ('int *', 'p_frontier_d'), ('int *', 'visited_d'), ('int *', 'label_d'), ('int', 'source')]"
17807,3,frontier_tail_swap_kernel,runs,"[('int *', 'p_frontier_tail_d'), ('int *', 'c_frontier_tail_d')]"
17807,4,BFS_Bqueue_kernel,runs,"[('int *', 'p_frontier'), ('int *', 'p_frontier_tail'), ('int *', 'c_frontier'), ('int *', 'c_frontier_tail'), ('int *', 'edges'), ('int *', 'dest'), ('int *', 'label'), ('int *', 'visited')]"
17807,5,frontier_init_kernel,runs,"[('int *', 'p_frontier_tail_d'), ('int *', 'c_frontier_tail_d'), ('int *', 'p_frontier_d'), ('int *', 'visited_d'), ('int *', 'label_d'), ('int', 'source')]"
17807,6,frontier_tail_swap_kernel,runs,"[('int *', 'p_frontier_tail_d'), ('int *', 'c_frontier_tail_d')]"
17807,7,BFS_Bqueue_kernel,runs,"[('int *', 'p_frontier'), ('int *', 'p_frontier_tail'), ('int *', 'c_frontier'), ('int *', 'c_frontier_tail'), ('int *', 'edges'), ('int *', 'dest'), ('int *', 'label'), ('int *', 'visited')]"
17807,8,BFS_Bqueue_kernel,runs,"[('unsigned int *', 'p_frontier'), ('unsigned int *', 'p_frontier_tail'), ('unsigned int *', 'c_frontier'), ('unsigned int *', 'c_frontier_tail'), ('unsigned int *', 'edges'), ('unsigned int *', 'dest'), ('unsigned int *', 'label'), ('unsigned int *', 'visited')]"
17816,2,cuda_sirt_pixels_kernel,runs,"[('int', 'p'), ('int', 'nx'), ('int', 'dx'), ('float *', 'recon'), ('const float *', 'data')]"
17816,4,cuda_sum_dist_compute,runs,"[('int', 'dy'), ('int', 'dx'), ('int', 'nx'), ('int', 'ny'), ('const int32_t *', 'ones'), ('uint32_t *', 'sum_dist'), ('int', 'p')]"
17816,5,cuda_rotate_internal_kernel,runs,"[('float *', 'dst'), ('const float *', 'src'), ('float', 'theta'), ('const int', 'nx'), ('const int', 'ny')]"
17821,198,cuda_debug_kernel,runs,[]
17824,4,init_rand,runs,"[('curandState *', 'states'), ('float *', 'randArr')]"
17825,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
17825,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
17825,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
17825,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
17825,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
17828,21,sync_deconv_groups,runs,[]
17828,37,sync_conv_groups,runs,[]
17829,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17829,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1785,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1785,1,dividKernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1785,2,mulKernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1785,3,subKernel,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b')]"
1785,4,compareWithOneKernel,runs,"[('float *', 'b'), ('const double *', 'a')]"
17853,4,unique_index_kernel,runs,"[('const char *', 'flag'), ('const int *', 'flag_inc_sum'), ('int *', 'unique_index'), ('int', 'num_elems')]"
17853,5,create_fpr_kernel,runs,"[('float *', 'tpr'), ('const int *', 'unique_index'), ('float *', 'fpr'), ('int', 'num_selected'), ('int', 'num_total')]"
17853,6,trapz_kernel,runs,"[('float *', 'y'), ('float *', 'x'), ('float *', 'auc'), ('int', 'num_selected')]"
17853,33,value_count_kernel_1,runs,"[('int', 'nnz'), ('const size_t *', 'hash_value_index_sort'), ('uint32_t *', 'new_hash_value_flag')]"
17853,45,update_kernel,runs,"[('uint32_t', 'hash_value_index_count_num'), ('int', 'embedding_vec_size'), ('const size_t *', 'deltaw_hash_value_index'), ('const float *', 'deltaw'), ('float *', 'hash_table_value')]"
17853,75,fm_order2_kernel,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'batch_size'), ('int', 'slot_num'), ('int', 'emb_vec_size')]"
17853,76,fm_order2_dgrad_kernel,runs,"[('const float *', 'in'), ('const float *', 'top_grad'), ('float *', 'dgrad'), ('int', 'batch_size'), ('int', 'slot_num'), ('int', 'emb_vec_size')]"
17862,21,sync_deconv_groups,runs,[]
17862,37,sync_conv_groups,runs,[]
17871,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17871,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17876,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17876,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
1789,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
1789,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1789,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
1789,3,set_zero_kernel,runs,"[('float *', 'src'), ('int', 'size')]"
1789,5,binarize_weights_mean_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary'), ('float *', 'mean_arr_gpu')]"
1789,8,calc_avg_activation_kernel,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'channels'), ('int', 'batches')]"
1789,9,assisted_activation_kernel,runs,"[('float', 'alpha'), ('float *', 'output'), ('float *', 'gt_gpu'), ('float *', 'a_avg_gpu'), ('int', 'size'), ('int', 'channels'), ('int', 'batches')]"
1789,10,assisted_activation2_kernel,runs,"[('float', 'alpha'), ('float *', 'output'), ('float *', 'gt_gpu'), ('float *', 'a_avg_gpu'), ('int', 'size'), ('int', 'channels'), ('int', 'batches')]"
1789,11,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
1789,12,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
1789,13,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
1789,15,im2col_align_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col'), ('const int', 'bit_align')]"
1789,22,transpose_uint32_kernel,runs,"[('uint32_t *', 'src'), ('uint32_t *', 'dst'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'src_align'), ('int', 'dst_align')]"
1789,23,transpose_uint32_kernel_2,runs,"[('uint32_t *', 'src'), ('uint32_t *', 'dst'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'src_align'), ('int', 'dst_align')]"
1789,24,repack_input_kernel,runs,"[('float *', 'input'), ('float *', 're_packed_input'), ('int', 'w'), ('int', 'h'), ('int', 'c')]"
1789,25,repack_input_kernel_2,runs,"[('float *', 'input'), ('float *', 're_packed_input'), ('int', 'w'), ('int', 'h'), ('int', 'c')]"
1789,35,convolve_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad')]"
1789,36,convolve_bin_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad'), ('int', 'new_lda'), ('float *', 'mean_arr_gpu')]"
1789,37,convolve_bin_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad'), ('int', 'new_lda'), ('float *', 'mean_arr_gpu')]"
17894,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
17894,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
17908,16,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
17908,19,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
17908,21,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
17908,23,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
17908,25,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
17908,27,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
17908,28,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
17908,30,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
17908,33,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
17908,36,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
17921,21,sync_deconv_groups,runs,[]
17921,37,sync_conv_groups,runs,[]
17925,2,substitution,runs,"[('int', 'i'), ('int', 'N'), ('float *', 'row'), ('float *', 'matrix'), ('float *', 'resultVector')]"
17935,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17935,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17936,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
17936,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
17938,0,render,runs,"[('float *', 'fb'), ('int', 'max_x'), ('int', 'max_y')]"
17939,0,maxpool,runs,"[('float *', 'input'), ('float *', 'output'), ('const int', 'input_size'), ('const int', 'filter_size')]"
17939,1,gemm,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('const float', 'alpha'), ('const float', 'beta'), ('float *', 'output'), ('const int', 'input_size')]"
17963,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17963,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17964,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
17964,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
17964,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
17964,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
17964,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
17967,1,mandelbrotLogicKernel,runs,"[('float *', 'data'), ('int', 'width'), ('int', 'height'), ('const int', 'maxIteration'), ('const double', 'middlea'), ('const double', 'middleb'), ('const double', 'rangea'), ('const double', 'rangeb')]"
17971,1,tissueGPU1Kernel,runs,"[('int *', 'd_tisspoints'), ('float *', 'd_dtt000'), ('float *', 'd_pt000'), ('float *', 'd_qt000'), ('int', 'nnt')]"
17971,2,tissueGPU4Kernel,runs,"[('int *', 'd_tisspoints'), ('float *', 'd_dtt000'), ('float *', 'd_qtp000'), ('float *', 'd_xt'), ('float *', 'd_rt'), ('int', 'nnt'), ('int', 'step'), ('float', 'diff')]"
17971,3,tissueGPU3Kernel,runs,"[('float *', 'd_tissxyz'), ('float *', 'd_vessxyz'), ('float *', 'd_pt000'), ('float *', 'd_qv000'), ('int', 'nnt'), ('int', 'nnv'), ('int', 'is2d'), ('float', 'req'), ('float', 'r2d')]"
17973,9,set_array_double,runs,"[('double *', 'a'), ('double', 'value'), ('size_t', 'len')]"
17973,10,STREAM_Copy,runs,"[('float *', 'a'), ('float *', 'b'), ('size_t', 'len')]"
17973,11,STREAM_Copy_double,runs,"[('double *', 'a'), ('double *', 'b'), ('size_t', 'len')]"
17973,12,STREAM_Copy_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('size_t', 'len')]"
17973,13,STREAM_Copy_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('size_t', 'len')]"
17973,14,STREAM_Scale,runs,"[('float *', 'a'), ('float *', 'b'), ('float', 'scale'), ('size_t', 'len')]"
17973,15,STREAM_Scale_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double', 'scale'), ('size_t', 'len')]"
17973,16,STREAM_Scale_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float', 'scale'), ('size_t', 'len')]"
17973,17,STREAM_Scale_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double', 'scale'), ('size_t', 'len')]"
17973,18,STREAM_Add,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('size_t', 'len')]"
17973,19,STREAM_Add_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('size_t', 'len')]"
17973,20,STREAM_Add_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('size_t', 'len')]"
17973,21,STREAM_Add_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('size_t', 'len')]"
17973,22,STREAM_Triad,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float', 'scalar'), ('size_t', 'len')]"
17973,23,STREAM_Triad_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double', 'scalar'), ('size_t', 'len')]"
17973,24,STREAM_Triad_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float', 'scalar'), ('size_t', 'len')]"
17973,25,STREAM_Triad_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double', 'scalar'), ('size_t', 'len')]"
17981,91,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
17981,104,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
17981,105,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
17981,106,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
17981,107,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
17981,185,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
17982,6,cuSearchDoublet,runs,"[('const int *', 'nSpM'), ('const float *', 'spMmat'), ('const int *', 'nSpB'), ('const float *', 'spBmat'), ('const int *', 'nSpT'), ('const float *', 'spTmat'), ('const float *', 'deltaRMin'), ('const float *', 'deltaRMax'), ('const float *', 'cotThetaMax'), ('const float *', 'collisionRegionMin'), ('const float *', 'collisionRegionMax'), ('int *', 'nSpMcomp'), ('int *', 'nSpBcompPerSpM_Max'), ('int *', 'nSpTcompPerSpM_Max'), ('int *', 'nSpBcompPerSpM'), ('int *', 'nSpTcompPerSpM'), ('int *', 'McompIndex'), ('int *', 'BcompIndex'), ('int *', 'tmpBcompIndex'), ('int *', 'TcompIndex'), ('int *', 'tmpTcompIndex')]"
17985,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
17985,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
17985,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
17985,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
17985,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
17989,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
17989,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
17999,0,hello,runs,"[('char *', 'a'), ('int *', 'b')]"
180,0,AddIntsCUDA,runs,"[('int *', 'a'), ('int *', 'b')]"
1800,0,KCInitRNGStates,runs,"[('const uint32_t *', 'gSeeds'), ('curandStateMRG32k3a_t *', 'gStates'), ('size_t', 'totalCount')]"
18001,4,count_uncovered_kernel,runs,"[('size_t', 'batch_size'), ('size_t', 'num_nodes'), ('uint32_t *', 'd_rrr_index'), ('uint32_t *', 'd_rrr_sets'), ('char *', 'd_mask'), ('uint32_t *', 'd_counters')]"
18001,5,update_mask_kernel,runs,"[('size_t', 'batch_size'), ('uint32_t *', 'd_rrr_index'), ('uint32_t *', 'd_rrr_sets'), ('char *', 'd_mask'), ('uint32_t', 'last_seed')]"
18001,6,sum_vectors,runs,"[('uint32_t *', 'src'), ('uint32_t *', 'dst'), ('size_t', 'N')]"
18004,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
18004,1,mult2Matrix,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P')]"
18004,2,mult2Matrix,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P')]"
18004,3,Blurrig,runs,"[('unsigned char *', 'output'), ('unsigned char *', 'input'), ('int', 'height'), ('int', 'width')]"
18004,4,greyConvertor,runs,"[('unsigned char *', 'output'), ('uchar3 const *', 'input'), ('const uint', 'height'), ('const uint', 'width')]"
18004,5,Convolution_2D_globalMemory,runs,"[('unsigned char *', 'imgInput'), ('unsigned char *', 'imgOutput'), ('const float *', 'mask'), ('int', 'height'), ('int', 'width'), ('int', 'channels')]"
18004,6,Convolution_2D_globalMemory,runs,"[('unsigned char *', 'imgInput'), ('unsigned char *', 'imgOutput'), ('const float *', 'mask'), ('int', 'height'), ('int', 'width'), ('int', 'channels')]"
18004,7,Convolution_2D_globalMemory,runs,"[('unsigned char *', 'imgInput'), ('unsigned char *', 'imgOutput'), ('const float *', 'mask'), ('int', 'height'), ('int', 'width'), ('int', 'channels')]"
18004,8,convolve,runs,"[('unsigned char *', 'imgInput'), ('float *', 'mask'), ('int', 'width'), ('int', 'height'), ('int', 'paddingX'), ('int', 'paddingY'), ('int', 'kWidth'), ('int', 'kHeight'), ('unsigned char *', 'imgOutput')]"
18004,9,pythagoras,runs,"[('unsigned char *', 'Gx'), ('unsigned char *', 'Gy'), ('unsigned char *', 'G'), ('unsigned char *', 'theta')]"
18004,11,convolve,runs,"[('unsigned char *', 'imgInput'), ('float *', 'mask'), ('int', 'width'), ('int', 'height'), ('int', 'paddingX'), ('int', 'paddingY'), ('int', 'kWidth'), ('int', 'kHeight'), ('unsigned char *', 'imgOutput')]"
18004,12,pythagoras,runs,"[('unsigned char *', 'Gx'), ('unsigned char *', 'Gy'), ('unsigned char *', 'G'), ('unsigned char *', 'theta')]"
18004,17,convolve,runs,"[('unsigned char *', 'imgInput'), ('int', 'width'), ('int', 'height'), ('int', 'paddingX'), ('int', 'paddingY'), ('int', 'kWidth'), ('int', 'kHeight'), ('unsigned int', 'offset'), ('unsigned char *', 'imgOutput')]"
18004,18,pythagoras,runs,"[('unsigned char *', 'Gx'), ('unsigned char *', 'Gy'), ('unsigned char *', 'G'), ('unsigned char *', 'theta')]"
18004,24,grayScale,runs,"[('unsigned char *', 'imgInput'), ('unsigned char *', 'imgOutput'), ('int', 'Row'), ('int', 'Col')]"
18020,1,scale_centroids,runs,"[('int', 'd'), ('int', 'k'), ('int *', 'counts'), ('double *', 'centroids')]"
18020,2,self_dots,runs,"[('int', 'n'), ('int', 'd'), ('double *', 'data'), ('double *', 'dots')]"
18020,3,all_dots,runs,"[('int', 'n'), ('int', 'k'), ('double *', 'data_dots'), ('double *', 'centroid_dots'), ('double *', 'dots')]"
18025,6,cuSearchDoublet,runs,"[('const int *', 'nSpM'), ('const float *', 'spMmat'), ('const int *', 'nSpB'), ('const float *', 'spBmat'), ('const int *', 'nSpT'), ('const float *', 'spTmat'), ('const float *', 'deltaRMin'), ('const float *', 'deltaRMax'), ('const float *', 'cotThetaMax'), ('const float *', 'collisionRegionMin'), ('const float *', 'collisionRegionMax'), ('int *', 'nSpMcomp'), ('int *', 'nSpBcompPerSpM_Max'), ('int *', 'nSpTcompPerSpM_Max'), ('int *', 'nSpBcompPerSpM'), ('int *', 'nSpTcompPerSpM'), ('int *', 'McompIndex'), ('int *', 'BcompIndex'), ('int *', 'tmpBcompIndex'), ('int *', 'TcompIndex'), ('int *', 'tmpTcompIndex')]"
18038,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
18038,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
1804,0,mandel_float,runs,"[('uchar4 *', 'ptr'), ('int', 'max_w'), ('int', 'max_h'), ('int', 'w'), ('int', 'h'), ('float', 'cx'), ('float', 'cy'), ('float', 'zoom'), ('int', 'iter_mult')]"
1804,1,mandel_double,runs,"[('uchar4 *', 'ptr'), ('int', 'max_w'), ('int', 'max_h'), ('int', 'w'), ('int', 'h'), ('double', 'cx'), ('double', 'cy'), ('double', 'zoom'), ('int', 'iter_mult')]"
18041,0,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
18041,1,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
18041,2,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
18041,7,kernel,runs,[]
18041,8,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
18041,9,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
18041,13,kernel,runs,"[('uchar4 *', 'ptr'), ('int', 'ticks')]"
18041,14,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
18041,16,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
18041,17,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
18041,18,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
18041,19,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
18041,20,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
18041,21,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
18041,23,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
18041,26,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
18041,27,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
18041,28,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
18042,171,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18042,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
18050,0,vectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
18050,1,matriMult,runs,"[('int *', 'm'), ('int *', 'n'), ('int *', 'p'), ('int', 'size')]"
18057,35,NormalizationExecutionKernel,runs,"[('unsigned char *', 'src'), ('float *', 'dst'), ('const int', 'size'), ('const float', 'alpha'), ('const float', 'beta'), ('const float', 'bias')]"
18057,38,getMaxPorb,runs,"[('const int', 'size'), ('const float *', 'class_prob'), ('const int', 'class_num'), ('float *', 'max_prob'), ('int *', 'idx'), ('int *', 'class_idx'), ('const int', 'conf_thresh')]"
18057,39,processBoxes,runs,"[('int', 'size'), ('const float *', 'src'), ('float *', 'dst'), ('const int', 'stridex'), ('const int', 'stridey')]"
18065,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
18065,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
18065,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
18065,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
18065,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
18068,0,square,runs,"[('float *', 'd_in'), ('float *', 'd_out')]"
18078,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18078,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
18078,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18078,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18078,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18078,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18078,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18078,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
18078,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
18078,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
18078,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
18078,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
18078,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
18078,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
18078,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
18078,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
18078,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
18081,12,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
18083,0,conv,runs,"[('fmap *', 'input'), ('int *', 'ip'), ('int *', 'weights'), ('int', 'R'), ('int', 'S'), ('fmap *', 'output'), ('int', 'Sx'), ('int', 'Sy'), ('int *', 'op'), ('int', 'Px'), ('int', 'Py')]"
18083,1,RELU,runs,"[('int *', 'ip'), ('int', 'N'), ('int', 'C'), ('int', 'H'), ('int', 'W')]"
18083,3,lineark,runs,"[('int *', 'ip'), ('int *', 'weight'), ('int *', 'op'), ('int', 'N'), ('int', 'M'), ('int', 'L')]"
18083,4,padding,runs,"[('int *', 'op'), ('int *', 'ip'), ('int', 'N'), ('int', 'C'), ('int', 'H'), ('int', 'W'), ('int', 'Py'), ('int', 'Px')]"
18086,0,cuda_filter2D,runs,"[('float *', 'dst'), ('float *', 'src'), ('float *', 'kernel'), ('int', 'src_width'), ('int', 'src_height'), ('int', 'kernel_rows'), ('int', 'kernel_cols')]"
18086,1,calc_psf_hat,runs,"[('float *', 'd_psf'), ('float *', 'd_psf_hat'), ('int', 'psf_rows'), ('int', 'psf_cols')]"
18086,2,cuda_multiply,runs,"[('float *', 'dst'), ('float *', 'src1'), ('float *', 'src2'), ('int', 'width'), ('int', 'height')]"
18086,3,cuda_divide,runs,"[('float *', 'dst'), ('float *', 'numerator'), ('float *', 'denominator'), ('int', 'width'), ('int', 'height')]"
18086,6,cuda_copyRegion,runs,"[('unsigned char *', 'dst'), ('unsigned char *', 'src'), ('int', 'stepDst'), ('int', 'stepSrc'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'src_width'), ('int', 'src_height'), ('int', 'dst_xoffset'), ('int', 'dst_yoffset'), ('int', 'dst_widthToCrop'), ('int', 'dst_heightToCrop'), ('int', 'src_xoffset'), ('int', 'src_yoffset'), ('int', 'src_widthToCrop'), ('int', 'src_heightToCrop'), ('int', 'numChannel')]"
18086,9,cuda_cosineDistance,runs,"[('double *', 'x'), ('double *', 'y'), ('int64_t', 'len'), ('double *', 'dot_product'), ('double *', 'norm_x'), ('double *', 'norm_y')]"
18093,0,kernelAddConstant,runs,"[('int *', 'g_a'), ('const int', 'b')]"
18093,4,kernelTestOpenmp,runs,"[('int *', 'dev_b'), ('int', 'tt')]"
18096,0,GPU_convolution,runs,"[('float *', 'channel'), ('float *', 'mask'), ('float *', 'result'), ('int', 'dimMask'), ('int', 'dimW'), ('int', 'dimH')]"
181,3,rho,runs,"[('float *', 'x'), ('int', 'size'), ('float', 'lambda')]"
181,17,subpixel_enchancement,runs,"[('float *', 'd0'), ('float *', 'c2'), ('float *', 'out'), ('int', 'size'), ('int', 'dim23'), ('int', 'disp_max')]"
181,19,Normalize_get_norm_,runs,"[('float *', 'input'), ('float *', 'norm'), ('int', 'size1'), ('int', 'size23'), ('int', 'size023')]"
181,27,remove_nonvisible,runs,"[('float *', 'y'), ('int', 'size'), ('int', 'size3')]"
181,28,remove_occluded,runs,"[('float *', 'y'), ('int', 'size'), ('int', 'size3')]"
181,29,remove_white,runs,"[('float *', 'x'), ('float *', 'y'), ('int', 'size')]"
181,30,copy_fill,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size'), ('int', 'in_size2'), ('int', 'in_size3'), ('int', 'out_size2'), ('int', 'out_size3')]"
181,31,cunn_SpatialLogSoftMax_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('int', 'feature_size'), ('int', 'spatial_size'), ('int', 'data_size'), ('float', 'constant')]"
181,32,cunn_SpatialLogSoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'feature_size'), ('int', 'spatial_size'), ('int', 'data_size')]"
18109,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
18109,1,cube,runs,"[('double *', 'd_out'), ('double *', 'd_in')]"
18112,1,timeTest,runs,[]
18122,0,initCurandStates,runs,"[('curandState *', 'randStates'), ('int', 'numThreads'), ('int', 'seed')]"
18122,5,cumulativeOffspringToAncestorKernel,runs,"[('const int *', 'cumulativeOffspring'), ('int *', 'ancestor'), ('int', 'numParticles')]"
18131,6,cuSearchDoublet,runs,"[('const int *', 'nSpM'), ('const float *', 'spMmat'), ('const int *', 'nSpB'), ('const float *', 'spBmat'), ('const int *', 'nSpT'), ('const float *', 'spTmat'), ('const float *', 'deltaRMin'), ('const float *', 'deltaRMax'), ('const float *', 'cotThetaMax'), ('const float *', 'collisionRegionMin'), ('const float *', 'collisionRegionMax'), ('int *', 'nSpMcomp'), ('int *', 'nSpBcompPerSpM_Max'), ('int *', 'nSpTcompPerSpM_Max'), ('int *', 'nSpBcompPerSpM'), ('int *', 'nSpTcompPerSpM'), ('int *', 'McompIndex'), ('int *', 'BcompIndex'), ('int *', 'tmpBcompIndex'), ('int *', 'TcompIndex'), ('int *', 'tmpTcompIndex')]"
18132,0,init1,runs,"[('uint32_t *', 'A'), ('uint32_t', 'size')]"
18132,1,initn,runs,"[('uint32_t *', 'A'), ('uint32_t', 'size'), ('uint32_t', 'n')]"
18132,2,initMult,runs,"[('uint32_t *', 'A'), ('uint32_t', 'size'), ('uint32_t', 'mult')]"
18132,3,calcAll,runs,"[('float *', 'w'), ('float *', 'b'), ('float *', 'v'), ('uint32_t *', 'wo'), ('uint32_t *', 'lo'), ('uint32_t *', 'ls'), ('uint32_t', 's')]"
18137,0,softmax_loss_kernel,runs,"[('float *', 'reduced_loss'), ('float *', 'predict'), ('float *', 'target'), ('float *', 'workspace'), ('int', 'batch_size'), ('int', 'num_outputs')]"
18137,1,init_one_vec,runs,"[('float *', 'd_one_vec'), ('size_t', 'length')]"
18138,0,mat_mul_gpu,runs,"[('float *', 'vec_one'), ('float *', 'vec_two'), ('float *', 'ret_vec'), ('int', 'vec_one_row'), ('int', 'vec_one_col'), ('int', 'vec_two_col')]"
18141,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
18149,7,BoxReciprocalGPU,runs,"[('double *', 'gpu_prefact'), ('double *', 'gpu_sumRnew'), ('double *', 'gpu_sumInew'), ('double *', 'gpu_energyRecip'), ('int', 'imageSize')]"
18151,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18151,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
18154,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18154,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
18180,0,kernel,runs,[]
18180,1,kernel,runs,[]
18180,2,kernel,runs,[]
18180,3,kernel,runs,[]
18187,1,render_init,runs,"[('int', 'mx'), ('int', 'my'), ('curandState *', 'randState'), ('int', 'seed')]"
18187,3,render_init,runs,"[('int', 'mx'), ('int', 'my'), ('curandState *', 'randState'), ('int', 'seed')]"
18195,0,addOffset,runs,"[('int *', 'dev_array'), ('int', 'length')]"
18197,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18197,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
18199,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18199,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
182,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
182,1,add_block,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
182,2,add_thread,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
182,3,dot,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
182,4,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
182,6,kernel,runs,[]
18200,0,matrixSigmoid,runs,"[('double *', 'a'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,1,matrixClip,runs,"[('double *', 'a'), ('double', 'min'), ('double', 'max'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,2,matrixMultiply,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc'), ('int', 'ac'), ('int', 'bc')]"
18200,3,matrixSubScalarInverse,runs,"[('double *', 'a'), ('double', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,4,matrixTranspose,runs,"[('double *', 'a'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,5,matrixAddScalar,runs,"[('double *', 'a'), ('double', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,6,matrixHadamard,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,7,matrixTanh,runs,"[('double *', 'a'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,8,matrixAdd,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,9,matrixSub,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,10,matrixSubScalar,runs,"[('double *', 'a'), ('double', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,11,matrixLogit,runs,"[('double *', 'a'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,12,matrixMultiplyScalar,runs,"[('double *', 'a'), ('double', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,13,matrixDivisionScalar,runs,"[('double *', 'a'), ('double', 'b'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18200,14,matrixExp,runs,"[('double *', 'a'), ('double *', 'c'), ('int', 'cr'), ('int', 'cc')]"
18210,0,convolution2d,runs,"[('float *', 'img'), ('float *', 'kernel'), ('float *', 'result'), ('int', 'n'), ('int', 'm'), ('int', 'kw'), ('int', 'kh'), ('int', 'out_n'), ('int', 'out_m'), ('bool', 'padding')]"
18210,1,cal_hist,runs,"[('float *', 'da'), ('int *', 'hist_da'), ('int', 'N'), ('int', 'M')]"
18210,2,mat_transpose,runs,"[('const float *', 'a'), ('float *', 'b'), ('int', 'n'), ('int', 'm')]"
18210,7,accumulate,runs,"[('float *', 'da'), ('float *', 'ans_device'), ('int', 'N')]"
18210,8,matrixMulKernel,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'width'), ('int', 'height')]"
18210,9,matmul,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c'), ('int', 'n'), ('int', 'm')]"
18210,10,matmul_traditional,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c'), ('int', 'n'), ('int', 'm')]"
18210,11,matmul_partition,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c'), ('int', 'n')]"
18210,12,matadd,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c'), ('int', 'n'), ('int', 'm')]"
18210,13,matadd_1d,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c'), ('int', 'n'), ('int', 'm')]"
18210,14,matadd_2d,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c'), ('int', 'n'), ('int', 'm')]"
18210,15,add,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c'), ('int', 'n')]"
18210,16,matadd,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c'), ('int', 'n'), ('int', 'm')]"
18210,18,showgrid,runs,[]
18210,19,nms_kernel,runs,"[('float *', 'bbox_dev'), ('unsigned long long *', 'mask_dev'), ('int', 'num_boxes'), ('int', 'col_blocks'), ('float', 'threshold')]"
18213,0,histogram_kernel,runs,"[('float *', 'I'), ('float *', 'minI'), ('float *', 'maxI'), ('float *', 'mask'), ('int', 'nbins'), ('int', 'c'), ('int', 'h'), ('int', 'w'), ('float *', 'hist')]"
18213,1,hist_remap2_kernel,runs,"[('float *', 'I'), ('int', 'nI'), ('float *', 'mI'), ('float *', 'histJ'), ('float *', 'cumJ'), ('float *', '_minJ'), ('float *', '_maxJ'), ('int', 'nbins'), ('float *', '_sortI'), ('int *', '_idxI'), ('float *', 'R'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
18213,4,avg_vote_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('int *', 'corrAB'), ('int', 'patch'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
18213,5,blend_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('float *', 'M'), ('float *', 'AP'), ('float', 'alpha'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
18213,6,patchmatch2_conv_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'AP'), ('float *', 'BP'), ('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int', 'patch'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
18213,7,patchmatch2_argmax_kernel,runs,"[('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int *', 'corrAB'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
18213,8,upsample_corr_kernel,runs,"[('int *', 'curr_corr'), ('int *', 'next_corr'), ('int', 'curr_h'), ('int', 'curr_w'), ('int', 'next_h'), ('int', 'next_w')]"
18213,10,Ring_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('float *', 'M'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
18213,11,Ring2_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('int *', 'mask'), ('int *', 'm'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
18213,12,patchmatch_r_conv_kernel,runs,"[('float *', 'input'), ('float *', 'target'), ('float *', 'conv'), ('int', 'patch'), ('int', 'stride'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
18213,13,patchmatch_r_argmax_kernel,runs,"[('float *', 'conv'), ('float *', 'target'), ('float *', 'match'), ('int *', 'correspondence'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
18215,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18215,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
18221,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
18221,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
18221,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
18221,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
18221,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
1823,0,compute_histogram,runs,"[('unsigned char *', 'data'), ('unsigned int *', 'histogram')]"
1823,1,dot,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,2,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,3,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,4,compute_histogram,runs,"[('unsigned char *', 'data'), ('unsigned int *', 'histogram')]"
1823,5,dot,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'temp'), ('int *', 'c')]"
1823,6,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
1823,7,dot,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,8,empty_kernel,runs,[]
1823,9,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,10,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,11,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,12,kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,19,kernel,runs,[]
1823,20,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
1823,21,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
1823,25,kernel,runs,"[('uchar4 *', 'ptr'), ('int', 'ticks')]"
1823,26,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,28,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,29,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
1823,30,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('unsigned int *', 'histo')]"
1823,31,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,32,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1823,33,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
1823,35,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
1823,38,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1823,39,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
1823,40,dot,runs,"[('int', 'size'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
18231,0,VecAddInt32,runs,"[('int32_t *', 'in0'), ('int32_t *', 'in1'), ('int32_t *', 'out'), ('int', 'cnt')]"
18231,1,VecAddFp32,runs,"[('float *', 'in0'), ('float *', 'in1'), ('float *', 'out'), ('int', 'cnt')]"
18231,2,VecSubInt32,runs,"[('int32_t *', 'in0'), ('int32_t *', 'in1'), ('int32_t *', 'out'), ('int', 'cnt')]"
18231,3,VecSubFp32,runs,"[('float *', 'in0'), ('float *', 'in1'), ('float *', 'out'), ('int', 'cnt')]"
18239,4,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
18239,5,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
18251,0,pw_copy_rc_cu_z,runs,"[('const double *', 'din'), ('double *', 'zout'), ('const int', 'n')]"
18251,1,pw_copy_cr_cu_z,runs,"[('const double *', 'zin'), ('double *', 'dout'), ('const int', 'n')]"
18251,2,pw_gather_cu_z,runs,"[('double *', 'pwcc'), ('const double *', 'c'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int *', 'ghatmap')]"
18251,3,pw_scatter_cu_z,runs,"[('double *', 'c'), ('const double *', 'pwcc'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int', 'nmaps'), ('const int *', 'ghatmap')]"
18257,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
18257,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
18257,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
18257,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
18257,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
18267,0,matrixMulGPU,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
18268,0,pw_copy_rc_cu_z,runs,"[('const double *', 'din'), ('double *', 'zout'), ('const int', 'n')]"
18268,1,pw_copy_cr_cu_z,runs,"[('const double *', 'zin'), ('double *', 'dout'), ('const int', 'n')]"
18268,2,pw_gather_cu_z,runs,"[('double *', 'pwcc'), ('const double *', 'c'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int *', 'ghatmap')]"
18268,3,pw_scatter_cu_z,runs,"[('double *', 'c'), ('const double *', 'pwcc'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int', 'nmaps'), ('const int *', 'ghatmap')]"
18277,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18277,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
18288,4,max_pool3d_forward,runs,"[('int', 'B'), ('int', 'N'), ('int', 'M'), ('int', 'C'), ('int', 'K'), ('const int *', 'nnIndex'), ('const int *', 'nnCount'), ('const float *', 'input'), ('float *', 'output'), ('int *', 'maxIndex')]"
18288,5,max_pool3d_backward,runs,"[('int', 'B'), ('int', 'N'), ('int', 'M'), ('int', 'C'), ('const int *', 'maxIndex'), ('const float *', 'gradOutput'), ('float *', 'gradInput')]"
18288,6,avg_pool3d_forward,runs,"[('int', 'B'), ('int', 'N'), ('int', 'M'), ('int', 'C'), ('int', 'K'), ('const int *', 'nnIndex'), ('const int *', 'nnCount'), ('const float *', 'input'), ('float *', 'output')]"
18288,7,avg_pool3d_backward,runs,"[('int', 'B'), ('int', 'N'), ('int', 'M'), ('int', 'C'), ('int', 'K'), ('const int *', 'nnIndex'), ('const int *', 'nnCount'), ('const float *', 'gradOutput'), ('float *', 'gradInput')]"
18288,8,mean_interpolate_forward,runs,"[('int', 'B'), ('int', 'N'), ('int', 'M'), ('int', 'C'), ('int', 'K'), ('const int *', 'nnIndex'), ('const int *', 'nnCount'), ('const float *', 'input'), ('float *', 'output')]"
18288,9,mean_interpolate_backward,runs,"[('int', 'B'), ('int', 'N'), ('int', 'M'), ('int', 'C'), ('int', 'K'), ('const int *', 'nnIndex'), ('const int *', 'nnCount'), ('const float *', 'gradOutput'), ('float *', 'gradInput')]"
18288,10,weighted_interpolate_forward,runs,"[('int', 'B'), ('int', 'N'), ('int', 'M'), ('int', 'C'), ('int', 'K'), ('const int *', 'nnIndex'), ('const int *', 'nnCount'), ('const float *', 'input'), ('const float *', 'weight'), ('float *', 'output')]"
18288,11,weighted_interpolate_backward,runs,"[('int', 'B'), ('int', 'N'), ('int', 'M'), ('int', 'C'), ('int', 'K'), ('const int *', 'nnIndex'), ('const int *', 'nnCount'), ('const float *', 'gradOutput'), ('const float *', 'weight'), ('float *', 'gradInput')]"
18288,12,depthwise_conv3d_forward,runs,"[('int', 'B'), ('int', 'N'), ('int', 'M'), ('int', 'C'), ('int', 'r'), ('int', 'K'), ('const int *', 'nnIndex'), ('const int *', 'nnCount'), ('const int *', 'binIndex'), ('const float *', 'input'), ('const float *', 'filter'), ('float *', 'output')]"
18288,13,depthwise_input_backward,runs,"[('int', 'B'), ('int', 'N'), ('int', 'M'), ('int', 'F'), ('int', 'C'), ('int', 'r'), ('int', 'K'), ('const int *', 'nnIndex'), ('const int *', 'nnCount'), ('const int *', 'binIndex'), ('const float *', 'input'), ('const float *', 'filter'), ('const float *', 'gradOutput'), ('float *', 'gradInput')]"
18288,14,depthwise_filter_backward,runs,"[('int', 'B'), ('int', 'N'), ('int', 'M'), ('int', 'F'), ('int', 'C'), ('int', 'r'), ('int', 'K'), ('const int *', 'nnIndex'), ('const int *', 'nnCount'), ('const int *', 'binIndex'), ('const float *', 'input'), ('const float *', 'gradOutput'), ('float *', 'gradFilter'), ('int', 'sharedMemSize'), ('int', 'startIdx')]"
18290,4,mprts_update_offsets,runs,"[('int', 'nr_total_blocks'), ('uint *', 'd_off'), ('uint *', 'd_spine_sums')]"
18290,5,k_count_received,runs,"[('int', 'nr_total_blocks'), ('uint *', 'd_n_recv_by_block'), ('uint *', 'd_spine_cnts')]"
18290,6,k_reorder_send_buf_total,runs,"[('int', 'nr_prts'), ('int', 'nr_total_blocks'), ('uint *', 'd_bidx'), ('uint *', 'd_sums'), ('float4 *', 'd_xi4'), ('float4 *', 'd_pxi4'), ('float4 *', 'd_xchg_xi4'), ('float4 *', 'd_xchg_pxi4')]"
18290,20,k_zero_comp_xyz,runs,"[('float *', 'data'), ('uint', 'n'), ('uint', 'stride')]"
1830,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
1830,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
18304,4,init_one_vec,runs,"[('float *', 'd_one_vec'), ('size_t', 'length')]"
18304,9,init_one_vec,runs,"[('float *', 'd_one_vec'), ('size_t', 'length')]"
18304,15,add,runs,"[('float *', 'array_a'), ('float *', 'array_b'), ('float *', 'array_c'), ('int', 'size')]"
18304,16,init_one_vec,runs,"[('float *', 'd_one_vec'), ('size_t', 'length')]"
18304,19,init_one_vec,runs,"[('float *', 'd_one_vec'), ('size_t', 'length')]"
1832,3,spread,runs,"[('Real *', 'src'), ('unsigned int', 'spitch'), ('Real *', 'dst'), ('unsigned int', 'dpitch')]"
1832,4,spread_i,runs,"[('Real *', 'src'), ('unsigned int', 'spitch'), ('Real *', 'dst'), ('unsigned int', 'dpitch')]"
1832,6,spread_y_r,runs,"[('Real *', 'src'), ('Real *', 'dst')]"
1832,7,spread_z,runs,"[('Real *', 'src'), ('Real *', 'dst')]"
1832,9,spread_y_i_r,runs,"[('Real *', 'src'), ('Real *', 'dst')]"
1832,12,zero,runs,"[('int', 'nx'), ('int', 'ny'), ('int', 'nz'), ('Real *', 'z')]"
1832,13,copy_0,runs,"[('int', 'nx'), ('int', 'ny'), ('int', 'nz'), ('Real *', 'in'), ('Real *', 'out')]"
1832,14,copy,runs,"[('int', 'nx'), ('int', 'ny'), ('int', 'nz'), ('Real *', 'in'), ('Real *', 'out')]"
18324,2,kernel_looping,runs,"[('float *', 'point'), ('unsigned int', 'num')]"
18324,5,init,runs,"[('uint32_t *', 'v'), ('uint32_t', 'val'), ('uint32_t', 'n')]"
18324,21,analyze,runs,"[('const float *', 'input'), ('float *', 'sum'), ('int', 'numElements')]"
18324,22,sum,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
18325,1,hello_cuda,runs,[]
18325,2,print_details,runs,[]
18325,3,print_details,runs,[]
18325,4,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
18325,7,print_threadIds,runs,[]
18328,10,GPU_simple_power_and_interbin_kernel,runs,"[('float2 *', 'd_input_complex'), ('float *', 'd_output_power'), ('int', 'nTimesamples'), ('float', 'norm')]"
18344,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
18346,0,pw_copy_rc_cu_z,runs,"[('const double *', 'din'), ('double *', 'zout'), ('const int', 'n')]"
18346,1,pw_copy_cr_cu_z,runs,"[('const double *', 'zin'), ('double *', 'dout'), ('const int', 'n')]"
18346,2,pw_gather_cu_z,runs,"[('double *', 'pwcc'), ('const double *', 'c'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int *', 'ghatmap')]"
18346,3,pw_scatter_cu_z,runs,"[('double *', 'c'), ('const double *', 'pwcc'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int', 'nmaps'), ('const int *', 'ghatmap')]"
18347,6,cuSearchDoublet,runs,"[('const int *', 'nSpM'), ('const float *', 'spMmat'), ('const int *', 'nSpB'), ('const float *', 'spBmat'), ('const int *', 'nSpT'), ('const float *', 'spTmat'), ('const float *', 'deltaRMin'), ('const float *', 'deltaRMax'), ('const float *', 'cotThetaMax'), ('const float *', 'collisionRegionMin'), ('const float *', 'collisionRegionMax'), ('int *', 'nSpMcomp'), ('int *', 'nSpBcompPerSpM_Max'), ('int *', 'nSpTcompPerSpM_Max'), ('int *', 'nSpBcompPerSpM'), ('int *', 'nSpTcompPerSpM'), ('int *', 'McompIndex'), ('int *', 'BcompIndex'), ('int *', 'tmpBcompIndex'), ('int *', 'TcompIndex'), ('int *', 'tmpTcompIndex')]"
18348,0,pw_copy_rc_cu_z,runs,"[('const double *', 'din'), ('double *', 'zout'), ('const int', 'n')]"
18348,1,pw_copy_cr_cu_z,runs,"[('const double *', 'zin'), ('double *', 'dout'), ('const int', 'n')]"
18348,2,pw_gather_cu_z,runs,"[('double *', 'pwcc'), ('const double *', 'c'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int *', 'ghatmap')]"
18348,3,pw_scatter_cu_z,runs,"[('double *', 'c'), ('const double *', 'pwcc'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int', 'nmaps'), ('const int *', 'ghatmap')]"
18353,0,awkward_ByteMaskedArray_getitem_nextcarry_filter_mask,runs,"[('int8_t *', 'mask'), ('bool', 'validwhen'), ('int64_t', 'length')]"
18353,1,awkward_ByteMaskedArray_getitem_nextcarry_kernel,runs,"[('int64_t *', 'prefixed_mask'), ('int64_t *', 'to_carry'), ('int8_t *', 'mask'), ('int64_t', 'length')]"
18353,2,awkward_Content_getitem_next_missing_jagged_getmaskstartstop_filter_mask,runs,"[('int64_t *', 'index_in'), ('int64_t *', 'filtered_index'), ('int64_t', 'length')]"
18353,3,awkward_Content_getitem_next_missing_jagged_getmaskstartstop_kernel,runs,"[('int64_t *', 'prefixed_index'), ('int64_t *', 'index_in'), ('int64_t *', 'offsets_in'), ('int64_t *', 'mask_out'), ('int64_t *', 'starts_out'), ('int64_t *', 'stops_out'), ('int64_t', 'length')]"
18353,4,awkward_ByteMaskedArray_getitem_nextcarry_outindex_filter_mask,runs,"[('int8_t *', 'mask'), ('bool', 'validwhen'), ('int64_t', 'length')]"
18353,5,awkward_ByteMaskedArray_getitem_nextcarry_outindex_kernel,runs,"[('int64_t *', 'prefixed_mask'), ('int64_t *', 'to_carry'), ('int64_t *', 'outindex'), ('int8_t *', 'mask'), ('int64_t', 'length')]"
18357,3,sleepKernel,runs,"[('double *', 'cycles'), ('int64_t', 'waitCycles')]"
18357,10,signedGPU,runs,"[('int', 'numTests'), ('int *', 'ns'), ('int *', 'ds'), ('int *', 'qs'), ('int *', 'rs')]"
18357,11,unsignedGPU,runs,"[('int', 'numTests'), ('unsigned *', 'ns'), ('unsigned *', 'ds'), ('unsigned *', 'qs'), ('unsigned *', 'rs')]"
18363,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
18363,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
18363,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
18363,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
18363,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
18363,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
18363,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
18363,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
18363,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
18363,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
18363,24,hello,runs,[]
18363,28,hello,runs,[]
1838,33,deInterleave_kernel,runs,"[('float *', 'd_X_out'), ('float *', 'd_Y_out'), ('float2 *', 'd_XY_in'), ('int', 'pitch_out'), ('int', 'pitch_in'), ('int', 'width'), ('int', 'height')]"
1838,34,deInterleave_kernel2,runs,"[('float *', 'd_X_out'), ('float *', 'd_Y_out'), ('char *', 'd_XY_in'), ('int', 'pitch_out'), ('int', 'pitch_in'), ('int', 'width'), ('int', 'height')]"
1838,35,IMOMask_kernel,runs,"[('float *', 'd_IMOMask'), ('float *', 'd_IMO'), ('const float *', 'd_disparity'), ('float', 'offset'), ('int', 'n_cols'), ('int', 'n_rows')]"
1838,36,matchValidity_kernel,runs,"[('float *', 'd_flow'), ('float *', 'd_disparity'), ('int', 'n_cols'), ('int', 'n_rows')]"
1838,37,convertFloatToRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height'), ('float', 'lowerLim'), ('float', 'upperLim')]"
1838,38,convertPitchedFloatToRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height'), ('int', 'pitch'), ('float', 'lowerLim'), ('float', 'upperLim')]"
1838,39,convertKinectFloatToRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height'), ('int', 'pitch'), ('float', 'lowerLim'), ('float', 'upperLim')]"
1838,40,convertFloatToRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height')]"
1838,41,convertFlowToRGBA_kernel,runs,"[('uchar4 *', 'd_flowx_out'), ('uchar4 *', 'd_flowy_out'), ('const float *', 'd_flowx_in'), ('const float *', 'd_flowy_in'), ('int', 'width'), ('int', 'height'), ('float', 'lowerLim'), ('float', 'upperLim'), ('float', 'minMag')]"
1838,42,convertPitchedFloatToGrayRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height'), ('int', 'pitch'), ('float', 'lowerLim'), ('float', 'upperLim')]"
1838,44,createAnaglyph_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'left_image'), ('const float *', 'right_image'), ('int', 'width'), ('int', 'height'), ('int', 'pre_shift')]"
1838,45,createAnaglyph_kernel,runs,"[('uchar4 *', 'out_image'), ('const uchar4 *', 'left_image'), ('const uchar4 *', 'right_image'), ('int', 'width'), ('int', 'height'), ('int', 'pre_shift')]"
1838,46,convert2DVectorToAngleMagnitude_kernel,runs,"[('uchar4 *', 'd_angle_image'), ('uchar4 *', 'd_magnitude_image'), ('float *', 'd_vector_X'), ('float *', 'd_vector_Y'), ('int', 'width'), ('int', 'height'), ('float', 'lower_ang'), ('float', 'upper_ang'), ('float', 'lower_mag'), ('float', 'upper_mag')]"
1838,47,convertFloatToRGBAbinary_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height'), ('float', 'lowerLim'), ('float', 'upperLim')]"
1838,48,blendFloatImageFloatLabelToRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('const float *', 'label'), ('int', 'width'), ('int', 'height'), ('float', 'lowerLim'), ('float', 'upperLim')]"
1838,56,invalidateFlow_kernel,runs,"[('float *', 'modFlowX'), ('float *', 'modFlowY'), ('const float *', 'constFlowX'), ('const float *', 'constFlowY'), ('int', 'width'), ('int', 'height'), ('float', 'cons_thres')]"
1838,57,colorInvalids_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height')]"
1838,58,convertKinectDisparityToRegularDisparity_kernel,runs,"[('float *', 'd_regularDisparity'), ('int', 'd_regularDisparityPitch'), ('const float *', 'd_KinectDisparity'), ('int', 'd_KinectDisparityPitch'), ('int', 'width'), ('int', 'height')]"
1838,59,convertKinectDisparityInPlace_kernel,runs,"[('float *', 'd_disparity'), ('int', 'pitch'), ('int', 'width'), ('int', 'height'), ('float', 'depth_scale')]"
1838,60,colorDistDiff_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'disparity'), ('int', 'disparity_pitch'), ('const float *', 'disparity_prior'), ('int', 'width'), ('int', 'height'), ('float', 'f'), ('float', 'b'), ('float', 'ox'), ('float', 'oy'), ('float', 'dist_thres')]"
1838,72,convertPointCloudToDepthImage_kernel,runs,"[('unsigned int *', 'depth_image'), ('const float4 *', 'point_cloud'), ('int', 'n_cols'), ('int', 'n_rows'), ('int', 'n_points'), ('float', 'nodal_point_x'), ('float', 'nodal_point_y'), ('float', 'focal_length_x'), ('float', 'focal_length_y'), ('const float *', 'T'), ('const float *', 'R')]"
1838,73,initializeToValue_kernel,runs,"[('unsigned int *', 'data'), ('unsigned int', 'value'), ('int', 'width'), ('int', 'height')]"
1838,74,convertDepthImageToMeter_kernel,runs,"[('float *', 'd_depth_image_meter'), ('const unsigned int *', 'd_depth_image_millimeter'), ('int', 'n_rows'), ('int', 'n_cols')]"
1838,76,median_reduce_shuffle_gpu,runs,"[('const float *', 'd_in'), ('float *', 'd_out'), ('float *', 'd_random_numbers'), ('int', 'n_in')]"
1838,77,multiple_median_reduce_shuffle_gpu,runs,"[('const float *', 'd_in'), ('float *', 'd_out'), ('const float *', 'd_random_numbers'), ('const int *', 'd_start_inds'), ('const int *', 'd_n_in')]"
1838,84,subsample_ind_and_labels_GPU,runs,"[('int *', 'd_ind_sub'), ('const int *', 'd_ind'), ('unsigned int *', 'd_label_sub'), ('const unsigned int *', 'd_label'), ('int', 'n_out'), ('float', 'inv_sub_factor')]"
1838,87,normal_eqs_flow_GPU,runs,"[('float *', 'd_CO'), ('const float2 *', 'd_flow_compact'), ('const float *', 'd_Zbuffer_flow_compact'), ('const int *', 'd_ind_flow_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('int', 'n_rows'), ('int', 'n_cols'), ('const int *', 'd_n_values_flow'), ('const int *', 'd_start_ind_flow')]"
1838,88,normal_eqs_flow_multicam_GPU,runs,"[('float *', 'd_CO'), ('float2 *', 'd_flow_compact'), ('float *', 'd_Zbuffer_flow_compact'), ('int *', 'd_ind_flow_Zbuffer'), ('const float *', 'd_focal_length'), ('const float *', 'd_nodal_point_x'), ('const float *', 'd_nodal_point_y'), ('const int *', 'd_n_rows'), ('const int *', 'd_n_cols'), ('const int *', 'd_n_values_flow'), ('const int *', 'd_start_ind_flow'), ('const int *', 'd_pixel_ind_offset')]"
1838,89,normal_eqs_disparity_GPU,runs,"[('float *', 'd_CD'), ('const float *', 'd_disparity_compact'), ('const float4 *', 'd_Zbuffer_normals_compact'), ('const int *', 'd_ind_disparity_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('float', 'b'), ('int', 'n_cols'), ('const int *', 'd_n_values_disparity'), ('const int *', 'd_start_ind_disparity'), ('float', 'w_disp')]"
1838,90,normal_eqs_disparity_multicam_GPU,runs,"[('float *', 'd_CD'), ('float *', 'd_disparity_compact'), ('float4 *', 'd_Zbuffer_normals_compact'), ('int *', 'd_ind_disparity_Zbuffer'), ('const float *', 'd_focal_length'), ('const float *', 'd_nodal_point_x'), ('const float *', 'd_nodal_point_y'), ('const float *', 'd_baseline'), ('const int *', 'd_n_cols'), ('const int *', 'd_n_values_disparity'), ('const int *', 'd_start_ind_disparity'), ('const int *', 'd_pixel_ind_offset')]"
1838,91,reduce_normal_eqs_64_GPU,runs,"[('float *', 'd_C_reduced'), ('float *', 'd_C'), ('int', 'gridDim_x_normal_equations')]"
1838,92,reduce_normal_eqs_64_mult_constr_GPU,runs,"[('float *', 'd_C_reduced'), ('const float *', 'd_C'), ('int', 'gridDim_x_normal_equations'), ('int', 'n_constraints')]"
1838,93,flow_absolute_residual_scalable_GPU,runs,"[('float *', 'd_abs_res'), ('const float2 *', 'd_flow_compact'), ('const float *', 'd_Zbuffer_flow_compact'), ('const int *', 'd_ind_flow_Zbuffer'), ('const unsigned int *', 'd_valid_flow_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_valid_flow_Zbuffer'), ('const int *', 'd_offset_ind'), ('const int *', 'd_segment_translation_table'), ('float', 'w_flow'), ('float', 'w_ar_flow'), ('const float *', 'd_dTR')]"
1838,94,disp_absolute_residual_scalable_GPU,runs,"[('float *', 'd_abs_res'), ('const float *', 'd_disparity_compact'), ('const float4 *', 'd_Zbuffer_normals_compact'), ('const int *', 'd_ind_disparity_Zbuffer'), ('const unsigned int *', 'd_valid_disparity_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('float', 'b'), ('int', 'n_cols'), ('int', 'n_valid_disparity_Zbuffer'), ('const int *', 'd_offset_ind'), ('const int *', 'd_segment_translation_table'), ('float', 'w_disp'), ('const float *', 'd_dTR')]"
1838,95,normal_eqs_flow_weighted_GPU,runs,"[('float *', 'd_CO'), ('const float2 *', 'd_flow_compact'), ('const float *', 'd_Zbuffer_flow_compact'), ('const int *', 'd_ind_flow_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('int', 'n_rows'), ('int', 'n_cols'), ('const int *', 'd_n_values_flow'), ('const int *', 'd_start_ind_flow'), ('const float *', 'd_abs_res_scales'), ('float', 'w_flow'), ('float', 'w_ar_flow'), ('const float *', 'd_dTR')]"
1838,96,normal_eqs_disparity_weighted_GPU,runs,"[('float *', 'd_CD'), ('const float *', 'd_disparity_compact'), ('const float4 *', 'd_Zbuffer_normals_compact'), ('const int *', 'd_ind_disparity_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('float', 'b'), ('int', 'n_cols'), ('const int *', 'd_n_values_disparity'), ('const int *', 'd_start_ind_disparity'), ('const float *', 'd_abs_res_scales'), ('float', 'w_disp'), ('const float *', 'd_dTR')]"
18386,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18386,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
18387,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18387,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
18388,0,ker,runs,"[('float *', 'cormat'), ('float *', 'upper'), ('int', 'n1'), ('int', 'n')]"
18388,1,ker2,runs,"[('float *', 'cormat'), ('float *', 'upper'), ('int', 'n1'), ('int', 'n'), ('long long', 'upper_size'), ('int', 'N'), ('int', 'i_so_far'), ('long long', 'M1')]"
18395,0,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
18395,1,colorToGray,runs,"[('unsigned char *', 'input'), ('unsigned char *', 'output'), ('int', 'height'), ('int', 'width')]"
18395,2,meanFilter,runs,"[('unsigned char *', 'input'), ('unsigned char *', 'output'), ('int', 'height'), ('int', 'width')]"
18395,3,matrixMul,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'width')]"
18395,4,matrixMul_sharedMemory,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'm'), ('int', 'j'), ('int', 'n')]"
18398,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18398,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
18398,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18398,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18398,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18398,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18398,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
18398,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
18398,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
18398,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
18398,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
18398,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
18398,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
18398,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
18398,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
18398,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
18398,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
18405,0,pw_copy_rc_cu_z,runs,"[('const double *', 'din'), ('double *', 'zout'), ('const int', 'n')]"
18405,1,pw_copy_cr_cu_z,runs,"[('const double *', 'zin'), ('double *', 'dout'), ('const int', 'n')]"
18405,2,pw_gather_cu_z,runs,"[('double *', 'pwcc'), ('const double *', 'c'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int *', 'ghatmap')]"
18405,3,pw_scatter_cu_z,runs,"[('double *', 'c'), ('const double *', 'pwcc'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int', 'nmaps'), ('const int *', 'ghatmap')]"
18407,0,updateParticleKernel,runs,"[('float *', 'P'), ('float *', 'V'), ('float *', 'PB'), ('float *', 'GB'), ('float', 'momentum'), ('float', 'introvert'), ('float', 'extrovert'), ('float', 'clamp_min'), ('float', 'clamp_max')]"
18438,0,__r_aggregate,runs,"[('float *', 'dp'), ('float *', 'cost_image'), ('int', 'm'), ('int', 'n')]"
18438,1,__l_aggregate,runs,"[('float *', 'dp'), ('float *', 'cost_image'), ('int', 'm'), ('int', 'n')]"
18438,2,__vertical_aggregate_down,runs,"[('float *', 'dp'), ('float *', 'cost_image'), ('int', 'm'), ('int', 'n')]"
18438,3,__vertical_aggregate_up,runs,"[('float *', 'dp'), ('float *', 'cost_image'), ('int', 'm'), ('int', 'n')]"
18438,4,__diagonal_tl_br_aggregate,runs,"[('float *', 'dp'), ('float *', 'cost_image'), ('int', 'm'), ('int', 'n')]"
18438,5,__diagonal_tr_bl_aggregate,runs,"[('float *', 'dp'), ('float *', 'cost_image'), ('int', 'm'), ('int', 'n')]"
18438,6,__diagonal_br_tl_aggregate,runs,"[('float *', 'dp'), ('float *', 'cost_image'), ('int', 'm'), ('int', 'n')]"
18438,7,__diagonal_bl_tr_aggregate,runs,"[('float *', 'dp'), ('float *', 'cost_image'), ('int', 'm'), ('int', 'n')]"
18438,8,argmin_3d_mat,runs,"[('float *', 'dp'), ('int *', 'stereo_im'), ('int', 'm'), ('int', 'n')]"
1844,0,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
1844,1,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
18440,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18440,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
18443,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
18443,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
18443,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
18443,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
18443,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
18449,5,set_unavailable,runs,"[('bool *', 'available'), ('int', 'n_rows'), ('const int *', 'idx'), ('int', 'n_selected')]"
18449,6,update_priority,runs,"[('int *', 'new_priority'), ('int', 'n_selected'), ('const int *', 'new_idx'), ('int', 'n_ws'), ('const int *', 'idx'), ('const int *', 'priority')]"
18449,7,emptyMarkerKernel,runs,[]
18449,9,postprocess_matrix,runs,"[('float *', 'matrix'), ('long *', 'long_indices'), ('int *', 'indices'), ('unsigned int', 'N_POINTS'), ('unsigned int', 'K')]"
18449,11,to_float,runs,"[('float *', 'out'), ('int *', 'in'), ('int', 'size')]"
18449,12,build_actual_output,runs,"[('int *', 'output'), ('int', 'n_rows'), ('int', 'k'), ('const int *', 'idx_labels'), ('const int64_t *', 'indices')]"
18449,13,build_expected_output,runs,"[('int *', 'output'), ('int', 'n_rows'), ('int', 'k'), ('const int *', 'labels')]"
18449,14,nan_kernel,runs,"[('float *', 'data'), ('const bool *', 'mask'), ('int', 'len'), ('float', 'nan')]"
18449,26,naiveHistKernel,runs,"[('int *', 'bins'), ('int', 'nbins'), ('int *', 'in'), ('int', 'nrows')]"
18455,0,pw_copy_rc_cu_z,runs,"[('const double *', 'din'), ('double *', 'zout'), ('const int', 'n')]"
18455,1,pw_copy_cr_cu_z,runs,"[('const double *', 'zin'), ('double *', 'dout'), ('const int', 'n')]"
18455,2,pw_gather_cu_z,runs,"[('double *', 'pwcc'), ('const double *', 'c'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int *', 'ghatmap')]"
18455,3,pw_scatter_cu_z,runs,"[('double *', 'c'), ('const double *', 'pwcc'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int', 'nmaps'), ('const int *', 'ghatmap')]"
18468,0,mmul,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'ds')]"
18468,3,vadd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'ds')]"
18468,4,hello,runs,[]
18468,10,reduce,runs,"[('float *', 'gdata'), ('float *', 'out'), ('size_t', 'n')]"
18468,11,row_sums,runs,"[('const float *', 'A'), ('float *', 'sums'), ('size_t', 'ds')]"
18468,12,column_sums,runs,"[('const float *', 'A'), ('float *', 'sums'), ('size_t', 'ds')]"
18468,13,reduce,runs,"[('float *', 'gdata'), ('float *', 'out'), ('size_t', 'n')]"
18468,14,atomic_red,runs,"[('const float *', 'gdata'), ('float *', 'out')]"
18468,15,reduce,runs,"[('float *', 'gdata'), ('float *', 'out')]"
18468,16,reduce_a,runs,"[('float *', 'gdata'), ('float *', 'out')]"
18468,17,reduce_ws,runs,"[('float *', 'gdata'), ('float *', 'out')]"
18468,18,row_sums,runs,"[('const float *', 'A'), ('float *', 'sums'), ('size_t', 'ds')]"
18468,19,column_sums,runs,"[('const float *', 'A'), ('float *', 'sums'), ('size_t', 'ds')]"
18468,21,mmul,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'ds')]"
18468,22,stencil_1d,runs,"[('int *', 'in'), ('int *', 'out')]"
18468,24,row_sums,runs,"[('const float *', 'A'), ('float *', 'sums'), ('size_t', 'ds')]"
18468,25,column_sums,runs,"[('const float *', 'A'), ('float *', 'sums'), ('size_t', 'ds')]"
18468,29,inc,runs,"[('int *', 'array'), ('size_t', 'n')]"
18468,31,inc,runs,"[('int *', 'array'), ('size_t', 'n')]"
18468,32,vadd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'ds')]"
18469,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18469,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
18472,0,convertBGR2RGBfloatKernel,runs,"[('uchar3 *', 'src'), ('float3 *', 'dst'), ('int', 'width'), ('int', 'height')]"
18472,1,imageNormalizationKernel,runs,"[('float3 *', 'ptr'), ('int', 'width'), ('int', 'height')]"
18472,2,imageSplitKernel,runs,"[('float3 *', 'ptr'), ('float *', 'dst'), ('int', 'width'), ('int', 'height')]"
18472,6,imagePaddingKernel,runs,"[('float3 *', 'ptr'), ('float3 *', 'dst'), ('int', 'width'), ('int', 'height'), ('int', 'top'), ('int', 'bottom'), ('int', 'left'), ('int', 'right')]"
18472,7,calcPReLUKernel,runs,"[('const float *', 'input'), ('float *', 'output'), ('const float *', 'weights'), ('int', 'width'), ('int', 'height'), ('int', 'channels')]"
18474,0,kernel,runs,"[('unsigned int', 'rows'), ('unsigned int', 'cols'), ('float *', 'ddata'), ('float *', 'vdata'), ('float *', 'results')]"
1848,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
18489,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
1849,21,sync_deconv_groups,runs,[]
1849,37,sync_conv_groups,runs,[]
18492,4,frame_encode_staircase,runs,"[('int *', 'data'), ('int *', 'pcm'), ('int', 'param_k'), ('int', 'param_m'), ('int', 'w_f'), ('int', 'packet_size')]"
18492,6,yuv422_to_yuv444_kernel,runs,"[('const void *', 'src'), ('void *', 'out'), ('int', 'pix_count')]"
185,5,g_One_wgrad_Add,runs,"[('float *', '_WgradTmp'), ('float *', 'Wgrad'), ('float *', 'w'), ('int', 'rows'), ('int', 'cols'), ('int', 'channels'), ('float', 'lambda')]"
185,6,g_One_feedforward,runs,"[('float *', '_inputs'), ('float *', '_w'), ('float *', '_b'), ('float *', '_outputs'), ('int', 'rows'), ('int', 'cols'), ('int', 'channels')]"
185,7,g_One_backpropagation,runs,"[('float *', '_curDelta'), ('float *', '_w'), ('float *', '_nextDelta'), ('int', 'rows'), ('int', 'cols'), ('int', 'channels')]"
185,8,g_One_wgrad,runs,"[('float *', '_inputs'), ('float *', '_curDelta'), ('float *', '_wgradTmp'), ('int', 'rows'), ('int', 'cols'), ('int', 'channels')]"
185,9,g_One_Bgrad,runs,"[('float *', '_delta'), ('float *', 'bgrad'), ('int', 'rows'), ('int', 'cols'), ('int', 'channels')]"
185,27,g_getSoftMaxP,runs,"[('float *', 'softMaxP'), ('float *', 'b'), ('int', 'cols')]"
185,28,g_getSoftMaxDelta,runs,"[('float *', 'softMaxDelta'), ('float *', 'softMaxP'), ('float *', 'groudTruth'), ('int', 'len')]"
185,29,g_getSmrWgrad,runs,"[('float *', 'wgrad'), ('float *', 'weight'), ('float', 'lambda'), ('int', 'len'), ('int', 'batch')]"
185,31,g_FullConnectWgrad,runs,"[('float *', 'wgrad'), ('float *', 'w'), ('int', 'len'), ('float', 'lambda'), ('int', 'batch')]"
185,33,g_FullConnectDropout,runs,"[('float *', 'outputs'), ('float *', 'drop'), ('int', 'len')]"
1850,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
1850,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
18512,0,findcollisions,runs,"[('int', 'hash'), ('unsigned long long int', 'strLength')]"
18515,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
18515,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
18520,0,pw_copy_rc_cu_z,runs,"[('const double *', 'din'), ('double *', 'zout'), ('const int', 'n')]"
18520,1,pw_copy_cr_cu_z,runs,"[('const double *', 'zin'), ('double *', 'dout'), ('const int', 'n')]"
18520,2,pw_gather_cu_z,runs,"[('double *', 'pwcc'), ('const double *', 'c'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int *', 'ghatmap')]"
18520,3,pw_scatter_cu_z,runs,"[('double *', 'c'), ('const double *', 'pwcc'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int', 'nmaps'), ('const int *', 'ghatmap')]"
186,0,cuda_matmul,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('size_t', 'n')]"
186,1,cuda_matmul,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('size_t', 'n')]"
1860,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
1860,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
187,46,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
187,47,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
187,48,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
1874,0,initDeviceMemory,runs,"[('const int', 'nbrOfGrids'), ('double *', 'd_u1'), ('double *', 'd_u2'), ('double *', 'd_u3'), ('double *', 'd_vol'), ('double *', 'd_h'), ('double *', 'd_length'), ('double *', 'd_gama'), ('double *', 'd_cfl'), ('double *', 'd_nu'), ('double *', 'd_tau'), ('double *', 'd_cMax'), ('double *', 'd_t')]"
1874,1,updateTau,runs,"[('const int', 'nbrOfGrids'), ('const double *', 'd_u1'), ('const double *', 'd_u2'), ('const double *', 'd_u3'), ('const double *', 'd_gama'), ('double *', 'd_cMax'), ('const double *', 'd_h'), ('const double *', 'd_cfl'), ('double *', 'd_tau')]"
1874,2,boundaryCondition,runs,"[('const int', 'nbrOfGrids'), ('double *', 'd_u1'), ('double *', 'd_u2'), ('double *', 'd_u3')]"
1874,3,laxWendroffStep,runs,"[('const int', 'nbrOfGrids'), ('double *', 'd_u1'), ('double *', 'd_u2'), ('double *', 'd_u3'), ('double *', 'd_u1Temp'), ('double *', 'd_u2Temp'), ('double *', 'd_u3Temp'), ('double *', 'd_f1'), ('double *', 'd_f2'), ('double *', 'd_f3'), ('const double *', 'd_tau'), ('const double *', 'd_h'), ('const double *', 'd_gama')]"
1874,4,RoeStep,runs,"[('const int', 'nbrOfGrids'), ('double *', 'd_u1'), ('double *', 'd_u2'), ('double *', 'd_u3'), ('const double *', 'd_vol'), ('double *', 'd_f1'), ('double *', 'd_f2'), ('double *', 'd_f3'), ('const double *', 'd_tau'), ('const double *', 'd_h'), ('const double *', 'd_gama'), ('double *', 'w1'), ('double *', 'w2'), ('double *', 'w3'), ('double *', 'w4'), ('double *', 'fc1'), ('double *', 'fc2'), ('double *', 'fc3'), ('double *', 'fr1'), ('double *', 'fr2'), ('double *', 'fr3'), ('double *', 'fl1'), ('double *', 'fl2'), ('double *', 'fl3'), ('double *', 'fludif1'), ('double *', 'fludif2'), ('double *', 'fludif3'), ('double *', 'rsumr'), ('double *', 'utilde'), ('double *', 'htilde'), ('double *', 'uvdif'), ('double *', 'absvt'), ('double *', 'ssc'), ('double *', 'vsc'), ('double *', 'eiglam1'), ('double *', 'eiglam2'), ('double *', 'eiglam3'), ('double *', 'sgn1'), ('double *', 'sgn2'), ('double *', 'sgn3'), ('int *', 'isb1'), ('int *', 'isb2'), ('int *', 'isb3'), ('double *', 'a1'), ('double *', 'a2'), ('double *', 'a3'), ('double *', 'ac11'), ('double *', 'ac12'), ('double *', 'ac13'), ('double *', 'ac21'), ('double *', 'ac22'), ('double *', 'ac23')]"
189,9,WriteClockValues,runs,"[('unsigned int *', 'completionTimes'), ('unsigned int *', 'threadIDs')]"
189,13,AddToFloat,runs,"[('float *', 'sum'), ('float *', 'out'), ('const float *', 'pIn')]"
189,14,ReturnFloat,runs,"[('float *', 'sum'), ('float *', 'out'), ('const float *', 'pIn')]"
189,15,AddTo32,runs,"[('int *', 'sum'), ('int *', 'out'), ('const int *', 'pIn')]"
189,16,Return32,runs,"[('int *', 'sum'), ('int *', 'out'), ('const int *', 'pIn')]"
189,17,ReturnFloat,runs,"[('float *', 'sum'), ('float *', 'out'), ('const float *', 'pIn')]"
189,18,Return64,runs,"[('unsigned long long *', 'sum'), ('unsigned long long *', 'out'), ('const unsigned long long *', 'pIn')]"
189,19,Return32,runs,"[('int *', 'sum'), ('int *', 'out'), ('const int *', 'pIn')]"
189,46,RadixHistogram_device,runs,"[('int *', 'dptrHistogram'), ('const int *', 'in'), ('size_t', 'N'), ('int', 'shift'), ('int', 'mask')]"
189,52,p2pPingPongLatencyTest,runs,"[('void *', '_pLocal'), ('void *', '_pRemote'), ('uint64_t *', 'pTimestamps'), ('int', 'bWait'), ('int', 'cIterations')]"
1891,0,add2,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
19,1,kInitIdentityMatrix,runs,"[('float *', 'a'), ('int', 'size'), ('int', 'num_elements')]"
1905,0,solvePDEKernel,runs,"[('float *', 'hPop'), ('float *', 'T_Last'), ('float *', 'T_New'), ('float *', 'T_Surface'), ('float', 'Tw'), ('float', 'lamda'), ('float', 'pho'), ('float', 'ce'), ('int', 'ny'), ('float', 'dy'), ('int', 'nx'), ('float', 'dx'), ('float', 'tau'), ('int', 'tnpts'), ('int', 'tstep'), ('float', 'Vcast'), ('int', 'Section'), ('float *', 'ccml')]"
191,1,gpu_array_2norm2_r4__,runs,"[('size_t', 'arr_size'), ('const float *', 'arr'), ('float *', 'bnorm2')]"
191,2,gpu_array_2norm2_r8__,runs,"[('size_t', 'arr_size'), ('const double *', 'arr'), ('double *', 'bnorm2')]"
191,3,gpu_array_init_r4__,runs,"[('size_t', 'tsize'), ('float *', 'arr'), ('float', 'val')]"
191,4,gpu_array_init_r8__,runs,"[('size_t', 'tsize'), ('double *', 'arr'), ('double', 'val')]"
191,5,gpu_array_scale_r4__,runs,"[('size_t', 'tsize'), ('float *', 'arr'), ('float', 'val')]"
191,6,gpu_array_scale_r8__,runs,"[('size_t', 'tsize'), ('double *', 'arr'), ('double', 'val')]"
191,9,gpu_array_dot_product_r4__,runs,"[('size_t', 'tsize'), ('const float *', 'arr1'), ('const float *', 'arr2'), ('volatile float *', 'dprod')]"
191,10,gpu_array_dot_product_r8__,runs,"[('size_t', 'tsize'), ('const double *', 'arr1'), ('const double *', 'arr2'), ('volatile double *', 'dprod')]"
1917,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
1917,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
1917,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
1917,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
1917,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
1917,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
1917,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
1921,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
1930,15,set_array_double,runs,"[('double *', 'a'), ('double', 'value'), ('size_t', 'len')]"
1930,16,STREAM_Copy,runs,"[('float *', 'a'), ('float *', 'b'), ('size_t', 'len')]"
1930,17,STREAM_Copy_double,runs,"[('double *', 'a'), ('double *', 'b'), ('size_t', 'len')]"
1930,18,STREAM_Copy_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('size_t', 'len')]"
1930,19,STREAM_Copy_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('size_t', 'len')]"
1930,20,STREAM_Scale,runs,"[('float *', 'a'), ('float *', 'b'), ('float', 'scale'), ('size_t', 'len')]"
1930,21,STREAM_Scale_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double', 'scale'), ('size_t', 'len')]"
1930,22,STREAM_Scale_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float', 'scale'), ('size_t', 'len')]"
1930,23,STREAM_Scale_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double', 'scale'), ('size_t', 'len')]"
1930,24,STREAM_Add,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('size_t', 'len')]"
1930,25,STREAM_Add_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('size_t', 'len')]"
1930,26,STREAM_Add_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('size_t', 'len')]"
1930,27,STREAM_Add_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('size_t', 'len')]"
1930,28,STREAM_Triad,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float', 'scalar'), ('size_t', 'len')]"
1930,29,STREAM_Triad_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double', 'scalar'), ('size_t', 'len')]"
1930,30,STREAM_Triad_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float', 'scalar'), ('size_t', 'len')]"
1930,31,STREAM_Triad_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double', 'scalar'), ('size_t', 'len')]"
1943,96,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
1943,97,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
1943,98,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
1943,99,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
1943,170,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
1944,16,cudaKernelTexture2D,runs,"[('unsigned char *', 'surface'), ('int', 'width'), ('int', 'height'), ('size_t', 'pitch'), ('float', 't')]"
1944,17,cudaKernelMesh,runs,"[('float4 *', 'pos'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'time')]"
1957,4,blend,runs,"[('float *', 'cmap'), ('float *', 'oldd'), ('float *', 'newd'), ('float', 'weight'), ('int *', 'params')]"
1957,8,update2,runs,"[('float *', 'alphaMinusBeta_out'), ('const float *', 'rho'), ('const float *', 'yDotZ'), ('const float *', 'alpha')]"
1957,9,update3,runs,"[('float *', 'rho_out'), ('float *', 'H0_out'), ('const float *', 'yDotS'), ('const float *', 'yDotY')]"
1957,13,blend,runs,"[('float *', 'cmap'), ('float *', 'oldd'), ('float *', 'newd'), ('float', 'weight'), ('int *', 'params')]"
1957,21,convert_float2bgr,runs,"[('float *', 'annd'), ('unsigned char *', 'bgr'), ('int', 'w'), ('int', 'h')]"
1957,22,convert_float2bgr,runs,"[('float *', 'annd'), ('unsigned char *', 'bgr'), ('int', 'w'), ('int', 'h'), ('float', 'minval'), ('float', 'maxval')]"
1957,59,sync_conv_groups,runs,[]
196,1,KernelLBSSimple,runs,"[('int', 'aCount'), ('const int *', 'b_global'), ('int', 'bCount'), ('int *', 'indices_global')]"
1965,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
1965,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
1965,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
1965,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
1965,31,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
1969,4,absoluteDifferenceCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1969,5,bitwiseAndCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1969,6,bitwiseOrCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1969,7,bitwiseXorCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1969,10,copyCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1969,13,flipCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('bool', 'horizontal'), ('bool', 'vertical')]"
1969,14,histogramCuda,runs,"[('const uint8_t *', 'data'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'histogram')]"
1969,15,invertCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1969,16,isEqualCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'isEqual')]"
1969,17,lookupTableCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint8_t *', 'table')]"
1969,18,maximumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1969,19,minimumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1969,20,projectionProfileHorizontalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
1969,21,projectionProfileVerticalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
1969,22,rotateCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('float', 'inXStart'), ('float', 'inYStart'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('float', 'cosAngle'), ('float', 'sinAngle')]"
1969,24,setPixelCuda,runs,"[('uint8_t *', 'in'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'pointX'), ('uint32_t *', 'pointY'), ('uint32_t', 'pointSize'), ('uint32_t', 'value')]"
1969,25,subtractCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
1969,29,isAnyEqualCuda,runs,"[('const uint8_t *', 'image'), ('uint8_t *', 'value'), ('size_t', 'valueCount'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'differenceCount')]"
1971,5,kernel_diagdiv_fl,runs,"[('int', 'M'), ('float', 'eps'), ('float *', 'y'), ('float *', 'x')]"
1971,6,kernel_diagmu_fl,runs,"[('int', 'M'), ('float *', 'A'), ('float', 'mu')]"
1971,30,kernel_setweights,runs,"[('int', 'N'), ('double *', 'wt'), ('double', 'alpha')]"
1971,31,kernel_hadamard,runs,"[('int', 'N'), ('double *', 'wt'), ('double *', 'x')]"
1971,32,kernel_hadamard_sum,runs,"[('int', 'N'), ('double *', 'y'), ('double *', 'x'), ('double *', 'w')]"
1971,33,kernel_updateweights,runs,"[('int', 'N'), ('double *', 'wt'), ('double *', 'x'), ('double *', 'q'), ('double', 'nu')]"
1971,34,kernel_sqrtweights,runs,"[('int', 'N'), ('double *', 'wt')]"
1971,35,kernel_evaluatenu,runs,"[('int', 'Nd'), ('double', 'qsum'), ('double *', 'q'), ('double', 'deltanu'), ('double', 'nulow')]"
1971,55,kernel_setweights_fl,runs,"[('int', 'N'), ('float *', 'wt'), ('float', 'alpha')]"
1971,56,kernel_hadamard_fl,runs,"[('int', 'N'), ('float *', 'wt'), ('float *', 'x')]"
1971,57,kernel_updateweights_fl,runs,"[('int', 'N'), ('float *', 'wt'), ('float *', 'x'), ('float *', 'q'), ('float', 'nu')]"
1971,58,kernel_sqrtweights_fl,runs,"[('int', 'N'), ('float *', 'wt')]"
1971,59,kernel_evaluatenu_fl,runs,"[('int', 'Nd'), ('float', 'qsum'), ('float *', 'q'), ('float', 'deltanu'), ('float', 'nulow')]"
1971,60,kernel_evaluatenu_fl_eight,runs,"[('int', 'Nd'), ('float', 'qsum'), ('float *', 'q'), ('float', 'deltanu'), ('float', 'nulow'), ('float', 'nu0')]"
1976,0,convolution1Kernel,runs,"[('int *', 'dst'), ('int *', 'src'), ('int', 'rows'), ('int', 'cols'), ('int *', 'filter')]"
198,0,binning,runs,"[('float *', 'xd'), ('float *', 'yd'), ('float *', 'zd'), ('float *', 'ZZ'), ('int', 'number_lines'), ('int', 'points_per_degree'), ('int', 'number_of_degrees')]"
198,1,binning_mix,runs,"[('float *', 'xd_real'), ('float *', 'yd_real'), ('float *', 'zd_real'), ('float *', 'xd_sim'), ('float *', 'yd_sim'), ('float *', 'zd_sim'), ('float *', 'ZY'), ('int', 'lines_number_1'), ('int', 'lines_number_2'), ('int', 'points_per_degree'), ('int', 'number_of_degrees')]"
1980,0,DeformablePSROIPoolForwardKernel,runs,"[('const int', 'count'), ('const double *', 'bottom_data'), ('const double', 'spatial_scale'), ('const int', 'channels'), ('const int', 'height'), ('const int', 'width'), ('const int', 'pooled_height'), ('const int', 'pooled_width'), ('const double *', 'bottom_rois'), ('const double *', 'bottom_trans'), ('const int', 'no_trans'), ('const double', 'trans_std'), ('const int', 'sample_per_part'), ('const int', 'output_dim'), ('const int', 'group_size'), ('const int', 'part_size'), ('const int', 'num_classes'), ('const int', 'channels_each_class'), ('double *', 'top_data'), ('double *', 'top_count')]"
1981,76,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
1983,16,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
1983,19,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
1983,21,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
1983,23,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
1983,25,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
1983,27,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
1983,28,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
1983,30,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
1983,33,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
1983,36,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
1989,0,brent_kung_scan_kernel,runs,"[('float *', 'X'), ('float *', 'Y'), ('int', 'InputSize')]"
1989,2,histogram_privatized_kernel,runs,"[('unsigned char *', 'input'), ('unsigned int *', 'bins'), ('unsigned int', 'num_elements'), ('unsigned int', 'num_bins')]"
1989,3,matrix_mult_kernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
1989,4,matrix_mult_kernel_tiled,runs,"[('int *', 'd_m'), ('int *', 'd_n'), ('int *', 'd_p'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
199,12,stretch_kernel,runs,"[('int', 'acc'), ('int', 'samps'), ('float', 'tsamp'), ('float *', 'd_input'), ('float *', 'd_output'), ('float', 't_zero'), ('float', 'multiplier'), ('float', 'tsamp_inverse')]"
199,13,PD_ZC_GPU,runs,"[('float *', 'd_input'), ('float *', 'd_output'), ('int', 'maxTaps'), ('int', 'nTimesamples'), ('int', 'nLoops')]"
199,15,bootstrap,runs,"[('int', 'bins'), ('int', 'num_els'), ('int', 'num_boots'), ('float *', 'g_idata'), ('double *', 'g_odata'), ('unsigned int *', 'g_irand')]"
199,16,bootstrap2,runs,"[('int', 'bins'), ('int', 'num_els'), ('int', 'num_boots'), ('float *', 'g_idata'), ('double *', 'g_odata'), ('unsigned int *', 'g_irand')]"
199,17,bootstrap3,runs,"[('int', 'bins'), ('int', 'num_els'), ('int', 'num_boots'), ('float *', 'g_idata'), ('double *', 'g_odata'), ('unsigned int *', 'g_irand')]"
199,18,stats_kernel,runs,"[('int', 'half_samps'), ('float *', 'd_sum'), ('float *', 'd_sum_square'), ('float *', 'd_signal_power')]"
199,19,zero_dm_outliers_kernel_one,runs,"[('unsigned short *', 'd_input'), ('int', 'nchans'), ('int', 'nsamp')]"
199,20,zero_dm_outliers_kernel_two,runs,"[('unsigned short *', 'd_input'), ('int', 'nchans'), ('int', 'nsamp')]"
199,22,SNR_GPU_limited,runs,"[('float *', 'd_FIR_input'), ('float *', 'd_SNR_output'), ('ushort *', 'd_SNR_taps'), ('float *', 'd_MSD'), ('int', 'x_steps'), ('int', 'nTaps'), ('int', 'nColumns'), ('int', 'offset')]"
199,30,gpu_Filter_peaks_kernel,runs,"[('unsigned int *', 'd_new_peak_list_DM'), ('unsigned int *', 'd_new_peak_list_TS'), ('unsigned int *', 'd_new_peak_list_BW'), ('float *', 'd_new_peak_list_SNR'), ('unsigned int *', 'd_peak_list_DM'), ('unsigned int *', 'd_peak_list_TS'), ('unsigned int *', 'd_peak_list_BW'), ('float *', 'd_peak_list_SNR'), ('unsigned int', 'nElements'), ('unsigned int', 'max_distance'), ('int', 'nLoops'), ('int', 'max_list_pos'), ('int *', 'gmem_pos')]"
199,31,PD_ZC_GPU_KERNEL,runs,"[('float *', 'd_input'), ('float *', 'd_output'), ('int', 'maxTaps'), ('int', 'nTimesamples'), ('int', 'nLoops')]"
199,32,PD_INPLACE_GPU_KERNEL,runs,"[('float *', 'd_input'), ('float *', 'd_temp'), ('unsigned char *', 'd_output_taps'), ('float *', 'd_MSD'), ('int', 'maxTaps'), ('int', 'nTimesamples')]"
199,33,set_stretch_kernel,runs,"[('int', 'samps'), ('float', 'mean'), ('float *', 'd_input')]"
199,44,GPU_simple_power_and_interbin_kernel,runs,"[('float2 *', 'd_input_complex'), ('float *', 'd_output_power'), ('float *', 'd_output_interbinning'), ('int', 'nTimesamples'), ('float', 'norm')]"
199,49,bin,runs,"[('unsigned short *', 'd_input'), ('float *', 'd_output'), ('int', 'in_nsamp')]"
199,58,MSD_GPU_Interpolate_linear,runs,"[('float *', 'd_MSD_DIT'), ('float *', 'd_MSD_interpolated'), ('int *', 'd_MSD_DIT_widths'), ('int', 'MSD_DIT_size'), ('int *', 'boxcar'), ('int', 'max_width_performed')]"
199,64,simple_corner_turn_kernel,runs,"[('float *', 'd_input'), ('float *', 'd_output'), ('int', 'primary_size'), ('int', 'secondary_size')]"
199,66,simple_corner_turn_kernel,runs,"[('unsigned short *', 'd_input'), ('float *', 'd_output'), ('int', 'nchans'), ('int', 'nsamp')]"
199,67,swap,runs,"[('unsigned short *', 'd_input'), ('float *', 'd_output'), ('int', 'nchans'), ('int', 'nsamp')]"
199,68,rfi_gpu_kernel,runs,"[('unsigned short *', 'd_input'), ('int', 'nchans'), ('int', 'nsamp')]"
1990,33,sync_conv_groups,runs,[]
1992,6,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
2,0,kernelScharrX,runs,"[('float const *', 'in'), ('int', '_w'), ('int', '_h'), ('float *', 'out')]"
2,1,kernelScharrY,runs,"[('float const *', 'in'), ('int', '_w'), ('int', '_h'), ('float *', 'out')]"
2,3,kernelSobelY,runs,"[('float const *', 'in'), ('int', '_w'), ('int', '_h'), ('float *', 'out')]"
2,4,kernelAdd,runs,"[('float const *', 'in1'), ('float const *', 'in2'), ('int', '_w'), ('int', '_h'), ('float *', 'out')]"
2,5,kernelSmoothX,runs,"[('float *', 'in'), ('int', 'w'), ('int', 'h'), ('float *', 'out')]"
2,6,kernelSmoothY,runs,"[('float const *', 'in'), ('int', 'w'), ('int', 'h'), ('float *', 'out')]"
2,7,kernelMagicUpsampleX,runs,"[('float *', 'in'), ('int', '_w'), ('int', '_h'), ('float *', 'out')]"
2,8,convertRGBToGrey,runs,"[('unsigned char *', 'd_in'), ('float *', 'd_out'), ('int', 'N')]"
20,0,KernelVersionShim,runs,[]
200,2,helper,runs,"[('float *', 'output'), ('float *', 'blocksum'), ('int', 'len')]"
200,5,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
2001,0,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
2001,1,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
2003,0,_cuda_add_scalar,runs,"[('int *', 'in'), ('int', 'scalar'), ('int', 'n')]"
2006,0,capByScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
2006,1,floorByScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
2006,2,addScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
2006,3,subScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
2006,4,busScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
2006,5,multScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
2006,6,divScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
2006,7,vidScalar,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
2006,8,squared,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
2006,9,cuPow,runs,"[('int', 'n'), ('float *', 'a'), ('float', 'b'), ('float *', 'result')]"
2006,10,cuSqrt,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
2006,11,cuExp,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
2006,12,cuLog,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
2006,13,invert,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
2006,14,cuAbs,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'result')]"
2006,15,cap,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
2006,16,cuFloor,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
2006,17,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
2006,18,sub,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
2006,19,mult,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
2006,20,cuDiv,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'result')]"
2006,21,accrue,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float', 'p'), ('float *', 'result')]"
2006,22,discount,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float', 'p'), ('float *', 'result')]"
2006,23,addProduct,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float *', 'result')]"
2006,24,addProduct_vs,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float', 'c'), ('float *', 'result')]"
2006,25,addRatio,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float *', 'result')]"
2006,26,subRatio,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float *', 'result')]"
2006,27,reduceFloatVectorToDoubleScalar,runs,"[('int', 'size'), ('void *', 'data'), ('double *', 'result')]"
2006,28,reducePartial,runs,"[('int', 'size'), ('void *', 'data'), ('void *', 'result')]"
2007,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
2007,1,global_scan,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
2007,2,shmem_scan,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
2007,3,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
2007,4,square,runs,"[('float *', 'd_in'), ('float *', 'd_out')]"
201,0,binning,runs,"[('float *', 'xd'), ('float *', 'yd'), ('float *', 'zd'), ('float *', 'ZZ'), ('int', 'number_lines'), ('int', 'points_per_degree'), ('int', 'number_of_degrees')]"
201,1,binning_mix,runs,"[('float *', 'xd_real'), ('float *', 'yd_real'), ('float *', 'zd_real'), ('float *', 'xd_sim'), ('float *', 'yd_sim'), ('float *', 'zd_sim'), ('float *', 'ZY'), ('int', 'lines_number_1'), ('int', 'lines_number_2'), ('int', 'points_per_degree'), ('int', 'number_of_degrees')]"
2011,6,set_volume_to_constant,runs,"[('float *', 'out'), ('float', 'value')]"
2011,19,kernel_normalize_and_add_to_output,runs,"[('float *', 'dev_vol_in'), ('float *', 'dev_vol_out'), ('float *', 'dev_accumulate_weights'), ('float *', 'dev_accumulate_values')]"
2011,30,magnitude_threshold_kernel,runs,"[('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z'), ('float', 'gamma')]"
2011,31,gradient_and_subtract_kernel,runs,"[('float *', 'in'), ('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z')]"
2011,32,multiply_by_beta_kernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'beta')]"
2011,33,subtract_kernel,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out')]"
2020,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
2024,2,init,runs,"[('int', 'order'), ('const int', 'matrices'), ('double *', 'C')]"
203,5,Add,runs,"[('float *', 'A'), ('int', 'size')]"
2031,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
2036,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2036,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2041,6,set_volume_to_constant,runs,"[('float *', 'out'), ('float', 'value')]"
2041,19,kernel_normalize_and_add_to_output,runs,"[('float *', 'dev_vol_in'), ('float *', 'dev_vol_out'), ('float *', 'dev_accumulate_weights'), ('float *', 'dev_accumulate_values')]"
2041,30,magnitude_threshold_kernel,runs,"[('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z'), ('float', 'gamma')]"
2041,31,gradient_and_subtract_kernel,runs,"[('float *', 'in'), ('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z')]"
2041,32,multiply_by_beta_kernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'beta')]"
2041,33,subtract_kernel,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out')]"
2052,0,kernel,runs,[]
2052,1,kernel,runs,[]
2052,2,kernel,runs,[]
2052,3,kernel,runs,[]
2054,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
2054,2,stencil_1d,runs,"[('int *', 'in'), ('int *', 'out')]"
2054,5,matmul,runs,"[('int *', 'a'), ('int', 'c_a'), ('int *', 'b'), ('int', 'r_b'), ('int', 'c_b'), ('int *', 'c'), ('int', 'c_c'), ('int', 'N_BLOCKS'), ('int', 'N_THREADS')]"
2056,2,nms_kernel,runs,"[('const int', 'num_per_thread'), ('const float', 'threshold'), ('const int', 'num_detections'), ('const int *', 'indices'), ('float *', 'scores'), ('const float *', 'classes'), ('const float4 *', 'boxes')]"
206,0,setAllValuesKernel,runs,"[('int *', 'houghSpace'), ('int', 'height'), ('int', 'width'), ('float', 'value')]"
206,2,AdjustImageIntensityKernel,runs,"[('float *', 'imgOut'), ('float *', 'imgIn'), ('int', 'width'), ('int', 'height'), ('float', 'lowin'), ('float', 'lowout'), ('float', 'scale')]"
206,3,ImageScalingKernel,runs,"[('float *', 'imgOut'), ('float *', 'imgIn'), ('int', 'width'), ('int', 'height')]"
206,4,AdjustGammaKernel,runs,"[('float *', 'imgOut'), ('float *', 'imgIn'), ('int', 'width'), ('int', 'height'), ('float', 'gamma'), ('float', 'minVal'), ('float', 'maxVal')]"
2061,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2061,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2065,91,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
2065,104,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
2065,105,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
2065,106,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
2065,107,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
2065,185,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
208,0,convKernel,runs,"[('const float *', 'source'), ('const float *', 'kernel'), ('float *', 'target'), ('const int', 'len')]"
208,1,forwardDifferenceKernel,runs,"[('const int', 'len'), ('const float *', 'source'), ('float *', 'target')]"
208,2,forwardDifferenceAdjointKernel,runs,"[('const int', 'len'), ('const float *', 'source'), ('float *', 'target')]"
208,3,forwardDifference2DKernel,runs,"[('const int', 'cols'), ('const int', 'rows'), ('const float *', 'data'), ('float *', 'dx'), ('float *', 'dy')]"
208,4,forwardDifference2DAdjointKernel,runs,"[('const int', 'cols'), ('const int', 'rows'), ('const float *', 'dx'), ('const float *', 'dy'), ('float *', 'target')]"
2083,0,dev_const,runs,"[('float *', 'px'), ('float', 'k')]"
2089,5,kernel_unpack_yuy2_y16_cuda,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'superPixCount')]"
2089,6,kernel_unpack_yuy2_rgb8_cuda,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'superPixCount')]"
2089,7,kernel_unpack_yuy2_bgr8_cuda,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'superPixCount')]"
2089,8,kernel_unpack_yuy2_rgba8_cuda,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'superPixCount')]"
2089,9,kernel_unpack_yuy2_bgra8_cuda,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'superPixCount')]"
2093,21,sync_deconv_groups,runs,[]
2093,37,sync_conv_groups,runs,[]
21,0,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
21,35,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
21,36,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
21,37,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
2107,2,ComputeColorKernel,runs,"[('float *', 'u'), ('float *', 'v'), ('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float3 *', 'uvRGB'), ('float', 'flowscale')]"
2107,3,SolveSmoothGaussianGlobalKernel5,runs,"[('float *', 'u'), ('float *', 'v'), ('float *', 'bku'), ('float *', 'bkv'), ('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float *', 'outputu'), ('float *', 'outputv'), ('float *', 'outputbku'), ('float *', 'outputbkv')]"
2107,4,SolveSmoothGaussianGlobalKernel3,runs,"[('float *', 'u'), ('float *', 'v'), ('float *', 'bku'), ('float *', 'bkv'), ('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float *', 'outputu'), ('float *', 'outputv'), ('float *', 'outputbku'), ('float *', 'outputbkv')]"
2107,10,SolveSmoothMedianGlobalKernel5,runs,"[('float *', 'u'), ('float *', 'v'), ('float *', 'bku'), ('float *', 'bkv'), ('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float *', 'outputu'), ('float *', 'outputv'), ('float *', 'outputbku'), ('float *', 'outputbkv')]"
2107,11,SolveSmoothMedianGlobalKernel3,runs,"[('float *', 'u'), ('float *', 'v'), ('float *', 'bku'), ('float *', 'bkv'), ('int', 'width'), ('int', 'height'), ('int', 'stride'), ('float *', 'outputu'), ('float *', 'outputv'), ('float *', 'outputbku'), ('float *', 'outputbkv')]"
2109,4,mprts_update_offsets,runs,"[('int', 'nr_total_blocks'), ('uint *', 'd_off'), ('uint *', 'd_spine_sums')]"
2109,5,k_count_received,runs,"[('int', 'nr_total_blocks'), ('uint *', 'd_n_recv_by_block'), ('uint *', 'd_spine_cnts')]"
2109,6,k_reorder_send_buf_total,runs,"[('int', 'nr_prts'), ('int', 'nr_total_blocks'), ('uint *', 'd_bidx'), ('uint *', 'd_sums'), ('float4 *', 'd_xi4'), ('float4 *', 'd_pxi4'), ('float4 *', 'd_xchg_xi4'), ('float4 *', 'd_xchg_pxi4')]"
2109,20,k_zero_comp_xyz,runs,"[('float *', 'data'), ('uint', 'n'), ('uint', 'stride')]"
2119,0,gpu_transpo_kernel_naive,runs,"[('u_char *', 'Source'), ('u_char *', 'Resultat'), ('unsigned', 'width'), ('unsigned', 'height')]"
2119,1,gpu_transpo_kernel_shared,runs,"[('u_char *', 'Source'), ('u_char *', 'Resultat'), ('unsigned', 'width'), ('unsigned', 'height')]"
2119,2,gpu_sobel_kernel_naive,runs,"[('u_char *', 'Source'), ('u_char *', 'Resultat'), ('unsigned', 'width'), ('unsigned', 'height')]"
2119,3,gpu_sobel_kernel_shared,runs,"[('u_char *', 'Source'), ('u_char *', 'Resultat'), ('unsigned', 'width'), ('unsigned', 'height')]"
2119,4,gpu_dotp_kernel,runs,"[('int', 'size'), ('float *', 'vec1'), ('float *', 'vec2'), ('float *', 'res')]"
2119,5,gpu_histo_kernel_naive,runs,"[('u_char *', 'Source'), ('int *', 'res'), ('unsigned', 'height'), ('unsigned', 'width')]"
2119,6,gpu_histo_kernel_shared,runs,"[('u_char *', 'Source'), ('int *', 'res'), ('unsigned', 'height'), ('unsigned', 'width')]"
2119,7,saxpy_kernel,runs,"[('int', 'n'), ('float', 'a'), ('float *', 'v1'), ('float *', 'v2'), ('float *', 's')]"
2119,8,mean_kernel,runs,"[('int', 'n'), ('float *', 'v1'), ('float *', 'v2'), ('float *', 'res')]"
2119,9,gpu_saxpy,runs,"[('int', 'n'), ('float', 'a'), ('float *', 'x'), ('float *', 'y'), ('float *', 's')]"
2123,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
2127,0,add,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
2138,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2138,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
214,0,GPUMultiplyMatrix,runs,"[('long *', 'matrix1'), ('long *', 'matrix2'), ('int', 'paths'), ('int', 'count')]"
2140,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2140,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2143,0,DeformablePSROIPoolForwardKernel,runs,"[('const int', 'count'), ('const double *', 'bottom_data'), ('const double', 'spatial_scale'), ('const int', 'channels'), ('const int', 'height'), ('const int', 'width'), ('const int', 'pooled_height'), ('const int', 'pooled_width'), ('const double *', 'bottom_rois'), ('const double *', 'bottom_trans'), ('const int', 'no_trans'), ('const double', 'trans_std'), ('const int', 'sample_per_part'), ('const int', 'output_dim'), ('const int', 'group_size'), ('const int', 'part_size'), ('const int', 'num_classes'), ('const int', 'channels_each_class'), ('double *', 'top_data'), ('double *', 'top_count')]"
2157,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
2157,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
2157,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
2157,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
2157,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
216,0,test_kernel,runs,[]
2161,90,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
2161,103,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
2161,104,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
2161,105,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
2161,106,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
2166,0,matrixMulGPU,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
2166,1,matrixMulGPU,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
2166,2,firstParallel,runs,[]
2166,3,printSuccessForCorrectExecutionConfiguration,runs,[]
2166,4,printSuccessForCorrectExecutionConfiguration,runs,[]
2166,5,helloGPU,runs,[]
2166,6,loop,runs,[]
2166,7,initializeElementsTo,runs,"[('int', 'initialValue'), ('int *', 'a'), ('int', 'N')]"
2166,8,initializeElementsTo,runs,"[('int', 'initialValue'), ('int *', 'a'), ('int', 'N')]"
2166,9,loop,runs,[]
2166,13,saxpy,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
2166,14,saxpy,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
2166,15,saxpy,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
2166,16,deviceKernel,runs,"[('int *', 'a'), ('int', 'N')]"
2171,0,gpu_square_matrix_mult,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_result'), ('int', 'n')]"
2171,1,gpu_matrix_mult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
2171,2,set_identity_kernel,runs,"[('float *', 'a'), ('int', 'm'), ('int', 'n')]"
2172,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
2172,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
2172,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
2172,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
2172,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
2172,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
2172,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
2172,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
2172,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
2172,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
2172,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
2172,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
2172,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
2172,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
2172,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
2172,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
2172,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
2172,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
2172,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
2172,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
2172,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
2172,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
2172,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
2172,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2172,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2172,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2172,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2172,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2172,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2172,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
2172,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
2172,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
2172,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
2172,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
2172,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
2172,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
2172,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
2172,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
2172,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2172,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2172,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2172,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2172,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2172,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2172,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
2172,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
2172,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
2172,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
2172,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
2172,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
2172,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
2172,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
2172,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
2172,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
2173,0,VecAddInt32,runs,"[('int32_t *', 'in0'), ('int32_t *', 'in1'), ('int32_t *', 'out'), ('int', 'cnt')]"
2173,1,VecAddFp32,runs,"[('float *', 'in0'), ('float *', 'in1'), ('float *', 'out'), ('int', 'cnt')]"
2173,2,VecSubInt32,runs,"[('int32_t *', 'in0'), ('int32_t *', 'in1'), ('int32_t *', 'out'), ('int', 'cnt')]"
2173,3,VecSubFp32,runs,"[('float *', 'in0'), ('float *', 'in1'), ('float *', 'out'), ('int', 'cnt')]"
218,0,bitonic_sort_step,runs,"[('float *', 'dev_values'), ('int', 'j'), ('int', 'k')]"
2183,1,gpu_floyd_kernel,runs,"[('int', 'k'), ('int *', 'adjacency_mtx'), ('int *', 'paths'), ('int', 'size')]"
2184,5,calculatePi,runs,"[('double *', 'piTotal'), ('long int', 'iterations'), ('int', 'totalThreads')]"
219,0,gen_matvec,runs,"[('float *', 'A'), ('float *', 'x'), ('float *', 'y'), ('const int', 'm'), ('const int', 'n')]"
219,1,gen_matvecT,runs,"[('float *', 'A'), ('float *', 'x'), ('float *', 'y'), ('const int', 'm'), ('const int', 'n')]"
219,2,transpose,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
219,3,transpose_naive,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
219,6,threshold_one,runs,"[('float *', 'vec'), ('float *', 'vec_thres'), ('int *', 'bin'), ('const int', 'k_bin'), ('const int', 'n')]"
219,7,threshold,runs,"[('float *', 'vec'), ('int *', 'bin'), ('const int', 'k_bin'), ('const int', 'n')]"
219,8,threshold_and_support,runs,"[('float *', 'vec'), ('int *', 'support'), ('const int', 'n'), ('const float', 'T')]"
219,9,zero_vector_float,runs,"[('float *', 'vec'), ('const int', 'n')]"
219,10,zero_vector_int,runs,"[('int *', 'vec'), ('const int', 'n')]"
219,11,one_vector_float,runs,"[('float *', 'vec'), ('const int', 'n')]"
219,12,one_vector_int,runs,"[('int *', 'vec'), ('const int', 'n')]"
219,13,LinearBinning,runs,"[('float *', 'vec'), ('int *', 'bin'), ('int *', 'bin_counters'), ('const int', 'num_bins'), ('const int', 'MaxBin'), ('const int', 'n'), ('const float', 'slope'), ('const float', 'intercept')]"
219,14,check_support,runs,"[('float *', 'vec_input'), ('float *', 'vec'), ('const int', 'n'), ('int *', 'support_counter')]"
219,15,magnitudeCopy,runs,"[('float *', 'mag_vec'), ('float *', 'vec'), ('const int', 'n')]"
219,16,make_bins,runs,"[('float *', 'vec'), ('int *', 'bin'), ('const int', 'num_bins'), ('const int', 'n'), ('const float', 'slope'), ('const float', 'intercept')]"
219,17,count_bins,runs,"[('int *', 'bin'), ('int *', 'bin_counters'), ('const int', 'num_bins'), ('const int', 'n')]"
219,18,make_and_count_bins,runs,"[('float *', 'vec'), ('int *', 'bin'), ('int *', 'bin_counters'), ('const int', 'num_bins'), ('const int', 'n'), ('const float', 'slope'), ('const float', 'intercept')]"
219,19,count_zero_one,runs,"[('float *', 'vec'), ('float *', 'data'), ('const int', 'n')]"
219,20,countRest,runs,"[('int *', 'bin'), ('int *', 'bin_counters'), ('const int', 'num_bins'), ('const int', 'maxBin'), ('const int', 'n')]"
219,22,update_bins,runs,"[('float *', 'vec'), ('int *', 'bin'), ('int *', 'bin_counters'), ('const int', 'num_bins'), ('const int', 'n'), ('const float', 'slope'), ('const float', 'intercept')]"
219,23,dyadicAdd,runs,"[('int *', 'counter'), ('const int', 'length'), ('const int', 'shift')]"
219,24,__soft,runs,"[('float *', 'y'), ('const float *', 'x'), ('float', 'T'), ('int', 'm')]"
219,25,halve_bins,runs,"[('int *', 'bin'), ('const int', 'n')]"
219,26,add_adjacent,runs,"[('int *', 'vec'), ('int *', 'vec_shorter'), ('const int', 'n')]"
219,27,int_copy,runs,"[('int *', 'vec_to'), ('int *', 'vec_from'), ('const int', 'n')]"
219,28,segmentMax,runs,"[('float *', 'd_vec'), ('float *', 'segmentMaxes'), ('const int', 'length'), ('const int', 'HighLength'), ('const int', 'HighSegmentLength'), ('const int', 'threadsHigh'), ('const int', 'LowSegmentLength')]"
219,30,make_and_count_seg,runs,"[('float *', 'vec'), ('int *', 'bin'), ('int *', 'segcounter'), ('const int', 'length'), ('const int', 'countlength'), ('const int', 'HighLength'), ('const int', 'HighSegmentLength'), ('const int', 'threadsHigh'), ('const int', 'LowSegmentLength'), ('const float', 'low'), ('const float', 'high'), ('const float', 'slope')]"
219,31,make_and_count_seg_sharedAtomic,runs,"[('float *', 'vec'), ('int *', 'bin'), ('int *', 'segcounter'), ('const int', 'length'), ('const int', 'countlength'), ('const int', 'HighLength'), ('const int', 'HighSegmentLength'), ('const int', 'threadsHigh'), ('const int', 'LowSegmentLength'), ('const float', 'low'), ('const float', 'high'), ('const float', 'slope')]"
219,32,segCountSum,runs,"[('int *', 'counter'), ('int *', 'segcounter'), ('const int', 'countlength')]"
219,33,segCountSum_shared,runs,"[('int *', 'counter'), ('int *', 'segcounter'), ('const int', 'countlength')]"
219,34,magnitude,runs,"[('float *', 'vec'), ('const int', 'n')]"
220,6,FullToCOO,runs,"[('int', 'numElem'), ('float *', 'H_vals'), ('double *', 'hamilValues'), ('int', 'dim')]"
222,0,SuperFastHash,runs,"[('const char *', 'data'), ('int', 'len'), ('unsigned int *', 'hash_value')]"
2223,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2223,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
223,1,extract_hll,runs,"[('int', 'n'), ('char *', 'in'), ('char *', 'out')]"
223,2,build_hll,runs,"[('int', 'n'), ('unsigned int *', 'in'), ('unsigned int *', 'out')]"
2231,0,gpu_matrix_mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
2231,1,gpu_square_matrix_mult,runs,"[('int *', 'd_a'), ('int *', 'd_b'), ('int *', 'd_result'), ('int', 'n')]"
2231,2,gpu_matrix_transpose,runs,"[('int *', 'mat_in'), ('int *', 'mat_out'), ('unsigned int', 'rows'), ('unsigned int', 'cols')]"
2232,3,channels_first,runs,"[('float *', 'input'), ('float *', 'rinput'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'pad_size')]"
2232,4,Correlation_forward,runs,"[('float *', 'output'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
2232,5,Correlation_backward_input1,runs,"[('int', 'item'), ('float *', 'gradInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
2232,6,Correlation_backward_input2,runs,"[('int', 'item'), ('float *', 'gradInput2'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
2234,0,testPath,runs,"[('int *', 'limitSteps'), ('struct Maze *', 'maze'), ('int *', 'workDone'), ('unsigned long long *', 'path')]"
2235,28,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
224,5,neighbor_kernel,runs,"[('double *', 'cellStatePtr'), ('double *', 'cellVDendPtr')]"
224,6,compute_kernel,runs,"[('double *', 'cellStatePtr'), ('double *', 'iApp'), ('double *', 'cellVDendPtr')]"
2245,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
2247,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2247,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2249,1,empty,runs,[]
2249,3,kernel,runs,[]
2254,177,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2254,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2260,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2260,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2266,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
2266,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
2266,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
2266,8,null_kernel,runs,[]
2266,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
2272,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
2272,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
2272,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
2272,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
2272,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
2272,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
2272,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
2272,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
2272,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
2272,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
2272,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
2272,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
2272,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
2272,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
2272,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
2272,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
2272,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
2272,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
2272,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
2272,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
2272,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
2272,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
2272,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
2272,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
2272,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
2272,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
2272,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2272,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2272,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2272,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2272,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2272,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2272,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
2272,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
2272,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
2272,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
2272,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
2272,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
2272,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
2272,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
2272,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
2272,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2272,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2272,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2272,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2272,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2272,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2272,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
2272,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
2272,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
2272,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
2272,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
2272,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
2272,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
2272,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
2272,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
2272,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
2272,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
2272,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
2272,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
2277,2,Passthru,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('uint32_t *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2277,3,NV12ToARGB,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('uint32_t *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2277,4,NV12ToRGBAf,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('float4 *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2286,7,refine_dilateFPPlaneDepthMapXpYp_kernel,runs,"[('float *', 'fpPlaneDepthMap'), ('int', 'fpPlaneDepthMap_p'), ('float *', 'maskMap'), ('int', 'maskMap_p'), ('int', 'width'), ('int', 'height'), ('int', 'xp'), ('int', 'yp'), ('float', 'fpPlaneDepth')]"
2286,16,refine_computeBestDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float3 *', 'isims'), ('int', 'isims_p'), ('float3 *', 'idpts'), ('int', 'idpts_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
2286,17,refine_fuseThreeDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float *', 'isimLst'), ('int', 'isimLst_p'), ('float *', 'idptLst'), ('int', 'idptLst_p'), ('float *', 'isimAct'), ('int', 'isimAct_p'), ('float *', 'idptAct'), ('int', 'idptAct_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
2286,78,generateGaussian_kernel,runs,"[('float *', 'og'), ('float', 'delta'), ('int', 'radius')]"
229,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
229,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
229,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
229,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
229,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
229,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
229,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
229,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
229,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
229,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
229,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
229,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
229,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
229,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
229,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
229,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
229,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
23,3,cunnx_WindowGate2_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'centroids'), ('float *', 'normalizedCentroids'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('const float *', 'input'), ('const float *', 'noise'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'windowStride'), ('int', 'train')]"
23,4,cunnx_WindowGate2_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'error'), ('float *', 'targetCentroids'), ('const float *', 'centroids'), ('const float *', 'input'), ('const float *', 'inputIndice'), ('const float *', 'outputIndice'), ('const float *', 'output'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'windowStride'), ('float', 'c'), ('float', 'd'), ('float', 'e'), ('float', 'lr')]"
23,6,cunnx_WindowSparse_accGradParameters_kernel,runs,"[('float *', 'gradWeight'), ('float *', 'gradBias'), ('float *', 'gradOutput'), ('float *', 'input'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'inputSize'), ('int', 'outputSize'), ('float', 'scale')]"
23,7,cunnx_BlockSparse_updateOutput_kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('const float *', 'outputIndice'), ('const float *', 'outputScale'), ('const float *', 'bias'), ('int', 'outputSize'), ('int', 'nOutputBlock'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize')]"
23,8,cunnx_BlockSparse_updateGradOutput_kernel,runs,"[('float *', '_gradOutput'), ('float *', 'gradOutputScale'), ('const float *', 'gradOutput'), ('const float *', 'output'), ('const float *', 'outputScale'), ('int', 'outputWindowSize'), ('int', 'outputSize')]"
23,9,cunnx_BlockSparse_accGradParameters_kernel,runs,"[('float *', 'gradWeight'), ('float *', 'gradBias'), ('float *', 'gradOutput'), ('float *', 'input'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'nInputBlock'), ('int', 'nOutputBlock'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('float', 'scale')]"
23,10,cunnx_WindowGate_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'centroids'), ('float *', 'normalizedCentroids'), ('float *', 'outputIndice'), ('const float *', 'input'), ('const float *', 'noise'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'outputWindowSize'), ('float', 'a'), ('float', 'b'), ('int', 'train')]"
23,11,cunnx_WindowGate_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'error'), ('float *', 'targetCentroids'), ('const float *', 'centroids'), ('const float *', 'input'), ('const float *', 'outputIndice'), ('const float *', 'output'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'outputWindowSize'), ('float', 'c'), ('float', 'd'), ('float', 'e'), ('float', 'lr')]"
23,13,cunnx_LazyKBest_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('const float *', 'indice'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize')]"
230,0,ScaleDown_D,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'newpitch')]"
230,7,ComputeL2Distance,runs,"[('float *', 'corrData'), ('int', 'numPts1')]"
230,11,initCURAND,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'd_states')]"
230,13,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
2300,2,kernel_looping,runs,"[('float *', 'point'), ('unsigned int', 'num')]"
2300,5,init,runs,"[('uint32_t *', 'v'), ('uint32_t', 'val'), ('uint32_t', 'n')]"
2300,21,analyze,runs,"[('const float *', 'input'), ('float *', 'sum'), ('int', 'numElements')]"
2300,22,sum,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
2304,1,local_sols,runs,"[('float *', 'Le'), ('float *', 'be'), ('float *', 'ue'), ('float *', 'up_glob'), ('int *', 'cells'), ('int', 'num_cells')]"
2304,2,glob_sols,runs,"[('float *', 'Le'), ('float *', 'w'), ('float *', 'u_glob'), ('float *', 'ue'), ('int *', 'cells'), ('int', 'num_cells')]"
2305,0,GaussianKernelSimple,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'width'), ('int', 'height'), ('int', 'step')]"
2305,1,GaussianKernelArray,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'width'), ('int', 'height'), ('int', 'step'), ('int', 'ks')]"
2305,10,TransposeKernelSimple,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'width'), ('int', 'height')]"
2305,11,TransposeKernelShared,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'width'), ('int', 'height')]"
2305,12,TransposeKernelFast,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'width'), ('int', 'height')]"
2305,13,TransposeKernelFast2,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'width'), ('int', 'height')]"
2305,14,ReduceHKernelSimple,runs,"[('const uint8_t *', 'src'), ('float *', 'dst'), ('int', 'width'), ('int', 'height')]"
2305,15,ReduceInitKernel,runs,"[('float *', 'dst'), ('int', 'length')]"
2305,16,ReduceHKernelFast,runs,"[('const uint8_t *', 'src'), ('float *', 'dst'), ('int', 'width'), ('int', 'height')]"
2305,17,ReduceWKernelSimple,runs,"[('const uint8_t *', 'src'), ('float *', 'dst'), ('int', 'width'), ('int', 'height')]"
2305,18,ReduceWKernelFast,runs,"[('const uint8_t *', 'src'), ('float *', 'dst'), ('int', 'width'), ('int', 'height')]"
231,1,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
2313,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
2313,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
2321,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
2327,0,mat_mul,runs,"[('int *', 'd_A'), ('int *', 'd_B'), ('int *', 'd_C'), ('int', 'rowA'), ('int', 'colA'), ('int', 'rowB'), ('int', 'colB'), ('int', 'rowC'), ('int', 'colC')]"
2327,1,mat_mul_shared,runs,"[('int *', 'd_A'), ('int *', 'd_B'), ('int *', 'd_C'), ('int', 'rowA'), ('int', 'colA'), ('int', 'rowB'), ('int', 'colB'), ('int', 'rowC'), ('int', 'colC')]"
2328,0,stereoMatching,runs,"[('float *', 'dRDispPtr'), ('float *', 'dRPlanes'), ('int', 'cols'), ('int', 'rows'), ('curandState *', 'states'), ('int', 'iteration')]"
2328,1,init,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states'), ('int', 'cols')]"
2331,0,histDupeKernel,runs,"[('const float *', 'data1'), ('const float *', 'data2'), ('const float *', 'confidence1'), ('const float *', 'confidence2'), ('int *', 'ids1'), ('int *', 'ids2'), ('int *', 'results_id1'), ('int *', 'results_id2'), ('float *', 'results_similarity'), ('int *', 'result_count'), ('const int', 'N1'), ('const int', 'N2'), ('const int', 'max_results')]"
2332,42,compute_absv,runs,"[('const unsigned int', 'nSpheres'), ('const float *', 'velX'), ('const float *', 'velY'), ('const float *', 'velZ'), ('float *', 'd_absv')]"
2333,0,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
2333,1,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
2333,3,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
2333,4,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
2341,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2341,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2349,26,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
2349,29,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
2349,30,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
2349,31,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
235,0,AddIntsCUDA,runs,"[('int *', 'a'), ('int *', 'b')]"
235,1,SubIntsCUDA,runs,"[('int *', 'a'), ('int *', 'b')]"
2357,33,ZeroMeanImpl,runs,"[('float *', 'solutions'), ('int', 'rowSize'), ('int', 'matCount')]"
2359,0,CalculateSquare,runs,"[('float *', 'p_out'), ('float *', 'p_in')]"
236,0,add,runs,"[('int *', 'a'), ('int *', 'c')]"
236,1,hola,runs,[]
236,2,elevar_al_cuadrado,runs,"[('float *', 'd_salida'), ('float *', 'd_entrada')]"
2365,6,set_volume_to_constant,runs,"[('float *', 'out'), ('float', 'value')]"
2365,19,kernel_normalize_and_add_to_output,runs,"[('float *', 'dev_vol_in'), ('float *', 'dev_vol_out'), ('float *', 'dev_accumulate_weights'), ('float *', 'dev_accumulate_values')]"
2365,30,magnitude_threshold_kernel,runs,"[('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z'), ('float', 'gamma')]"
2365,31,gradient_and_subtract_kernel,runs,"[('float *', 'in'), ('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z')]"
2365,32,multiply_by_beta_kernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'beta')]"
2365,33,subtract_kernel,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out')]"
237,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
237,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
237,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
237,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
237,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
237,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
237,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
237,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
237,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
237,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
237,24,hello,runs,[]
237,28,hello,runs,[]
2387,0,stencil_kernel,runs,"[('float *', 'x_new'), ('float *', 'x_old')]"
2387,6,cn_pnpoly,runs,"[('int *', 'bitmap'), ('float2 *', 'points'), ('int', 'n')]"
2387,7,cn_pnpoly_naive,runs,"[('int *', 'bitmap'), ('float2 *', 'points'), ('int', 'n')]"
2387,13,matmul_kernel,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B')]"
2387,14,matmul_kernel,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B')]"
2387,15,matmul_kernel,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B')]"
2387,16,matmul_kernel,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B')]"
2389,2,kernelCalculateHistogram,runs,"[('unsigned int *', 'histogram'), ('unsigned char *', 'rawPixels'), ('long', 'chunkSize'), ('long', 'totalPixels')]"
239,0,matrix_mult,runs,"[('float *', 'dev_a'), ('float *', 'dev_b'), ('float *', 'dev_c'), ('int', 'Width')]"
2395,0,pw_copy_rc_cu_z,runs,"[('const double *', 'din'), ('double *', 'zout'), ('const int', 'n')]"
2395,1,pw_copy_cr_cu_z,runs,"[('const double *', 'zin'), ('double *', 'dout'), ('const int', 'n')]"
2395,2,pw_gather_cu_z,runs,"[('double *', 'pwcc'), ('const double *', 'c'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int *', 'ghatmap')]"
2395,3,pw_scatter_cu_z,runs,"[('double *', 'c'), ('const double *', 'pwcc'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int', 'nmaps'), ('const int *', 'ghatmap')]"
2397,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2397,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2398,35,sync_conv_groups,runs,[]
2399,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2399,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
24,1,histKernel,runs,"[('char *', 'inData'), ('long', 'size'), ('unsigned int *', 'histo')]"
24,2,transposeKernel,runs,"[('float *', 'inData'), ('float *', 'outData')]"
24,3,inputKernel,runs,"[('float *', 'x'), ('int', 'N')]"
24,4,factorKernel,runs,"[('float *', 'w'), ('int', 'N')]"
24,5,twiddleRealKernel,runs,"[('float *', 'wr'), ('float *', 'w'), ('int', 'N')]"
24,6,twiddleImgKernel,runs,"[('float *', 'wi'), ('float *', 'w'), ('int', 'N')]"
24,9,inputKernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'N')]"
24,10,inputKernel2,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'N')]"
24,11,factorKernel,runs,"[('float *', 'w'), ('int', 'N')]"
24,12,twiddleRealKernel,runs,"[('float *', 'wr'), ('float *', 'w'), ('int', 'N')]"
24,13,twiddleImgKernel,runs,"[('float *', 'wi'), ('float *', 'w'), ('int', 'N')]"
24,14,twiddleImgKernelIDFT,runs,"[('float *', 'wi'), ('float *', 'w'), ('int', 'N')]"
24,15,dotProdKernel,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'ab'), ('int', 'N')]"
24,16,multKernel,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'ab'), ('int', 'width')]"
24,17,addMat,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'add'), ('int', 'N')]"
24,18,subMat,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'sub'), ('int', 'N')]"
24,19,divMat,runs,"[('float *', 'a'), ('int', 'N')]"
240,3,cunnx_WindowGate2_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'centroids'), ('float *', 'normalizedCentroids'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('const float *', 'input'), ('const float *', 'noise'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'windowStride'), ('int', 'train')]"
240,4,cunnx_WindowGate2_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'error'), ('float *', 'targetCentroids'), ('const float *', 'centroids'), ('const float *', 'input'), ('const float *', 'inputIndice'), ('const float *', 'outputIndice'), ('const float *', 'output'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'windowStride'), ('float', 'c'), ('float', 'd'), ('float', 'e'), ('float', 'lr')]"
240,6,cunnx_WindowSparse_accGradParameters_kernel,runs,"[('float *', 'gradWeight'), ('float *', 'gradBias'), ('float *', 'gradOutput'), ('float *', 'input'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('int', 'inputSize'), ('int', 'outputSize'), ('float', 'scale')]"
240,7,cunnx_BlockSparse_updateOutput_kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('const float *', 'outputIndice'), ('const float *', 'outputScale'), ('const float *', 'bias'), ('int', 'outputSize'), ('int', 'nOutputBlock'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize')]"
240,8,cunnx_BlockSparse_updateGradOutput_kernel,runs,"[('float *', '_gradOutput'), ('float *', 'gradOutputScale'), ('const float *', 'gradOutput'), ('const float *', 'output'), ('const float *', 'outputScale'), ('int', 'outputWindowSize'), ('int', 'outputSize')]"
240,9,cunnx_BlockSparse_accGradParameters_kernel,runs,"[('float *', 'gradWeight'), ('float *', 'gradBias'), ('float *', 'gradOutput'), ('float *', 'input'), ('float *', 'inputIndice'), ('float *', 'outputIndice'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'nInputBlock'), ('int', 'nOutputBlock'), ('int', 'inputWindowSize'), ('int', 'outputWindowSize'), ('float', 'scale')]"
240,10,cunnx_WindowGate_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'centroids'), ('float *', 'normalizedCentroids'), ('float *', 'outputIndice'), ('const float *', 'input'), ('const float *', 'noise'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'outputWindowSize'), ('float', 'a'), ('float', 'b'), ('int', 'train')]"
240,11,cunnx_WindowGate_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'error'), ('float *', 'targetCentroids'), ('const float *', 'centroids'), ('const float *', 'input'), ('const float *', 'outputIndice'), ('const float *', 'output'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize'), ('int', 'outputWindowSize'), ('float', 'c'), ('float', 'd'), ('float', 'e'), ('float', 'lr')]"
240,13,cunnx_LazyKBest_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('const float *', 'indice'), ('const float *', 'gradOutput'), ('int', 'inputSize'), ('int', 'outputSize')]"
2405,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
2405,23,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
241,1,stencil_1d,runs,"[('int *', 'in'), ('int *', 'out')]"
241,2,stencil_1d,runs,"[('int *', 'in'), ('int *', 'out')]"
241,3,stencil_2d,runs,"[('int *', 'in'), ('int *', 'out')]"
2415,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2415,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
2415,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
2415,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
2415,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
2415,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
2415,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
2416,0,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,1,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,2,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,7,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'x'), ('int', 'n')]"
2416,8,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'x'), ('int', 'n')]"
2416,9,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'x'), ('int', 'n')]"
2416,10,callOperation,runs,"[('int *', 'a'), ('int *', 'result'), ('int', 'k'), ('int', 'n')]"
2416,11,callOperation,runs,"[('int *', 'a'), ('int *', 'res'), ('int', 'x'), ('int', 'n')]"
2416,12,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'res'), ('int', 'x'), ('int', 'n')]"
2416,13,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'res'), ('int', 'x'), ('int', 'n')]"
2416,14,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,15,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,16,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,17,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,18,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,19,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,20,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,21,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,22,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,23,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2416,24,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2416,25,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2416,26,addTwoArrays,runs,"[('int *', 'v1'), ('int *', 'v2'), ('int *', 'r'), ('int', 'n')]"
2416,27,addTwoArraysSharedStatic,runs,"[('int *', 'v1'), ('int *', 'v2'), ('int *', 'r'), ('int', 'n')]"
2416,28,addTwoArraysSharedDynamic,runs,"[('int *', 'v1'), ('int *', 'v2'), ('int *', 'r'), ('int', 'n')]"
2416,29,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,30,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,31,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,32,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2416,33,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2416,34,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2416,37,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'sum')]"
2416,38,add2,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'sum')]"
2416,39,addMatrix,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,40,addMatrixSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,41,addMatrixSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,42,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,43,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,44,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'k'), ('int', 'p'), ('int', 'n')]"
2416,45,callOperation,runs,"[('int *', 'niz'), ('int *', 'res'), ('int', 'k'), ('int', 'n')]"
2416,46,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'x'), ('int *', 'res'), ('int', 'n')]"
2416,47,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'x'), ('int *', 'res'), ('int', 'n')]"
2416,49,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2416,50,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2416,51,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2416,54,calculateMatrixFormula,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,55,calculateMatrixFormulaSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,56,calculateMatrixFormulaSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('int', 'n')]"
2416,57,callOperation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2416,58,callOperationSharedStatic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2416,59,callOperationSharedDynamic,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
2419,0,arrayToData,runs,"[('float *', 'g_odata'), ('uint *', 'keys'), ('int', 'imgw'), ('int', 'imgh')]"
2419,1,dataToTex,runs,"[('uint *', 'indices'), ('float4 *', 'g_odata'), ('int', 'imgw'), ('int', 'imgh')]"
2419,2,dataToArray,runs,"[('uint *', 'indices'), ('int', 'imgw'), ('int', 'imgh')]"
242,2,addKernel,runs,"[('float *', 'c'), ('float *', 'a'), ('float *', 'b'), ('int', 'size')]"
2431,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2431,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2438,0,DeformablePSROIPoolForwardKernel,runs,"[('const int', 'count'), ('const double *', 'bottom_data'), ('const double', 'spatial_scale'), ('const int', 'channels'), ('const int', 'height'), ('const int', 'width'), ('const int', 'pooled_height'), ('const int', 'pooled_width'), ('const double *', 'bottom_rois'), ('const double *', 'bottom_trans'), ('const int', 'no_trans'), ('const double', 'trans_std'), ('const int', 'sample_per_part'), ('const int', 'output_dim'), ('const int', 'group_size'), ('const int', 'part_size'), ('const int', 'num_classes'), ('const int', 'channels_each_class'), ('double *', 'top_data'), ('double *', 'top_count')]"
2440,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
245,0,square_array,runs,"[('double *', 'a'), ('int', 'N')]"
2458,88,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
246,0,dotProduct_dVector_kernel,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'partial_sum'), ('int', 'n')]"
246,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
246,2,l2_norm_dVector_kernel,runs,"[('double *', 'a'), ('double *', 'partial_sum'), ('int', 'n')]"
246,3,add_dVector_kernel,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
2461,0,matrixNorm,runs,"[('float *', 'A_dd'), ('float *', 'B_dd'), ('int', 'N_d')]"
2461,1,vector_add,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
2461,2,gpu_matrix_mult,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
2461,3,MatrixMul_tileKernel,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'Width')]"
2464,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2464,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
2464,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
2464,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
2464,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
2464,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
2464,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
2469,7,emptyKernel,runs,[]
247,0,kExp,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,1,kLogistic1,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,2,kLogistic2,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,3,kLog,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,4,kSquare,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,5,kSqrt,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,6,kZero,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,7,kReciprocal,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,8,kSign,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,9,kSubtractFromScalar,runs,"[('float *', 'gData'), ('float', 'scalar'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,10,kAddScalar,runs,"[('float *', 'gData'), ('float', 'scalar'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,11,kBiggerThanScalar,runs,"[('float *', 'gData'), ('float', 'scalar'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,12,kSmallerThanScalar,runs,"[('float *', 'gData'), ('float', 'scalar'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,13,kInRangeInc,runs,"[('float *', 'gData'), ('float', 'lower'), ('float', 'upper'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,14,kInRangeExc,runs,"[('float *', 'gData'), ('float', 'lower'), ('float', 'upper'), ('float *', 'target'), ('unsigned int', 'numElements')]"
247,22,kBiggerThan,runs,"[('float *', 'gMat1'), ('float *', 'gMat2'), ('float *', 'gMatTarget'), ('unsigned int', 'numElements')]"
247,23,kCopy,runs,"[('float *', 'srcStart'), ('float *', 'destStart'), ('const int', 'copyWidth'), ('const int', 'srcJumpWidth'), ('const int', 'destJumpWidth'), ('const int', 'numElements')]"
247,24,kCopyToTransDestSlow,runs,"[('float *', 'srcStart'), ('float *', 'destStart'), ('unsigned int', 'srcCopyWidth'), ('unsigned int', 'srcJumpWidth'), ('unsigned int', 'destJumpHeight'), ('unsigned int', 'numElements')]"
247,25,kCopyToTransDestFast,runs,"[('float *', 'srcStart'), ('float *', 'destStart'), ('unsigned int', 'srcCopyWidth'), ('unsigned int', 'srcCopyHeight'), ('unsigned int', 'srcJumpSize'), ('unsigned int', 'destJumpSize')]"
247,26,kAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls'), ('float', 'scaleA'), ('float', 'scaleB')]"
247,27,kMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
247,28,kDivide,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
247,29,kTranspose,runs,"[('float *', 'a'), ('float *', 'dest'), ('int', 'width'), ('int', 'height')]"
247,30,kSquaredDiff,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
247,31,kAdd3,runs,"[('float *', 'a'), ('const float *', 'b'), ('const float *', 'c'), ('const unsigned int', 'numEls'), ('const float', 'scaleA'), ('const float', 'scaleB'), ('const float', 'scaleC')]"
247,32,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const int', 'srcWidth'), ('const int', 'srcHeight'), ('const int', 'tgtWidth'), ('const int', 'tgtHeight')]"
247,33,kAddRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'scaleVec')]"
247,34,kAddColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('const unsigned int', 'width'), ('const unsigned int', 'height'), ('const float', 'scaleVec')]"
247,35,kEqualsRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('const int', 'width'), ('const int', 'height')]"
247,36,kEqualsColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('const int', 'width'), ('const int', 'height')]"
247,37,kBiggerThanRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('const int', 'width'), ('const int', 'height')]"
247,38,kBiggerThanColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('const int', 'width'), ('const int', 'height')]"
247,39,kMultByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
247,40,kMultByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
247,41,kDivideByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
247,42,kDivideByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
247,43,kDumbSumCols,runs,"[('float *', 'mat'), ('float *', 'vec'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
247,46,kCopyInto,runs,"[('float *', 'images'), ('float *', 'targets'), ('const int', 'imgSize'), ('const int', 'paddingSize'), ('const int', 'numImages')]"
247,77,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
247,78,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
247,79,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
247,95,k_copy_reshape_rowmajor,runs,"[('unsigned int', 'numEls'), ('unsigned int', 'a_nd'), ('const float *', 'a_data'), ('const int *', 'a_dim'), ('const int *', 'a_str'), ('unsigned int', 'z_nd'), ('float *', 'z_data'), ('const int *', 'z_dim'), ('const int *', 'z_str')]"
247,96,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
247,100,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
247,113,hessianKernel,runs,"[('float *', 'd_output'), ('const float *', 'd_gxx'), ('const float *', 'd_gxy'), ('const float *', 'd_gxz'), ('const float *', 'd_gyy'), ('const float *', 'd_gyz'), ('const float *', 'd_gzz'), ('float', 'sigma'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD')]"
247,114,hessianKernelO,runs,"[('float *', 'd_output'), ('float *', 'd_output_theta'), ('float *', 'd_output_phi'), ('const float *', 'd_gxx'), ('const float *', 'd_gxy'), ('const float *', 'd_gxz'), ('const float *', 'd_gyy'), ('const float *', 'd_gyz'), ('const float *', 'd_gzz'), ('float', 'sigma'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD')]"
247,117,bitflip_kernel,runs,"[('float *', 'M'), ('int', 'height'), ('int', 'row'), ('int', 'n')]"
2477,35,sync_conv_groups,runs,[]
248,0,kRgb2CIELab,runs,"[('uchar4 *', 'inputImg'), ('float4 *', 'outputImg'), ('int', 'width'), ('int', 'height')]"
248,1,kRgb2XYZ,runs,"[('uchar4 *', 'inputImg'), ('float4 *', 'outputImg'), ('int', 'width'), ('int', 'height')]"
248,2,float4toUchar4,runs,"[('float4 *', 'inputImage'), ('uchar4 *', 'outputImage'), ('int', 'width'), ('int', 'height')]"
248,3,float2toUchar4,runs,"[('float2 *', 'inputImage'), ('uchar4 *', 'outputImage'), ('int', 'width'), ('int', 'height'), ('int', 'index')]"
248,4,float2toUchar1,runs,"[('float2 *', 'inputImage'), ('uchar1 *', 'outputImage'), ('int', 'width'), ('int', 'height'), ('int', 'index')]"
248,5,float1toUchar4,runs,"[('float1 *', 'inputImage'), ('uchar4 *', 'outputImage'), ('int', 'width'), ('int', 'height')]"
248,6,float1toUchar1,runs,"[('float1 *', 'inputImage'), ('uchar1 *', 'outputImage'), ('int', 'width'), ('int', 'height')]"
248,7,uchar4tofloat4,runs,"[('uchar4 *', 'inputImage'), ('float4 *', 'outputImage'), ('int', 'width'), ('int', 'height')]"
2482,1,vecAdd_1,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
2482,2,vecAdd_2,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
2482,3,vecAdd_3,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
2482,4,vecAdd_1,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
2482,5,vecAdd_2,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
2482,6,vecAdd_3,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
2482,7,reduction,runs,"[('float *', 'g_data'), ('int', 'n')]"
2482,8,back_prop_kernel,runs,"[('float *', 'device_output'), ('float *', 'inP'), ('float *', 'm_hidden'), ('float *', 'weights_2'), ('float *', 'o_errG'), ('int', 'nInput'), ('int', 'nHidden'), ('int', 'nOutput'), ('float', 'l_R')]"
2482,9,back_prop_kernel_batch,runs,"[('float *', 'device_output'), ('float *', 'inP'), ('float *', 'm_hidden'), ('float *', 'weights_2'), ('float *', 'o_errG'), ('int', 'nInput'), ('int', 'nHidden'), ('int', 'nOutput'), ('float', 'l_R'), ('int', 'batchSize')]"
2482,12,sobel,runs,"[('int', 'width_d'), ('int', 'height_d'), ('int', 'threshold_d'), ('unsigned int *', 'pic_d'), ('int *', 'final_res')]"
249,1,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
249,3,THCudaTensor_kernel_copy,runs,"[('float *', 'dst'), ('long *', 'dst_sz'), ('long *', 'dst_st'), ('int', 'dst_dim'), ('float *', 'src'), ('long *', 'src_sz'), ('long *', 'src_st'), ('int', 'src_dim'), ('long', 'n_elem'), ('long', 'innerdim')]"
249,4,THCudaTensor_kernel_addcmul,runs,"[('float *', 'data'), ('float', 'value'), ('float *', 'src1'), ('float *', 'src2'), ('long', 'size')]"
249,5,THCudaTensor_kernel_addcdiv,runs,"[('float *', 'data'), ('float', 'value'), ('float *', 'src1'), ('float *', 'src2'), ('long', 'size')]"
249,8,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
249,9,THCudaTensor_kernel_indexFill,runs,"[('float *', 'tensor'), ('long *', 'stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim'), ('float', 'val')]"
249,10,THCudaTensor_kernel_indexCopy,runs,"[('float *', 'res'), ('float *', 'src'), ('long *', 'res_stride'), ('float *', 'index'), ('long', 'res_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'src_size'), ('long', 'size_dim')]"
249,11,THCudaTensor_kernel_indexSelect,runs,"[('float *', 'tensor'), ('float *', 'src'), ('long *', 'src_stride'), ('float *', 'index'), ('long', 'src_nDim'), ('int', 'dim'), ('long', 'idx_size'), ('long', 'tensor_size'), ('long', 'size_dim')]"
25,2,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
2500,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
2500,20,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
2512,7,gpujpeg_idct_gpu_kernel,runs,"[('int16_t *', 'source'), ('uint8_t *', 'result'), ('int', 'output_stride'), ('uint16_t *', 'quantization_table')]"
2523,180,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2523,320,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2528,4,compute_max_gpu,runs,"[('float *', 'device_input'), ('float *', 'device_output')]"
2528,5,ArraySum,runs,"[('float *', 'array'), ('float *', 'sum')]"
2528,6,revisedArraySum,runs,"[('float *', 'array'), ('float *', 'sum')]"
2528,7,scan,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
2528,8,compute_min_gpu,runs,"[('float *', 'device_input'), ('float *', 'device_output')]"
2528,9,reduce,runs,"[('float *', 'g_idata'), ('float *', 'g_odata')]"
2528,10,gpu_matrix_mul,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
2528,11,VecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
2528,13,vecAddGPU,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double', 'n')]"
253,3,cunn_SoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'nframe'), ('int', 'dim')]"
253,6,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
253,7,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
253,9,maxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
253,10,atomicmaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
253,14,cunn_ClassNLLCriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('int', 'sizeAverage'), ('int', 'ntarget')]"
253,15,cunn_ClassNLLCriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('float', 'grad'), ('int', 'ntarget')]"
253,16,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
253,17,subgradweight,runs,"[('float *', 'input'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'gradBias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW'), ('float', 'scale')]"
253,18,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
253,19,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
253,20,cunn_MSECriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeAverage')]"
253,21,cunn_MSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
253,26,max_output,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
253,27,max_gradInput,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
253,28,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
253,29,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
253,30,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
253,32,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
253,33,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
253,35,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
253,36,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
253,38,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride')]"
253,39,min_output,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
253,40,min_gradInput,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
2530,0,mainKernel,runs,[]
2530,1,saxpy,runs,"[('float *', 'x'), ('float *', 'y'), ('const float', 'a')]"
2530,5,gpu_grayscale,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'image'), ('float *', 'image_out')]"
2530,6,gpu_gaussian,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'image'), ('float *', 'image_out')]"
2530,7,gpu_sobel,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'image'), ('float *', 'image_out')]"
2532,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
2532,1,gradientL,runs,"[('float *', 'u'), ('float *', 'g'), ('int', 'nx'), ('int', 'ny')]"
2532,2,divergenceL,runs,"[('float *', 'v'), ('float *', 'd'), ('int', 'nx'), ('int', 'ny')]"
2532,3,lap,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'nx'), ('int', 'ny')]"
2532,4,add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'nx'), ('int', 'ny')]"
2532,5,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
2532,6,updF,runs,"[('float *', 'f'), ('float *', 'z'), ('float *', 'g'), ('float', 'tf'), ('float', 'lambda'), ('int', 'nx'), ('int', 'ny')]"
2532,7,updZ,runs,"[('float *', 'z'), ('float *', 'f'), ('float', 'tz'), ('float', 'beta'), ('int', 'nx'), ('int', 'ny')]"
2532,8,updF_SoA,runs,"[('float *', 'f'), ('float *', 'z1'), ('float *', 'z2'), ('float *', 'g'), ('float', 'tf'), ('float', 'lambda'), ('int', 'nx'), ('int', 'ny')]"
2532,9,updZ_SoA,runs,"[('float *', 'z1'), ('float *', 'z2'), ('float *', 'f'), ('float', 'tz'), ('float', 'beta'), ('int', 'nx'), ('int', 'ny')]"
2532,10,updhgF_SoA,runs,"[('float *', 'f'), ('float *', 'z1'), ('float *', 'z2'), ('float *', 'g'), ('float', 'tf'), ('float', 'invlambda'), ('int', 'nx'), ('int', 'ny')]"
2532,11,updhgZ_SoA,runs,"[('float *', 'z1'), ('float *', 'z2'), ('float *', 'f'), ('float', 'tz'), ('float', 'lambda'), ('int', 'nx'), ('int', 'ny')]"
2532,12,gradient,runs,"[('float *', 'u'), ('float *', 'g'), ('int', 'nx'), ('int', 'ny')]"
2532,13,divergence,runs,"[('float *', 'v'), ('float *', 'd'), ('int', 'nx'), ('int', 'ny')]"
2532,14,sub0,runs,"[('float *', 'div0'), ('float *', 'div'), ('float *', 'g'), ('float', 'lambda'), ('int', 'nx'), ('int', 'ny')]"
2532,15,zupdate,runs,"[('float *', 'z'), ('float *', 'z0'), ('float', 'tau'), ('int', 'nx'), ('int', 'ny')]"
2532,16,fupdate,runs,"[('float *', 'f'), ('float *', 'z'), ('float *', 'g'), ('float', 'invlambda'), ('int', 'nx'), ('int', 'ny')]"
2532,17,zupdate2,runs,"[('float *', 'z'), ('float *', 'f'), ('float', 'tau'), ('int', 'nx'), ('int', 'ny')]"
2532,18,solution,runs,"[('float *', 'f'), ('float', 'lambda'), ('int', 'nx'), ('int', 'ny')]"
2532,21,solution2,runs,"[('float *', 'f'), ('float', 'lambda'), ('int', 'nx'), ('int', 'ny')]"
2532,22,solution_stencil,runs,"[('float *', 'zx'), ('float *', 'zy'), ('float *', 'g'), ('float', 'lambda'), ('int', 'nx'), ('int', 'ny')]"
2532,23,zupdate_stencil,runs,"[('float *', 'zx'), ('float *', 'zy'), ('float *', 'zoutx'), ('float *', 'zouty'), ('float *', 'g'), ('float', 'tau'), ('float', 'invlambda'), ('int', 'nx'), ('int', 'ny')]"
2532,24,fupdate_inter,runs,"[('float *', 'z'), ('float *', 'g'), ('float', 'invlambda'), ('int', 'nx'), ('int', 'ny')]"
2532,25,zupdate_inter,runs,"[('float *', 'z'), ('float', 'tau'), ('int', 'nx'), ('int', 'ny')]"
2532,26,solution_inter,runs,"[('float *', 'z'), ('float *', 'g'), ('float', 'lambda'), ('int', 'nx'), ('int', 'ny')]"
2532,27,fupdate_SoA,runs,"[('float *', 'f'), ('float *', 'z1'), ('float *', 'z2'), ('float *', 'g'), ('float', 'invlambda'), ('int', 'nx'), ('int', 'ny')]"
2532,28,zupdate2_SoA,runs,"[('float *', 'z1'), ('float *', 'z2'), ('float *', 'f'), ('float', 'tau'), ('int', 'nx'), ('int', 'ny')]"
2532,29,solution_SoA,runs,"[('float *', 'f'), ('float', 'lambda'), ('int', 'nx'), ('int', 'ny')]"
2532,30,fupdate_dummy,runs,"[('float *', 'f'), ('float *', 'z1'), ('float *', 'z2'), ('float *', 'g'), ('float', 'invlambda'), ('int', 'nx'), ('int', 'ny')]"
2532,31,zupdate2_dummy,runs,"[('float *', 'z1'), ('float *', 'z2'), ('float *', 'f'), ('float', 'tau'), ('int', 'nx'), ('int', 'ny')]"
2532,32,solution_dummy,runs,"[('float *', 'f'), ('float', 'lambda'), ('int', 'nx'), ('int', 'ny')]"
2535,3,resampleFloat_Kernel,runs,"[('float *', 'd_output'), ('unsigned int', 'outputWidth'), ('unsigned int', 'outputHeight'), ('const float *', 'd_input'), ('unsigned int', 'inputWidth'), ('unsigned int', 'inputHeight')]"
2535,4,resampleFloat4_Kernel,runs,"[('float4 *', 'd_output'), ('unsigned int', 'outputWidth'), ('unsigned int', 'outputHeight'), ('const float4 *', 'd_input'), ('unsigned int', 'inputWidth'), ('unsigned int', 'inputHeight')]"
2535,5,resampleUCHAR4_Kernel,runs,"[('uchar4 *', 'd_output'), ('unsigned int', 'outputWidth'), ('unsigned int', 'outputHeight'), ('const uchar4 *', 'd_input'), ('unsigned int', 'inputWidth'), ('unsigned int', 'inputHeight')]"
2535,8,computeIntensityDerivatives_Kernel,runs,"[('float2 *', 'd_output'), ('const float *', 'd_input'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
2535,9,computeIntensityGradientMagnitude_Kernel,runs,"[('float *', 'd_output'), ('const float *', 'd_input'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
2535,17,erodeDepthMapDevice,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('int', 'structureSize'), ('int', 'width'), ('int', 'height'), ('float', 'dThresh'), ('float', 'fracReq')]"
2548,1,TestDimensions,runs,[]
2562,4,absoluteDifferenceCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2562,5,bitwiseAndCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2562,6,bitwiseOrCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2562,7,bitwiseXorCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2562,10,copyCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2562,13,flipCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('bool', 'horizontal'), ('bool', 'vertical')]"
2562,14,histogramCuda,runs,"[('const uint8_t *', 'data'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'histogram')]"
2562,15,invertCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2562,16,isEqualCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'isEqual')]"
2562,17,lookupTableCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint8_t *', 'table')]"
2562,18,maximumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2562,19,minimumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2562,20,projectionProfileHorizontalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
2562,21,projectionProfileVerticalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
2562,22,rotateCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('float', 'inXStart'), ('float', 'inYStart'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('float', 'cosAngle'), ('float', 'sinAngle')]"
2562,24,setPixelCuda,runs,"[('uint8_t *', 'in'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'pointX'), ('uint32_t *', 'pointY'), ('uint32_t', 'pointSize'), ('uint32_t', 'value')]"
2562,25,subtractCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
2562,29,isAnyEqualCuda,runs,"[('const uint8_t *', 'image'), ('uint8_t *', 'value'), ('size_t', 'valueCount'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'differenceCount')]"
2563,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
2563,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
2563,3,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
2563,4,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
2563,5,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
2563,6,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
2571,0,polynomial_expansion,runs,"[('float *', 'poly'), ('int', 'degree'), ('int', 'n'), ('float *', 'array')]"
258,1,vecAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('const int', 'N')]"
258,3,vecDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('const int', 'N')]"
258,4,vecMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('const int', 'N')]"
258,5,vecEps,runs,"[('float *', 'a'), ('const int', 'N')]"
258,6,rowDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
258,7,colDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
258,8,colMul,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
258,19,vecDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('const int', 'N')]"
258,20,vecMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('const int', 'N')]"
258,21,vecEps,runs,"[('float *', 'a'), ('const int', 'N')]"
258,22,rowDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
258,23,colDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
258,24,colMul,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
258,29,reduce0,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('int', 'N')]"
2583,0,updateParams,runs,"[('int', 'N'), ('int', 'M'), ('float', 'alpha'), ('float', 'beta1'), ('float', 'beta2'), ('float', 't'), ('float *', 'PARAMS'), ('float *', 'GRADS'), ('float *', 'm'), ('float *', 'v')]"
2583,1,updateEst,runs,"[('int', 'N'), ('int', 'M'), ('float', 'beta2'), ('float', 'scale'), ('float *', 'PARAMS'), ('float *', 'AVG'), ('float *', 'EST')]"
2583,2,elSq,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'Mat')]"
2583,3,elSq2,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'In'), ('float *', 'Out')]"
2583,4,scaleParams,runs,"[('int', 'N'), ('int', 'M'), ('float', 'c'), ('float *', 'Mat'), ('float *', 'F')]"
2583,5,tanhGradient,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'z'), ('float *', 'tanh_grad_z')]"
2583,6,tanhGradientDropout,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'z'), ('float *', 'tanh_grad_z'), ('int', 'seed'), ('float', 'D')]"
2583,7,noactivationGradient,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'z'), ('float *', 'tanh_grad_z'), ('int', 'seed'), ('float', 'D')]"
2583,8,tanhActivation,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'z')]"
2583,9,fill_cols,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'X'), ('float *', 'V')]"
2583,10,swap_matrix_col,runs,"[('int', 'N'), ('int', 'C'), ('float *', 'X'), ('float *', 'V')]"
2583,11,finish_delta,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'A'), ('float *', 'Y'), ('float *', 'out')]"
2583,12,sqErr,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'A'), ('float *', 'Y')]"
2583,13,absErr,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'A'), ('float *', 'Y')]"
2583,14,sqErrDeriv,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'A'), ('float *', 'Y'), ('float *', 'out')]"
2583,15,absErrDeriv,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'A'), ('float *', 'Y'), ('float *', 'out')]"
2583,16,normLogErr,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'A'), ('float *', 'Y')]"
2583,17,normLogErrDeriv,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'A'), ('float *', 'Y'), ('float *', 'out')]"
2583,18,cauchyLogErr,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'A'), ('float *', 'Y')]"
2583,19,cauchyLogErrDeriv,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'A'), ('float *', 'Y'), ('float *', 'out')]"
2583,20,finishAdvX,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'X'), ('float *', 'advX')]"
2583,21,elMul,runs,"[('int', 'N'), ('int', 'M'), ('float *', 'X1'), ('float *', 'X2')]"
2595,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
26,1,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
260,0,mInitVelocity,runs,"[('float *', 'u_dimX'), ('float *', 'u_dimY')]"
260,2,mInitForce,runs,"[('float *', 'f_dimX'), ('float *', 'f_dimY')]"
260,3,mAddDensity,runs,"[('float *', 'dense'), ('float *', 'dense_old'), ('float', 'dt')]"
260,4,mAddForce_TwoDim,runs,"[('float *', 'velocityX'), ('float *', 'velocityY'), ('float *', 'forceX'), ('float *', 'forceY'), ('float', 'dt')]"
260,5,mAddExternForce,runs,"[('float *', 'w_dimX'), ('float *', 'w_dimY'), ('float *', 'f_dimX'), ('float *', 'f_dimY'), ('float', 'dt')]"
260,6,mAdvect,runs,"[('float *', 'new_data'), ('float *', 'old_data'), ('float *', 'xv'), ('float *', 'yv'), ('float', 't_step'), ('float', 's_stepX'), ('float', 's_stepY')]"
260,7,mJocobi_TwoDim,runs,"[('float *', 'x_new'), ('float *', 'x_old'), ('float *', 'b'), ('float', 'alpha'), ('float', 'rBeta')]"
260,8,mDivergence_TwoDim,runs,"[('float *', 'div'), ('float *', 'u_dimX'), ('float *', 'u_dimY'), ('float', 'r_sStep')]"
260,9,mGradient_TwoDim,runs,"[('float *', 'u_dimX'), ('float *', 'u_dimY'), ('float *', 'scalar'), ('float', 'coeffX'), ('float', 'coeffY')]"
260,10,mSetFieldBoundary,runs,"[('float *', 'field'), ('float', 'scalar')]"
260,11,mAttachTexture,runs,"[('uint8_t *', 'frame'), ('float *', 'dense')]"
260,12,mAddDrip,runs,"[('float *', 'dense'), ('int', 'centerX'), ('int', 'centerY'), ('float', 'redius')]"
260,13,IndexLeafNode,runs,"[('const char *', 'text'), ('bool *', 'forest'), ('int', 'text_size'), ('int', 'step')]"
260,14,IndexInteranlNode,runs,"[('bool *', 'forest'), ('int', 'base'), ('int', 'step')]"
260,15,FindPos,runs,"[('int *', 'pos'), ('bool *', 'forest'), ('int', 'text_size'), ('int', 'order'), ('int', 'step')]"
260,16,CalculateFixed,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const float *', 'mask'), ('float *', 'fixed'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
260,17,PoissonImageCloningIteration,runs,"[('const float *', 'fixed'), ('const float *', 'mask'), ('const float *', 'buf1'), ('float *', 'buf2'), ('const int', 'wt'), ('const int', 'ht')]"
260,18,Shrink_DownSampling,runs,"[('float *', 'target'), ('const float *', 'source'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'ws'), ('const int', 'hs')]"
260,19,NN_DownSampling,runs,"[('float *', 'target'), ('const float *', 'source'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'ws'), ('const int', 'hs')]"
260,20,NN_UpSampling,runs,"[('float *', 'target'), ('const float *', 'source'), ('const int', 'wt'), ('const int', 'ht')]"
260,21,SimpleClone,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const float *', 'mask'), ('float *', 'output'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
2600,0,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
2600,1,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
2600,2,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
2600,3,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
2600,4,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
2600,5,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
2600,6,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
2600,7,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
2600,8,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
2600,9,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
2600,10,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
2600,11,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
2600,12,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
2600,13,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
2600,14,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
2600,15,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
2600,16,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
2600,17,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
2600,18,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2600,19,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2600,20,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2600,21,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2600,22,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2600,23,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
2600,24,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
2600,25,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
2600,26,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
2600,27,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
2600,28,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
2600,29,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
2600,30,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2600,31,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2600,32,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
2600,33,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
2600,34,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
2600,35,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
2621,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2621,225,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
2621,226,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
2621,227,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
2621,232,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
2621,348,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
2621,353,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2625,0,ConvMatKernel,runs,"[('unsigned char *', 'img_device'), ('unsigned char *', 'img_device2'), ('uint32_t', 'width_image'), ('uint32_t', 'height_image'), ('int', 'j'), ('float *', 'mat')]"
2625,1,blurKernel,runs,"[('unsigned char *', 'img_device'), ('unsigned char *', 'img_device2'), ('uint32_t', 'width_image'), ('uint32_t', 'height_image')]"
2625,2,BWkernel,runs,"[('unsigned char *', 'img_device'), ('uint32_t', 'n')]"
263,6,extracunn_MSSECriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim')]"
263,7,extracunn_MSSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
2632,0,vector_add,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
2632,1,cuda_hello,runs,[]
2632,2,vector_add,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
2632,3,vector_add,runs,"[('float *', 'out'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
2636,28,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
2636,31,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
2636,43,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
2636,44,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
2636,55,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
2637,0,cuComputeDistanceGlobal,runs,"[('float *', 'A'), ('int', 'wA'), ('float *', 'B'), ('int', 'wB'), ('int', 'dim'), ('float *', 'AB')]"
2637,1,cuInsertionSort,runs,"[('float *', 'dist'), ('long *', 'ind'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
2637,2,cuParallelSqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'k')]"
2638,26,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
2638,29,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
2638,30,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
2638,31,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
2648,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
2653,174,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2653,315,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2657,1,TestDimensions,runs,[]
2660,28,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
2660,31,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
2660,43,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
2660,44,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
2660,55,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
2665,1,test_kernel,runs,"[('int', 'N'), ('double *', 'A'), ('double *', 'B'), ('double *', 'X')]"
2665,6,transpose,runs,"[('int', 'N'), ('double *', 'A')]"
2668,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
2668,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
2668,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
2668,8,null_kernel,runs,[]
2668,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
267,0,parallelMeanUnroll2,runs,"[('float *', 'd_inputArray'), ('uint64_t', 'inputLength'), ('float *', 'd_outputMean')]"
267,1,subtractMean,runs,"[('float *', 'd_inputArray'), ('uint64_t', 'inputLength'), ('float', 'd_mean')]"
267,2,outerProductSmartBruteForce,runs,"[('float *', 'resultMatrix'), ('float *', 'vec'), ('int', 'vectorLength')]"
267,3,outerProductSmartBruteForceLessThreads,runs,"[('float *', 'resultMatrix'), ('float *', 'vec'), ('uint64_t', 'vectorLength')]"
267,5,normalise,runs,"[('float *', 'result'), ('unsigned int', 'resultLength'), ('float *', 'amps'), ('unsigned int *', 'hits')]"
267,6,setDiagonalToZero,runs,"[('float *', 'd_matrix'), ('uint64_t', 'columnsAndRows')]"
2674,16,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
2674,19,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
2674,21,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
2674,23,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
2674,25,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
2674,27,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
2674,28,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
2674,30,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
2674,33,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
2674,36,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
2679,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2679,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2694,0,simple_addition,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'len')]"
2694,1,good_addition,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'len')]"
2694,2,matrix_matrix_mul_old,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n_row'), ('int', 'n_col'), ('int', 'n_comm')]"
2694,3,matrix_matrix_new,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n_row'), ('int', 'n_col'), ('int', 'n_comm')]"
2695,0,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
2695,3,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
2695,5,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
2695,7,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
2695,9,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
2695,11,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
2695,12,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
2695,14,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
2695,17,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
2695,20,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
2698,0,GEMMLowpKernel,runs,"[('const float *', 'in'), ('const int', 'N'), ('float *', 'out'), ('float', 'scale'), ('float', 'shift'), ('long long', 'qmax'), ('const float *', 'noise'), ('bool', 'enforce_true_zero')]"
2704,31,set_arr,runs,"[('float', 'b'), ('float *', 'c'), ('size_t', 'N')]"
2704,32,set_carr,runs,"[('float', 'br'), ('float', 'bi'), ('float *', 'c'), ('size_t', 'N')]"
2704,33,arr_times_const_checkerboard,runs,"[('float *', 'a'), ('float', 'b'), ('float *', 'c'), ('size_t', 'N'), ('size_t', 'sx'), ('size_t', 'sy'), ('size_t', 'sz')]"
2704,35,rotate,runs,"[('float *', 'a'), ('float', 'b'), ('float *', 'c'), ('size_t', 'sx'), ('size_t', 'sy'), ('size_t', 'sz'), ('size_t', 'dx'), ('size_t', 'dy'), ('size_t', 'dz'), ('size_t', 'ux'), ('size_t', 'uy'), ('size_t', 'uz')]"
2704,36,arr_times_const_scramble,runs,"[('float *', 'a'), ('float', 'b'), ('float *', 'c'), ('size_t', 'sx'), ('size_t', 'sy'), ('size_t', 'sz'), ('size_t', 'ox'), ('size_t', 'oy'), ('size_t', 'oz')]"
2704,37,array_copy,runs,"[('float *', 'a'), ('float *', 'c'), ('size_t', 'mx'), ('size_t', 'my'), ('size_t', 'mz'), ('size_t', 'sx'), ('size_t', 'sy'), ('size_t', 'sz'), ('size_t', 'ox'), ('size_t', 'oy'), ('size_t', 'oz')]"
2704,40,core_svd2D,runs,"[('float *', 'X'), ('float *', 'Ye'), ('float *', 'Yv'), ('size_t', 'N')]"
2704,41,core_svd2D_recomp,runs,"[('float *', 'Y'), ('float *', 'E'), ('float *', 'V'), ('size_t', 'N')]"
2704,60,set_arr,runs,"[('float', 'b'), ('float *', 'c'), ('int', 'N')]"
2704,61,set_carr,runs,"[('float', 'br'), ('float', 'bi'), ('float *', 'c'), ('int', 'N')]"
2704,62,arr_times_const_checkerboard,runs,"[('float *', 'a'), ('float', 'b'), ('float *', 'c'), ('int', 'N'), ('int', 'sx'), ('int', 'sy'), ('int', 'sz')]"
2704,63,rotate2,runs,"[('float *', 'a'), ('float', 'b'), ('float *', 'c'), ('int', 'sx'), ('int', 'sy'), ('int', 'sz'), ('int', 'dx'), ('int', 'dy'), ('int', 'dz')]"
2704,64,rotate,runs,"[('float *', 'a'), ('float', 'b'), ('float *', 'c'), ('int', 'sx'), ('int', 'sy'), ('int', 'sz'), ('int', 'dx'), ('int', 'dy'), ('int', 'dz'), ('int', 'ux'), ('int', 'uy'), ('int', 'uz')]"
2704,65,arr_times_const_scramble,runs,"[('float *', 'a'), ('float', 'b'), ('float *', 'c'), ('int', 'sx'), ('int', 'sy'), ('int', 'sz'), ('int', 'ox'), ('int', 'oy'), ('int', 'oz')]"
2704,66,array_copy,runs,"[('float *', 'a'), ('float *', 'c'), ('int', 'mx'), ('int', 'my'), ('int', 'mz'), ('int', 'sx'), ('int', 'sy'), ('int', 'sz'), ('int', 'ox'), ('int', 'oy'), ('int', 'oz')]"
2705,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
2705,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
2710,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2710,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2725,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
2725,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
2725,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
2725,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
2725,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
2725,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
2726,0,kernel,runs,[]
2726,1,kernel,runs,[]
2726,2,kernel,runs,[]
2726,3,kernel,runs,[]
2727,204,cuda_debug_kernel,runs,[]
2729,0,scaleIndex,runs,"[('double *', 'matrix'), ('int', 'n'), ('int', 'index')]"
2729,1,elim,runs,"[('double *', 'A'), ('int', 'n'), ('int', 'index'), ('int', 'bsize')]"
2732,6,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
2737,1,ExpProbPolynomProbsImpl,runs,"[('const float *', 'features'), ('int', 'batchSize'), ('const int *', 'splits'), ('const float *', 'conditions'), ('const int *', 'polynomOffsets'), ('int', 'polynomCount'), ('float', 'lambda'), ('float *', 'probs')]"
2737,2,ExpProbPolynomForwardImpl,runs,"[('const float *', 'probs'), ('int', 'batchSize'), ('const float *', 'values'), ('int', 'polynomCount'), ('int', 'outputDim'), ('float *', 'out')]"
2737,4,SigmoidProbPolynomProbsImpl,runs,"[('const float *', 'features'), ('int', 'batchSize'), ('const int *', 'splits'), ('const float *', 'conditions'), ('const int *', 'polynomOffsets'), ('int', 'polynomCount'), ('float', 'lambda'), ('float *', 'probs')]"
2737,5,SigmoidProbPolynomForwardImpl,runs,"[('const float *', 'probs'), ('int', 'batchSize'), ('const float *', 'values'), ('int', 'polynomCount'), ('int', 'outputDim'), ('float *', 'out')]"
2737,8,PolynomForwardImpl,runs,"[('const float *', 'probs'), ('int', 'batchSize'), ('const float *', 'values'), ('int', 'polynomCount'), ('int', 'outputDim'), ('float *', 'out')]"
274,0,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
274,2,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
274,3,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
274,4,rgb_to_xyY,runs,"[('float *', 'd_r'), ('float *', 'd_g'), ('float *', 'd_b'), ('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float', 'delta'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
274,5,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
274,6,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
274,7,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
274,8,naive_normalized_cross_correlation,runs,"[('float *', 'd_response'), ('unsigned char *', 'd_original'), ('unsigned char *', 'd_template'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_height'), ('int', 'template_half_width'), ('int', 'template_width'), ('int', 'template_size'), ('float', 'template_mean')]"
274,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
274,10,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
274,11,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
274,19,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
274,20,smooth_shared,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
2742,25,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
2742,26,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo')]"
2742,32,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
2742,35,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
2743,1,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
2745,0,addTen,runs,"[('float *', 'd'), ('int', 'count')]"
2745,1,gpuAdd,runs,"[('int', 'd_a'), ('int', 'd_b'), ('int *', 'd_c')]"
2745,2,myfirstkernel,runs,[]
2745,3,addArraysGPU,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
275,0,matMultCUDA,runs,"[('const float *', 'a'), ('size_t', 'lda'), ('const float *', 'b'), ('size_t', 'ldb'), ('float *', 'c'), ('size_t', 'ldc'), ('int', 'n')]"
2757,186,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2757,327,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2758,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
2758,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
2758,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
2758,3,set_zero_kernel,runs,"[('float *', 'src'), ('int', 'size')]"
2758,5,binarize_weights_mean_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary'), ('float *', 'mean_arr_gpu')]"
2758,8,calc_avg_activation_kernel,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'channels'), ('int', 'batches')]"
2758,9,assisted_activation_kernel,runs,"[('float', 'alpha'), ('float *', 'output'), ('float *', 'gt_gpu'), ('float *', 'a_avg_gpu'), ('int', 'size'), ('int', 'channels'), ('int', 'batches')]"
2758,10,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
2758,11,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
2758,12,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
2758,14,im2col_align_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col'), ('const int', 'bit_align')]"
2758,21,transpose_uint32_kernel,runs,"[('uint32_t *', 'src'), ('uint32_t *', 'dst'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'src_align'), ('int', 'dst_align')]"
2758,22,transpose_uint32_kernel_2,runs,"[('uint32_t *', 'src'), ('uint32_t *', 'dst'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'src_align'), ('int', 'dst_align')]"
2758,23,repack_input_kernel,runs,"[('float *', 'input'), ('float *', 're_packed_input'), ('int', 'w'), ('int', 'h'), ('int', 'c')]"
2758,24,repack_input_kernel_2,runs,"[('float *', 'input'), ('float *', 're_packed_input'), ('int', 'w'), ('int', 'h'), ('int', 'c')]"
2758,34,convolve_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad')]"
2758,35,convolve_bin_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad'), ('int', 'new_lda'), ('float *', 'mean_arr_gpu')]"
2758,36,convolve_bin_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad'), ('int', 'new_lda'), ('float *', 'mean_arr_gpu')]"
2758,38,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
2758,40,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
2758,42,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
2758,43,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
2758,44,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
2758,45,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
2758,46,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
2758,47,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
2758,50,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
2758,51,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
2758,52,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
2758,53,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
2758,54,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
2758,55,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
2758,56,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2758,57,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2758,58,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2758,59,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2758,60,scal_add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float', 'BETA'), ('float *', 'X'), ('int', 'INCX')]"
2758,61,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2758,62,mask_kernel_new_api,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
2758,63,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
2758,64,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
2758,65,simple_copy_kernel,runs,"[('int', 'size'), ('float *', 'src'), ('float *', 'dst')]"
2758,66,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
2758,69,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
2758,70,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
2758,71,simple_input_shortcut_kernel,runs,"[('float *', 'in'), ('int', 'size'), ('float *', 'add'), ('float *', 'out')]"
2758,72,input_shortcut_kernel,runs,"[('float *', 'in'), ('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
2758,73,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2758,74,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2758,75,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
2758,76,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
2758,77,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
2758,78,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
2758,79,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
2758,80,softmax_kernel_new_api,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
2758,81,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
2758,82,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
2758,83,fix_nan_and_inf_kernel,runs,"[('float *', 'input'), ('size_t', 'size')]"
2758,84,is_nan_or_inf_kernel,runs,"[('float *', 'input'), ('size_t', 'size'), ('int *', 'pinned_return')]"
2758,86,sum_of_mults_kernel,runs,"[('float *', 'a1'), ('float *', 'a2'), ('float *', 'b1'), ('float *', 'b2'), ('size_t', 'size'), ('float *', 'dst')]"
2758,88,scale_channels_kernel,runs,"[('float *', 'in_w_h_c'), ('int', 'size'), ('int', 'channel_size'), ('float *', 'scales_c'), ('float *', 'out')]"
2758,90,sam_kernel,runs,"[('float *', 'in_w_h_c'), ('int', 'size'), ('int', 'channel_size'), ('float *', 'scales_c'), ('float *', 'out')]"
2758,91,backward_sam_kernel,runs,"[('float *', 'in_w_h_c_delta'), ('int', 'size'), ('int', 'channel_size'), ('float *', 'in_scales_c'), ('float *', 'out_from_delta'), ('float *', 'in_from_output'), ('float *', 'out_state_delta')]"
2758,92,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
2758,94,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
2758,96,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
2758,98,backward_maxpool_depth_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
2758,99,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride_x'), ('int', 'stride_y'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
2758,100,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride_x'), ('int', 'stride_y'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
2764,0,matMult,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n'), ('float *', 'c')]"
2766,2,cudaUpdateActivity_kernel,runs,"[('int *', 'inputs'), ('char *', 'activity'), ('unsigned int *', 'firingRate'), ('unsigned int *', 'exampleFiringRate'), ('int *', 'totalOutput'), ('unsigned long long int *', 'firstEventTime'), ('unsigned long long int *', 'lastEventTime'), ('unsigned int', 'inputsDimX'), ('unsigned int', 'inputsDimY'), ('unsigned int', 'inputsDimZ'), ('unsigned int long long', 'timestamp')]"
2766,3,cudaUpdateFiringRate_kernel,runs,"[('unsigned int *', 'firingRate'), ('unsigned int *', 'totalFiringRatePartial'), ('unsigned int', 'inputsDimX'), ('unsigned int', 'inputsDimY'), ('unsigned int', 'inputsDimZ')]"
2766,4,cudaUpdateFiringRate_kernel,runs,"[('int *', 'firingRate'), ('int *', 'totalFiringRatePartial'), ('unsigned int', 'inputsDimX'), ('unsigned int', 'inputsDimY'), ('unsigned int', 'inputsDimZ')]"
2766,5,cudaUpdateBatchFiringRate_kernel,runs,"[('unsigned int *', 'firingRate'), ('unsigned int *', 'batchFiringRate'), ('unsigned int', 'inputsDimX'), ('unsigned int', 'inputsDimY'), ('unsigned int', 'inputsDimZ'), ('unsigned int', 'batchSize')]"
2766,6,cudaUpdateMostActive_kernel,runs,"[('unsigned int *', 'exampleIds'), ('unsigned int *', 'exampleFiringRate'), ('unsigned int *', 'mostActiveId'), ('unsigned int', 'inputsDimX'), ('unsigned int', 'inputsDimY'), ('unsigned int', 'inputsDimZ')]"
2766,7,cudaUpdateMostActive_kernel,runs,"[('unsigned int *', 'exampleFiringRate'), ('unsigned int *', 'mostActiveId'), ('unsigned int', 'inputsDimX'), ('unsigned int', 'inputsDimY'), ('unsigned int', 'inputsDimZ')]"
2766,8,cudaNoConversion_kernel,runs,"[('float *', 'data'), ('float *', 'tickOutputsTraces'), ('float *', 'tickOutputsTracesLearning'), ('float', 'scaling'), ('unsigned int', 'inputDimX'), ('unsigned int', 'inputDimY'), ('unsigned int', 'inputDimZ')]"
2766,11,cudaSetupRng_kernel,runs,"[('curandState *', 'state'), ('unsigned int', 'seed')]"
2766,12,cudaIaccumulate_kernel,runs,"[('int *', 'x'), ('int *', 'y'), ('unsigned int', 'size')]"
2766,13,cudaSaccumulate_kernel,runs,"[('float *', 'x'), ('int *', 'y'), ('unsigned int', 'size')]"
2766,14,cudaDaccumulate_kernel,runs,"[('double *', 'x'), ('int *', 'y'), ('unsigned int', 'size')]"
2766,16,cudaSNormalizeROIs_kernel,runs,"[('unsigned int', 'inputSizeX'), ('unsigned int', 'inputSizeY'), ('unsigned int', 'nbProposals'), ('unsigned int', 'batchSize'), ('unsigned int', 'scoreIdx'), ('unsigned int', 'nbCls'), ('unsigned int', 'maxParts'), ('unsigned int', 'maxTemplates'), ('bool', 'keepMax'), ('bool', 'generateParts'), ('bool', 'generateTemplates'), ('const float', 'normX'), ('const float', 'normY'), ('const float *', 'means'), ('const float *', 'std'), ('const int *', 'numPartsPerClass'), ('const int *', 'numTemplatesPerClass'), ('const float *', 'ROIRef'), ('const float *', 'ROIEst'), ('const float *', 'ValueEst'), ('const float *', 'partsEst'), ('const float *', 'partsVisibilityEst'), ('const float *', 'templatesEst'), ('float *', 'outputs'), ('int *', 'argMax'), ('float *', 'partsPrediction'), ('float *', 'partsVisibilityPrediction'), ('float *', 'templatesPrediction'), ('float', 'scoreThreshold')]"
2766,17,cudaSToOutput_kernel,runs,"[('const unsigned int', 'nbProposals'), ('const unsigned int', 'scoreIdx'), ('const unsigned int', 'nbCls'), ('const unsigned int', 'nbOutputs'), ('const unsigned int', 'maxParts'), ('const unsigned int', 'maxTemplates'), ('bool', 'generateParts'), ('bool', 'generateTemplates'), ('const int *', 'numPartsPerClass'), ('const int *', 'numTemplatesPerClass'), ('const int *', 'maxCls'), ('const float *', 'ROIEst'), ('const int *', 'predictionIndex'), ('const float *', 'partsPrediction'), ('const float *', 'partsVisibilityPrediction'), ('const float *', 'templatesPrediction'), ('float *', 'outputs')]"
2766,18,cudaUZeroInit_kernel,runs,"[('unsigned int', 'size'), ('unsigned int *', 'data')]"
2766,19,cudaSZeroInit_kernel,runs,"[('unsigned int', 'size'), ('float *', 'data')]"
2766,20,cudaSSqrt_kernel,runs,"[('unsigned int', 'size'), ('float *', 'data')]"
2766,21,cudaSMult_kernel,runs,"[('unsigned int', 'size'), ('float *', 'a'), ('float *', 'b'), ('const float', 'beta'), ('float *', 'result')]"
2766,22,cudaSScale_kernel,runs,"[('unsigned int', 'size'), ('float *', 'input'), ('const float', 'scale'), ('const float', 'shift'), ('const float', 'beta'), ('float *', 'result')]"
2766,23,cudaSScaleAbs_kernel,runs,"[('unsigned int', 'size'), ('float *', 'input'), ('const float', 'scale'), ('const float', 'beta'), ('float *', 'result')]"
2766,24,cudaSScaleSign_kernel,runs,"[('unsigned int', 'size'), ('float *', 'input'), ('float *', 'sign'), ('const float', 'scale'), ('const float', 'beta'), ('float *', 'result')]"
2766,25,cudaSScaleSquare_kernel,runs,"[('unsigned int', 'size'), ('float *', 'input'), ('const float', 'scale'), ('const float', 'shift'), ('const float', 'beta'), ('float *', 'result')]"
2766,26,cudaSMaxForward_kernel,runs,"[('unsigned int', 'size'), ('float *', 'input'), ('float *', 'maxVal'), ('const unsigned int', 'idx'), ('unsigned int *', 'argMax')]"
2766,27,cudaSMaxBackward_kernel,runs,"[('unsigned int', 'size'), ('float *', 'diffInput'), ('const unsigned int', 'idx'), ('unsigned int *', 'argMax'), ('const float', 'beta'), ('float *', 'result')]"
2766,28,cudaSEuclideanSumBackward_kernel,runs,"[('unsigned int', 'size'), ('float *', 'diffInput'), ('float *', 'input'), ('float *', 'output'), ('const float', 'scale'), ('const float', 'beta'), ('float *', 'result')]"
2766,29,cudaSBilinearTF_Forward_kernel,runs,"[('unsigned int', 'outputWidth'), ('unsigned int', 'outputHeight'), ('unsigned int', 'nbChannels'), ('unsigned int', 'batchSize'), ('unsigned int', 'inputWidth'), ('unsigned int', 'inputHeight'), ('const unsigned int *', 'yLowIdx'), ('const unsigned int *', 'yHighIdx'), ('const float *', 'yInter'), ('const unsigned int *', 'xLowIdx'), ('const unsigned int *', 'xHighIdx'), ('const float *', 'xInter'), ('const float *', 'input'), ('float *', 'outputs')]"
2766,30,cudaSBilinearTF_BackWard_kernel,runs,"[('unsigned int', 'outputWidth'), ('unsigned int', 'outputHeight'), ('unsigned int', 'nbChannels'), ('unsigned int', 'batchSize'), ('unsigned int', 'inputWidth'), ('unsigned int', 'inputHeight'), ('const float', 'scaleX'), ('const float', 'scaleY'), ('const float *', 'diffInput'), ('float *', 'diffOutputs')]"
2766,31,cudaSNearestNeighborKernel,runs,"[('const float *', 'input'), ('size_t', 'inputSizeX'), ('size_t', 'inputSizeY'), ('float *', 'output'), ('size_t', 'outputSizeX'), ('size_t', 'outputSizeY'), ('size_t', 'nbChannels'), ('size_t', 'batchSize')]"
2766,32,cudaSGatherRP_kernel,runs,"[('unsigned int', 'inputSizeX'), ('unsigned int', 'inputSizeY'), ('unsigned int', 'nbAnchors'), ('unsigned int', 'batchSize'), ('const float *', 'inputs'), ('const int *', 'i'), ('const int *', 'j'), ('const int *', 'k'), ('const int *', 'b'), ('const int *', 'mask'), ('float *', 'outputs'), ('int *', 'anchors'), ('unsigned int', 'topN'), ('const unsigned int', 'nbProposals')]"
2766,38,cudaSAnchorBackPropagateSSD_NegSamples_kernel,runs,"[('const float *', 'inputCls'), ('float *', 'diffOutputsCls'), ('const float *', 'confSamples'), ('const int *', 'keySamples'), ('const int', 'nbSamples'), ('const int', 'nbPositive'), ('const unsigned int', 'nbAnchors'), ('const unsigned int', 'outputsHeight'), ('const unsigned int', 'outputsWidth'), ('const unsigned int', 'batchSize')]"
2766,40,cudaSReduceIndex_kernel,runs,"[('const unsigned int', 'inputSize'), ('const unsigned int', 'inputBatchOffset'), ('const unsigned int', 'outputBatchOffset'), ('const float *', 'valueThreshold'), ('const float *', 'inputs'), ('int *', 'outputMap'), ('float *', 'scores')]"
2766,41,cudaS_ssdToOutput_kernels,runs,"[('unsigned int', 'batchSize'), ('unsigned int', 'nbClass'), ('unsigned int', 'nbAnchors'), ('unsigned int', 'channelWidth'), ('unsigned int', 'channelHeight'), ('unsigned int', 'nbProposals'), ('unsigned int *', 'nbValidROIs'), ('unsigned int', 'cls'), ('unsigned int', 'totalParts'), ('unsigned int', 'totalTemplates'), ('unsigned int', 'maxParts'), ('unsigned int', 'maxTemplates'), ('unsigned int', 'cumulParts'), ('unsigned int', 'cumulTemplates'), ('unsigned int', 'nbParts'), ('unsigned int', 'nbTemplates'), ('float', 'xRatio'), ('float', 'yRatio'), ('float', 'xOutputRatio'), ('float', 'yOutputRatio'), ('const float *', 'roi_bbox'), ('const float *', 'roi_anchors'), ('const float *', 'anchors'), ('const float *', 'inputs_parts'), ('const float *', 'inputs_templates'), ('float *', 'outputs')]"
2766,42,cudaSPadding_kernel,runs,"[('unsigned int', 'nbOutputs'), ('unsigned int', 'outputWidth'), ('unsigned int', 'outputHeight'), ('unsigned int', 'nbChannels'), ('unsigned int', 'batchSize'), ('unsigned int', 'inputWidth'), ('unsigned int', 'inputHeight'), ('int', 'leftPad'), ('int', 'rightPad'), ('int', 'topPad'), ('int', 'botPad'), ('const float *', 'input'), ('float *', 'outputs')]"
2766,47,cudaSRectifier_propagate_kernel,runs,"[('float *', 'x'), ('float *', 'y'), ('unsigned int', 'size'), ('float', 'leakSlope'), ('int', 'shifting'), ('float', 'clipping')]"
2766,48,cudaDRectifier_propagate_kernel,runs,"[('double *', 'x'), ('double *', 'y'), ('unsigned int', 'size'), ('double', 'leakSlope'), ('int', 'shifting'), ('double', 'clipping')]"
2766,50,cudaSRectifier_backPropagate_kernel,runs,"[('float *', 'x'), ('float *', 'dx'), ('unsigned int', 'size'), ('float', 'leakSlope'), ('int', 'shifting'), ('float', 'clipping')]"
2766,51,cudaDRectifier_backPropagate_kernel,runs,"[('double *', 'x'), ('double *', 'dx'), ('unsigned int', 'size'), ('double', 'leakSlope'), ('int', 'shifting'), ('double', 'clipping')]"
2766,53,cudaSSaturation_propagate_kernel,runs,"[('float *', 'x'), ('float *', 'y'), ('unsigned int', 'size'), ('int', 'shifting'), ('float', 'threshold')]"
2766,54,cudaDSaturation_propagate_kernel,runs,"[('double *', 'x'), ('double *', 'y'), ('unsigned int', 'size'), ('int', 'shifting'), ('double', 'threshold')]"
2766,56,cudaSSaturation_backPropagate_kernel,runs,"[('float *', 'x'), ('float *', 'dx'), ('unsigned int', 'size'), ('int', 'shifting'), ('float', 'threshold')]"
2766,57,cudaDSaturation_backPropagate_kernel,runs,"[('double *', 'x'), ('double *', 'dx'), ('unsigned int', 'size'), ('int', 'shifting'), ('double', 'threshold')]"
2766,59,cudaSSoftplus_propagate_kernel,runs,"[('float *', 'x'), ('float *', 'y'), ('unsigned int', 'size')]"
2766,60,cudaDSoftplus_propagate_kernel,runs,"[('double *', 'x'), ('double *', 'y'), ('unsigned int', 'size')]"
2766,62,cudaSSoftplus_backPropagate_kernel,runs,"[('float *', 'x'), ('float *', 'dx'), ('unsigned int', 'size')]"
2766,63,cudaDSoftplus_backPropagate_kernel,runs,"[('double *', 'x'), ('double *', 'dx'), ('unsigned int', 'size')]"
2766,70,cudaSclamp_kernel,runs,"[('float *', 'x'), ('unsigned int', 'size'), ('float', 'minVal'), ('float', 'maxVal')]"
2766,71,cudaSquantize_kernel,runs,"[('float *', 'x'), ('float *', 'y'), ('unsigned int', 'size'), ('float', 'minVal'), ('float', 'maxVal'), ('unsigned int', 'quantizationLevels'), ('bool', 'truncate')]"
2766,72,cudaDclamp_kernel,runs,"[('double *', 'x'), ('unsigned int', 'size'), ('double', 'minVal'), ('double', 'maxVal')]"
2766,73,cudaDquantize_kernel,runs,"[('double *', 'x'), ('double *', 'y'), ('unsigned int', 'size'), ('double', 'minVal'), ('double', 'maxVal'), ('unsigned int', 'quantizationLevels'), ('bool', 'truncate')]"
2766,77,cudaSpow_kernel,runs,"[('unsigned int', 'size'), ('float', 'power'), ('const float *', 'x'), ('float *', 'y')]"
2766,78,cudaDpow_kernel,runs,"[('unsigned int', 'size'), ('double', 'power'), ('const double *', 'x'), ('double *', 'y')]"
2766,80,cudaSadd_kernel,runs,"[('unsigned int', 'size'), ('float', 'value'), ('const float *', 'x'), ('float *', 'y')]"
2766,81,cudaDadd_kernel,runs,"[('unsigned int', 'size'), ('double', 'value'), ('const double *', 'x'), ('double *', 'y')]"
2766,83,cudaSmult_kernel,runs,"[('unsigned int', 'size'), ('const float *', 'x1'), ('const float *', 'x2'), ('float *', 'y')]"
2766,84,cudaDmult_kernel,runs,"[('unsigned int', 'size'), ('const double *', 'x1'), ('const double *', 'x2'), ('double *', 'y')]"
2766,86,cudaSinv_kernel,runs,"[('unsigned int', 'size'), ('const float *', 'x'), ('float *', 'y')]"
2766,87,cudaDinv_kernel,runs,"[('unsigned int', 'size'), ('const double *', 'x'), ('double *', 'y')]"
2767,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2767,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2769,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2769,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2772,0,MatrixMulKernel,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'Width')]"
2775,1,join_add,runs,"[('const int *', 'd1'), ('const int *', 'd2'), ('int *', 'd3')]"
2775,2,kernel_looping,runs,"[('float *', 'point'), ('unsigned int', 'num')]"
2775,5,init,runs,"[('uint32_t *', 'v'), ('uint32_t', 'val'), ('uint32_t', 'n')]"
2775,21,analyze,runs,"[('const float *', 'input'), ('float *', 'sum'), ('int', 'numElements')]"
2775,22,sum,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
2785,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2785,301,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
2785,306,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2788,2,myTextureKernel,runs,"[('cudaSurfaceObject_t', 'SurfObj'), ('size_t', 'width'), ('size_t', 'height')]"
2788,4,myFramebufferKernel,runs,[]
2792,8,matmul,runs,"[('const float_t *', 'A'), ('const float_t *', 'B'), ('float_t *', 'C'), ('const float_t', 'alpha'), ('const float_t', 'beta'), ('int', 'n'), ('int', 'd'), ('int', 'k'), ('int', 'max_block_rows')]"
2796,90,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
2796,103,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
2796,104,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
2796,105,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
2796,106,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
280,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
2802,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
2802,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
2806,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
2806,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
2806,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
2806,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
2806,31,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
281,0,initialSpikeIndCopyKernel,runs,"[('unsigned short *', 'pLastSpikeInd'), ('const unsigned int', 'noReal')]"
281,7,initialSpikeIndCopyKernel,runs,"[('unsigned short *', 'pLastSpikeInd'), ('const unsigned int', 'noReal')]"
2810,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
2815,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2815,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2818,2,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
2818,3,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
2818,4,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
2818,5,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
2818,6,bcnn_forward_upsample_cuda_kernel,runs,"[('size_t', 'dst_sz'), ('float *', 'src'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'n'), ('int', 'size'), ('float *', 'dst')]"
2818,7,bcnn_backward_upsample_cuda_kernel,runs,"[('size_t', 'dst_sz'), ('float *', 'src'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'n'), ('int', 'size'), ('float *', 'dst')]"
2818,8,_bcnn_dropout_layer_kernel,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
2818,11,_bcnn_forward_softmax_layer_kernel,runs,"[('int', 'n'), ('int', 'batch'), ('float *', 'input'), ('float *', 'output')]"
2818,14,_bcnn_forward_depthwise_conv_weight_kernel,runs,"[('int', 'nthreads'), ('float *', 'src_data'), ('float *', 'weight_data'), ('int', 'channels'), ('int', 'dst_h'), ('int', 'dst_w'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'kernel_sz'), ('int', 'stride'), ('int', 'pad'), ('float *', 'dst_data')]"
2818,15,_bcnn_backward_depthwise_conv_weight_kernel,runs,"[('int', 'nthreads'), ('float *', 'dst_grad'), ('float *', 'src_data'), ('int', 'batch_size'), ('const int', 'channels'), ('int', 'dst_h'), ('int', 'dst_w'), ('const int', 'src_h'), ('const int', 'src_w'), ('int', 'kernel_sz'), ('int', 'stride'), ('int', 'pad'), ('float *', 'weight_diff')]"
2818,16,_bcnn_backward_depthwise_conv_data_kernel,runs,"[('int', 'nthreads'), ('float *', 'dst_grad'), ('float *', 'weight_data'), ('int', 'batch_size'), ('const int', 'channels'), ('int', 'dst_h'), ('int', 'dst_w'), ('const int', 'src_h'), ('const int', 'src_w'), ('int', 'kernel_sz'), ('int', 'stride'), ('int', 'pad'), ('float *', 'src_grad')]"
2818,17,_bcnn_cuda_fill_f32_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
2818,18,_bcnn_vadd_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'y')]"
2818,19,_bcnn_vsub_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'y')]"
2818,20,_bcnn_vmul_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'y')]"
2818,21,_bcnn_vdiv_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'y')]"
2818,22,_bcnn_pow_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'a'), ('float *', 'y')]"
2818,23,_bcnn_add_scalar_kernel,runs,"[('int', 'n'), ('float', 'a'), ('float *', 'y')]"
2818,24,_bcnn_vsum_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'sum')]"
2818,25,_mean_variance_forward_kernel,runs,"[('float *', 'x'), ('int', 'b'), ('int', 'c'), ('int', 'wxh'), ('float *', 'mean'), ('float *', 'var')]"
2818,26,_norm_forward_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'b'), ('int', 'c'), ('int', 'wxh')]"
2818,27,_norm_backward_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('float *', 'var'), ('float *', 'mean_diff'), ('float *', 'var_diff'), ('int', 'b'), ('int', 'c'), ('int', 'wxh'), ('float *', 'grad')]"
2818,28,_mean_variance_backward_kernel,runs,"[('float *', 'x'), ('float *', 'grad'), ('float *', 'mean'), ('float *', 'var'), ('int', 'b'), ('int', 'c'), ('int', 'wxh'), ('float *', 'mean_diff'), ('float *', 'var_diff')]"
2818,29,bcnn_op_cuda_tanh_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
2818,30,bcnn_op_cuda_tanh_grad_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'dx')]"
2818,31,bcnn_op_cuda_relu_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
2818,32,bcnn_op_cuda_relu_grad_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'dx')]"
2818,33,bcnn_op_cuda_ramp_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
2818,34,bcnn_op_cuda_ramp_grad_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'dx')]"
2818,36,bcnn_op_cuda_clamp_grad_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'dx')]"
2818,37,bcnn_cuda_add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'bias'), ('int', 'num_channels'), ('int', 'spatial_size')]"
2818,38,bcnn_cuda_grad_bias_kernel,runs,"[('float *', 'grad_bias'), ('float *', 'grad_data'), ('int', 'num_channels'), ('int', 'spatial_size')]"
2818,39,bcnn_scales_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
2818,40,bcnn_grad_scales_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
2818,41,bcnn_cuda_axpy_strided_kernel,runs,"[('int', 'n'), ('int', 'num_batches'), ('float', 'a'), ('float *', 'x'), ('float *', 'y'), ('int', 'dst_stride'), ('int', 'src_stride'), ('int', 'x_c'), ('int', 'x_h'), ('int', 'x_w'), ('int', 'y_c'), ('int', 'y_h'), ('int', 'y_w'), ('int', 'min_c'), ('int', 'min_h'), ('int', 'min_w')]"
2818,42,bcnn_cuda_im2col_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
2821,204,cuda_debug_kernel,runs,[]
2824,0,stencil,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'raio'), ('float *', 'stencilWeight')]"
2824,1,stencilReadOnly1,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'raio'), ('float *', 'stencilWeight')]"
2824,2,stencilReadOnly2,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'raio'), ('float *', 'stencilWeight')]"
2824,3,stencilReadOnly3,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'raio'), ('float *', 'stencilWeight')]"
2824,4,stencilConst1,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'raio')]"
2824,5,stencilConst2,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'raio')]"
2824,6,stencilShared1,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'raio')]"
2824,7,stencilShared2,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'raio')]"
2824,14,stencil_1D,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'dim')]"
2824,15,stencil,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('float *', 'stencilWeight')]"
2824,16,stencilReadOnly1,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('float *', 'stencilWeight')]"
2824,17,stencilReadOnly2,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('float *', 'stencilWeight')]"
2824,18,stencilReadOnly3,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('float *', 'stencilWeight')]"
2824,19,stencilConst1,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size')]"
2824,20,stencilConst2,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size')]"
2824,21,stencilShared1,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size')]"
2824,22,stencilShared2,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size')]"
2824,23,stencil_1d,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'dim')]"
2824,24,poli_warp,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,25,poli1,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,26,poli2,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,27,poli3,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,28,poli4,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,29,poli1,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,30,poli2,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,31,poli3,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,32,poli4,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,33,kernel,runs,"[('float *', 'polynomial'), ('const size_t', 'N')]"
2824,34,poly_div1,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,35,poly_div2,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,36,poly_div3,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,37,poly_div4,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,38,poly_div5,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,39,poly_div6,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,40,poly_div7,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,41,poly_div8,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,42,poli1,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,43,poli2,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,44,poli3,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,45,poli4,runs,"[('float *', 'poli'), ('const int', 'N')]"
2824,46,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
2824,47,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
2824,55,simple_reduction,runs,"[('int *', 'shared_var'), ('int *', 'input_values'), ('int', 'N'), ('int', 'iters')]"
2824,57,helloFromGPU,runs,[]
2824,58,helloFromGPU,runs,[]
2824,59,helloFromGPU,runs,[]
2824,60,helloFromGPU,runs,[]
2824,61,lots_of_float_compute,runs,"[('float *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('float *', 'outputs')]"
2824,62,lots_of_double_compute,runs,"[('double *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('double *', 'outputs')]"
2824,63,fmad_kernel,runs,"[('double', 'x'), ('double', 'y'), ('double *', 'out')]"
2824,64,kernel,runs,"[('float *', 'F'), ('double *', 'D')]"
2824,67,standard_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
2824,68,intrinsic_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
2824,69,atomics,runs,"[('int *', 'shared_var'), ('int *', 'values_read'), ('int', 'N'), ('int', 'iters')]"
2824,70,unsafe,runs,"[('int *', 'shared_var'), ('int *', 'values_read'), ('int', 'N'), ('int', 'iters')]"
2824,72,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
2824,73,kernel,runs,"[('float *', 'A'), ('float *', 'C'), ('const int', 'N')]"
2824,74,kmeans4,runs,"[('short int *', 'input'), ('short int *', 'centroids'), ('int *', 'newcentroids'), ('int *', 'counter'), ('const int', 'n')]"
2824,75,sumArraysOnGPUlocal,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,76,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,77,sumArraysOnGPUshared,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,78,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,79,kmeans,runs,"[('short int *', 'input'), ('short int *', 'centroids'), ('int *', 'newcentroids'), ('int *', 'counter'), ('const int', 'n')]"
2824,80,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
2824,81,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
2824,82,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
2824,83,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,84,memcpy,runs,"[('float *', 'dst'), ('float *', 'src')]"
2824,85,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,86,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,87,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
2824,88,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,89,kmeans4,runs,"[('short int *', 'input'), ('short int *', 'centroids'), ('int *', 'newcentroids'), ('int *', 'counter'), ('const int', 'n')]"
2824,90,printThreadIndex,runs,"[('int *', 'A'), ('const int', 'nx'), ('const int', 'ny')]"
2824,91,sumArraysOnGPU,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('const int', 'N')]"
2824,93,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,94,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,95,checkIndex,runs,[]
2824,96,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,97,sum4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,98,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,99,sum10ops,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,100,shared1R1W1G,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,101,shared4R1W1G,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,102,shared4R1W1Gs,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,103,shared4R1Ws10ops2RG1WG,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,104,shared4R20ops,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,105,shared4R24ops,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,106,shared4R40ops,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,107,shared4R25ops,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,108,shared4RNops,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,109,shared4RMops,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,110,sum4M,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,111,sum4K,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,112,sum4Man,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,113,shared4R15ops,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,114,shared2R1W1G,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,115,shared1RC1W1G,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,116,shared1R8C1W1G,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,117,shared1R8C1W1G1RG,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,118,shared1R8C1W8C1G,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,119,memcpy,runs,"[('float *', 'dst'), ('float *', 'src')]"
2824,120,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,121,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,122,sum,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,123,sum4,runs,"[('float4 *', 'A'), ('float4 *', 'B'), ('float4 *', 'C'), ('const int', 'N')]"
2824,124,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
2824,125,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,129,sumMatrixOnGPU2D,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'NX'), ('int', 'NY')]"
2824,136,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,137,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,138,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,139,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,140,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,141,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,142,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,143,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,145,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,146,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,148,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,151,host_api_kernel,runs,"[('float *', 'randomValues'), ('float *', 'out'), ('int', 'N')]"
2824,152,device_api_kernel,runs,"[('curandState *', 'states'), ('float *', 'out'), ('int', 'N')]"
2824,154,refill_randoms,runs,"[('float *', 'dRand'), ('int', 'N'), ('curandState *', 'states')]"
2824,156,refill_randoms,runs,"[('float *', 'dRand'), ('int', 'N'), ('curandState *', 'states')]"
2824,157,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,158,sumArraysZeroCopy,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,161,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
2824,162,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
2824,163,warmup,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,164,copyRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,165,copyCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,166,transposeNaiveRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,167,transposeNaiveCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,168,transposeUnroll4Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,169,transposeUnroll4Col,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,170,transposeDiagonalRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,171,transposeDiagonalCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,173,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
2824,176,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
2824,177,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
2824,178,readOffsetUnroll2,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
2824,179,readOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
2824,180,writeOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
2824,181,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
2824,182,writeOffsetUnroll2,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
2824,183,writeOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
2824,184,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
2824,185,iKernel,runs,"[('float *', 'src'), ('float *', 'dst')]"
2824,186,iKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,187,kernel_add_wavelet,runs,"[('float *', 'g_u2'), ('float', 'wavelets'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'ngpus')]"
2824,188,kernel_2dfd_last,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
2824,189,kernel_2dfd,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
2824,197,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out')]"
2824,205,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'N')]"
2824,206,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,209,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,240,reduceGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,241,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,242,reduceSmemDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,243,reduceGmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,244,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,245,reduceSmemUnrollDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,246,reduceNeighboredGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,247,reduceNeighboredSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
2824,248,copyGmem,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,249,naiveGmem,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,250,naiveGmemUnroll,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,251,transposeSmemUnroll,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,252,transposeSmemUnrollPad,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,253,transposeSmemUnrollPadDyn,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
2824,254,transposeSmem,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
2824,255,transposeSmemPad,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
2824,256,transposeSmemDyn,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
2824,257,transposeSmemPadDyn,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
2824,262,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,267,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,280,kernel,runs,"[('float *', 'g_data'), ('float', 'value')]"
2824,281,coalesced,runs,"[('float *', 'A'), ('float *', 'C'), ('const int', 'N')]"
2824,282,skip_128b,runs,"[('float *', 'A'), ('float *', 'C'), ('const int', 'N')]"
2824,283,random,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
2824,284,coalesced2,runs,"[('float *', 'A'), ('float *', 'C'), ('const int', 'N')]"
2824,285,coalesced4,runs,"[('float *', 'A'), ('float *', 'C'), ('const int', 'N')]"
2829,0,add,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
2829,2,mandel,runs,"[('float *', 'buffer'), ('float', 'xMin'), ('float', 'xMax'), ('float', 'yMin'), ('float', 'yMax'), ('unsigned int', 'maxDepth')]"
283,1,computeMinEnergyMatrix,runs,"[('float *', 'energy'), ('float *', 'min_energy'), ('int', 'height'), ('int', 'width')]"
2830,0,cuda_cmp_kernel,runs,"[('std::size_t', 'n'), ('int *', 'aptr'), ('int *', 'bptr'), ('int *', 'rptr')]"
2831,1,cuda_kernel_initRND,runs,"[('unsigned long', 'seed'), ('curandState *', 'States')]"
2839,33,sync_conv_groups,runs,[]
284,1,computeMinEnergyMatrix,runs,"[('float *', 'energy'), ('float *', 'min_energy'), ('int', 'height'), ('int', 'width')]"
285,1,fillKernel,runs,"[('int *', 'a'), ('int', 'n')]"
285,2,dot,runs,"[('float *', 'val'), ('int *', 'row_ind'), ('int *', 'col_ind'), ('int', 'nnz'), ('float *', 'ret'), ('float *', 'w')]"
285,3,vec_sigmoid,runs,"[('float *', 'd'), ('int', 'num')]"
285,4,grad,runs,"[('float *', 'val'), ('int *', 'row_ind'), ('int *', 'col_ind'), ('float *', 'mat_err'), ('int', 'nnz'), ('float *', 'act'), ('float *', 'label'), ('float *', 'w'), ('float', 'learning_rate')]"
285,5,fill,runs,"[('float *', 'w'), ('float', 'val'), ('int', 'size')]"
285,6,fill,runs,"[('float *', 'w'), ('float', 'val'), ('int', 'size')]"
2850,0,NaiveMMKernel,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'size')]"
2850,1,OptimizedMMKernel_0,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'size')]"
2850,2,OptimizedMMKernel_1,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'size')]"
2850,3,OptimizedMMKernel_2_4,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'size')]"
2850,4,OptimizedMMKernel_2_8,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'size')]"
2850,5,OptimizedMMKernel_2_16,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'size')]"
2850,6,OptimizedMMKernel_2_32,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'size')]"
2851,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2851,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2853,6,printVal,runs,[]
287,0,KernelVersionShim,runs,[]
2873,0,reduce0,runs,"[('int *', 'g_idata'), ('int *', 'g_odata')]"
2877,20,computeTemporalSmoothRmatrices,runs,"[('const float *', 'Rmatrices'), ('uint32_t', 'numSamples'), ('uint32_t', 'subArraySize'), ('uint32_t', 'numSubArrays'), ('const uint32_t *', 'subArraySizes'), ('uint32_t', 'temporalSmoothing'), ('float *', 'TempRmatrices')]"
2877,22,fillUnusedDiagonal,runs,"[('float *', 'Rmatrices'), ('uint32_t', 'numSamples'), ('uint32_t', 'subArraySize'), ('const uint32_t *', 'subArraySizes')]"
2881,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
2881,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
2881,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
2881,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
2881,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
2884,13,ComputeHomographies,runs,"[('float *', 'coord'), ('int *', 'randPts'), ('float *', 'homo'), ('int', 'numPts')]"
2884,15,Match1,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,16,Match2,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,17,Match3,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,18,Match4,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,19,Match5,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,20,Match6,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,21,Match7,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,22,Match8,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,23,Match8small,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,24,Match8blocked,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,25,Match8blocked2,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,26,Match9,runs,"[('float *', 'd_pts1'), ('float *', 'd_pts2'), ('float *', 'd_score'), ('int *', 'd_index')]"
2884,28,ScaleDownDense,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'newpitch')]"
2884,29,ScaleDown,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'newpitch')]"
2884,30,ScaleUp,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'newpitch')]"
2890,0,Compute_psi_phi_Kernel,runs,"[('float *', 'psi'), ('float *', 'phi'), ('const float *', 'gAbsIx'), ('const float *', 'gAbsIy'), ('const float *', 'gIx'), ('const float *', 'gIy'), ('int', 'nPixels'), ('float', 'norm_for_contrast_num'), ('float', 'norm_for_contrast_denom'), ('float', 'eps')]"
2890,1,Compute_weightdata_Kernel,runs,"[('float *', 'weightdata'), ('const float *', 'I'), ('const float *', 'input'), ('int', 'nPixels'), ('int', 'nChannels'), ('int', 'c'), ('float', 'norm_for_data_term'), ('float', 'eps')]"
2890,2,Compute_weightx_weighty1_Kernel,runs,"[('float *', 'weightx'), ('float *', 'weighty'), ('const float *', 'psi'), ('const float *', 'phi'), ('const float *', 'absIx'), ('const float *', 'absIy'), ('int', 'nPixels'), ('float', 'norm_for_smooth_term'), ('float', 'eps')]"
2890,3,Compute_weightx_weighty1_norm2_Kernel,runs,"[('float *', 'weightx'), ('float *', 'weighty'), ('const float *', 'psi'), ('const float *', 'phi'), ('const float *', 'absIx'), ('const float *', 'absIy'), ('int', 'nPixels'), ('float', 'norm_for_smooth_term'), ('float', 'eps')]"
2890,4,Compute_weightx_weighty1_norm1_Kernel,runs,"[('float *', 'weightx'), ('float *', 'weighty'), ('const float *', 'psi'), ('const float *', 'phi'), ('const float *', 'absIx'), ('const float *', 'absIy'), ('int', 'nPixels'), ('float', 'norm_for_smooth_term'), ('float', 'eps')]"
2890,5,Compute_weightx_weighty1_norm0_Kernel,runs,"[('float *', 'weightx'), ('float *', 'weighty'), ('const float *', 'psi'), ('const float *', 'phi'), ('const float *', 'absIx'), ('const float *', 'absIy'), ('int', 'nPixels'), ('float', 'norm_for_smooth_term'), ('float', 'eps')]"
2890,6,Compute_weightx_weighty1_normother_Kernel,runs,"[('float *', 'weightx'), ('float *', 'weighty'), ('const float *', 'psi'), ('const float *', 'phi'), ('const float *', 'absIx'), ('const float *', 'absIy'), ('int', 'nPixels'), ('float', 'norm_for_smooth_term'), ('float', 'eps')]"
2890,7,Compute_weightx_weighty2_Kernel,runs,"[('float *', 'weightx'), ('float *', 'weighty'), ('const float *', 'absIx'), ('const float *', 'absIy'), ('int', 'nPixels'), ('float', 'norm_for_smooth_term'), ('float', 'eps')]"
2890,8,Compute_weightx_weighty2_norm2_Kernel,runs,"[('float *', 'weightx'), ('float *', 'weighty'), ('const float *', 'absIx'), ('const float *', 'absIy'), ('int', 'nPixels'), ('float', 'norm_for_smooth_term'), ('float', 'eps')]"
2890,9,Compute_weightx_weighty2_norm1_Kernel,runs,"[('float *', 'weightx'), ('float *', 'weighty'), ('const float *', 'absIx'), ('const float *', 'absIy'), ('int', 'nPixels'), ('float', 'norm_for_smooth_term'), ('float', 'eps')]"
2890,10,Compute_weightx_weighty2_norm0_Kernel,runs,"[('float *', 'weightx'), ('float *', 'weighty'), ('const float *', 'absIx'), ('const float *', 'absIy'), ('int', 'nPixels'), ('float', 'norm_for_smooth_term'), ('float', 'eps')]"
2890,11,Compute_weightx_weighty2_normother_Kernel,runs,"[('float *', 'weightx'), ('float *', 'weighty'), ('const float *', 'absIx'), ('const float *', 'absIy'), ('int', 'nPixels'), ('float', 'norm_for_smooth_term'), ('float', 'eps')]"
2890,12,Solve_redblack1_Kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('int', 'width'), ('int', 'height'), ('int', 'nChannels'), ('int', 'c'), ('const float *', 'weightdata'), ('const float *', 'weightx'), ('const float *', 'weighty'), ('float', 'lambda'), ('float', 'omega'), ('bool', 'redflag')]"
2890,13,Solve_redblack1_new_Kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('int', 'width'), ('int', 'height'), ('int', 'nChannels'), ('int', 'c'), ('const float *', 'weightdata'), ('const float *', 'weightx'), ('const float *', 'weighty'), ('float', 'lambda'), ('float', 'omega'), ('bool', 'redflag')]"
2890,14,Solve_redblack2_Kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('int', 'width'), ('int', 'height'), ('int', 'nChannels'), ('int', 'c'), ('const float *', 'weightx'), ('const float *', 'weighty'), ('float', 'lambda'), ('float', 'omega'), ('bool', 'redflag')]"
2890,15,Solve_redblack2_new_Kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('int', 'width'), ('int', 'height'), ('int', 'nChannels'), ('int', 'c'), ('const float *', 'weightx'), ('const float *', 'weighty'), ('float', 'lambda'), ('float', 'omega'), ('bool', 'redflag')]"
2890,22,Addwith_Kernel,runs,"[('float *', 'in_out_put'), ('const float *', 'other'), ('const float', 'weight'), ('const int', 'width'), ('const int', 'height'), ('const int', 'nChannels')]"
2890,23,MulWithScale_Kernel,runs,"[('float *', 'in_out_put'), ('const float', 'scale'), ('const int', 'width'), ('const int', 'height'), ('const int', 'nChannels')]"
2890,24,Add_Im1_weight1_Im2_weight2_Kernel,runs,"[('float *', 'output'), ('const float *', 'Im1'), ('const float', 'weight1'), ('const float *', 'Im2'), ('const float', 'weight2'), ('const int', 'width'), ('const int', 'height'), ('const int', 'nChannels')]"
2890,31,Dx_Forward_Kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('const int', 'width'), ('const int', 'height'), ('const int', 'nChannels')]"
2890,32,Dy_Forward_Kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('const int', 'width'), ('const int', 'height'), ('const int', 'nChannels')]"
2890,33,Laplacian_Kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('const int', 'width'), ('const int', 'height'), ('const int', 'nChannels')]"
2890,34,CopyChannel_i_Kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('const int', 'i'), ('const int', 'width'), ('const int', 'height'), ('const int', 'nChannels')]"
2890,35,MedianFilterWithMask5x5_Kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('const int', 'width'), ('const int', 'height'), ('const int', 'nChannels'), ('const bool *', 'keep_mask')]"
2890,36,MedianFilterWithMask3x3_Kernel,runs,"[('float *', 'output'), ('const float *', 'input'), ('const int', 'width'), ('const int', 'height'), ('const int', 'nChannels'), ('const bool *', 'keep_mask')]"
2893,0,addConstant,runs,"[('float *', 'input'), ('float', 'constant'), ('int', 'num_elements')]"
2893,1,sigmoid,runs,"[('float *', 'input'), ('int', 'num_elements')]"
2893,2,squaredError,runs,"[('float *', 'predicted_values'), ('float *', 'actual_values'), ('float *', 'results'), ('int', 'num_elements')]"
29,46,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
29,47,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
29,48,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
2904,0,init_render_buffer_wrapper,runs,"[('int64_t *', 'render_buffer'), ('const uint32_t', 'qw_count')]"
2904,8,set_valid_pos_flag,runs,"[('int32_t *', 'pos_buff'), ('const int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
2904,9,set_valid_pos,runs,"[('int32_t *', 'pos_buff'), ('int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
2904,12,init_group,runs,"[('int8_t *', 'groups'), ('const size_t', 'group_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t *', 'init_vals')]"
2904,14,columnarize_groups,runs,"[('int8_t *', 'columnar_buffer'), ('const int8_t *', 'rowwise_buffer'), ('const size_t', 'row_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t', 'row_size')]"
291,0,vector_add,runs,"[('float *', 'c'), ('const float *', 'a'), ('const float *', 'b'), ('const int', 'n')]"
291,5,cn_pnpoly_reference_kernel,runs,"[('int *', 'bitmap'), ('float2 *', 'points'), ('float2 *', 'vertices'), ('int', 'n')]"
2917,90,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
2917,103,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
2917,104,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
2917,105,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
2917,106,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
2917,184,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
2922,0,pi,runs,"[('const struct point *', 'A'), ('int *', 'res'), ('const int', 'nbPoint'), ('const float', 'ray')]"
2922,1,pi_double,runs,"[('const struct point2 *', 'A'), ('int *', 'res'), ('const int', 'nbPoint'), ('const float', 'ray')]"
2922,2,vec_add,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,3,vec_mult,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,4,vec_div,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,5,vec_sub,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,6,vec_fma,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('float *', 'D'), ('int', 'N')]"
2922,7,vec_add_64,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'N')]"
2922,8,sum,runs,"[('int *', 'vec1'), ('int *', 'result'), ('int *', 'tmp1'), ('const int', 'count')]"
2922,9,spoc_max,runs,"[('const double *', 'input'), ('double *', 'output'), ('const int', 'size')]"
2922,10,int_bubble_filter,runs,"[('int *', 'input'), ('const int *', 'vec1'), ('int *', 'output'), ('const int', 'count')]"
2922,11,mandelbrot,runs,"[('int *', 'A'), ('const int', 'N'), ('const int', 'largeur'), ('const int', 'hauteur'), ('const int', 'start_hauteur'), ('const int', 'end_hauteur')]"
2922,12,mandelbrot,runs,"[('int *', 'A'), ('const int', 'N'), ('const int', 'largeur'), ('const int', 'hauteur')]"
2922,13,game,runs,"[('int *', 'A'), ('const int', 'N'), ('const int', 'largeur'), ('const int', 'hauteur')]"
2922,14,mandelbrot,runs,"[('int *', 'A'), ('const int', 'N'), ('const int', 'largeur'), ('const int', 'hauteur')]"
2922,15,vec_add,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'size')]"
2922,16,vec_add_double,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'size')]"
2922,17,vec_add,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'size')]"
2922,18,vec_add_double,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'size')]"
2922,19,vec_add,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,20,vec_mult,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,21,vec_div,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,22,vec_sub,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,23,vec_fma,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('float *', 'D'), ('int', 'N')]"
2922,24,vec_add_64,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'N')]"
2922,25,sum,runs,"[('int *', 'vec1'), ('int *', 'result'), ('int *', 'tmp1'), ('const int', 'count')]"
2922,26,spoc_max,runs,"[('const double *', 'input'), ('double *', 'output'), ('const int', 'size')]"
2922,27,int_bubble_filter,runs,"[('int *', 'input'), ('const int *', 'vec1'), ('int *', 'output'), ('const int', 'count')]"
2922,28,vec_add,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,29,vec_mult,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,30,vec_div,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,31,vec_sub,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
2922,32,vec_fma,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('float *', 'D'), ('int', 'N')]"
2922,33,vec_add_64,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'N')]"
2922,34,sum,runs,"[('int *', 'vec1'), ('int *', 'result'), ('int *', 'tmp1'), ('const int', 'count')]"
2922,35,spoc_max,runs,"[('const double *', 'input'), ('double *', 'output'), ('const int', 'size')]"
2922,36,int_bubble_filter,runs,"[('int *', 'input'), ('const int *', 'vec1'), ('int *', 'output'), ('const int', 'count')]"
2922,37,init,runs,"[('double *', 'A'), ('double *', 'V'), ('double *', 'VN'), ('int', 'size'), ('int', 'n')]"
2922,38,divide,runs,"[('double *', 'VN'), ('const double *', 'max'), ('int', 'size')]"
2922,39,norme,runs,"[('const double *', 'VN'), ('double *', 'V'), ('double *', 'v_norme'), ('int', 'size')]"
2938,1,final_ranking,runs,"[('float *', 'data'), ('int *', 'rank'), ('float *', 'partial_data'), ('int *', 'partial_rank'), ('int', 'len')]"
294,1,init,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states')]"
294,2,randomizePopulation,runs,"[('curandState_t *', 'states'), ('unsigned char *', 'population')]"
2948,0,vectorAdditionCUDA,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c'), ('int', 'n')]"
2960,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
2960,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
2961,5,set_valid_pos_flag,runs,"[('int32_t *', 'pos_buff'), ('const int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
2961,6,set_valid_pos,runs,"[('int32_t *', 'pos_buff'), ('int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
2961,9,init_render_buffer_wrapper,runs,"[('int64_t *', 'render_buffer'), ('const uint32_t', 'qw_count')]"
2961,12,init_group,runs,"[('int8_t *', 'groups'), ('const size_t', 'group_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t *', 'init_vals')]"
2961,14,columnarize_groups,runs,"[('int8_t *', 'columnar_buffer'), ('const int8_t *', 'rowwise_buffer'), ('const size_t', 'row_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t', 'row_size')]"
2965,0,_computeHistogramCudaNoAtomic,runs,"[('const uint8_t __restrict__ *', 'bytes'), ('size_t', 'length'), ('HistType __restrict__ *', 'histogram')]"
2965,1,_computeHistogramCudaStandardAtomic,runs,"[('const uint8_t __restrict__ *', 'bytes'), ('size_t', 'length'), ('HistType __restrict__ *', 'histogram')]"
2965,2,_computeHistogramCudaSharedAtomic,runs,"[('const uint8_t __restrict__ *', 'bytes'), ('size_t', 'length'), ('HistType __restrict__ *', 'histogram')]"
2965,6,add,runs,"[('const int *', 'a'), ('const int *', 'b'), ('int *', 'dest'), ('const size_t', 'length')]"
2965,10,dotCudaNoSharedMemory,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'dest'), ('const size_t', 'length')]"
2965,11,dotCudaHeapSharedMemory,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'dest'), ('const size_t', 'length')]"
2965,12,add,runs,"[('const int *', 'a'), ('const int *', 'b'), ('int *', 'dest'), ('const size_t', 'length')]"
297,0,run_reduction,runs,"[('int *', 'con'), ('int *', 'blockCon'), ('int *', 'ActiveList'), ('int', 'nActiveBlock'), ('int *', 'blockSizes')]"
2989,0,VecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nums')]"
2991,1,do_nothing,runs,[]
2993,8,ComputeHomographies,runs,"[('float *', 'coord'), ('int *', 'randPts'), ('float *', 'homo'), ('int', 'numPts')]"
2993,11,ScaleDownDense,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'newpitch')]"
2993,12,ScaleDown,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'newpitch')]"
2993,13,ScaleUp,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'newpitch')]"
300,10,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
300,11,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
300,25,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
300,27,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
300,28,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
300,52,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
300,53,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
300,55,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
300,56,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
300,58,cunn_LookupTable_accGradParametersKernel,runs,"[('float *', 'input'), ('float *', 'indices'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'count'), ('float', 'defaultScale'), ('long', 'numel'), ('long', 'stride'), ('int', 'paddingValue')]"
3007,0,vector_equals,runs,"[('const int', 'n'), ('const NUMBER *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const NUMBER *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('int *', 'eq_flag')]"
3007,1,vector_copy,runs,"[('const int', 'n'), ('const NUMBER *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('NUMBER *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,2,vector_swap,runs,"[('const int', 'n'), ('NUMBER *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('NUMBER *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,3,vector_set,runs,"[('const int', 'n'), ('const NUMBER', 'val'), ('NUMBER *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x')]"
3007,5,vector_axpby,runs,"[('const int', 'n'), ('const REAL', 'alpha'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL', 'beta'), ('REAL *', 'y'), ('int', 'offset_y'), ('int', 'stride_y')]"
3007,6,ge_equals_no_transp,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('int *', 'eq_flag')]"
3007,7,ge_equals_transp,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('int *', 'eq_flag')]"
3007,8,ge_swap_no_transp,runs,"[('const int', 'sd'), ('const int', 'fd'), ('REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,9,ge_swap_transp,runs,"[('const int', 'sd'), ('const int', 'fd'), ('REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,10,ge_set,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL', 'val'), ('REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a')]"
3007,12,uplo_equals_no_transp,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('int *', 'eq_flag')]"
3007,13,uplo_equals_transp,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('int *', 'eq_flag')]"
3007,14,uplo_copy_no_transp,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,15,uplo_copy_transp,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,16,uplo_swap_no_transp,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,17,uplo_swap_transp,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,18,uplo_axpby_no_transp,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL', 'alpha'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL', 'beta'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,19,uplo_axpby_transp,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL', 'alpha'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL', 'beta'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,20,uplo_scal,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL', 'alpha'), ('REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a')]"
3007,21,uplo_set,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL', 'alpha'), ('REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a')]"
3007,24,vector_sqr,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,25,vector_mul,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,26,vector_div,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,27,vector_inv,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,28,vector_abs,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,29,vector_linear_frac,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('const REAL', 'scalea'), ('const REAL', 'shifta'), ('const REAL', 'scaleb'), ('const REAL', 'shiftb'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,30,vector_scale_shift,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL', 'scalea'), ('const REAL', 'shifta'), ('const REAL', 'scaleb'), ('const REAL', 'shiftb'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,31,vector_fmod,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,32,vector_frem,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,33,vector_sqrt,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,34,vector_inv_sqrt,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,35,vector_cbrt,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,36,vector_inv_cbrt,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,37,vector_pow2o3,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,38,vector_pow3o2,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,39,vector_pow,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,40,vector_powx,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL', 'b'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,41,vector_hypot,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,42,vector_exp,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,43,vector_exp2,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,44,vector_exp10,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,45,vector_expm1,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,46,vector_log,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,47,vector_log2,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,48,vector_log10,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,49,vector_log1p,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,50,vector_sin,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,51,vector_cos,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,52,vector_tan,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,53,vector_sincos,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,54,vector_asin,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,55,vector_acos,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,56,vector_atan,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,57,vector_atan2,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,58,vector_sinh,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,59,vector_cosh,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,60,vector_tanh,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,61,vector_asinh,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,62,vector_acosh,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,63,vector_atanh,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,64,vector_erf,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,65,vector_erf_inv,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,66,vector_erfc,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,67,vector_erfc_inv,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,68,vector_cdf_norm,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,69,vector_cdf_norm_inv,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,70,vector_gamma,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,71,vector_lgamma,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,72,vector_floor,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,73,vector_ceil,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,74,vector_trunc,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,75,vector_round,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,76,vector_modf,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,77,vector_frac,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,78,vector_fmax,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,79,vector_fmin,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,80,vector_copysign,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('const REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y'), ('REAL *', 'z'), ('const int', 'offset_z'), ('const int', 'stride_z')]"
3007,81,vector_sigmoid,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,82,vector_ramp,runs,"[('const int', 'n'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,83,vector_relu,runs,"[('const int', 'n'), ('const REAL', 'alpha'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,84,vector_elu,runs,"[('const int', 'n'), ('const REAL', 'alpha'), ('const REAL *', 'x'), ('const int', 'offset_x'), ('const int', 'stride_x'), ('REAL *', 'y'), ('const int', 'offset_y'), ('const int', 'stride_y')]"
3007,85,ge_sqr,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,86,ge_mul,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,87,ge_div,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,88,ge_inv,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,89,ge_abs,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,90,ge_linear_frac,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('const REAL', 'scalea'), ('const REAL', 'shifta'), ('const REAL', 'scaleb'), ('const REAL', 'shiftb'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,91,ge_scale_shift,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL', 'scalea'), ('const REAL', 'shifta'), ('const REAL', 'scaleb'), ('const REAL', 'shiftb'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,92,ge_fmod,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,93,ge_frem,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,94,ge_sqrt,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,95,ge_inv_sqrt,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,96,ge_cbrt,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,97,ge_inv_cbrt,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,98,ge_pow2o3,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,99,ge_pow3o2,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,100,ge_pow,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,101,ge_powx,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL', 'b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,102,ge_hypot,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,103,ge_exp,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,104,ge_exp2,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,105,ge_exp10,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,106,ge_expm1,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,107,ge_log,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,108,ge_log2,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,109,ge_log10,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,110,ge_log1p,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,111,ge_sin,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,112,ge_cos,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,113,ge_tan,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,114,ge_sincos,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,115,ge_asin,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,116,ge_acos,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,117,ge_atan,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,118,ge_atan2,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,119,ge_sinh,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,120,ge_cosh,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,121,ge_tanh,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,122,ge_asinh,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,123,ge_acosh,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,124,ge_atanh,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,125,ge_erf,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,126,ge_erf_inv,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,127,ge_erfc,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,128,ge_erfc_inv,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,129,ge_cdf_norm,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,130,ge_cdf_norm_inv,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,131,ge_gamma,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,132,ge_lgamma,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,133,ge_floor,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,134,ge_ceil,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,135,ge_trunc,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,136,ge_round,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,137,ge_modf,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,138,ge_frac,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,139,ge_fmax,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,140,ge_fmin,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,141,ge_copysign,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,142,ge_sigmoid,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,143,ge_ramp,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,144,ge_relu,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL', 'alpha'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,145,ge_elu,runs,"[('const int', 'sd'), ('const int', 'fd'), ('const REAL', 'alpha'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,146,uplo_sqr,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,147,uplo_mul,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,148,uplo_div,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,149,uplo_inv,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,150,uplo_abs,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,151,uplo_linear_frac,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('const REAL', 'scalea'), ('const REAL', 'shifta'), ('const REAL', 'scaleb'), ('const REAL', 'shiftb'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,152,uplo_scale_shift,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL', 'scalea'), ('const REAL', 'shifta'), ('const REAL', 'scaleb'), ('const REAL', 'shiftb'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,153,uplo_fmod,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,154,uplo_frem,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,155,uplo_sqrt,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,156,uplo_inv_sqrt,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,157,uplo_cbrt,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,158,uplo_inv_cbrt,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,159,uplo_pow2o3,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,160,uplo_pow3o2,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,161,uplo_pow,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,162,uplo_powx,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL', 'b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,163,uplo_hypot,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,164,uplo_exp,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,165,uplo_exp2,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,166,uplo_exp10,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,167,uplo_expm1,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,168,uplo_log,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,169,uplo_log2,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,170,uplo_log10,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,171,uplo_log1p,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,172,uplo_sin,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,173,uplo_cos,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,174,uplo_tan,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,175,uplo_sincos,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,176,uplo_asin,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,177,uplo_acos,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,178,uplo_atan,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,179,uplo_atan2,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,180,uplo_sinh,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,181,uplo_cosh,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,182,uplo_tanh,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,183,uplo_asinh,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,184,uplo_acosh,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,185,uplo_atanh,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,186,uplo_erf,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,187,uplo_erf_inv,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,188,uplo_erfc,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,189,uplo_erfc_inv,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,190,uplo_cdf_norm,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,191,uplo_cdf_norm_inv,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,192,uplo_gamma,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,193,uplo_lgamma,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,194,uplo_floor,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,195,uplo_ceil,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,196,uplo_trunc,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,197,uplo_round,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,198,uplo_modf,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,199,uplo_frac,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,200,uplo_fmax,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,201,uplo_fmin,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,202,uplo_copysign,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('const REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b'), ('REAL *', 'c'), ('const int', 'offset_c'), ('const int', 'ld_c')]"
3007,203,uplo_sigmoid,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,204,uplo_ramp,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,205,uplo_relu,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL', 'alpha'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
3007,206,uplo_elu,runs,"[('const int', 'sd'), ('const int', 'unit'), ('const int', 'bottom'), ('const REAL', 'alpha'), ('const REAL *', 'a'), ('const int', 'offset_a'), ('const int', 'ld_a'), ('REAL *', 'b'), ('const int', 'offset_b'), ('const int', 'ld_b')]"
302,0,kernel_set_vector_to_zero,runs,"[('double *', 'd_vec'), ('int', 'dimension')]"
302,3,kernel_add_regularization_term,runs,"[('double *', 'd_input_vector'), ('int', 'dimension'), ('double', 'regularization_parameter'), ('double *', 'd_rv')]"
302,6,kernel_vec_equals_vec1_plus_alpha_times_vec2,runs,"[('double *', 'vec'), ('double *', 'vec1'), ('double', 'alpha'), ('double *', 'd_a1'), ('double *', 'vec2'), ('int', 'numElements')]"
302,7,kernel_vec_equals_minus_vec1,runs,"[('double *', 'vec'), ('double *', 'vec1'), ('int', 'numElements')]"
302,8,kernel_euclidean_norm,runs,"[('const double *', 'vec'), ('int', 'numElements'), ('double *', 'answer')]"
302,9,kernel_mult_vector_by_number,runs,"[('double *', 'vec'), ('double', 'alpha'), ('int', 'numElements')]"
302,10,kernel_dot_product,runs,"[('const double *', 'vec1'), ('const double *', 'vec2'), ('int', 'numElements'), ('double *', 'answer')]"
302,11,floatArray2doubleArray,runs,"[('const float *', 'floatArray'), ('double *', 'doubleArray'), ('const int', 'size')]"
302,12,doubleArray2floatArray,runs,"[('const double *', 'doubleArray'), ('float *', 'floatArray'), ('const int', 'size')]"
3020,3,convertPixelFormat,runs,"[('uint8_t *', 'inputBgra'), ('uint8_t *', 'outputYuv'), ('int', 'numPixels')]"
3025,2,test,runs,"[('int *', 'input'), ('int *', 'output')]"
3025,6,multiplyVectors,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'WIDTH'), ('int', 'HEIGHT')]"
3025,7,consolidateHistogram,runs,"[('ulong *', 'blockHistograms'), ('ulong *', 'cudaHistogram'), ('uint', 'numBlocks')]"
3031,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
3035,92,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
3035,93,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
3035,94,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
3035,95,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
3035,162,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
3039,0,grayscale,runs,"[('unsigned char *', 'src'), ('unsigned char *', 'dest'), ('int', 'width'), ('int', 'height'), ('int', 'nChannels')]"
3039,1,kernel,runs,[]
3039,2,counting_sort,runs,"[('int *', 'array'), ('int *', 'temp'), ('int', 'size')]"
3039,3,kernel,runs,[]
3039,4,grayscale,runs,"[('unsigned char *', 'src'), ('unsigned char *', 'dest'), ('int', 'width'), ('int', 'height'), ('int', 'nChannels')]"
3039,5,multiply,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'x'), ('int', 'y')]"
305,0,anyLeft,runs,"[('int *', 'd_c'), ('int *', 'remaining'), ('int', 'size')]"
305,1,search,runs,"[('int *', 'd_b'), ('int *', 'd_c'), ('int', 'size')]"
305,2,populate,runs,"[('int *', 'd_b'), ('int *', 'copy_db'), ('int *', 'd_c'), ('int', 'size'), ('int *', 'left')]"
305,3,select,runs,"[('int *', 'db'), ('int', 'size')]"
305,4,compare,runs,"[('char *', 'd_a'), ('int *', 'd_b'), ('int *', 'd_c'), ('int', 'size'), ('int', 'lenString'), ('int', 'threshold')]"
3053,0,convolve,runs,"[('unsigned char *', 'source'), ('int', 'width'), ('int', 'height'), ('int', 'paddingX'), ('int', 'paddingY'), ('size_t', 'kOffset'), ('int', 'kWidth'), ('int', 'kHeight'), ('unsigned char *', 'destination')]"
3053,1,pythagoras,runs,"[('unsigned char *', 'a'), ('unsigned char *', 'b'), ('unsigned char *', 'c')]"
3064,0,matrixMul,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n'), ('int', 'tile_size')]"
3064,1,matrixMul,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
3064,2,vectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
3064,3,vectorAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
3072,5,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
3072,6,query_ball_point2_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('const float *', 'radii'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
3072,7,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
3072,8,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
3072,9,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
3072,10,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
3072,11,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
3072,12,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
3072,13,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
3072,14,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
3072,15,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
3072,16,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
3072,17,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
3072,18,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
3072,19,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
3072,20,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('float *', 'dist'), ('int *', 'idx'), ('float *', 'val')]"
3074,161,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3074,220,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
3074,221,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
3074,222,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
3074,227,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
3074,337,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
3074,342,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
31,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
31,2,add,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('float *', 'deltaX'), ('float *', 'deltaY'), ('float *', 'deltaZ')]"
31,3,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
3100,6,FloatDiv,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
3100,7,FloatMul,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
3100,8,FloatDivByConstant,runs,"[('float *', 'A'), ('float', 'constant')]"
3108,0,force,runs,"[('double *', 'deviceq'), ('double *', 'devicex'), ('double *', 'devicey'), ('double *', 'devicez'), ('double *', 'deviceFx'), ('double *', 'deviceFy'), ('double *', 'deviceFz'), ('double *', 'deviceU'), ('int', 'N')]"
3114,3,warp_kernel,runs,"[('float *', 'out'), ('const float *', 'in'), ('const int *', 'index'), ('const float *', 'weights'), ('const int', 'npixels'), ('const int', 'nchannels')]"
3114,4,ColumnReduceSimpleKernel,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'num_planes'), ('int', 'num_rows'), ('int', 'num_cols')]"
3114,5,tile_kernel,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'num_planes'), ('int', 'num_rows'), ('int', 'num_cols')]"
3119,3,reduce_max_final,runs,"[('double *', 'g_idata'), ('double *', 'g_odata'), ('int *', 'max_idx'), ('unsigned int', 'n'), ('int', 'blockSize')]"
3119,4,reduce_max_main,runs,"[('double *', 'g_idata'), ('double *', 'g_odata'), ('int *', 'max_idx'), ('unsigned int', 'n'), ('int', 'blockSize')]"
3119,5,reduce_max_filter_final,runs,"[('double *', 'g_idata'), ('double *', 'g_odata'), ('int *', 'max_idx'), ('unsigned int', 'n'), ('unsigned int', 'width'), ('int', 'blockSize'), ('int *', 'maxes'), ('int', 'nMax')]"
3119,6,reduce_max_filter_main,runs,"[('double *', 'g_idata'), ('double *', 'g_odata'), ('int *', 'max_idx'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('int', 'blockSize'), ('int *', 'maxes'), ('int', 'nMax')]"
3119,10,reduce_max_finalf,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('int *', 'max_idx'), ('unsigned int', 'n'), ('int', 'blockSize')]"
3119,11,reduce_max_mainf,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('int *', 'max_idx'), ('unsigned int', 'n'), ('int', 'blockSize')]"
3119,12,reduce_max_filter_finalf,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('int *', 'max_idx'), ('unsigned int', 'n'), ('unsigned int', 'width'), ('int', 'blockSize'), ('int *', 'maxes'), ('int', 'nMax')]"
3119,13,reduce_max_filter_mainf,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('int *', 'max_idx'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('int', 'blockSize'), ('int *', 'maxes'), ('int', 'nMax')]"
3132,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
3132,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
3132,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
3132,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
3132,25,PadMatrixInLeadingDimensionKernel,runs,"[('const int8_t *', 'src'), ('int8_t *', 'dst'), ('int', 'col_src'), ('int', 'col_dst')]"
3132,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
3136,1,cuda_dot,runs,"[('int', 'N'), ('double *', 'a'), ('double *', 'b'), ('double *', 'c')]"
3136,32,cudaclaw5_update_q_cuda,runs,"[('int', 'mbc'), ('double', 'dtdx'), ('double', 'dtdy'), ('double *', 'qold'), ('double *', 'fm'), ('double *', 'fp'), ('double *', 'gm'), ('double *', 'gp')]"
3136,33,cudaclaw5_update_q_cuda2,runs,"[('int', 'mbc'), ('int', 'mx'), ('int', 'my'), ('int', 'meqn'), ('double', 'dtdx'), ('double', 'dtdy'), ('double *', 'qold'), ('double *', 'fm'), ('double *', 'fp'), ('double *', 'gm'), ('double *', 'gp')]"
3136,34,donothing,runs,[]
3136,35,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
3136,37,cudaclaw5_compute_cfl,runs,"[('int', 'idir'), ('int', 'mx'), ('int', 'my'), ('int', 'meqn'), ('int', 'mwaves'), ('int', 'mbc'), ('double', 'dx'), ('double', 'dy'), ('double', 'dt'), ('double *', 'speeds'), ('double *', 'cflgrid')]"
314,0,convolution_sep,runs,"[('float *', 'output'), ('const float *', 'input'), ('const float *', 'kernel'), ('const int', 'kernel_size'), ('const dim3', 'imsize'), ('int', 'dir')]"
314,1,cubefilling_loop,runs,"[('const float *', 'image'), ('float *', 'dev_cube_wi'), ('float *', 'dev_cube_w'), ('const dim3', 'image_size'), ('int', 'scale_xy'), ('int', 'scale_eps'), ('dim3', 'dimensions_down')]"
314,2,cubefilling_atomic,runs,"[('const float *', 'image'), ('float *', 'dev_cube_wi'), ('float *', 'dev_cube_w'), ('const dim3', 'image_size'), ('int', 'scale_xy'), ('int', 'scale_eps'), ('dim3', 'dimensions_down')]"
3144,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
3144,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
3144,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
3144,8,null_kernel,runs,[]
3144,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
315,2,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
3153,21,sync_deconv_groups,runs,[]
3153,37,sync_conv_groups,runs,[]
317,0,kernSmooth,runs,"[('int', 'N'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'in'), ('unsigned char *', 'out'), ('const float *', 'kernel'), ('int', 'kernSize')]"
317,1,kernGradient,runs,"[('int', 'N'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'in'), ('unsigned char *', 'gradient'), ('unsigned char *', 'edgeDir'), ('float *', 'G_x'), ('float *', 'G_y')]"
317,2,nonMaxSuppression,runs,"[('int', 'N'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'in'), ('unsigned char *', 'out')]"
317,3,hysteresis,runs,"[('int', 'N'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'in')]"
317,4,kernGaussianBlur,runs,"[('int', 'width'), ('int', 'height'), ('uint8_t *', 'dst'), ('uint8_t *', 'src'), ('int', 'kernSize'), ('float *', 'kernel')]"
317,5,kernGaussianBlur,runs,"[('int', 'width'), ('int', 'height'), ('uint8_t *', 'dst'), ('uint8_t *', 'src')]"
317,9,kernCopyToFrame,runs,"[('int', 'N'), ('uint8_t *', 'frame'), ('float *', 'src')]"
317,10,kernGaussianBlur,runs,"[('int', 'width'), ('int', 'height'), ('uint8_t *', 'dst'), ('uint8_t *', 'src')]"
3175,0,cuda_multiplicarmatriz,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'R'), ('int', 'tamM'), ('int', 'tamN')]"
3175,1,cudaComputeSignature,runs,"[('double *', 'hyperplanes'), ('double *', 'v'), ('int *', 'dimensions'), ('bool *', 'sig'), ('long *', 'hyperp_length')]"
3175,2,cuda_olamundo,runs,[]
3183,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
3184,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3184,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3188,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
3188,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
3188,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
3188,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
3188,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
319,0,initParticles,runs,"[('particleinfo restrict *', 'infoArray'), ('hashKey restrict *', 'hashArray'), ('uint restrict *', 'idxArray'), ('uint', 'numParticles')]"
3190,0,windowHamming,runs,"[('float *', 'idata'), ('int', 'length')]"
3190,1,windowHann,runs,"[('float *', 'idata'), ('int', 'length')]"
3190,2,windowBartlett,runs,"[('float *', 'idata'), ('int', 'length')]"
3190,3,windowBlackman,runs,"[('float *', 'idata'), ('int', 'length')]"
3190,4,windowHamming2d,runs,"[('float *', 'idata'), ('int', 'length'), ('int', 'height')]"
3190,5,windowHann2d,runs,"[('float *', 'idata'), ('int', 'length'), ('int', 'height')]"
3190,6,windowBartlett2d,runs,"[('float *', 'idata'), ('int', 'length'), ('int', 'height')]"
3190,7,windowBlackman2d,runs,"[('float *', 'idata'), ('int', 'length'), ('int', 'height')]"
3190,8,windowKernel,runs,"[('float *', 'idata'), ('float *', 'window'), ('int', 'width'), ('int', 'height')]"
3190,11,window2dKernel,runs,"[('float *', 'idata'), ('float *', 'window'), ('int', 'width'), ('int', 'height')]"
3190,12,convertKernel,runs,"[('short *', 'idata'), ('float *', 'odata'), ('int', 'size')]"
3190,13,transposeGlobalKernel,runs,"[('float *', 'idata'), ('float *', 'odata'), ('int', 'width'), ('int', 'height')]"
3190,27,zeroFillingKernel,runs,"[('float *', 'idata'), ('int', 'row'), ('int', 'length'), ('int', 'height')]"
3194,0,cuda_gray,runs,"[('unsigned char *', 'input'), ('int', 'offset'), ('int', 'streamSize'), ('unsigned char *', 'gray'), ('int', 'size')]"
32,1,CopyVariable,runs,"[('double *', 'var_in'), ('double *', 'var_out'), ('int', 'size')]"
32,2,TopForcing,runs,"[('double', 'ppt'), ('double *', 'eff_rain'), ('int', 'size')]"
32,3,PondHeadInit,runs,"[('double *', 'ph'), ('int', 'size')]"
32,4,TopBottomBound2D,runs,"[('double *', 'Hs'), ('double *', 'Ztopo'), ('double *', 'K2n'), ('double *', 'K2s'), ('int', 'BC2D'), ('int', 'M'), ('int', 'N')]"
32,5,LeftRightBound2D,runs,"[('double *', 'Hs'), ('double *', 'Ztopo'), ('double *', 'K2e'), ('double *', 'K2w'), ('int', 'BC2D'), ('int', 'M'), ('int', 'N')]"
32,7,GetOutlet,runs,"[('double *', 'h'), ('double *', 'houtlet'), ('double *', 'u'), ('double *', 'uout'), ('double *', 'v'), ('double *', 'vout'), ('int', 'M'), ('int', 'N'), ('int', 't')]"
32,8,getqss,runs,"[('double *', 'IN'), ('double *', 'qss'), ('int', 'N'), ('int', 't')]"
32,9,VarPrint,runs,"[('double *', 'Var'), ('int', 'M'), ('int', 'N'), ('int', 'P')]"
32,10,vanGenuchtenIntial,runs,"[('double *', 'theta'), ('double *', 'K'), ('double *', 'Ksat'), ('double *', 'h'), ('int', 'size')]"
3208,0,compress,runs,"[('float *', 'mat'), ('int', 'n'), ('float *', 'comp'), ('int', 'k')]"
3208,1,gpuPi,runs,"[('double *', 'r'), ('double', 'width'), ('int', 'n')]"
3208,2,matrix_multiplication,runs,"[('int *', 'matrix_1'), ('int *', 'matrix_2'), ('int *', 'matrix_r'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
3208,4,gpuSum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
3208,6,valid_convolution,runs,"[('float *', 'd_kernel'), ('int', 'k_size'), ('float *', 'd_matrix'), ('int', 'size_x'), ('int', 'size_y'), ('float *', 'd_conv'), ('int', 'max_row'), ('int', 'max_col')]"
3234,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
3234,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
3234,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
3234,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
3234,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
3239,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3239,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
324,6,kExpand,runs,"[('float *', 'images'), ('float *', 'targets'), ('int', 'num_images'), ('int', 'num_input_channels'), ('int', 'image_size_y'), ('int', 'image_size_x'), ('int', 'num_modules_y'), ('int', 'num_modules_x'), ('int', 'kernel_size_y'), ('int', 'kernel_size_x'), ('int', 'padding_y'), ('int', 'padding_x'), ('int', 'stride_y'), ('int', 'stride_x'), ('int', 'num_modules_batch'), ('int', 'module_id_offset')]"
324,10,kContract,runs,"[('float *', 'expanded_data'), ('float *', 'targets'), ('int', 'num_images'), ('int', 'num_input_channels'), ('int', 'image_size_y'), ('int', 'image_size_x'), ('int', 'num_modules_y'), ('int', 'num_modules_x'), ('int', 'kernel_size_y'), ('int', 'kernel_size_x'), ('int', 'padding_y'), ('int', 'padding_x'), ('int', 'stride_y'), ('int', 'stride_x'), ('int', 'num_modules_batch'), ('int', 'module_id_offset')]"
324,11,kWriteRows,runs,"[('float *', 'data'), ('float *', 'target'), ('int', 'num_images'), ('int', 'num_modules'), ('int', 'num_modules_batch'), ('int', 'module_id_offset'), ('float', 'beta')]"
324,12,kReadRows,runs,"[('float *', 'data'), ('float *', 'target'), ('int', 'num_images'), ('int', 'num_modules'), ('int', 'num_modules_batch'), ('int', 'module_id_offset')]"
324,13,kWriteRowsMult,runs,"[('float *', 'data'), ('float *', 'target'), ('int', 'num_images'), ('int', 'num_modules'), ('int', 'num_modules_batch'), ('int', 'module_id_offset'), ('float', 'alpha'), ('float', 'beta')]"
324,55,kTranspose,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
324,56,kTransposeBig,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'height'), ('int', 'width')]"
324,57,kLessThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
324,58,kLessThanEq,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
324,59,kLessThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
324,60,kLessThanEqScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
324,61,kGreaterThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
324,62,kGreaterThanEq,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
324,63,kGreaterThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
324,64,kGreaterThanEqScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
324,65,kUpperBound,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
324,66,kLowerBound,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
324,67,kUpperBoundScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
324,68,kLowerBoundScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
324,69,kUpperBoundModScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
324,70,kSparseDot,runs,"[('int', 'm'), ('int', 'n'), ('int', 'k'), ('float *', 'data'), ('int *', 'indptr'), ('int *', 'indices'), ('float *', 'dense_data'), ('float *', 'target'), ('float', 'beta'), ('float', 'alpha')]"
324,71,kSign,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,72,kApplySin,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,73,kApplyCos,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,74,kApplySigmoid,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,75,kApplyTanh,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,76,kApplyAbs,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,77,kApplyLog1PlusExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,78,kLog,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
324,79,kSquashRelu,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'lambda')]"
324,80,kExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,81,kCeil,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,82,kFloor,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,83,kSqrt,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,84,kPow,runs,"[('float *', 'mat'), ('float', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
324,85,kPowMatrix,runs,"[('float *', 'mat'), ('float *', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
324,86,kCrossEntropy,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
324,87,kCrossEntropyBernoulli,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
324,88,kCorrectPreds,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'cutoff')]"
324,89,kReciprocal,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
324,90,kAddColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
324,91,kAddDiagonalScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
324,92,kAddDiagonal,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
324,93,kMultDiagonalScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
324,94,kMultDiagonal,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
324,95,kAddRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
324,96,kAddColMult,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
324,97,kAddToEachPixel,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('unsigned int', 'num_pix')]"
324,98,kAddRowMult,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
324,99,kMultByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
324,100,kDivByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
324,101,kDivByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
324,102,kMultByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
324,103,kAddMultSign,runs,"[('float *', 'a'), ('float *', 'b'), ('unsigned int', 'numEls'), ('float', 'mult')]"
324,104,kAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
324,105,kSubtract,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
324,106,kDivide,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
324,107,kMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls'), ('float', 'scale_targets')]"
324,108,kCosDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
324,109,kSinDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
324,110,kLogisticDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
324,111,kLogisticGrad,runs,"[('float *', 'mat'), ('float *', 'targets'), ('float *', 'out_grad'), ('unsigned int', 'numEls')]"
324,112,kLogisticCorrectNormalized,runs,"[('float *', 'mat'), ('float *', 'targets'), ('float *', 'out'), ('unsigned int', 'height'), ('unsigned int', 'width')]"
324,113,kTanhDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
324,114,kRectifiedLinearDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
324,115,kRectifiedLinearSmoothDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
324,116,kMultScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len'), ('float', 'scale_targets')]"
324,117,kAssignScalar,runs,"[('float *', 'dest'), ('float', 'alpha'), ('unsigned int', 'len')]"
324,118,kDivideScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len')]"
324,119,kAddScalar,runs,"[('float *', 'a'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
324,120,kSelectRows,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nSourceRows')]"
324,121,kSwapColumns,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices1'), ('float *', 'indices2'), ('int', 'cols'), ('int', 'width'), ('int', 'height')]"
324,122,kShuffleColumns,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices'), ('int', 'width'), ('int', 'height')]"
324,123,kSetSelectedRows,runs,"[('float *', 'target'), ('float *', 'source'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nTargetRows')]"
324,124,kBlockify,runs,"[('float *', 'source'), ('float *', 'target'), ('int', 'numdims'), ('int', 'blocksize')]"
324,125,kGenerateTranslationsBigVarOff,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'off_x_arr'), ('float *', 'off_y_arr'), ('int', 'source_w'), ('int', 'target_w'), ('int', 'num_channels')]"
324,126,kSoftMaxGrad,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
324,127,kSoftMaxGradRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
324,128,kHingeQuadraticRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'margin')]"
324,129,kHingeLinearRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'margin')]"
324,130,kSoftMaxGradCLS,runs,"[('float *', 'mat'), ('int *', 'labels'), ('float *', 'indices'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
324,131,kSoftMaxCrossEntropy,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'tiny')]"
324,132,kSoftMaxCrossEntropyRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'tiny')]"
324,147,kSumRowwise,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'mult'), ('float', 'p')]"
324,151,kExpand,runs,"[('float *', 'source'), ('float *', 'indices'), ('float *', 'target'), ('int', 'height'), ('int', 'width'), ('int', 'target_width')]"
324,152,kExpandAndAdd,runs,"[('float *', 'source'), ('float *', 'mat'), ('float *', 'indices'), ('float *', 'target'), ('int', 'width'), ('int', 'height'), ('float', 'mult'), ('int', 'width2')]"
324,153,kAccumulateColumns,runs,"[('float *', 'mat'), ('float *', 'indices'), ('float *', 'target'), ('int', 'mat_width'), ('int', 'target_width'), ('int', 'height'), ('float', 'mult'), ('int', 'avg')]"
324,154,kExtractPatches,runs,"[('float *', 'images'), ('float *', 'patches'), ('float *', 'indices'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('int', 'num_images'), ('int', 'img_width'), ('int', 'img_height'), ('int', 'patch_width'), ('int', 'patch_height'), ('int', 'num_colors')]"
324,155,kExtractPatches2,runs,"[('float *', 'images'), ('float *', 'patches'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('float *', 'flip'), ('int', 'num_images'), ('int', 'img_width'), ('int', 'img_height'), ('int', 'patch_width'), ('int', 'patch_height'), ('int', 'num_colors')]"
324,156,kRectifyBoundingBox,runs,"[('float *', 'boxes'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('float *', 'flip'), ('int', 'num_images'), ('int', 'patch_width'), ('int', 'patch_height'), ('int', 'num_locs')]"
324,157,kAdagrad,runs,"[('float *', 'history'), ('float *', 'grad'), ('float', 'delta'), ('int', 'len')]"
324,158,kRMSProp,runs,"[('float *', 'history'), ('float *', 'grad'), ('float', 'factor'), ('int', 'len')]"
324,159,kBoundingBoxLogisticGrad,runs,"[('float *', 'mat'), ('int *', 'bbox'), ('int *', 'label'), ('int *', 'seg'), ('float *', 'indices'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('int', 'size'), ('int', 'width'), ('int', 'height'), ('int', 'depth'), ('float', 'scale_width'), ('float', 'scale_height'), ('float *', 'grad')]"
324,161,kBoundingBoxSoftMaxGrad,runs,"[('float *', 'mat'), ('int *', 'bbox'), ('int *', 'label'), ('int *', 'seg'), ('float *', 'indices'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('int', 'size'), ('int', 'width'), ('int', 'height'), ('int', 'depth'), ('float', 'scale_width'), ('float', 'scale_height'), ('float *', 'grad')]"
3245,1,render_init,runs,"[('int', 'width'), ('int', 'length'), ('curandState *', 'rand_state')]"
3246,0,print_threadIds_blockIds_gridDim,runs,[]
3247,5,kernel_unpack_yuy2_y16_cuda,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'superPixCount')]"
3247,6,kernel_unpack_yuy2_rgb8_cuda,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'superPixCount')]"
3247,7,kernel_unpack_yuy2_bgr8_cuda,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'superPixCount')]"
3247,8,kernel_unpack_yuy2_rgba8_cuda,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'superPixCount')]"
3247,9,kernel_unpack_yuy2_bgra8_cuda,runs,"[('const uint8_t *', 'src'), ('uint8_t *', 'dst'), ('int', 'superPixCount')]"
3256,1,lyra2Z_gpu_hash_32_sm2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash'), ('uint32_t *', 'resNonces')]"
3256,3,lyra2Z_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash')]"
3256,4,lyra2Z_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint2 *', 'g_hash'), ('uint32_t *', 'resNonces')]"
3256,8,lyra2_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash')]"
3256,9,lyra2_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint2 *', 'g_hash')]"
326,9,bestFilter,runs,"[('const double *', 'Params'), ('const float *', 'data'), ('const float *', 'mu'), ('const float *', 'lam'), ('const float *', 'nu'), ('float *', 'xbest'), ('float *', 'err'), ('int *', 'ftype')]"
3261,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
3261,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
3265,3,simKernel,runs,"[('int', 'N_stgy'), ('int', 'N_batch'), ('double *', 'alpha'), ('double *', 'mid'), ('double *', 'gap'), ('int *', 'late'), ('int *', 'pos'), ('int *', 'rest_lag'), ('double *', 'prof'), ('double *', 'last_prc'), ('int *', 'cnt'), ('double', 'fee')]"
3265,4,simKernel,runs,"[('int', 'N_stgy'), ('int', 'N_batch'), ('float *', 'alpha'), ('float *', 'mid'), ('float *', 'gap'), ('int *', 'late'), ('int *', 'pos'), ('int *', 'rest_lag'), ('float *', 'prof'), ('float *', 'last_prc'), ('int *', 'cnt'), ('float', 'fee')]"
3265,23,cudaGetError,runs,"[('int', 'N'), ('double *', 'ana'), ('double *', 'cur'), ('double *', 'e_sum')]"
3265,26,nodiag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'n'), ('int', 'i')]"
3265,27,diag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'n'), ('int', 'i')]"
3265,28,gaussjordan,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'n'), ('int', 'i')]"
3265,29,set_zero,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'n'), ('int', 'i')]"
3265,30,matmulKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'rA'), ('int', 'cA'), ('int', 'cB')]"
3265,35,vec_add,runs,"[('int', 'N'), ('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
3265,36,vec_add,runs,"[('int', 'N'), ('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
3265,38,cudaGetShiftedMidPrice,runs,"[('int', 'N_inst'), ('int', 'batch_size'), ('float *', 'alphas'), ('float *', 'mid'), ('float *', 'shifted_prc')]"
3265,44,init,runs,[]
3265,45,scatterSum,runs,"[('int', 'N'), ('float *', 'input'), ('float *', 'output')]"
3265,46,init,runs,[]
3265,47,scatterSum,runs,"[('int', 'N'), ('float *', 'input'), ('float *', 'output')]"
3265,48,init,runs,[]
3265,49,gatherSum,runs,"[('int', 'N'), ('float *', 'input'), ('float *', 'output')]"
3265,50,init,runs,[]
3265,51,sharedSum,runs,"[('int', 'N'), ('float *', 'input'), ('float *', 'output')]"
3265,52,init,runs,[]
3265,54,init,runs,[]
3265,56,init,runs,[]
3265,59,init,runs,[]
3265,60,process,runs,"[('int', 'N_step'), ('int', 'N_inst'), ('float *', 'input'), ('float *', 'output')]"
3265,61,init,runs,[]
3265,62,process,runs,"[('int', 'N_step'), ('int', 'N_inst'), ('float *', 'input'), ('float *', 'output')]"
3265,63,init,runs,[]
3265,64,process,runs,"[('int', 'N_step'), ('int', 'N_inst'), ('float *', 'input'), ('float *', 'output')]"
3265,68,naiveKernel,runs,"[('int', 'N'), ('double *', 'input'), ('double *', 'output')]"
3265,69,smemKernel,runs,"[('int', 'N'), ('double *', 'input'), ('double *', 'output')]"
3265,70,naiveKernel,runs,"[('int', 'N'), ('float *', 'input'), ('float *', 'output')]"
3265,71,smemKernel,runs,"[('int', 'N'), ('float *', 'input'), ('float *', 'output')]"
3265,72,naiveKernel,runs,"[('int', 'N'), ('float *', 'input'), ('float *', 'output')]"
3265,73,smemKernel,runs,"[('int', 'N'), ('float *', 'input'), ('float *', 'output')]"
3265,74,naiveKernel,runs,"[('int', 'N'), ('float *', 'input'), ('float *', 'output')]"
3265,75,smemKernel,runs,"[('int', 'N'), ('float *', 'input'), ('float *', 'output')]"
3265,76,initKernel,runs,[]
3265,77,naiveKernel,runs,"[('int', 'N'), ('float *', 'input'), ('float *', 'output')]"
3272,4,mprts_update_offsets,runs,"[('int', 'nr_total_blocks'), ('uint *', 'd_off'), ('uint *', 'd_spine_sums')]"
3272,5,k_count_received,runs,"[('int', 'nr_total_blocks'), ('uint *', 'd_n_recv_by_block'), ('uint *', 'd_spine_cnts')]"
3272,6,k_reorder_send_buf_total,runs,"[('int', 'nr_prts'), ('int', 'nr_total_blocks'), ('uint *', 'd_bidx'), ('uint *', 'd_sums'), ('float4 *', 'd_xi4'), ('float4 *', 'd_pxi4'), ('float4 *', 'd_xchg_xi4'), ('float4 *', 'd_xchg_pxi4')]"
3272,23,k_zero_comp_xyz,runs,"[('float *', 'data'), ('uint', 'n'), ('uint', 'stride')]"
3285,1,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
3285,2,printThreadIndex,runs,"[('int *', 'A'), ('const int', 'nx'), ('const int', 'ny')]"
3285,3,sumMatrixOnGPU2DBlock2DGrid,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
3285,4,sumMatrixOnGPU1DBlock2DGrid,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
3285,5,helloFromGPU,runs,[]
3285,6,checkIndex,runs,[]
3292,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3292,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3298,8,read_G_matrix_kernel,runs,"[('int', 'S'), ('int', 'vertex_index'), ('int *', 'i_index'), ('int *', 'j_index'), ('bool *', 'is_Bennett'), ('double *', 'exp_Vj'), ('double *', 'N_ptr'), ('int', 'LD_N'), ('double *', 'G_ptr'), ('int', 'LD_G'), ('double *', 'result_ptr'), ('int', 'incr')]"
3298,9,compute_row_on_Gamma_matrix_kernel,runs,"[('int', 'row_index'), ('int', 'vertex_index'), ('int *', 'indices'), ('double *', 'exp_V'), ('double *', 'N_ptr'), ('int', 'LD_N'), ('double *', 'G_ptr'), ('int', 'LD_G'), ('double *', 'row_ptr'), ('int', 'incr')]"
3298,10,compute_col_on_Gamma_matrix_kernel,runs,"[('int', 'col_index'), ('int', 'vertex_index'), ('int *', 'indices'), ('double *', 'exp_V'), ('double *', 'N_ptr'), ('int', 'LD_N'), ('double *', 'G_ptr'), ('int', 'LD_G'), ('double *', 'col_ptr'), ('int', 'incr')]"
3302,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
3302,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
3302,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
3302,8,null_kernel,runs,[]
3302,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
3304,0,sobel,runs,"[('char *', 'returnPixels'), ('int', 'width'), ('char *', 'pixels')]"
3304,2,addValue,runs,"[('int *', 'array_val'), ('int *', 'b_array_val')]"
3304,3,addValue,runs,"[('int *', 'array_val'), ('int *', 'b_array_val')]"
3304,4,findLowest,runs,"[('int', 'numMin'), ('int *', 'array_val'), ('int *', 'cudaResult')]"
331,0,kernel_1D_1D,runs,[]
331,1,kernel_1D_2D,runs,[]
331,2,kernel_1D_3D,runs,[]
331,3,kernel_2D_1D,runs,[]
331,4,kernel_2D_2D,runs,[]
331,5,kernel_2D_3D,runs,[]
331,6,kernel_3D_1D,runs,[]
331,7,kernel_3D_2D,runs,[]
331,8,kernel_3D_3D,runs,[]
331,11,CudaTransform,runs,"[('unsigned char *', 'dev_img'), ('unsigned int *', 'dev_accu'), ('int', 'w'), ('int', 'h')]"
3314,0,ind2ptr_kernel,runs,"[('const int64_t *', 'ind_data'), ('int64_t *', 'out_data'), ('int64_t', 'M'), ('int64_t', 'numel')]"
3314,1,ptr2ind_kernel,runs,"[('const int64_t *', 'ptr_data'), ('int64_t *', 'out_data'), ('int64_t', 'E'), ('int64_t', 'numel')]"
3314,4,non_diag_mask_kernel,runs,"[('const int64_t *', 'row_data'), ('const int64_t *', 'col_data'), ('bool *', 'out_data'), ('int64_t', 'N'), ('int64_t', 'k'), ('int64_t', 'num_diag'), ('int64_t', 'numel')]"
3317,1,diff_reduce,runs,"[('double *', 'dev_w'), ('double *', 'feat'), ('double *', 'pos'), ('int', 'feat_dim'), ('int', 'pos_dim'), ('int', 'par0'), ('int', 'par1'), ('int', 'n_patch')]"
3317,3,divide_copy,runs,"[('double *', 'dest'), ('const double *', 'src'), ('int', 'length'), ('const double', 'divisor')]"
3317,4,float_to_color,runs,"[('unsigned char *', 'optr'), ('const float *', 'outSrc')]"
3317,5,float_to_color,runs,"[('uchar4 *', 'optr'), ('const float *', 'outSrc')]"
3317,8,compute_l,runs,"[('double *', 'dev_w'), ('int', 'n_patch')]"
3317,10,divide_copy,runs,"[('double *', 'dest'), ('const double *', 'src'), ('int', 'length'), ('const double', 'divisor')]"
3320,0,recipSummation,runs,"[('double *', 'data'), ('double *', 'recip'), ('int', 'len')]"
3328,4,MatrixAdd,runs,"[('const float *', 'A_elements'), ('const float *', 'B_elements'), ('float *', 'C_elements'), ('const int', 'size')]"
3328,5,MatrixSubtract,runs,"[('const float *', 'A_elements'), ('const float *', 'B_elements'), ('float *', 'C_elements'), ('const int', 'size')]"
3328,6,MatrixMultiply,runs,"[('const float *', 'A_elements'), ('const float *', 'B_elements'), ('float *', 'C_elements'), ('const int', 'X'), ('const int', 'Y'), ('const int', 'Z')]"
3328,7,MatrixTranspose,runs,"[('const float *', 'A_elements'), ('float *', 'B_elements'), ('const int', 'A_width'), ('const int', 'A_height')]"
3328,10,VectorAdd,runs,"[('float *', 'VecA'), ('float *', 'VecB'), ('float *', 'VecC'), ('int', 'size')]"
3328,11,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
3328,12,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
3328,13,checkIndex,runs,[]
3328,14,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
3328,15,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
3328,16,checkIndex,runs,[]
3328,17,MatrixMulKernel,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'Width')]"
3332,0,kernel,runs,[]
3332,1,kernel,runs,[]
3332,2,kernel,runs,[]
3332,3,kernel,runs,[]
3333,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
3338,0,markNonPrimeKernel,runs,"[('char *', 'dev_chunk'), ('number_type', 'currentValue'), ('number_type', 'currentValueSqr'), ('const number_type', 'startValue'), ('const number_type', 'endValue'), ('const int', 'thread_size')]"
3338,1,getNextPrime,runs,"[('number_type *', 'dev_temp_min_primes'), ('int', 'size'), ('number_type *', 'd_ans')]"
3338,2,getNextPrimeFast,runs,"[('char *', 'dev_chunk'), ('number_type', 'currentValue'), ('const number_type', 'startValue'), ('const number_type', 'endValue'), ('number_type *', 'd_ans')]"
3338,3,countPrimes,runs,"[('char *', 'dev_chunk'), ('number_type *', 'count_accumulation_chunk'), ('const number_type', 'startValue'), ('const number_type', 'endValue'), ('const int', 'thread_size')]"
3338,4,copyPrimes,runs,"[('char *', 'dev_chunk'), ('number_type *', 'base_index_arr'), ('number_type *', 'primes_arr'), ('const number_type', 'startValue'), ('const number_type', 'endValue'), ('const int', 'thread_size')]"
335,3,generate_random_states_kernel,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'd_states'), ('size_t', 'total_number')]"
335,4,conductance_calculate_postsynaptic_current_injection_kernel,runs,"[('int *', 'd_presynaptic_neuron_indices'), ('int *', 'd_postsynaptic_neuron_indices'), ('float *', 'd_reversal_potentials_Vhat'), ('float *', 'd_neurons_current_injections'), ('size_t', 'total_number_of_synapses'), ('float *', 'd_membrane_potentials_v'), ('float *', 'd_synaptic_conductances_g')]"
335,5,conductance_update_synaptic_conductances_kernel,runs,"[('float', 'timestep'), ('float *', 'd_synaptic_conductances_g'), ('float *', 'd_synaptic_efficacies_or_weights'), ('float *', 'd_time_of_last_spike_to_reach_synapse'), ('float *', 'd_biological_conductance_scaling_constants_lambda'), ('int', 'total_number_of_synapses'), ('float', 'current_time_in_seconds'), ('float *', 'd_decay_terms_tau_g')]"
335,6,current_calculate_postsynaptic_current_injection_kernel,runs,"[('float *', 'd_synaptic_efficacies_or_weights'), ('float *', 'd_time_of_last_spike_to_reach_synapse'), ('int *', 'd_postsynaptic_neuron_indices'), ('float *', 'd_neurons_current_injections'), ('float', 'current_time_in_seconds'), ('size_t', 'total_number_of_synapses')]"
335,12,update_postsynaptic_activities_kernel,runs,"[('float', 'timestep'), ('size_t', 'total_number_of_neurons'), ('float *', 'd_recent_postsynaptic_activities_D'), ('float *', 'd_last_spike_time_of_each_neuron'), ('float', 'current_time_in_seconds'), ('float', 'decay_term_tau_D'), ('float', 'model_parameter_alpha_D')]"
335,13,update_presynaptic_activities_C_kernel,runs,"[('float *', 'd_recent_presynaptic_activities_C'), ('float *', 'd_time_of_last_spike_to_reach_synapse'), ('bool *', 'd_stdp'), ('float', 'timestep'), ('float', 'current_time_in_seconds'), ('size_t', 'total_number_of_synapses'), ('float', 'synaptic_neurotransmitter_concentration_alpha_C'), ('float', 'decay_term_tau_C')]"
335,14,update_synaptic_efficacies_or_weights_kernel,runs,"[('float *', 'd_recent_presynaptic_activities_C'), ('float *', 'd_recent_postsynaptic_activities_D'), ('int *', 'd_postsynaptic_neuron_indices'), ('float *', 'd_synaptic_efficacies_or_weights'), ('float', 'current_time_in_seconds'), ('float *', 'd_time_of_last_spike_to_reach_synapse'), ('float *', 'd_last_spike_time_of_each_neuron'), ('bool *', 'd_stdp'), ('size_t', 'total_number_of_synapses'), ('float', 'learning_rate_rho')]"
335,15,check_for_generator_spikes_kernel,runs,"[('int *', 'd_neuron_ids_for_stimulus'), ('float *', 'd_spike_times_for_stimulus'), ('float *', 'd_last_spike_time_of_each_neuron'), ('unsigned char *', 'd_bitarray_of_neuron_spikes'), ('int', 'bitarray_length'), ('int', 'bitarray_maximum_axonal_delay_in_timesteps'), ('float', 'current_time_in_seconds'), ('float', 'timestep'), ('size_t', 'number_of_spikes_in_stimulus'), ('bool', 'high_fidelity_spike_flag')]"
335,16,lif_update_membrane_potentials,runs,"[('float *', 'd_membrane_potentials_v'), ('float *', 'd_membrane_resistances_R'), ('float *', 'd_membrane_time_constants_tau_m'), ('float *', 'd_resting_potentials'), ('float *', 'd_current_injections'), ('float', 'timestep'), ('size_t', 'total_number_of_neurons')]"
335,17,check_for_neuron_spikes_kernel,runs,"[('float *', 'd_membrane_potentials_v'), ('float *', 'd_thresholds_for_action_potential_spikes'), ('float *', 'd_resting_potentials'), ('float *', 'd_last_spike_time_of_each_neuron'), ('unsigned char *', 'd_bitarray_of_neuron_spikes'), ('int', 'bitarray_length'), ('int', 'bitarray_maximum_axonal_delay_in_timesteps'), ('float', 'current_time_in_seconds'), ('float', 'timestep'), ('size_t', 'total_number_of_neurons'), ('bool', 'high_fidelity_spike_flag')]"
335,18,reset_states_u_after_spikes_kernel,runs,"[('float *', 'd_states_u'), ('float *', 'd_param_d'), ('float *', 'd_last_spike_time_of_each_neuron'), ('float', 'current_time_in_seconds'), ('size_t', 'total_number_of_neurons')]"
335,19,izhikevich_update_membrane_potentials_kernel,runs,"[('float *', 'd_membrane_potentials_v'), ('float *', 'd_states_u'), ('float *', 'd_param_a'), ('float *', 'd_param_b'), ('float *', 'd_current_injections'), ('float', 'timestep'), ('size_t', 'total_number_of_neurons')]"
335,20,poisson_update_membrane_potentials_kernel,runs,"[('curandState_t *', 'd_states'), ('float *', 'd_rates'), ('float *', 'd_membrane_potentials_v'), ('float', 'timestep'), ('float *', 'd_thresholds_for_action_potential_spikes'), ('size_t', 'total_number_of_input_neurons'), ('int', 'current_stimulus_index')]"
3350,1,blurKernel,runs,"[('unsigned char *', 'd_inputArray'), ('unsigned char *', 'd_outputArray'), ('int', 'w'), ('int', 'h'), ('int', 'blurSize')]"
336,0,matMultiply1D,runs,"[('float *', 'matA'), ('float *', 'matB'), ('float *', 'Dest'), ('int', 'dimensions')]"
336,1,matMultiply2D,runs,"[('float *', 'matA'), ('float *', 'matB'), ('float *', 'Dest'), ('int', 'dimensions')]"
3361,4,projectionProfileCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('bool', 'horizontal'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
3361,5,absoluteDifferenceCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
3361,6,bitwiseAndCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
3361,7,bitwiseOrCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
3361,8,bitwiseXorCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
3361,11,copyCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
3361,14,flipCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('bool', 'horizontal'), ('bool', 'vertical')]"
3361,15,histogramCuda,runs,"[('const uint8_t *', 'data'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'histogram')]"
3361,16,invertCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
3361,17,isEqualCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'isEqual')]"
3361,18,lookupTableCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint8_t *', 'table')]"
3361,19,maximumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
3361,20,minimumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
3361,21,rotateCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('float', 'inXStart'), ('float', 'inYStart'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('float', 'cosAngle'), ('float', 'sinAngle')]"
3361,23,setPixelCuda,runs,"[('uint8_t *', 'in'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'pointX'), ('uint32_t *', 'pointY'), ('uint32_t', 'pointSize'), ('uint32_t', 'value')]"
3361,24,subtractCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
3361,28,isAnyEqualCuda,runs,"[('const uint8_t *', 'image'), ('uint8_t *', 'value'), ('size_t', 'valueCount'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'differenceCount')]"
3363,1,render_init,runs,"[('int', 'max_x'), ('int', 'max_y'), ('curandState *', 'rand_state')]"
3367,0,kRgb2CIELab,runs,"[('const cudaTextureObject_t', 'texFrameBGRA'), ('cudaSurfaceObject_t', 'surfFrameLab'), ('int', 'width'), ('int', 'height')]"
3367,1,kInitClusters,runs,"[('const cudaSurfaceObject_t', 'surfFrameLab'), ('float *', 'clusters'), ('int', 'width'), ('int', 'height'), ('int', 'nSpxPerRow'), ('int', 'nSpxPerCol')]"
3367,3,kUpdate,runs,"[('int', 'nbSpx'), ('float *', 'clusters'), ('float *', 'accAtt_g')]"
3378,21,reg_GetConjugateGradient2_kernel,runs,"[('float4 *', 'nodeNMIGradientArray_d'), ('float4 *', 'conjugateG_d'), ('float4 *', 'conjugateH_d')]"
3378,31,reg_multiplyArrays_kernel_float,runs,"[('float *', 'array1_d'), ('float *', 'array2_d')]"
3378,32,reg_multiplyArrays_kernel_float4,runs,"[('float4 *', 'array1_d'), ('float4 *', 'array2_d')]"
3378,33,reg_addArrays_kernel_float,runs,"[('float *', 'array1_d'), ('float *', 'array2_d')]"
3378,34,reg_addArrays_kernel_float4,runs,"[('float4 *', 'array1_d'), ('float4 *', 'array2_d')]"
3378,88,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
3378,89,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
3378,90,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
3378,95,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
3381,139,kernel_print,runs,"[('int const *', 'p'), ('int', 'n')]"
3381,140,kernel_print,runs,"[('long const *', 'p'), ('int', 'n')]"
3381,141,kernel_print,runs,"[('size_t const *', 'p'), ('int', 'n')]"
3397,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
3397,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
3397,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
3397,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
3397,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
3401,0,AddIntsCuda,runs,"[('int *', 'a'), ('int *', 'b')]"
3412,0,createRaysOrthoKernel,runs,"[('float4 *', 'rays'), ('int', 'width'), ('int', 'height'), ('float', 'x0'), ('float', 'y0'), ('float', 'z'), ('float', 'dx'), ('float', 'dy'), ('unsigned', 'rayMask')]"
3414,0,getmaxcu,runs,"[('unsigned int *', 'num'), ('int', 'size'), ('int', 'threadCount')]"
3423,0,kernel,runs,[]
3423,1,kernel,runs,[]
3423,2,kernel,runs,[]
3424,38,sync_deconv_groups,runs,[]
3424,56,sync_conv_groups,runs,[]
3425,0,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
3425,1,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
3432,0,add,runs,"[('long *', 'a'), ('long *', 'b'), ('long *', 'c'), ('long', 'N')]"
3432,1,add_1024,runs,"[('long *', 'a'), ('long *', 'b'), ('long *', 'c'), ('long', 'N')]"
3438,0,set_kernel,runs,"[('int *', 'dst'), ('int const', 'value'), ('int const', 'count')]"
3438,1,set_kernel,runs,"[('REAL *', 'dst'), ('REAL const', 'value'), ('std::size_t const', 'count')]"
3439,7,set_volume_to_constant,runs,"[('float *', 'out'), ('float', 'value')]"
3439,20,kernel_normalize_and_add_to_output,runs,"[('float *', 'dev_vol_in'), ('float *', 'dev_vol_out'), ('float *', 'dev_accumulate_weights'), ('float *', 'dev_accumulate_values')]"
3439,31,magnitude_threshold_kernel,runs,"[('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z'), ('float', 'gamma')]"
3439,32,gradient_and_subtract_kernel,runs,"[('float *', 'in'), ('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z')]"
3439,33,multiply_by_beta_kernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'beta')]"
3439,34,subtract_kernel,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out')]"
3440,27,sigmoid64,runs,"[('double *', 'A'), ('int', 'size')]"
3440,28,sigmoid32,runs,"[('float *', 'A'), ('int', 'size')]"
3441,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
3443,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3443,315,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3448,5,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
3448,6,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
3448,7,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
3448,8,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
3448,9,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
3448,10,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
3448,11,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
3448,12,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
3448,13,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
3448,14,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
3448,15,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
3448,16,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
3448,17,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
3448,18,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
3448,19,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('float *', 'dist'), ('int *', 'idx'), ('float *', 'val')]"
345,1,SimpleClone,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const float *', 'mask'), ('float *', 'output'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
3451,0,iota,runs,"[('int const', 'size'), ('int *', 'data'), ('int const', 'value')]"
3457,0,add,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
3457,3,axpy,runs,"[('float', 'a'), ('float *', 'x'), ('float *', 'y')]"
3465,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
3465,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
3467,0,hello_world,runs,[]
3474,0,sumaenlagpu,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
3474,1,piCalc,runs,"[('double *', 'area'), ('double', 'width'), ('int', 'rects')]"
3474,2,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
3474,3,MatrixMul,runs,"[('float *', 'darray_1'), ('float *', 'darray_2'), ('float *', 'dres_arr'), ('int', 'n')]"
3474,4,valid_convolution,runs,"[('float *', 'd_kernel'), ('int', 'k_size'), ('float *', 'd_matrix'), ('int', 'size_x'), ('int', 'size_y'), ('float *', 'd_conv'), ('int', 'max_row'), ('int', 'max_col')]"
348,0,r_calculation,runs,"[('float *', 'a'), ('int *', 'indeces'), ('float *', 'b'), ('float *', 'x'), ('float *', 'r'), ('int', 'size')]"
348,1,r_initial_sum,runs,"[('float *', 'a'), ('int *', 'indeces'), ('float *', 'x'), ('float *', 'r'), ('float *', 'r_squared'), ('float *', 'p_sum'), ('int', 'size')]"
348,2,r_final_sum_and_alpha_calculation,runs,"[('float *', 'r_squared'), ('float *', 'p_sum'), ('int', 'size')]"
348,3,x_calculation,runs,"[('float *', 'x'), ('float *', 'r'), ('float *', 'r_squared'), ('int', 'size')]"
348,4,cg_zero_start,runs,"[('float *', 'a'), ('float *', 'x'), ('float *', 'b'), ('int', 'size')]"
348,5,repeat_x_for_clusters,runs,"[('float *', 'x'), ('int', 'size')]"
348,6,ap_multiplication,runs,"[('float *', 'values'), ('int *', 'indeces'), ('float *', 'r'), ('float *', 'p_sum'), ('int', 'size')]"
348,7,alpha_calculation,runs,"[('float *', 'r_squared'), ('float *', 'p_sum'), ('float *', 'alpha')]"
348,8,x_calculation,runs,"[('float *', 'x'), ('float *', 'r'), ('float *', 'r_squared'), ('int', 'size')]"
348,10,jacobiFirstLocal,runs,"[('float *', 'x'), ('const float *', 'diagonal_values'), ('const float *', 'non_diagonal_values'), ('const int *', 'indeces'), ('const float *', 'y'), ('const int', 'size')]"
348,11,jacobiCsr,runs,"[('float *', 'x'), ('const float *', 'diagonal_values'), ('const float *', 'values'), ('const int *', 'rowPtr'), ('const int *', 'colIdx'), ('const float *', 'y'), ('const int', 'size')]"
348,12,divide,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'out'), ('const int', 'size')]"
348,13,GaussianEliminationGlobal,runs,"[('const int', 'clusterSize'), ('float *', 'x'), ('const float *', 'diagonal_values'), ('const float *', 'non_diagonal_values'), ('float *', 'y'), ('const int', 'size')]"
348,14,GaussianEliminationShared,runs,"[('const int', 'clusterSize'), ('float *', 'x'), ('const float *', 'diagonal_values'), ('const float *', 'non_diagonal_values'), ('float *', 'y')]"
3483,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
3483,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
349,2,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
3491,22,readGlobalMemoryCoalesced,runs,"[('float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
3491,23,readGlobalMemoryUnit,runs,"[('float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
3491,24,readLocalMemory,runs,"[('const float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
3491,25,writeGlobalMemoryCoalesced,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
3491,26,writeGlobalMemoryUnit,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
3491,27,writeLocalMemory,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
3491,32,findRadixOffsets,runs,"[('uint2 *', 'keys'), ('uint *', 'counters'), ('uint *', 'blockOffsets'), ('uint', 'startbit'), ('uint', 'numElements'), ('uint', 'totalBlocks')]"
3491,33,reorderData,runs,"[('uint', 'startbit'), ('uint *', 'outKeys'), ('uint *', 'outValues'), ('uint2 *', 'keys'), ('uint2 *', 'values'), ('uint *', 'blockOffsets'), ('uint *', 'offsets'), ('uint *', 'sizes'), ('uint', 'totalBlocks')]"
3491,34,scan,runs,"[('uint *', 'g_odata'), ('uint *', 'g_idata'), ('uint *', 'g_blockSums'), ('const int', 'n'), ('const bool', 'fullBlock'), ('const bool', 'storeSum')]"
3491,35,vectorAddUniform4,runs,"[('uint *', 'd_vector'), ('const uint *', 'd_uniforms'), ('const int', 'n')]"
3491,36,triad,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('float', 's')]"
3491,39,Frontier_copy,runs,"[('unsigned int *', 'frontier'), ('unsigned int *', 'frontier2'), ('unsigned int *', 'frontier_length')]"
3491,40,BFS_kernel_one_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_local_mem')]"
3491,41,BFS_kernel_SM_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_local_mem')]"
3491,42,BFS_kernel_multi_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_local_mem')]"
3491,43,BFS_kernel_warp,runs,"[('unsigned int *', 'levels'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('int', 'W_SZ'), ('int', 'CHUNK_SZ'), ('unsigned int', 'numVertices'), ('int', 'curr'), ('int *', 'flag')]"
3491,44,BFS_kernel_one_block,runs,"[('volatile unsigned int *', 'frontier'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('unsigned int', 'num_p_per_mp'), ('unsigned int', 'w_q_size')]"
3491,45,BFS_kernel_SM_block,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('unsigned int', 'num_p_per_mp'), ('unsigned int', 'w_q_size')]"
3491,46,BFS_kernel_multi_block,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('unsigned int', 'NUM_P_PER_MP'), ('unsigned int', 'W_Q_SIZE')]"
3491,48,Frontier_copy,runs,"[('unsigned int *', 'frontier'), ('unsigned int *', 'frontier2'), ('unsigned int *', 'frontier_length')]"
3491,49,BFS_kernel_one_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_mem')]"
3491,50,BFS_kernel_SM_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_mem')]"
3491,51,BFS_kernel_multi_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_mem')]"
3491,52,kernelUpdateBiases,runs,"[('float *', 'nabla_b'), ('float *', 'biases'), ('float', 'eta'), ('float', 'mini_batch_size')]"
3491,53,kernelUpdateWeights,runs,"[('float *', 'nabla_w'), ('float *', 'weights'), ('int', 'tws'), ('float', 'eta'), ('float', 'mini_batch_size')]"
3491,54,kernelUpdateNablaB,runs,"[('float *', 'nabla_b'), ('float *', 'delta_nabla_b')]"
3491,55,kernelUpdateNablaW,runs,"[('float *', 'nabla_w'), ('float *', 'delta_nabla_w'), ('int', 'tws')]"
3491,57,kernelInitNablaW,runs,"[('float *', 'nabla_w'), ('int', 'tws')]"
3491,58,kernelBackprop3a,runs,"[('float *', 'delta_nabla_b'), ('int', 'b_off'), ('int', 'bound'), ('int', 'b_off_old'), ('float *', 'weights'), ('int', 'w_off_old')]"
3491,59,kernelBackprop3b,runs,"[('float *', 'delta_nabla_b'), ('int', 'b_off'), ('float *', 'zs')]"
3491,60,kernelBackprop1,runs,"[('float *', 'delta_nabla_w'), ('int', 'w_off'), ('float *', 'activations'), ('float *', 'delta_nabla_b'), ('int', 'b_off')]"
3491,62,kernelFeedForward1,runs,"[('float *', 'zs'), ('int', 'bound2'), ('float *', 'weights'), ('int', 'w_off'), ('float *', 'activations1')]"
3491,63,kernelFeedForward1b,runs,"[('float *', 'zs'), ('int', 'bound'), ('float *', 'weights'), ('int', 'w_off'), ('float *', 'activations')]"
3491,64,kernelFeedForward3,runs,"[('float *', 'zs'), ('float *', 'biases'), ('int', 'b_off'), ('float *', 'activations')]"
3491,65,kernelFeedForward2,runs,"[('float *', 'zs'), ('float *', 'biases'), ('int', 'b_off'), ('float *', 'activations')]"
3494,0,kernel,runs,[]
3494,1,kernel,runs,[]
3494,2,kernel,runs,[]
3494,3,kernel,runs,[]
3496,0,init_render_buffer_wrapper,runs,"[('int64_t *', 'render_buffer'), ('const uint32_t', 'qw_count')]"
3496,8,set_valid_pos_flag,runs,"[('int32_t *', 'pos_buff'), ('const int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
3496,9,set_valid_pos,runs,"[('int32_t *', 'pos_buff'), ('int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
3496,12,init_group,runs,"[('int8_t *', 'groups'), ('const size_t', 'group_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t *', 'init_vals')]"
3496,14,columnarize_groups,runs,"[('int8_t *', 'columnar_buffer'), ('const int8_t *', 'rowwise_buffer'), ('const size_t', 'row_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t', 'row_size')]"
3503,0,assign,runs,"[('uint32_t *', 'x'), ('uint32_t', 'n')]"
3503,1,uphill1,runs,"[('uint32_t *', 'd_value'), ('uint8_t *', 'd_key'), ('uint8_t *', 'd_temp'), ('int64_t', 'n'), ('int64_t', 'shift')]"
3503,2,downhill1,runs,"[('uint32_t *', 'd_value'), ('uint8_t *', 'd_key'), ('uint8_t *', 'd_temp'), ('int64_t', 'n'), ('int64_t', 'shift')]"
351,0,funct,runs,"[('int', 'n'), ('int', 'k'), ('float *', 'x'), ('int *', 'qx')]"
351,1,funct2,runs,"[('int', 'n'), ('int', 'k'), ('float *', 'x'), ('int *', 'qx')]"
3513,4,square_array,runs,[]
3518,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
3522,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
3522,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
3524,0,getForcesMag,runs,"[('float4 *', 'g_pos'), ('float3 *', 'vel'), ('float3 *', 'force'), ('int', 'offset'), ('float3 *', 'g_reactor')]"
3524,1,getForces,runs,"[('float4 *', 'g_pos'), ('float3 *', 'force'), ('int', 'offset'), ('int', 'device_ct')]"
3524,2,moveBodies,runs,"[('float4 *', 'g_pos'), ('float4 *', 'd_pos'), ('float3 *', 'vel'), ('float3 *', 'force'), ('int', 'offset')]"
3529,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
3531,0,add,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
3531,1,sub,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
3531,2,exp,runs,"[('float *', 'a'), ('float *', 'c')]"
3531,3,mul,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
3531,4,pow,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
3539,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3539,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3541,0,binary_search,runs,"[('int *', 'a'), ('int *', 'b'), ('bool *', 'c'), ('int', 'sizeofa')]"
3541,1,add_vector,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
3545,1,CalculateDistanceIndexEachPoint,runs,"[('double', 'point_x'), ('double', 'point_y'), ('double', 'point_z'), ('double *', 'data_x_d'), ('double *', 'data_y_d'), ('double *', 'data_z_d'), ('int *', 'bin_index_d'), ('double *', 'distance_d'), ('int', 'size_data')]"
3545,2,CalculateBestIndex,runs,"[('double *', 'distance_d'), ('int *', 'bin_index_d'), ('int', 'size_data')]"
3545,3,CalculateDistanceAllPoints,runs,"[('double *', 'data_x_d'), ('double *', 'data_y_d'), ('double *', 'data_z_d'), ('double *', 'transformed_data_x_d'), ('double *', 'transformed_data_y_d'), ('double *', 'transformed_data_z_d'), ('int *', 'index_d'), ('double *', 'distance_d'), ('int', 'size_data')]"
3545,4,CalculateTotalError,runs,"[('double *', 'distance_d'), ('int', 'size_data')]"
3547,186,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3547,327,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
355,0,convolve,runs,"[('unsigned char *', 'source'), ('int', 'width'), ('int', 'height'), ('int', 'paddingX'), ('int', 'paddingY'), ('ssize_t', 'kOffset'), ('int', 'kWidth'), ('int', 'kHeight'), ('unsigned char *', 'destination')]"
355,1,pythagoras,runs,"[('unsigned char *', 'a'), ('unsigned char *', 'b'), ('unsigned char *', 'c')]"
355,3,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
3550,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
3550,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
3550,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
3550,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
3550,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
3550,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
3550,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
3557,3,cudaSGatherRP_kernel,runs,"[('unsigned int', 'inputSizeX'), ('unsigned int', 'inputSizeY'), ('unsigned int', 'nbAnchors'), ('unsigned int', 'batchSize'), ('const float *', 'inputs'), ('const float *', 'i'), ('const float *', 'j'), ('const float *', 'k'), ('const float *', 'b'), ('const int *', 'mask'), ('float *', 'outputs'), ('const unsigned int', 'topN'), ('const unsigned int', 'nbProposals')]"
3557,6,cudaSNormalizeROIs_kernel,runs,"[('unsigned int', 'inputSizeX'), ('unsigned int', 'inputSizeY'), ('unsigned int', 'nbProposals'), ('unsigned int', 'batchSize'), ('unsigned int', 'scoreIdx'), ('unsigned int', 'nbCls'), ('unsigned int', 'maxParts'), ('unsigned int', 'maxTemplates'), ('bool', 'keepMax'), ('bool', 'generateParts'), ('bool', 'generateTemplates'), ('const float', 'normX'), ('const float', 'normY'), ('const float *', 'means'), ('const float *', 'std'), ('const unsigned int *', 'numPartsPerClass'), ('const unsigned int *', 'numTemplatesPerClass'), ('const float *', 'ROIRef'), ('const float *', 'ROIEst'), ('const float *', 'ValuesEst'), ('const float *', 'partsEst'), ('const float *', 'partsVisibilityEst'), ('const float *', 'templatesEst'), ('float *', 'outputs'), ('int *', 'argMax'), ('float *', 'partsPrediction'), ('float *', 'partsVisibilityPrediction'), ('float *', 'templatesPrediction'), ('float', 'scoreThreshold')]"
3557,7,cudaSToOutput_kernel,runs,"[('unsigned int', 'nbProposals'), ('const unsigned int', 'scoreIdx'), ('const unsigned int', 'nbCls'), ('const unsigned int', 'nbOutputs'), ('const unsigned int', 'maxParts'), ('const unsigned int', 'maxTemplates'), ('bool', 'generateParts'), ('bool', 'generateTemplates'), ('const unsigned int *', 'numPartsPerClass'), ('const unsigned int *', 'numTemplatesPerClass'), ('const int *', 'maxCls'), ('const float *', 'inputs'), ('const int *', 'predictionIndex'), ('const float *', 'partsPrediction'), ('const float *', 'partsVisibilityPrediction'), ('const float *', 'templatesPrediction'), ('float *', 'outputs')]"
3557,8,spatial_output_kernel,runs,"[('unsigned int', 'nbClass'), ('unsigned int', 'targetHeight'), ('unsigned int', 'targetWidth'), ('float', 'threshold'), ('float *', 'targetData'), ('uint32_t *', 'outputEstimated')]"
3557,9,cudaSBilinearTF_kernel,runs,"[('unsigned int', 'outputWidth'), ('unsigned int', 'outputHeight'), ('unsigned int', 'nbChannels'), ('unsigned int', 'batchSize'), ('unsigned int', 'inputWidth'), ('unsigned int', 'inputHeight'), ('const unsigned int *', 'yLowIdx'), ('const unsigned int *', 'yHighIdx'), ('const float *', 'yInter'), ('const unsigned int *', 'xLowIdx'), ('const unsigned int *', 'xHighIdx'), ('const float *', 'xInter'), ('const float *', 'input'), ('float *', 'outputs')]"
3557,10,cudaS_ssdToOutput_kernels,runs,"[('unsigned int', 'batchSize'), ('unsigned int', 'nbClass'), ('unsigned int', 'nbAnchors'), ('unsigned int', 'channelWidth'), ('unsigned int', 'channelHeight'), ('unsigned int', 'nbProposals'), ('unsigned int *', 'nbValidROIs'), ('unsigned int', 'cls'), ('unsigned int', 'totalParts'), ('unsigned int', 'totalTemplates'), ('unsigned int', 'maxParts'), ('unsigned int', 'maxTemplates'), ('unsigned int', 'cumulParts'), ('unsigned int', 'cumulTemplates'), ('unsigned int', 'nbParts'), ('unsigned int', 'nbTemplates'), ('float', 'xRatio'), ('float', 'yRatio'), ('float', 'xOutputRatio'), ('float', 'yOutputRatio'), ('const float *', 'roi_bbox'), ('const float *', 'roi_anchors'), ('const float *', 'anchors'), ('const float *', 'inputs_parts'), ('const float *', 'inputs_templates'), ('float *', 'outputs')]"
3557,11,cudaSReduceIndex_kernel,runs,"[('const unsigned int', 'inputSize'), ('const unsigned int', 'inputBatchOffset'), ('const unsigned int', 'outputBatchOffset'), ('const unsigned int', 'channelsWidth'), ('const unsigned int', 'channelsHeight'), ('const unsigned int', 'nbAnchors'), ('const float *', 'valueThreshold'), ('const float *', 'inputs'), ('int *', 'outputMap'), ('float *', 'scores')]"
3557,12,cudaSgatherI2I_kernel,runs,"[('const int *', 'keys'), ('const int *', 'indicesX'), ('const int *', 'indicesY'), ('const int *', 'indicesK'), ('int *', 'outX'), ('int *', 'outY'), ('int *', 'outK'), ('unsigned int', 'nbElements')]"
3557,13,add_weighted_kernel,runs,"[('unsigned int', 'batchSize'), ('unsigned int', 'nbOutputs'), ('unsigned int', 'outputsHeight'), ('unsigned int', 'outputsWidth'), ('float *', 'estimated_labels'), ('unsigned int', 'nbChannels'), ('unsigned int', 'image_height'), ('unsigned int', 'image_width'), ('float *', 'input_image'), ('unsigned char *', 'workspace'), ('float', 'alpha')]"
3557,14,cudaUpdateMetrics_kernel,runs,"[('float *', 'inputs'), ('int *', 'activity'), ('long long unsigned int *', 'firingRate'), ('long long unsigned int *', 'totalFiringRate'), ('long long int *', 'outputsActivity'), ('long long int *', 'totalOutputsActivity'), ('unsigned int', 'inputsDimX'), ('unsigned int', 'inputsDimY'), ('unsigned int', 'inputsDimZ')]"
3557,19,cudaNoConversion_kernel,runs,"[('float *', 'data'), ('float *', 'tickData'), ('float *', 'tickActivity'), ('float', 'scaling'), ('unsigned int', 'inputDimX'), ('unsigned int', 'inputDimY'), ('unsigned int', 'inputDimZ')]"
3557,22,cudaSetupRng_kernel,runs,"[('curandState *', 'state'), ('unsigned int', 'seed')]"
3557,25,cudaSTargetBiasPropagate_kernel,runs,"[('unsigned int', 'size'), ('const float', 'bias'), ('const float *', 'inputs'), ('const float *', 'diffInputs'), ('float *', 'outputs')]"
3557,26,cudaDTargetBiasPropagate_kernel,runs,"[('unsigned int', 'size'), ('const double', 'bias'), ('const double *', 'inputs'), ('const double *', 'diffInputs'), ('double *', 'outputs')]"
3557,27,cudaSNormalizeROIs_kernel,runs,"[('unsigned int', 'inputSizeX'), ('unsigned int', 'inputSizeY'), ('unsigned int', 'nbProposals'), ('unsigned int', 'batchSize'), ('unsigned int', 'scoreIdx'), ('unsigned int', 'nbCls'), ('unsigned int', 'maxParts'), ('unsigned int', 'maxTemplates'), ('bool', 'keepMax'), ('bool', 'generateParts'), ('bool', 'generateTemplates'), ('const float', 'normX'), ('const float', 'normY'), ('const float *', 'means'), ('const float *', 'std'), ('const int *', 'numPartsPerClass'), ('const int *', 'numTemplatesPerClass'), ('const float *', 'ROIRef'), ('const float *', 'ROIEst'), ('const float *', 'ValueEst'), ('const float *', 'partsEst'), ('const float *', 'partsVisibilityEst'), ('const float *', 'templatesEst'), ('float *', 'outputs'), ('int *', 'argMax'), ('float *', 'partsPrediction'), ('float *', 'partsVisibilityPrediction'), ('float *', 'templatesPrediction'), ('float', 'scoreThreshold')]"
3557,28,cudaSToOutput_kernel,runs,"[('const unsigned int', 'nbProposals'), ('const unsigned int', 'scoreIdx'), ('const unsigned int', 'nbCls'), ('const unsigned int', 'nbOutputs'), ('const unsigned int', 'maxParts'), ('const unsigned int', 'maxTemplates'), ('bool', 'generateParts'), ('bool', 'generateTemplates'), ('const int *', 'numPartsPerClass'), ('const int *', 'numTemplatesPerClass'), ('const int *', 'maxCls'), ('const float *', 'ROIEst'), ('const int *', 'predictionIndex'), ('const float *', 'partsPrediction'), ('const float *', 'partsVisibilityPrediction'), ('const float *', 'templatesPrediction'), ('float *', 'outputs')]"
3557,29,cudaUZeroInit_kernel,runs,"[('unsigned int', 'size'), ('unsigned int *', 'data')]"
3557,30,cudaSZeroInit_kernel,runs,"[('unsigned int', 'size'), ('float *', 'data')]"
3557,31,cudaSSqrt_kernel,runs,"[('unsigned int', 'size'), ('float *', 'data')]"
3557,32,cudaSMult_kernel,runs,"[('unsigned int', 'size'), ('float *', 'a'), ('float *', 'b'), ('const float', 'beta'), ('float *', 'result')]"
3557,33,cudaSScale_kernel,runs,"[('unsigned int', 'size'), ('float *', 'input'), ('const float', 'scale'), ('const float', 'shift'), ('const float', 'beta'), ('float *', 'result')]"
3557,34,cudaSScaleAbs_kernel,runs,"[('unsigned int', 'size'), ('float *', 'input'), ('const float', 'scale'), ('const float', 'beta'), ('float *', 'result')]"
3557,35,cudaSScaleSign_kernel,runs,"[('unsigned int', 'size'), ('float *', 'input'), ('float *', 'sign'), ('const float', 'scale'), ('const float', 'beta'), ('float *', 'result')]"
3557,36,cudaSScaleSquare_kernel,runs,"[('unsigned int', 'size'), ('float *', 'input'), ('const float', 'scale'), ('const float', 'shift'), ('const float', 'beta'), ('float *', 'result')]"
3557,37,cudaSMaxForward_kernel,runs,"[('unsigned int', 'size'), ('float *', 'input'), ('float *', 'maxVal'), ('const unsigned int', 'idx'), ('unsigned int *', 'argMax')]"
3557,38,cudaSMaxBackward_kernel,runs,"[('unsigned int', 'size'), ('float *', 'diffInput'), ('const unsigned int', 'idx'), ('unsigned int *', 'argMax'), ('const float', 'beta'), ('float *', 'result')]"
3557,39,cudaSEuclideanSumBackward_kernel,runs,"[('unsigned int', 'size'), ('float *', 'diffInput'), ('float *', 'input'), ('float *', 'output'), ('const float', 'scale'), ('const float', 'beta'), ('float *', 'result')]"
3557,40,cudaSBilinearTF_Forward_kernel,runs,"[('unsigned int', 'outputWidth'), ('unsigned int', 'outputHeight'), ('unsigned int', 'nbChannels'), ('unsigned int', 'batchSize'), ('unsigned int', 'inputWidth'), ('unsigned int', 'inputHeight'), ('const unsigned int *', 'yLowIdx'), ('const unsigned int *', 'yHighIdx'), ('const float *', 'yInter'), ('const unsigned int *', 'xLowIdx'), ('const unsigned int *', 'xHighIdx'), ('const float *', 'xInter'), ('const float *', 'input'), ('float *', 'outputs')]"
3557,41,cudaSBilinearTF_BackWard_kernel,runs,"[('unsigned int', 'outputWidth'), ('unsigned int', 'outputHeight'), ('unsigned int', 'nbChannels'), ('unsigned int', 'batchSize'), ('unsigned int', 'inputWidth'), ('unsigned int', 'inputHeight'), ('const float', 'scaleX'), ('const float', 'scaleY'), ('const float *', 'diffInput'), ('float *', 'diffOutputs')]"
3557,42,cudaSNearestNeighborKernel,runs,"[('const float *', 'input'), ('size_t', 'inputSizeX'), ('size_t', 'inputSizeY'), ('float *', 'output'), ('size_t', 'outputSizeX'), ('size_t', 'outputSizeY'), ('size_t', 'nbChannels'), ('size_t', 'batchSize')]"
3557,43,cudaSGatherRP_kernel,runs,"[('unsigned int', 'inputSizeX'), ('unsigned int', 'inputSizeY'), ('unsigned int', 'nbAnchors'), ('unsigned int', 'batchSize'), ('const float *', 'inputs'), ('const int *', 'i'), ('const int *', 'j'), ('const int *', 'k'), ('const int *', 'b'), ('const int *', 'mask'), ('float *', 'outputs'), ('int *', 'anchors'), ('unsigned int', 'topN'), ('const unsigned int', 'nbProposals')]"
3557,49,cudaSAnchorBackPropagateSSD_NegSamples_kernel,runs,"[('const float *', 'inputCls'), ('float *', 'diffOutputsCls'), ('const float *', 'confSamples'), ('const int *', 'keySamples'), ('const int', 'nbSamples'), ('const int', 'nbPositive'), ('const unsigned int', 'nbAnchors'), ('const unsigned int', 'outputsHeight'), ('const unsigned int', 'outputsWidth'), ('const unsigned int', 'batchSize')]"
3557,51,cudaSReduceIndex_kernel,runs,"[('const unsigned int', 'inputSize'), ('const unsigned int', 'inputBatchOffset'), ('const unsigned int', 'outputBatchOffset'), ('const float *', 'valueThreshold'), ('const float *', 'inputs'), ('int *', 'outputMap'), ('float *', 'scores')]"
3557,52,cudaS_ssdToOutput_kernels,runs,"[('unsigned int', 'batchSize'), ('unsigned int', 'nbClass'), ('unsigned int', 'nbAnchors'), ('unsigned int', 'channelWidth'), ('unsigned int', 'channelHeight'), ('unsigned int', 'nbProposals'), ('unsigned int *', 'nbValidROIs'), ('unsigned int', 'cls'), ('unsigned int', 'totalParts'), ('unsigned int', 'totalTemplates'), ('unsigned int', 'maxParts'), ('unsigned int', 'maxTemplates'), ('unsigned int', 'cumulParts'), ('unsigned int', 'cumulTemplates'), ('unsigned int', 'nbParts'), ('unsigned int', 'nbTemplates'), ('float', 'xRatio'), ('float', 'yRatio'), ('float', 'xOutputRatio'), ('float', 'yOutputRatio'), ('const float *', 'roi_bbox'), ('const float *', 'roi_anchors'), ('const float *', 'anchors'), ('const float *', 'inputs_parts'), ('const float *', 'inputs_templates'), ('float *', 'outputs')]"
3557,53,cudaSPadding_kernel,runs,"[('unsigned int', 'nbOutputs'), ('unsigned int', 'outputWidth'), ('unsigned int', 'outputHeight'), ('unsigned int', 'nbChannels'), ('unsigned int', 'batchSize'), ('unsigned int', 'inputWidth'), ('unsigned int', 'inputHeight'), ('int', 'leftPad'), ('int', 'rightPad'), ('int', 'topPad'), ('int', 'botPad'), ('const float *', 'input'), ('float *', 'outputs')]"
3557,58,cudaSRectifier_propagate_kernel,runs,"[('float *', 'x'), ('float *', 'y'), ('unsigned int', 'size'), ('float', 'leakSlope'), ('float', 'clipping')]"
3557,59,cudaDRectifier_propagate_kernel,runs,"[('double *', 'x'), ('double *', 'y'), ('unsigned int', 'size'), ('double', 'leakSlope'), ('double', 'clipping')]"
3557,61,cudaSRectifier_backPropagate_kernel,runs,"[('float *', 'x'), ('float *', 'dx'), ('unsigned int', 'size'), ('float', 'leakSlope'), ('float', 'clipping')]"
3557,62,cudaDRectifier_backPropagate_kernel,runs,"[('double *', 'x'), ('double *', 'dx'), ('unsigned int', 'size'), ('double', 'leakSlope'), ('double', 'clipping')]"
3557,64,cudaSSaturation_propagate_kernel,runs,"[('float *', 'x'), ('float *', 'y'), ('unsigned int', 'size'), ('float', 'threshold')]"
3557,65,cudaDSaturation_propagate_kernel,runs,"[('double *', 'x'), ('double *', 'y'), ('unsigned int', 'size'), ('double', 'threshold')]"
3557,67,cudaSSaturation_backPropagate_kernel,runs,"[('float *', 'x'), ('float *', 'dx'), ('unsigned int', 'size'), ('float', 'threshold')]"
3557,68,cudaDSaturation_backPropagate_kernel,runs,"[('double *', 'x'), ('double *', 'dx'), ('unsigned int', 'size'), ('double', 'threshold')]"
3557,70,cudaSSoftplus_propagate_kernel,runs,"[('float *', 'x'), ('float *', 'y'), ('unsigned int', 'size')]"
3557,71,cudaDSoftplus_propagate_kernel,runs,"[('double *', 'x'), ('double *', 'y'), ('unsigned int', 'size')]"
3557,73,cudaSSoftplus_backPropagate_kernel,runs,"[('float *', 'x'), ('float *', 'dx'), ('unsigned int', 'size')]"
3557,74,cudaDSoftplus_backPropagate_kernel,runs,"[('double *', 'x'), ('double *', 'dx'), ('unsigned int', 'size')]"
3557,81,cudaSclamp_kernel,runs,"[('float *', 'x'), ('unsigned int', 'size'), ('float', 'minVal'), ('float', 'maxVal')]"
3557,82,cudaSquantize_kernel,runs,"[('float *', 'x'), ('float *', 'y'), ('unsigned int', 'size'), ('float', 'minVal'), ('float', 'maxVal'), ('unsigned int', 'quantizationLevels'), ('bool', 'truncate')]"
3557,83,cudaDclamp_kernel,runs,"[('double *', 'x'), ('unsigned int', 'size'), ('double', 'minVal'), ('double', 'maxVal')]"
3557,84,cudaDquantize_kernel,runs,"[('double *', 'x'), ('double *', 'y'), ('unsigned int', 'size'), ('double', 'minVal'), ('double', 'maxVal'), ('unsigned int', 'quantizationLevels'), ('bool', 'truncate')]"
3557,88,cudaSpow_kernel,runs,"[('unsigned int', 'size'), ('float', 'power'), ('const float *', 'x'), ('float *', 'y')]"
3557,89,cudaDpow_kernel,runs,"[('unsigned int', 'size'), ('double', 'power'), ('const double *', 'x'), ('double *', 'y')]"
3557,91,cudaSadd_kernel,runs,"[('unsigned int', 'size'), ('float', 'value'), ('const float *', 'x'), ('float *', 'y')]"
3557,92,cudaDadd_kernel,runs,"[('unsigned int', 'size'), ('double', 'value'), ('const double *', 'x'), ('double *', 'y')]"
3557,94,cudaSmult_kernel,runs,"[('unsigned int', 'size'), ('const float *', 'x1'), ('const float *', 'x2'), ('float *', 'y')]"
3557,95,cudaDmult_kernel,runs,"[('unsigned int', 'size'), ('const double *', 'x1'), ('const double *', 'x2'), ('double *', 'y')]"
3557,97,cudaSinv_kernel,runs,"[('unsigned int', 'size'), ('const float *', 'x'), ('float *', 'y')]"
3557,98,cudaDinv_kernel,runs,"[('unsigned int', 'size'), ('const double *', 'x'), ('double *', 'y')]"
3560,0,cuda_sgemm,runs,"[('float *', 'matrix_a'), ('float *', 'matrix_b'), ('float *', 'matrix_c'), ('size_t', 'M'), ('size_t', 'K'), ('size_t', 'N')]"
3563,0,graph_determ_weights,runs,"[('unsigned int *', 'contact_mat_cum_row_indexes'), ('unsigned int *', 'contact_mat_column_indexes'), ('float *', 'contact_mat_values'), ('unsigned int', 'rows'), ('unsigned int', 'values'), ('float *', 'immunities'), ('float *', 'shedding_curve'), ('unsigned int', 'infection_length'), ('float', 'transmission_rate'), ('int *', 'infection_mat_values')]"
3563,1,spmv_csr_vector_kernel,runs,"[('unsigned int', 'computation_restriction_factor'), ('const unsigned int *', 'cum_row_indexes'), ('const unsigned int *', 'column_indexes'), ('const float *', 'matrix_data'), ('const float *', 'in_vector'), ('float *', 'out_vector'), ('const unsigned int', 'outerdim')]"
3563,2,negative_prob_multiply_dense_matrix_vector_kernel,runs,"[('float *', 'matrix'), ('float *', 'in_vector'), ('float *', 'out_vector'), ('unsigned int', 'outerdim'), ('unsigned int', 'innerdim')]"
3563,3,negative_prob_multiply_csr_matrix_vector_kernel,runs,"[('unsigned int *', 'cum_row_indexes'), ('unsigned int *', 'column_indexes'), ('float *', 'matrix_data'), ('float *', 'in_vector'), ('float *', 'out_vector'), ('unsigned int', 'outerdim')]"
3563,4,breadth_first_search_csr_gpu,runs,"[('unsigned int *', 'cum_row_indexes'), ('unsigned int *', 'column_indexes'), ('int *', 'matrix_data'), ('unsigned int *', 'in_infections'), ('unsigned int *', 'out_infections'), ('unsigned int', 'rows')]"
3573,33,deInterleave_kernel,runs,"[('float *', 'd_X_out'), ('float *', 'd_Y_out'), ('float2 *', 'd_XY_in'), ('int', 'pitch_out'), ('int', 'pitch_in'), ('int', 'width'), ('int', 'height')]"
3573,34,deInterleave_kernel2,runs,"[('float *', 'd_X_out'), ('float *', 'd_Y_out'), ('char *', 'd_XY_in'), ('int', 'pitch_out'), ('int', 'pitch_in'), ('int', 'width'), ('int', 'height')]"
3573,35,IMOMask_kernel,runs,"[('float *', 'd_IMOMask'), ('float *', 'd_IMO'), ('const float *', 'd_disparity'), ('float', 'offset'), ('int', 'n_cols'), ('int', 'n_rows')]"
3573,36,matchValidity_kernel,runs,"[('float *', 'd_flow'), ('float *', 'd_disparity'), ('int', 'n_cols'), ('int', 'n_rows')]"
3573,37,convertFloatToRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height'), ('float', 'lowerLim'), ('float', 'upperLim')]"
3573,38,convertPitchedFloatToRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height'), ('int', 'pitch'), ('float', 'lowerLim'), ('float', 'upperLim')]"
3573,39,convertKinectFloatToRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height'), ('int', 'pitch'), ('float', 'lowerLim'), ('float', 'upperLim')]"
3573,40,convertFloatToRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height')]"
3573,41,convertFlowToRGBA_kernel,runs,"[('uchar4 *', 'd_flowx_out'), ('uchar4 *', 'd_flowy_out'), ('const float *', 'd_flowx_in'), ('const float *', 'd_flowy_in'), ('int', 'width'), ('int', 'height'), ('float', 'lowerLim'), ('float', 'upperLim'), ('float', 'minMag')]"
3573,42,convertPitchedFloatToGrayRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height'), ('int', 'pitch'), ('float', 'lowerLim'), ('float', 'upperLim')]"
3573,44,createAnaglyph_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'left_image'), ('const float *', 'right_image'), ('int', 'width'), ('int', 'height'), ('int', 'pre_shift')]"
3573,45,createAnaglyph_kernel,runs,"[('uchar4 *', 'out_image'), ('const uchar4 *', 'left_image'), ('const uchar4 *', 'right_image'), ('int', 'width'), ('int', 'height'), ('int', 'pre_shift')]"
3573,46,convert2DVectorToAngleMagnitude_kernel,runs,"[('uchar4 *', 'd_angle_image'), ('uchar4 *', 'd_magnitude_image'), ('float *', 'd_vector_X'), ('float *', 'd_vector_Y'), ('int', 'width'), ('int', 'height'), ('float', 'lower_ang'), ('float', 'upper_ang'), ('float', 'lower_mag'), ('float', 'upper_mag')]"
3573,47,convertFloatToRGBAbinary_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height'), ('float', 'lowerLim'), ('float', 'upperLim')]"
3573,48,blendFloatImageFloatLabelToRGBA_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('const float *', 'label'), ('int', 'width'), ('int', 'height'), ('float', 'lowerLim'), ('float', 'upperLim')]"
3573,56,invalidateFlow_kernel,runs,"[('float *', 'modFlowX'), ('float *', 'modFlowY'), ('const float *', 'constFlowX'), ('const float *', 'constFlowY'), ('int', 'width'), ('int', 'height'), ('float', 'cons_thres')]"
3573,57,colorInvalids_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'in_image'), ('int', 'width'), ('int', 'height')]"
3573,58,convertKinectDisparityToRegularDisparity_kernel,runs,"[('float *', 'd_regularDisparity'), ('int', 'd_regularDisparityPitch'), ('const float *', 'd_KinectDisparity'), ('int', 'd_KinectDisparityPitch'), ('int', 'width'), ('int', 'height')]"
3573,59,convertKinectDisparityInPlace_kernel,runs,"[('float *', 'd_disparity'), ('int', 'pitch'), ('int', 'width'), ('int', 'height'), ('float', 'depth_scale')]"
3573,60,colorDistDiff_kernel,runs,"[('uchar4 *', 'out_image'), ('const float *', 'disparity'), ('int', 'disparity_pitch'), ('const float *', 'disparity_prior'), ('int', 'width'), ('int', 'height'), ('float', 'f'), ('float', 'b'), ('float', 'ox'), ('float', 'oy'), ('float', 'dist_thres')]"
3573,72,convertPointCloudToDepthImage_kernel,runs,"[('unsigned int *', 'depth_image'), ('const float4 *', 'point_cloud'), ('int', 'n_cols'), ('int', 'n_rows'), ('int', 'n_points'), ('float', 'nodal_point_x'), ('float', 'nodal_point_y'), ('float', 'focal_length_x'), ('float', 'focal_length_y'), ('const float *', 'T'), ('const float *', 'R')]"
3573,73,initializeToValue_kernel,runs,"[('unsigned int *', 'data'), ('unsigned int', 'value'), ('int', 'width'), ('int', 'height')]"
3573,74,convertDepthImageToMeter_kernel,runs,"[('float *', 'd_depth_image_meter'), ('const unsigned int *', 'd_depth_image_millimeter'), ('int', 'n_rows'), ('int', 'n_cols')]"
3573,76,median_reduce_shuffle_gpu,runs,"[('const float *', 'd_in'), ('float *', 'd_out'), ('float *', 'd_random_numbers'), ('int', 'n_in')]"
3573,77,multiple_median_reduce_shuffle_gpu,runs,"[('const float *', 'd_in'), ('float *', 'd_out'), ('const float *', 'd_random_numbers'), ('const int *', 'd_start_inds'), ('const int *', 'd_n_in')]"
3573,84,subsample_ind_and_labels_GPU,runs,"[('int *', 'd_ind_sub'), ('const int *', 'd_ind'), ('unsigned int *', 'd_label_sub'), ('const unsigned int *', 'd_label'), ('int', 'n_out'), ('float', 'inv_sub_factor')]"
3573,87,normal_eqs_flow_GPU,runs,"[('float *', 'd_CO'), ('const float2 *', 'd_flow_compact'), ('const float *', 'd_Zbuffer_flow_compact'), ('const int *', 'd_ind_flow_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('int', 'n_rows'), ('int', 'n_cols'), ('const int *', 'd_n_values_flow'), ('const int *', 'd_start_ind_flow')]"
3573,88,normal_eqs_flow_multicam_GPU,runs,"[('float *', 'd_CO'), ('float2 *', 'd_flow_compact'), ('float *', 'd_Zbuffer_flow_compact'), ('int *', 'd_ind_flow_Zbuffer'), ('const float *', 'd_focal_length'), ('const float *', 'd_nodal_point_x'), ('const float *', 'd_nodal_point_y'), ('const int *', 'd_n_rows'), ('const int *', 'd_n_cols'), ('const int *', 'd_n_values_flow'), ('const int *', 'd_start_ind_flow'), ('const int *', 'd_pixel_ind_offset')]"
3573,89,normal_eqs_disparity_GPU,runs,"[('float *', 'd_CD'), ('const float *', 'd_disparity_compact'), ('const float4 *', 'd_Zbuffer_normals_compact'), ('const int *', 'd_ind_disparity_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('float', 'b'), ('int', 'n_cols'), ('const int *', 'd_n_values_disparity'), ('const int *', 'd_start_ind_disparity'), ('float', 'w_disp')]"
3573,90,normal_eqs_disparity_multicam_GPU,runs,"[('float *', 'd_CD'), ('float *', 'd_disparity_compact'), ('float4 *', 'd_Zbuffer_normals_compact'), ('int *', 'd_ind_disparity_Zbuffer'), ('const float *', 'd_focal_length'), ('const float *', 'd_nodal_point_x'), ('const float *', 'd_nodal_point_y'), ('const float *', 'd_baseline'), ('const int *', 'd_n_cols'), ('const int *', 'd_n_values_disparity'), ('const int *', 'd_start_ind_disparity'), ('const int *', 'd_pixel_ind_offset')]"
3573,91,reduce_normal_eqs_64_GPU,runs,"[('float *', 'd_C_reduced'), ('float *', 'd_C'), ('int', 'gridDim_x_normal_equations')]"
3573,92,reduce_normal_eqs_64_mult_constr_GPU,runs,"[('float *', 'd_C_reduced'), ('const float *', 'd_C'), ('int', 'gridDim_x_normal_equations'), ('int', 'n_constraints')]"
3573,93,flow_absolute_residual_scalable_GPU,runs,"[('float *', 'd_abs_res'), ('const float2 *', 'd_flow_compact'), ('const float *', 'd_Zbuffer_flow_compact'), ('const int *', 'd_ind_flow_Zbuffer'), ('const unsigned int *', 'd_valid_flow_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('int', 'n_rows'), ('int', 'n_cols'), ('int', 'n_valid_flow_Zbuffer'), ('const int *', 'd_offset_ind'), ('const int *', 'd_segment_translation_table'), ('float', 'w_flow'), ('float', 'w_ar_flow'), ('const float *', 'd_dTR')]"
3573,94,disp_absolute_residual_scalable_GPU,runs,"[('float *', 'd_abs_res'), ('const float *', 'd_disparity_compact'), ('const float4 *', 'd_Zbuffer_normals_compact'), ('const int *', 'd_ind_disparity_Zbuffer'), ('const unsigned int *', 'd_valid_disparity_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('float', 'b'), ('int', 'n_cols'), ('int', 'n_valid_disparity_Zbuffer'), ('const int *', 'd_offset_ind'), ('const int *', 'd_segment_translation_table'), ('float', 'w_disp'), ('const float *', 'd_dTR')]"
3573,95,normal_eqs_flow_weighted_GPU,runs,"[('float *', 'd_CO'), ('const float2 *', 'd_flow_compact'), ('const float *', 'd_Zbuffer_flow_compact'), ('const int *', 'd_ind_flow_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('int', 'n_rows'), ('int', 'n_cols'), ('const int *', 'd_n_values_flow'), ('const int *', 'd_start_ind_flow'), ('const float *', 'd_abs_res_scales'), ('float', 'w_flow'), ('float', 'w_ar_flow'), ('const float *', 'd_dTR')]"
3573,96,normal_eqs_disparity_weighted_GPU,runs,"[('float *', 'd_CD'), ('const float *', 'd_disparity_compact'), ('const float4 *', 'd_Zbuffer_normals_compact'), ('const int *', 'd_ind_disparity_Zbuffer'), ('float', 'fx'), ('float', 'fy'), ('float', 'ox'), ('float', 'oy'), ('float', 'b'), ('int', 'n_cols'), ('const int *', 'd_n_values_disparity'), ('const int *', 'd_start_ind_disparity'), ('const float *', 'd_abs_res_scales'), ('float', 'w_disp'), ('const float *', 'd_dTR')]"
3579,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3579,308,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3582,0,VecAddInt32,runs,"[('int32_t *', 'in0'), ('int32_t *', 'in1'), ('int32_t *', 'out'), ('int', 'cnt')]"
3582,1,VecAddFp32,runs,"[('float *', 'in0'), ('float *', 'in1'), ('float *', 'out'), ('int', 'cnt')]"
3582,2,VecSubInt32,runs,"[('int32_t *', 'in0'), ('int32_t *', 'in1'), ('int32_t *', 'out'), ('int', 'cnt')]"
3582,3,VecSubFp32,runs,"[('float *', 'in0'), ('float *', 'in1'), ('float *', 'out'), ('int', 'cnt')]"
3583,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
3584,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
3584,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
3584,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
3584,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
3584,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
3584,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
3585,204,cuda_debug_kernel,runs,[]
3587,0,calc_linear_kernel_predict,runs,"[('int', 'objs'), ('int', 'coords'), ('double *', 'x'), ('int', 'objs_train'), ('double *', 'x_train'), ('double *', 'out')]"
3587,1,calc_predict,runs,"[('int', 'objs'), ('int', 'objs_train'), ('double *', 'a'), ('double', 'b'), ('int *', 'y_train'), ('double *', 'kval'), ('int *', 'y')]"
3587,2,calc_linear_kernel,runs,"[('int', 'objs'), ('int', 'coords'), ('double *', 'x'), ('double *', 'out')]"
3587,3,calc_linear_kernel,runs,"[('int', 'objs'), ('int', 'coords'), ('double *', 'x'), ('double *', 'out')]"
3587,4,calc_e,runs,"[('int', 'objs'), ('double *', 'a'), ('double', 'b'), ('int *', 'y'), ('double *', 'kval'), ('double *', 'e')]"
3587,5,calc_linear_kernel,runs,"[('int', 'objs'), ('int', 'coords'), ('double *', 'x'), ('double *', 'out')]"
3587,6,calc_e,runs,"[('int', 'objs'), ('double *', 'a'), ('double', 'b'), ('int *', 'y'), ('double *', 'kval'), ('double *', 'e')]"
3587,7,update_e,runs,"[('int', 'objs'), ('double *', 'e'), ('double *', 'kval'), ('double', 'b_old'), ('double', 'b_new'), ('int', 'i'), ('int', 'j'), ('int', 'yi'), ('int', 'yj'), ('double', 'ai_old'), ('double', 'ai_new'), ('double', 'aj_old'), ('double', 'aj_new')]"
359,0,vecInit,runs,"[('float *', 'X'), ('unsigned int', 'size'), ('float', 'value')]"
359,1,xexp,runs,"[('float *', 'X'), ('float *', 'C'), ('float *', 'Y'), ('float *', 'Z'), ('unsigned int', 'size')]"
359,2,zexp,runs,"[('float *', 'Z'), ('float *', 'X'), ('float *', 'Y'), ('unsigned int', 'size')]"
359,3,rowNorm,runs,"[('float *', 'X'), ('float *', 'v'), ('unsigned int', 'size'), ('unsigned int', 'n')]"
359,4,colNorm,runs,"[('float *', 'X'), ('float *', 'v'), ('unsigned int', 'size'), ('unsigned int', 'n')]"
359,5,dual,runs,"[('float *', 'err'), ('float *', 'Y'), ('float *', 'X'), ('float *', 'Z'), ('unsigned int', 'size')]"
359,6,matsub,runs,"[('float *', 'X'), ('float *', 'Y'), ('unsigned int', 'size')]"
359,7,rowNorm_a,runs,"[('float *', 'X'), ('float *', 'v'), ('float *', 'a'), ('unsigned int', 'size'), ('unsigned int', 'n')]"
359,8,colNorm_b,runs,"[('float *', 'X'), ('float *', 'v'), ('float *', 'b'), ('unsigned int', 'size'), ('unsigned int', 'n')]"
359,9,reduce,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
3595,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
3595,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
3595,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
3595,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
3595,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
3595,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
3595,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
3595,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
3595,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
3595,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
3595,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
3595,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
3595,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
3595,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
3595,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
3595,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
3595,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
3595,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
3595,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
3595,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
3595,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
3595,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
3595,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3595,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3595,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3595,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3595,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3595,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3595,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
3595,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
3595,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
3595,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
3595,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
3595,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
3595,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
3595,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3595,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3595,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3595,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3595,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3595,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3595,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
3595,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
3595,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
3595,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
3595,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
3595,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
3595,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
3595,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
3595,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
3595,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
3595,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
3595,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
3595,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
3595,67,computePointGradients1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dj_ang'), ('double *', 'pg24'), ('double *', 'pg05'), ('double *', 'pg15'), ('double *', 'pg25')]"
3595,68,computePointHessian0,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph93'), ('double *', 'ph103'), ('double *', 'ph113'), ('double *', 'ph123'), ('double *', 'ph94'), ('double *', 'ph133'), ('double *', 'ph104'), ('double *', 'ph143'), ('double *', 'ph114'), ('double *', 'ph153'), ('double *', 'ph95'), ('double *', 'ph163'), ('double *', 'ph105'), ('double *', 'ph173'), ('double *', 'ph115')]"
3595,69,computePointHessian1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph124'), ('double *', 'ph134'), ('double *', 'ph144'), ('double *', 'ph154'), ('double *', 'ph125'), ('double *', 'ph164'), ('double *', 'ph135'), ('double *', 'ph174'), ('double *', 'ph145')]"
3595,70,computePointHessian2,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph155'), ('double *', 'ph165'), ('double *', 'ph175')]"
3595,71,computeScoreList,runs,"[('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'e_x_cov_x'), ('double', 'gauss_d1'), ('double *', 'score')]"
3595,72,computeScoreGradientList,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('int', 'voxel_num'), ('double *', 'e_x_cov_x'), ('double *', 'cov_dxd_pi'), ('double', 'gauss_d1'), ('int', 'valid_voxel_num'), ('double *', 'score_gradients')]"
3595,73,computeExCovX,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centr_x'), ('double *', 'centr_y'), ('double *', 'centr_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22')]"
3595,74,updateExCovX,runs,"[('double *', 'e_x_cov_x'), ('double', 'gauss_d2'), ('int', 'valid_voxel_num')]"
3595,75,computeCovDxdPi,runs,"[('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'inverse_covariance'), ('int', 'voxel_num'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'point_gradients'), ('double *', 'cov_dxd_pi'), ('int', 'valid_voxel_num')]"
3595,76,computeHessianListS0,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_gradients'), ('double *', 'tmp_hessian'), ('int', 'valid_voxel_num')]"
3595,77,computeHessianListS1,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'hessians'), ('double *', 'e_x_cov_x'), ('double *', 'tmp_hessian'), ('double *', 'cov_dxd_pi'), ('double *', 'point_gradients'), ('int', 'valid_voxel_num')]"
3595,78,computeHessianListS2,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_hessians'), ('double *', 'hessians'), ('int', 'valid_voxel_num')]"
3595,80,sumScore,runs,"[('double *', 'score'), ('int', 'full_size'), ('int', 'half_size')]"
3596,2,ComputeInternalEnergy_kernel,runs,"[('float *', 'Rho'), ('float *', 'Vx'), ('float *', 'Vy'), ('float *', 'Vz'), ('float *', 'Etot'), ('float *', 'Eneint'), ('float *', 'Bx'), ('float *', 'By'), ('float *', 'Bz'), ('int', 'size')]"
3596,6,MHDComputedUx_CUDA3_kernel,runs,"[('float *', 'FluxD'), ('float *', 'FluxS1'), ('float *', 'FluxS2'), ('float *', 'FluxS3'), ('float *', 'FluxTau'), ('float *', 'FluxBx'), ('float *', 'FluxBy'), ('float *', 'FluxBz'), ('float *', 'FluxPhi'), ('float *', 'dUD'), ('float *', 'dUS1'), ('float *', 'dUS2'), ('float *', 'dUS3'), ('float *', 'dUTau'), ('float *', 'dUBx'), ('float *', 'dUBy'), ('float *', 'dUBz'), ('float *', 'dUPhi'), ('float', 'dtdx'), ('int', 'size')]"
3596,7,MHDComputedUy_CUDA3_kernel,runs,"[('float *', 'FluxD'), ('float *', 'FluxS1'), ('float *', 'FluxS2'), ('float *', 'FluxS3'), ('float *', 'FluxTau'), ('float *', 'FluxBx'), ('float *', 'FluxBy'), ('float *', 'FluxBz'), ('float *', 'FluxPhi'), ('float *', 'dUD'), ('float *', 'dUS1'), ('float *', 'dUS2'), ('float *', 'dUS3'), ('float *', 'dUTau'), ('float *', 'dUBx'), ('float *', 'dUBy'), ('float *', 'dUBz'), ('float *', 'dUPhi'), ('float', 'dtdx'), ('int', 'size'), ('int', 'dim0'), ('int', 'dim1'), ('int', 'dim2')]"
3596,8,MHDComputedUz_CUDA3_kernel,runs,"[('float *', 'FluxD'), ('float *', 'FluxS1'), ('float *', 'FluxS2'), ('float *', 'FluxS3'), ('float *', 'FluxTau'), ('float *', 'FluxBx'), ('float *', 'FluxBy'), ('float *', 'FluxBz'), ('float *', 'FluxPhi'), ('float *', 'dUD'), ('float *', 'dUS1'), ('float *', 'dUS2'), ('float *', 'dUS3'), ('float *', 'dUTau'), ('float *', 'dUBx'), ('float *', 'dUBy'), ('float *', 'dUBz'), ('float *', 'dUPhi'), ('float', 'dtdx'), ('int', 'size'), ('int', 'dim0'), ('int', 'dim1'), ('int', 'dim2')]"
3596,9,MHDUpdatePrim_CUDA3_kernel,runs,"[('float *', 'Rho'), ('float *', 'Vx'), ('float *', 'Vy'), ('float *', 'Vz'), ('float *', 'Etot'), ('float *', 'Bx'), ('float *', 'By'), ('float *', 'Bz'), ('float *', 'Phi'), ('float *', 'dUD'), ('float *', 'dUS1'), ('float *', 'dUS2'), ('float *', 'dUS3'), ('float *', 'dUTau'), ('float *', 'dUBx'), ('float *', 'dUBy'), ('float *', 'dUBz'), ('float *', 'dUPhi'), ('float', 'dt'), ('float', 'C_h'), ('float', 'C_p'), ('int', 'size')]"
3596,14,ComputeInternalEnergy_kernel,runs,"[('float *', 'Vx'), ('float *', 'Vy'), ('float *', 'Vz'), ('float *', 'Etot'), ('float *', 'Eneint'), ('int', 'size')]"
3596,18,HydroComputedUx_CUDA3_kernel,runs,"[('float *', 'FluxD'), ('float *', 'FluxS1'), ('float *', 'FluxS2'), ('float *', 'FluxS3'), ('float *', 'FluxTau'), ('float *', 'dUD'), ('float *', 'dUS1'), ('float *', 'dUS2'), ('float *', 'dUS3'), ('float *', 'dUTau'), ('float', 'dtdx'), ('int', 'size')]"
3596,19,HydroComputedUy_CUDA3_kernel,runs,"[('float *', 'FluxD'), ('float *', 'FluxS1'), ('float *', 'FluxS2'), ('float *', 'FluxS3'), ('float *', 'FluxTau'), ('float *', 'dUD'), ('float *', 'dUS1'), ('float *', 'dUS2'), ('float *', 'dUS3'), ('float *', 'dUTau'), ('float', 'dtdx'), ('int', 'size'), ('int', 'dim0'), ('int', 'dim1'), ('int', 'dim2')]"
3596,20,HydroComputedUz_CUDA3_kernel,runs,"[('float *', 'FluxD'), ('float *', 'FluxS1'), ('float *', 'FluxS2'), ('float *', 'FluxS3'), ('float *', 'FluxTau'), ('float *', 'dUD'), ('float *', 'dUS1'), ('float *', 'dUS2'), ('float *', 'dUS3'), ('float *', 'dUTau'), ('float', 'dtdx'), ('int', 'size'), ('int', 'dim0'), ('int', 'dim1'), ('int', 'dim2')]"
3596,21,HydroUpdatePrim_CUDA3_kernel,runs,"[('float *', 'Rho'), ('float *', 'Vx'), ('float *', 'Vy'), ('float *', 'Vz'), ('float *', 'Etot'), ('float *', 'dUD'), ('float *', 'dUS1'), ('float *', 'dUS2'), ('float *', 'dUS3'), ('float *', 'dUTau'), ('float', 'dt'), ('int', 'size')]"
3597,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
3599,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
3599,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
3599,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
3599,8,null_kernel,runs,[]
3599,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
36,0,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
36,35,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
36,36,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
36,37,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
360,0,mapAdjacencyToBlockKernel,runs,"[('int', 'size'), ('int *', 'adjIndexes'), ('int *', 'adjacency'), ('int *', 'adjacencyBlockLabel'), ('int *', 'blockMappedAdjacency'), ('int *', 'fineAggregate')]"
360,1,findPartIndicesNegStartKernel,runs,"[('int', 'size'), ('int *', 'array'), ('int *', 'partIndices')]"
360,2,findPartIndicesKernel,runs,"[('int', 'size'), ('int *', 'array'), ('int *', 'partIndices')]"
360,3,findAdjacencySizesKernel,runs,"[('int', 'size'), ('int *', 'adjIndexes'), ('int *', 'output')]"
360,4,accumulatedPartSizesKernel,runs,"[('int', 'size'), ('int *', 'part'), ('int *', 'weights'), ('int *', 'accumulatedSize')]"
360,5,unaccumulatedPartSizesKernel,runs,"[('int', 'size'), ('int *', 'accumulatedSize'), ('int *', 'sizes')]"
360,6,MakeMerges,runs,"[('int', 'size'), ('int *', 'mergeWith'), ('int *', 'offsets'), ('int *', 'mis')]"
360,7,MakeMerges_MarkSplits,runs,"[('int', 'size'), ('int *', 'mergeWith'), ('int *', 'offsets'), ('int *', 'mis'), ('int *', 'splitsToMake')]"
360,8,MakeSplits,runs,"[('int', 'baseAggregateIdx'), ('int *', 'splitting'), ('int *', 'aggregation'), ('int *', 'aggMapAdjIndices'), ('int *', 'aggMapAdjacency'), ('int *', 'adjIndices'), ('int *', 'adjacency')]"
360,10,MakeSplits_Large,runs,"[('int', 'baseAggregateIdx'), ('int *', 'splitting'), ('int *', 'aggregation'), ('int *', 'aggMapAdjIndices'), ('int *', 'aggMapAdjacency'), ('int *', 'adjIndices'), ('int *', 'adjacency')]"
360,12,MarkSplits,runs,"[('int', 'size'), ('bool', 'force'), ('int', 'minPartSize'), ('int', 'maxPartSize'), ('int *', 'partSizes'), ('int *', 'splitsToMake')]"
360,13,FindDesirableMerges,runs,"[('int', 'size'), ('int', 'minSize'), ('int', 'maxSize'), ('bool', 'force'), ('int *', 'adjIndices'), ('int *', 'adjacency'), ('int *', 'partSizes'), ('int *', 'desiredMerges'), ('int *', 'merging')]"
360,14,FindDesirableMergeSplits,runs,"[('int', 'size'), ('int', 'minSize'), ('int', 'maxSize'), ('int', 'desiredSize'), ('int *', 'adjIndices'), ('int *', 'adjacency'), ('int *', 'partSizes'), ('int *', 'desiredMerges'), ('int *', 'merging')]"
360,15,MarkMerges,runs,"[('int', 'size'), ('int *', 'desiredMerges'), ('int *', 'merging'), ('int *', 'mergesToMake'), ('int *', 'incomplete')]"
360,16,allocateNodesKernel,runs,"[('int', 'size'), ('int *', 'adjIndexes'), ('int *', 'adjacency'), ('int *', 'partIn'), ('int *', 'partOut'), ('int *', 'aggregated')]"
360,17,checkAggregationFillAggregates,runs,"[('int', 'size'), ('int *', 'adjIndices'), ('int *', 'adjacency'), ('int *', 'aggregation'), ('int *', 'valuesIn'), ('int *', 'valuesOut'), ('int *', 'incomplete')]"
360,18,GenerateRandoms,runs,"[('int', 'size'), ('int', 'iterations'), ('unsigned int *', 'randoms'), ('unsigned int *', 'seeds')]"
360,19,PreInitialize,runs,"[('int', 'size'), ('unsigned int *', 'randoms'), ('int *', 'bestSeen'), ('int *', 'origin'), ('int *', 'mis')]"
360,20,Initialize,runs,"[('int', 'size'), ('unsigned int *', 'randoms'), ('int *', 'bestSeen'), ('int *', 'origin'), ('int *', 'mis'), ('int *', 'incomplete')]"
360,21,Iterate,runs,"[('int', 'size'), ('int *', 'originIn'), ('int *', 'originOut'), ('int *', 'bestSeenIn'), ('int *', 'bestSeenOut'), ('int *', 'adjIndexes'), ('int *', 'adjacency')]"
360,22,Finalize,runs,"[('int', 'size'), ('int *', 'originIn'), ('int *', 'originOut'), ('int *', 'bestSeenIn'), ('int *', 'bestSeenOut'), ('int *', 'adjIndexes'), ('int *', 'adjacency'), ('int *', 'mis'), ('int *', 'incomplete')]"
360,52,Generate_Randoms_Kernel,runs,"[('int', 'size'), ('int', 'iterations'), ('unsigned int *', 'randoms'), ('unsigned int *', 'seeds')]"
360,53,First_Initialize_Kernel,runs,"[('int', 'size'), ('unsigned int *', 'randoms'), ('int *', 'bestSeen'), ('int *', 'origin')]"
360,54,Initialize_Kernel,runs,"[('int', 'size'), ('unsigned int *', 'randoms'), ('int *', 'bestSeen'), ('int *', 'origin'), ('int *', 'mis'), ('int *', 'incomplete')]"
360,55,Iterate_Kernel,runs,"[('int', 'size'), ('int *', 'originIn'), ('int *', 'originOut'), ('int *', 'bestSeenIn'), ('int *', 'bestSeenOut'), ('int *', 'adjIndexes'), ('int *', 'adjacency')]"
360,56,Final_Iterate_Kernel,runs,"[('int', 'size'), ('int *', 'originIn'), ('int *', 'originOut'), ('int *', 'bestSeenIn'), ('int *', 'bestSeenOut'), ('int *', 'adjIndexes'), ('int *', 'adjacency'), ('int *', 'mis'), ('int *', 'incomplete')]"
360,57,packcoo_kernel,runs,"[('int', 'num_entries'), ('int *', 'row_indices'), ('int *', 'column_indices'), ('int *', 'aggridx'), ('int *', 'partidx'), ('int *', 'partlabel')]"
360,60,findAdjacencySizesKernel,runs,"[('int', 'size'), ('int *', 'adjIndexes'), ('int *', 'output')]"
360,61,allocateNodesKernel,runs,"[('int', 'size'), ('int *', 'adjIndexes'), ('int *', 'adjacency'), ('int *', 'partIn'), ('int *', 'partOut'), ('int *', 'aggregated')]"
360,62,findPartIndicesKernel,runs,"[('int', 'size'), ('int *', 'array'), ('int *', 'partIndices')]"
360,63,findPartIndicesNegStartKernel,runs,"[('int', 'size'), ('int *', 'array'), ('int *', 'partIndices')]"
360,64,fillWithIndexKernel,runs,"[('int', 'size'), ('int *', 'array')]"
360,65,getInversePermutationKernel,runs,"[('int', 'size'), ('int *', 'original'), ('int *', 'inverse')]"
360,66,permuteInitialAdjacencyKernel,runs,"[('int', 'size'), ('int *', 'adjIndexesIn'), ('int *', 'adjacencyIn'), ('int *', 'permutedAdjIndexesIn'), ('int *', 'permutedAdjacencyIn'), ('int *', 'ipermutation'), ('int *', 'fineAggregate')]"
360,67,getInducedGraphNeighborCountsKernel,runs,"[('int', 'size'), ('int *', 'aggregateIdx'), ('int *', 'adjIndexesOut'), ('int *', 'permutedAdjIndexes'), ('int *', 'permutedAdjacencyIn')]"
360,68,fillCondensedAdjacencyKernel,runs,"[('int', 'size'), ('int *', 'aggregateIdx'), ('int *', 'adjIndexesOut'), ('int *', 'adjacencyOut'), ('int *', 'permutedAdjIndexesIn'), ('int *', 'permutedAdjacencyIn')]"
360,69,fillPartitionLabelKernel,runs,"[('int', 'size'), ('int *', 'coarseAggregate'), ('int *', 'fineAggregateSort'), ('int *', 'partitionLabel')]"
360,70,getAggregateStartIndicesKernel,runs,"[('int', 'size'), ('int *', 'fineAggregateSort'), ('int *', 'aggregateRemapIndex')]"
360,71,remapAggregateIdxKernel,runs,"[('int', 'size'), ('int *', 'fineAggregateSort'), ('int *', 'aggregateRemapId')]"
360,72,mapAdjacencyToBlockKernel,runs,"[('int', 'size'), ('int *', 'adjIndexes'), ('int *', 'adjacency'), ('int *', 'adjacencyBlockLabel'), ('int *', 'blockMappedAdjacency'), ('int *', 'fineAggregate')]"
360,73,removeRuntyPartsKernel,runs,"[('int', 'size'), ('int *', 'partition'), ('int *', 'removeStencil'), ('int *', 'subtractions')]"
360,74,accumulatedPartSizesKernel,runs,"[('int', 'size'), ('int *', 'part'), ('int *', 'weights'), ('int *', 'accumulatedSize')]"
360,75,unaccumulatedPartSizesKernel,runs,"[('int', 'size'), ('int *', 'accumulatedSize'), ('int *', 'sizes')]"
360,76,findDesirabilityKernel,runs,"[('int', 'size'), ('int', 'optimalSize'), ('int *', 'adjIndexes'), ('int *', 'adjacency'), ('int *', 'partition'), ('int *', 'partSizes'), ('int *', 'nodeWeights'), ('int *', 'swap_to'), ('int *', 'swap_from'), ('int *', 'swap_index'), ('float *', 'desirability')]"
360,77,makeSwapsKernel,runs,"[('int', 'size'), ('int *', 'partition'), ('int *', 'partSizes'), ('int *', 'nodeWeights'), ('int *', 'swap_to'), ('int *', 'swap_from'), ('int *', 'swap_index'), ('float *', 'desirability')]"
3603,17,SampleConcentrationDev,runs,"[('float *', 'concentration'), ('const uint2 *', 'cellStartEnd')]"
3603,18,SampleConcentrationSlicedDev,runs,"[('float *', 'concentration'), ('uint', 'slice'), ('const uint2 *', 'cellStartEnd')]"
3603,19,SampleVelocitiesSlicedDev,runs,"[('float *', 'velocities'), ('const uint', 'slice'), ('const float4 *', 'vels_data'), ('const uint2 *', 'cellStartEnd'), ('const uint *', 'indices')]"
3603,20,BuildColorFieldDev,runs,"[('float *', 'data'), ('uchar4 *', 'colors'), ('float *', 'minmax'), ('uint', 'xx'), ('uint', 'yy')]"
3603,30,PreProcessVectorFieldDev,runs,"[('float3 *', 'field'), ('float', 'width'), ('float', 'height'), ('float', 'minx'), ('float', 'miny')]"
3619,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3619,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
362,0,FillOnes,runs,"[('float *', 'vec'), ('int', 'size')]"
362,1,SoftmaxLossBackprop,runs,"[('const float *', 'label'), ('int', 'num_labels'), ('int', 'batch_size'), ('float *', 'diff')]"
3620,132,kernel_print,runs,"[('int const *', 'p'), ('int', 'n')]"
3620,133,kernel_print,runs,"[('long const *', 'p'), ('int', 'n')]"
3620,134,kernel_print,runs,"[('size_t const *', 'p'), ('int', 'n')]"
3627,7,initialize_skel_kernel,runs,[]
3628,4,mkRender,runs,"[('float *', 'fb'), ('int', 'max_x'), ('int', 'max_y')]"
3633,0,gpu_transpose,runs,"[('float *', 'dst'), ('float *', 'A'), ('int', 'col'), ('int', 'row')]"
3635,0,psamask_collect_forward_cuda,runs,"[('const int', 'nthreads'), ('const int', 'feature_H_'), ('const int', 'feature_W_'), ('const int', 'mask_H_'), ('const int', 'mask_W_'), ('const int', 'half_mask_H_'), ('const int', 'half_mask_W_'), ('const float *', 'mask_data'), ('float *', 'buffer_data')]"
3635,1,psamask_distribute_forward_cuda,runs,"[('const int', 'nthreads'), ('const int', 'feature_H_'), ('const int', 'feature_W_'), ('const int', 'mask_H_'), ('const int', 'mask_W_'), ('const int', 'half_mask_H_'), ('const int', 'half_mask_W_'), ('const float *', 'mask_data'), ('float *', 'buffer_data')]"
3635,2,psamask_collect_backward_cuda,runs,"[('const int', 'nthreads'), ('const int', 'feature_H_'), ('const int', 'feature_W_'), ('const int', 'mask_H_'), ('const int', 'mask_W_'), ('const int', 'half_mask_H_'), ('const int', 'half_mask_W_'), ('const float *', 'buffer_diff'), ('float *', 'mask_diff')]"
3635,3,psamask_distribute_backward_cuda,runs,"[('const int', 'nthreads'), ('const int', 'feature_H_'), ('const int', 'feature_W_'), ('const int', 'mask_H_'), ('const int', 'mask_W_'), ('const int', 'half_mask_H_'), ('const int', 'half_mask_W_'), ('const float *', 'buffer_diff'), ('float *', 'mask_diff')]"
3641,0,cumo_na_index_aref_nadata_index_stride_kernel,runs,"[('size_t *', 'idx'), ('ssize_t', 's1'), ('uint64_t', 'n')]"
3641,1,cumo_na_index_aref_naview_index_index_kernel,runs,"[('size_t *', 'idx'), ('size_t *', 'idx1'), ('uint64_t', 'n')]"
3641,2,cumo_na_index_aref_naview_index_stride_last_kernel,runs,"[('size_t *', 'idx'), ('ssize_t', 's1'), ('size_t', 'last'), ('uint64_t', 'n')]"
3641,3,cumo_na_index_aref_naview_index_stride_kernel,runs,"[('size_t *', 'idx'), ('ssize_t', 's1'), ('uint64_t', 'n')]"
3641,4,cumo_na_index_aref_naview_index_index_beg_step_kernel,runs,"[('size_t *', 'idx'), ('size_t *', 'idx1'), ('size_t', 'beg'), ('ssize_t', 'step'), ('uint64_t', 'n')]"
3641,7,cumo_iter_copy_bytes_kernel,runs,"[('char *', 'p1'), ('char *', 'p2'), ('ssize_t', 's1'), ('ssize_t', 's2'), ('size_t *', 'idx1'), ('size_t *', 'idx2'), ('uint64_t', 'n'), ('ssize_t', 'elmsz')]"
3641,8,cumo_na_diagonal_index_index_kernel,runs,"[('size_t *', 'idx'), ('size_t *', 'idx0'), ('size_t *', 'idx1'), ('size_t', 'k0'), ('size_t', 'k1'), ('uint64_t', 'n')]"
3641,9,cumo_na_diagonal_index_stride_kernel,runs,"[('size_t *', 'idx'), ('size_t *', 'idx0'), ('ssize_t', 's1'), ('size_t', 'k0'), ('size_t', 'k1'), ('uint64_t', 'n')]"
3641,10,cumo_na_diagonal_stride_index_kernel,runs,"[('size_t *', 'idx'), ('ssize_t', 's0'), ('size_t *', 'idx1'), ('size_t', 'k0'), ('size_t', 'k1'), ('uint64_t', 'n')]"
3647,0,sim_kernel_shfl,runs,"[('double *', 'z'), ('double *', 'v'), ('size_t', 'nx'), ('size_t', 'ny'), ('double', 'dx2inv'), ('double', 'dy2inv'), ('double', 'dt')]"
3647,1,sim_kernel_tiled,runs,"[('double *', 'z'), ('double *', 'v'), ('size_t', 'nx'), ('size_t', 'ny'), ('double', 'dx2inv'), ('double', 'dy2inv'), ('double', 'dt')]"
3647,2,sim_kernel_naive,runs,"[('double *', 'z'), ('double *', 'v'), ('size_t', 'nx'), ('size_t', 'ny'), ('double', 'dx2inv'), ('double', 'dy2inv'), ('double', 'dt')]"
3647,4,grayscale_kernel,runs,"[('double *', 'z'), ('unsigned char *', 'output'), ('size_t', 'size'), ('double', 'z_min'), ('double', 'z_max')]"
3664,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3664,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3671,26,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
3671,29,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
3671,30,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
3671,31,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
3679,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
3679,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
3679,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
3679,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
3679,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
3679,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
3679,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
3679,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
3679,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
3679,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
3679,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
3679,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
3679,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
3679,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
3679,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
3679,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
3679,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
3679,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
3679,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
3679,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
3679,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
3679,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
3679,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
3679,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
3679,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
3679,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
3679,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3679,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3679,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3679,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3679,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3679,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3679,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
3679,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
3679,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
3679,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
3679,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
3679,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
3679,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
3679,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
3679,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
3679,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3679,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3679,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3679,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3679,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3679,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3679,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
3679,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
3679,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
3679,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
3679,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
3679,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
3679,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
3679,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
3679,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
3679,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
3679,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
3679,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
3679,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
368,0,MyKernel,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'N')]"
368,2,_GPU_Floyd_kernel,runs,"[('int', 'k'), ('int *', 'G'), ('int *', 'P'), ('int', 'N')]"
3696,177,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3696,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3718,1,create_bin_expimages,runs,"[('char *', 'acExpDetImages'), ('const int *', 'aiDetStartIdx'), ('const float *', 'afDetInfo'), ('const int', 'iNDet'), ('const int', 'iNRot'), ('const int *', 'aiDetIndex'), ('const int *', 'aiRotN'), ('const int *', 'aiJExp'), ('const int *', 'aiKExp'), ('int const', 'iNPeak')]"
3718,3,display_rand,runs,"[('float *', 'afRandom'), ('int', 'iNRand')]"
3718,4,euler_zxz_to_mat,runs,"[('float *', 'afEuler'), ('float *', 'afMat'), ('int', 'iNAngle')]"
3718,5,mat_to_euler_ZXZ,runs,"[('float *', 'afMatIn'), ('float *', 'afEulerOut'), ('int', 'iNAngle')]"
3718,6,rand_mat_neighb_from_euler,runs,"[('float *', 'afEulerIn'), ('float *', 'afMatOut'), ('float *', 'afRand'), ('float', 'fBound')]"
3718,7,misorien,runs,"[('float *', 'afMisOrien'), ('float *', 'afM0'), ('float *', 'afM1'), ('float *', 'afSymM')]"
3724,1,sum,runs,"[('long int *', 'device_num'), ('long int *', 'device_den'), ('long int *', 'device_vet'), ('int', 'size'), ('int', 'x')]"
3724,3,sum,runs,"[('long int *', 'device_num'), ('long int *', 'device_den'), ('long int *', 'device_vet'), ('int', 'size'), ('int', 'x')]"
3724,5,sum,runs,"[('long int *', 'device_num'), ('long int *', 'device_den'), ('long int *', 'device_vet'), ('int', 'size'), ('int', 'x')]"
3725,10,poisson_rand_kernel,runs,"[('const int64_t', 'seed'), ('int32_t __restrict *', 'numbers'), ('const int64_t', 'maximum'), ('const double', 'lambda')]"
3725,11,add_arrays_kernel,runs,"[('int32_t __restrict *', 'a'), ('const int32_t __restrict *', 'b'), ('const int64_t', 'array_count')]"
3725,12,add_arrays_kernel,runs,"[('int64_t __restrict *', 'a'), ('const int64_t __restrict *', 'b'), ('const int64_t', 'array_count')]"
3725,15,subtract_arrays_kernel,runs,"[('int32_t __restrict *', 'a'), ('const int32_t __restrict *', 'b'), ('const int64_t', 'array_count')]"
3725,16,subtract_arrays_kernel,runs,"[('int64_t __restrict *', 'a'), ('const int64_t __restrict *', 'b'), ('const int64_t', 'array_count')]"
3729,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
3736,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
3736,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
3736,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
3736,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
3736,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
3736,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
3736,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
3738,180,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3738,320,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3740,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3740,308,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
375,0,laplace_2d_gpu,runs,"[('double *', 'w'), ('double *', 'v'), ('const int', 'nx'), ('const int', 'ny')]"
375,1,vec_add_gpu,runs,"[('double *', 'sum'), ('double *', 'w'), ('double', 'a'), ('double *', 'v'), ('const int', 'nx'), ('const int', 'ny')]"
376,1,vecDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('const int', 'N')]"
376,2,vecMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('const int', 'N')]"
376,3,vecEps,runs,"[('float *', 'a'), ('const int', 'N')]"
376,4,rowDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
376,5,colDiv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
376,6,colMul,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N')]"
376,13,reduce0,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('int', 'N')]"
3761,0,SetupPoissKernel,runs,"[('curandState *', 'curand_state'), ('uint64_t', 'n_dir_conn'), ('unsigned long long', 'seed')]"
3761,2,BaseNeuronSetIntArray,runs,"[('int *', 'arr'), ('int', 'n_elem'), ('int', 'step'), ('int', 'val')]"
3761,3,BaseNeuronSetIntPtArray,runs,"[('int *', 'arr'), ('int *', 'pos'), ('int', 'n_elem'), ('int', 'step'), ('int', 'val')]"
3761,4,BaseNeuronGetIntArray,runs,"[('int *', 'arr1'), ('int *', 'arr2'), ('int', 'n_elem'), ('int', 'step1'), ('int', 'step2')]"
3761,5,BaseNeuronGetIntPtArray,runs,"[('int *', 'arr1'), ('int *', 'arr2'), ('int *', 'pos'), ('int', 'n_elem'), ('int', 'step1'), ('int', 'step2')]"
3761,6,BaseNeuronSetFloatArray,runs,"[('float *', 'arr'), ('int', 'n_elem'), ('int', 'step'), ('float', 'val')]"
3761,7,BaseNeuronSetFloatPtArray,runs,"[('float *', 'arr'), ('int *', 'pos'), ('int', 'n_elem'), ('int', 'step'), ('float', 'val')]"
3761,8,BaseNeuronGetFloatArray,runs,"[('float *', 'arr1'), ('float *', 'arr2'), ('int', 'n_elem'), ('int', 'step1'), ('int', 'step2')]"
3761,9,BaseNeuronGetFloatPtArray,runs,"[('float *', 'arr1'), ('float *', 'arr2'), ('int *', 'pos'), ('int', 'n_elem'), ('int', 'step1'), ('int', 'step2')]"
3761,18,SetFloatArray,runs,"[('float *', 'arr'), ('int', 'n_elem'), ('int', 'step'), ('float', 'val')]"
3761,25,BaseNeuronSetIntArray,runs,"[('int *', 'arr'), ('int', 'n_elem'), ('int', 'step'), ('int', 'val')]"
3761,26,BaseNeuronSetIntPtArray,runs,"[('int *', 'arr'), ('int *', 'pos'), ('int', 'n_elem'), ('int', 'step'), ('int', 'val')]"
3761,27,BaseNeuronGetIntArray,runs,"[('int *', 'arr1'), ('int *', 'arr2'), ('int', 'n_elem'), ('int', 'step1'), ('int', 'step2')]"
3761,28,BaseNeuronGetIntPtArray,runs,"[('int *', 'arr1'), ('int *', 'arr2'), ('int *', 'pos'), ('int', 'n_elem'), ('int', 'step1'), ('int', 'step2')]"
3761,29,BaseNeuronSetFloatArray,runs,"[('float *', 'arr'), ('int', 'n_elem'), ('int', 'step'), ('float', 'val')]"
3761,30,BaseNeuronSetFloatPtArray,runs,"[('float *', 'arr'), ('int *', 'pos'), ('int', 'n_elem'), ('int', 'step'), ('float', 'val')]"
3761,31,BaseNeuronGetFloatArray,runs,"[('float *', 'arr1'), ('float *', 'arr2'), ('int', 'n_elem'), ('int', 'step1'), ('int', 'step2')]"
3761,32,BaseNeuronGetFloatPtArray,runs,"[('float *', 'arr1'), ('float *', 'arr2'), ('int *', 'pos'), ('int', 'n_elem'), ('int', 'step1'), ('int', 'step2')]"
3761,33,UpdateExtNeuron,runs,"[('float *', 'port_input_pt'), ('float *', 'port_value_pt'), ('int', 'n_node'), ('int', 'n_var'), ('int', 'n_port_var'), ('int', 'n_port')]"
3761,37,prescan_arbitrary_unoptimized,runs,"[('int *', 'output'), ('int *', 'input'), ('int', 'n'), ('int', 'powerOfTwo')]"
3761,39,prescan_large_unoptimized,runs,"[('int *', 'output'), ('int *', 'input'), ('int', 'n'), ('int *', 'sums')]"
3761,40,add,runs,"[('int *', 'output'), ('int', 'length'), ('int *', 'n')]"
3761,41,add,runs,"[('int *', 'output'), ('int', 'length'), ('int *', 'n1'), ('int *', 'n2')]"
3761,51,GetSpikes,runs,"[('double *', 'spike_array'), ('int', 'array_size'), ('int', 'n_port'), ('int', 'n_var'), ('float *', 'port_weight_arr'), ('int', 'port_weight_arr_step'), ('int', 'port_weight_port_step'), ('float *', 'port_input_arr'), ('int', 'port_input_arr_step'), ('int', 'port_input_port_step')]"
3761,52,GetSpikes,runs,"[('double *', 'spike_array'), ('int', 'array_size'), ('int', 'n_port'), ('int', 'n_var'), ('float *', 'port_weight_arr'), ('int', 'port_weight_arr_step'), ('int', 'port_weight_port_step'), ('float *', 'port_input_arr'), ('int', 'port_input_arr_step'), ('int', 'port_input_port_step')]"
3764,38,sync_conv_groups,runs,[]
3767,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3767,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3773,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
3773,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
3773,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
3773,8,null_kernel,runs,[]
3773,9,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
3783,26,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
3783,29,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
3783,30,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
3783,31,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
3784,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
3784,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
3784,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
3784,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
3784,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
3794,0,kernel,runs,[]
3794,1,kernel,runs,[]
3794,2,kernel,runs,[]
3794,3,kernel,runs,[]
3798,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
3798,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
3798,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
3798,8,null_kernel,runs,[]
3798,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
380,0,FillOnes,runs,"[('float *', 'vec'), ('int', 'value')]"
380,1,dropout_train,runs,"[('float *', 'data'), ('float *', 'outputPtr'), ('int', 'size'), ('float', 'probability')]"
380,2,dropout_test,runs,"[('float *', 'data'), ('int', 'size'), ('float', 'probability')]"
380,3,LreluForward,runs,"[('float *', 'srcData'), ('float *', 'dstData'), ('int', 'data_size')]"
380,4,LreluBackward,runs,"[('float *', 'srcDiff'), ('float *', 'dstDiff'), ('float *', 'srcData'), ('int', 'data_size')]"
380,5,compute_array_log,runs,"[('float *', 'array'), ('float *', 'groundTruth'), ('int', 'size')]"
380,6,SoftmaxLossBackprop,runs,"[('const int *', 'label'), ('int', 'num_labels'), ('int', 'batch_size'), ('float *', 'diffData')]"
380,9,MultiChannelsSplit,runs,"[('float *', 'inputs'), ('float *', 'outputs'), ('int', 'outChannels'), ('int', 'offset'), ('int', 'row'), ('int', 'inChannels')]"
380,11,compute_array_square,runs,"[('float *', 'array'), ('float *', 'outArray'), ('int', 'size')]"
3801,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
3801,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
3801,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
3801,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
3801,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
3801,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
3801,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
3801,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
3801,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
3801,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
3801,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
3801,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
3801,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
3801,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
3801,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
3801,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
3801,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
3806,1,TestDimensions,runs,[]
3807,0,histogramSimple,runs,"[('int *', 'd_out'), ('const int *', 'd_in'), ('const int', 'BINS_COUNT')]"
3807,1,montecarlo,runs,"[('float *', 'd_out'), ('float', '__lowx'), ('float', '__highx'), ('float', '__lowy'), ('float', '__highy'), ('int', '__iters')]"
3807,2,reduce,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
3807,4,histogramSimple,runs,"[('int *', 'd_out'), ('const int *', 'd_in'), ('const int', 'BINS_COUNT')]"
3807,5,montecarlo,runs,"[('float *', 'd_out'), ('float', '__lowx'), ('float', '__highx'), ('float', '__lowy'), ('float', '__highy'), ('int', '__iters')]"
3807,6,reduce,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
3807,7,prescan,runs,"[('float *', 'd_in'), ('int', 'nGlobe'), ('int', 'step'), ('int', 'upSweep')]"
3807,8,Laplace,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
3807,9,BlurViaStencil,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
3809,21,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
3809,22,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo')]"
381,0,convKernel,runs,"[('const float *', 'source'), ('const float *', 'kernel'), ('float *', 'target'), ('const int', 'len')]"
381,1,forwardDifferenceKernel,runs,"[('const int', 'len'), ('const float *', 'source'), ('float *', 'target')]"
381,2,forwardDifferenceAdjointKernel,runs,"[('const int', 'len'), ('const float *', 'source'), ('float *', 'target')]"
381,3,forwardDifference2DKernel,runs,"[('const int', 'cols'), ('const int', 'rows'), ('const float *', 'data'), ('float *', 'dx'), ('float *', 'dy')]"
381,4,forwardDifference2DAdjointKernel,runs,"[('const int', 'cols'), ('const int', 'rows'), ('const float *', 'dx'), ('const float *', 'dy'), ('float *', 'target')]"
3813,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
3813,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
3813,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
3813,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
3813,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
3814,21,sync_deconv_groups,runs,[]
3814,37,sync_conv_groups,runs,[]
3818,0,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
3818,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
3818,2,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
3818,3,Caps,runs,"[('char *', 'c'), ('int *', 'b')]"
3818,4,W4W,runs,"[('int *', 'w'), ('int *', 'out')]"
3818,5,Turtle,runs,"[('int *', 'v1'), ('int *', 'v2'), ('int *', 'lead')]"
3818,6,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
3818,7,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
3818,8,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
3818,10,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
3818,11,ThirdAngle,runs,"[('int *', 'a1'), ('int *', 'a2'), ('int *', 'a3')]"
3820,0,testMemset,runs,"[('float *', 'array'), ('float', 'value'), ('int', 'N')]"
3825,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
3829,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
3829,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
3837,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
3837,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
3837,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
3837,8,null_kernel,runs,[]
3837,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
3842,5,set_valid_pos_flag,runs,"[('int32_t *', 'pos_buff'), ('const int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
3842,6,set_valid_pos,runs,"[('int32_t *', 'pos_buff'), ('int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
3842,9,init_render_buffer_wrapper,runs,"[('int64_t *', 'render_buffer'), ('const uint32_t', 'qw_count')]"
3842,12,init_group,runs,"[('int8_t *', 'groups'), ('const size_t', 'group_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t *', 'init_vals')]"
3842,14,columnarize_groups,runs,"[('int8_t *', 'columnar_buffer'), ('const int8_t *', 'rowwise_buffer'), ('const size_t', 'row_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t', 'row_size')]"
3854,4,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
3854,5,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
3876,0,cpy,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
3876,6,reduce,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n')]"
3876,10,cpy,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n')]"
3879,5,kernelPowerTwo,runs,"[('const float *', 'a'), ('const float *', 'b'), ('const unsigned int', 'length'), ('float *', 'a2'), ('float *', 'b2')]"
3879,14,add,runs,"[('const float3 __restrict__ *', 'dFinalForce'), ('const unsigned int', 'noRainDrops'), ('float3 __restrict__ *', 'dRainDrops')]"
3879,15,kernel,runs,"[('const uint __restrict__ *', 'a'), ('const uint __restrict__ *', 'b'), ('const uint', 'length'), ('uint *', 'c')]"
3879,16,kernel_init_column_matrix,runs,"[('int *', 'matrix'), ('size_t', 'pitch')]"
3879,17,kernel_incerement,runs,"[('int *', 'matrix'), ('size_t', 'pitch')]"
3879,21,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
3879,22,device_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
388,22,knn_assign_gmem_deinterleave1,runs,"[('uint32_t', 'length'), ('uint16_t', 'k'), ('uint32_t *', 'neighbors')]"
388,23,knn_assign_gmem_deinterleave2,runs,"[('uint32_t', 'length'), ('uint16_t', 'k'), ('uint32_t *', 'neighbors')]"
3884,0,MatrixMulKernel,runs,"[('float *', 'd_M'), ('float *', 'd_N'), ('float *', 'd_P'), ('int', 'Width')]"
3891,0,VecAdd,runs,"[('int', 'n'), ('const float *', 'A'), ('const float *', 'B'), ('float *', 'C')]"
3901,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3901,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3906,46,sync_conv_groups,runs,[]
3908,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3908,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3909,0,vc,runs,"[('float *', 'dA'), ('float *', 'dB'), ('int', 'N')]"
3909,1,vc,runs,"[('float *', 'dA'), ('float *', 'dB'), ('int', 'N')]"
3909,2,vc,runs,"[('float *', 'dA'), ('float *', 'dB'), ('int', 'N')]"
3909,5,mm,runs,"[('float *', 'dA'), ('float *', 'dB'), ('float *', 'dC'), ('int', 'DIM'), ('int', 'N'), ('int', 'GPUN')]"
3909,6,mm_tiled,runs,"[('float *', 'dA'), ('float *', 'dB'), ('float *', 'dC'), ('int', 'DIM'), ('int', 'N'), ('int', 'GPUN')]"
3909,7,mm,runs,"[('float *', 'dA'), ('float *', 'dB'), ('float *', 'dC'), ('int', 'DIM'), ('int', 'N'), ('int', 'GPUN')]"
3909,8,stream,runs,"[('float *', 'dA'), ('float *', 'dB'), ('float *', 'dC'), ('float', 'alpha'), ('int', 'N')]"
3909,9,stream,runs,"[('float *', 'dA'), ('float *', 'dB'), ('float *', 'dC'), ('float', 'alpha'), ('int', 'N')]"
3909,11,kernel1,runs,"[('float *', 'dW'), ('float *', 'dWcurr'), ('int', 'N')]"
3909,13,bs,runs,"[('float *', 'drand'), ('float *', 'dput'), ('float *', 'dcall'), ('int', 'n')]"
3909,14,bs,runs,"[('float *', 'drand'), ('float *', 'dput'), ('float *', 'dcall'), ('int', 'n')]"
3916,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
3916,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
3916,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
3916,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
3916,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
3916,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
3916,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
3916,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
3916,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
3916,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
3916,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
3916,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
3916,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
3916,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
3916,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
3916,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
3916,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
3916,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
3916,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
3916,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
3916,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
3916,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
3916,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
3916,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
3916,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
3916,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
3916,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3916,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3916,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3916,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3916,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3916,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
3916,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
3916,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
3916,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
3916,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
3916,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
3916,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
3916,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
3916,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
3916,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
3916,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3916,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3916,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3916,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3916,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3916,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
3916,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
3916,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
3916,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
3916,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
3916,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
3916,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
3916,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
3916,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
3916,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
3916,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
3916,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
3916,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
3916,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
3916,65,make_pillar_histo_kernel,runs,"[('const float *', 'dev_points'), ('float *', 'dev_pillar_x_in_coors'), ('float *', 'dev_pillar_y_in_coors'), ('float *', 'dev_pillar_z_in_coors'), ('float *', 'dev_pillar_i_in_coors'), ('int *', 'pillar_count_histo'), ('const int', 'num_points'), ('const int', 'max_points_per_pillar'), ('const int', 'GRID_X_SIZE'), ('const int', 'GRID_Y_SIZE'), ('const int', 'GRID_Z_SIZE'), ('const float', 'MIN_X_RANGE'), ('const float', 'MIN_Y_RANGE'), ('const float', 'MIN_Z_RANGE'), ('const float', 'PILLAR_X_SIZE'), ('const float', 'PILLAR_Y_SIZE'), ('const float', 'PILLAR_Z_SIZE'), ('const int', 'NUM_BOX_CORNERS')]"
3916,66,make_pillar_index_kernel,runs,"[('int *', 'dev_pillar_count_histo'), ('int *', 'dev_counter'), ('int *', 'dev_pillar_count'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('int *', 'dev_sparse_pillar_map'), ('const int', 'max_pillars'), ('const int', 'max_points_per_pillar'), ('const int', 'GRID_X_SIZE'), ('const float', 'PILLAR_X_SIZE'), ('const float', 'PILLAR_Y_SIZE'), ('const int', 'NUM_INDS_FOR_SCAN')]"
3916,67,make_pillar_feature_kernel,runs,"[('float *', 'dev_pillar_x_in_coors'), ('float *', 'dev_pillar_y_in_coors'), ('float *', 'dev_pillar_z_in_coors'), ('float *', 'dev_pillar_i_in_coors'), ('float *', 'dev_pillar_x'), ('float *', 'dev_pillar_y'), ('float *', 'dev_pillar_z'), ('float *', 'dev_pillar_i'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_num_points_per_pillar'), ('const int', 'max_points'), ('const int', 'GRID_X_SIZE')]"
3916,68,make_extra_network_input_kernel,runs,"[('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('float *', 'dev_x_coors_for_sub_shaped'), ('float *', 'dev_y_coors_for_sub_shaped'), ('float *', 'dev_pillar_feature_mask'), ('const int', 'MAX_NUM_POINTS_PER_PILLAR')]"
3916,69,filter_kernel,runs,"[('const float *', 'box_preds'), ('const float *', 'cls_preds'), ('const float *', 'dir_preds'), ('const int *', 'anchor_mask'), ('const float *', 'dev_anchors_px'), ('const float *', 'dev_anchors_py'), ('const float *', 'dev_anchors_pz'), ('const float *', 'dev_anchors_dx'), ('const float *', 'dev_anchors_dy'), ('const float *', 'dev_anchors_dz'), ('const float *', 'dev_anchors_ro'), ('float *', 'filtered_box'), ('float *', 'filtered_score'), ('int *', 'filtered_dir'), ('float *', 'box_for_nms'), ('int *', 'filter_count'), ('const float', 'FLOAT_MIN'), ('const float', 'FLOAT_MAX'), ('const float', 'score_threshold'), ('const int', 'NUM_BOX_CORNERS'), ('const int', 'NUM_OUTPUT_BOX_FEATURE')]"
3916,70,sort_boxes_by_indexes_kernel,runs,"[('float *', 'filtered_box'), ('int *', 'filtered_dir'), ('float *', 'box_for_nms'), ('int *', 'indexes'), ('int', 'filter_count'), ('float *', 'sorted_filtered_boxes'), ('int *', 'sorted_filtered_dir'), ('float *', 'sorted_box_for_nms'), ('const int', 'NUM_BOX_CORNERS'), ('const int', 'NUM_OUTPUT_BOX_FEATURE')]"
3916,71,nms_kernel,runs,"[('const int', 'n_boxes'), ('const float', 'nms_overlap_thresh'), ('const float *', 'dev_boxes'), ('unsigned long long *', 'dev_mask'), ('const int', 'NUM_BOX_CORNERS')]"
3916,72,scan_x,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
3916,73,scan_y,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
3916,75,scatter_kernel,runs,"[('int *', 'x_coors'), ('int *', 'y_coors'), ('float *', 'pfe_output'), ('float *', 'scattered_feature'), ('const int', 'MAX_NUM_PILLARS_'), ('const int', 'GRID_X_SIZE'), ('const int', 'GRID_Y_SIZE')]"
3916,78,computePointGradients1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dj_ang'), ('double *', 'pg24'), ('double *', 'pg05'), ('double *', 'pg15'), ('double *', 'pg25')]"
3916,79,computePointHessian0,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph93'), ('double *', 'ph103'), ('double *', 'ph113'), ('double *', 'ph123'), ('double *', 'ph94'), ('double *', 'ph133'), ('double *', 'ph104'), ('double *', 'ph143'), ('double *', 'ph114'), ('double *', 'ph153'), ('double *', 'ph95'), ('double *', 'ph163'), ('double *', 'ph105'), ('double *', 'ph173'), ('double *', 'ph115')]"
3916,80,computePointHessian1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph124'), ('double *', 'ph134'), ('double *', 'ph144'), ('double *', 'ph154'), ('double *', 'ph125'), ('double *', 'ph164'), ('double *', 'ph135'), ('double *', 'ph174'), ('double *', 'ph145')]"
3916,81,computePointHessian2,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph155'), ('double *', 'ph165'), ('double *', 'ph175')]"
3916,82,computeScoreList,runs,"[('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'e_x_cov_x'), ('double', 'gauss_d1'), ('double *', 'score')]"
3916,83,computeScoreGradientList,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('int', 'voxel_num'), ('double *', 'e_x_cov_x'), ('double *', 'cov_dxd_pi'), ('double', 'gauss_d1'), ('int', 'valid_voxel_num'), ('double *', 'score_gradients')]"
3916,84,computeExCovX,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centr_x'), ('double *', 'centr_y'), ('double *', 'centr_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22')]"
3916,85,updateExCovX,runs,"[('double *', 'e_x_cov_x'), ('double', 'gauss_d2'), ('int', 'valid_voxel_num')]"
3916,86,computeCovDxdPi,runs,"[('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'inverse_covariance'), ('int', 'voxel_num'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'point_gradients'), ('double *', 'cov_dxd_pi'), ('int', 'valid_voxel_num')]"
3916,87,computeHessianListS0,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_gradients'), ('double *', 'tmp_hessian'), ('int', 'valid_voxel_num')]"
3916,88,computeHessianListS1,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'hessians'), ('double *', 'e_x_cov_x'), ('double *', 'tmp_hessian'), ('double *', 'cov_dxd_pi'), ('double *', 'point_gradients'), ('int', 'valid_voxel_num')]"
3916,89,computeHessianListS2,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_hessians'), ('double *', 'hessians'), ('int', 'valid_voxel_num')]"
3916,91,sumScore,runs,"[('double *', 'score'), ('int', 'full_size'), ('int', 'half_size')]"
392,2,map_index_to_prefix,runs,"[('uint8_t *', 'hashes'), ('uint32_t *', 'sort_indices'), ('uint32_t *', 'comb_count'), ('uint32_t *', 'comb_sum'), ('uint32_t *', 'comb_prefix'), ('uint32_t', 'r'), ('uint32_t', 'size')]"
392,5,remap_reduction,runs,"[('uint32_t *', 'd_reduction'), ('uint32_t *', 'd_mapping'), ('uint32_t *', 'old_d_ij_buf'), ('uint32_t', 'sum_prev_size'), ('uint32_t', 'prev_size'), ('uint32_t *', 'new_d_ij_buf'), ('uint32_t', 'new_size')]"
392,8,expand_array,runs,"[('unsigned char *', 'd_in'), ('unsigned char *', 'd_out')]"
392,9,get_sort_keys,runs,"[('unsigned char *', 'd_hashes'), ('uint32_t *', 'd_sort_keys'), ('uint32_t *', 'd_sort_indices'), ('uint32_t', 'r'), ('uint32_t', 'num_keys')]"
392,10,initialize_to_one,runs,"[('uint32_t *', 'reduction'), ('uint32_t', 'size')]"
392,11,final_mark_starts,runs,"[('uint8_t *', 'hashes'), ('uint32_t *', 'sort_indices'), ('uint32_t *', 'off_map'), ('uint32_t', 'r'), ('uint32_t', 'hash_count')]"
392,14,final_map_index_to_prefix,runs,"[('uint8_t *', 'hashes'), ('uint32_t *', 'sort_indices'), ('uint32_t *', 'off_map'), ('uint32_t *', 'comb_count'), ('uint32_t *', 'comb_sum'), ('uint32_t *', 'comb_prefix'), ('uint32_t', 'r'), ('uint32_t', 'size')]"
3927,21,sync_deconv_groups,runs,[]
3927,37,sync_conv_groups,runs,[]
3929,4,setTensorCheckPatternKernel,runs,"[('unsigned int *', 'data'), ('unsigned int', 'ndata')]"
3932,88,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
3939,0,convolution_kernel,runs,"[('int', 'h'), ('int', 'w'), ('int', 'd'), ('double *', 'gpu_in'), ('int', 'k_h'), ('int', 'k_w'), ('int', 'k_d'), ('double *', 'kernel_weights'), ('double *', 'kernel_biases'), ('int', 'num_kernels'), ('int', 'op_h'), ('int', 'op_w'), ('int', 'op_d'), ('double *', 'gpu_out')]"
3939,2,dense_kernel,runs,"[('int', 'num_input'), ('int', 'num_output'), ('double *', 'gpu_in'), ('double *', 'weights'), ('double *', 'biases'), ('double *', 'gpu_out'), ('int', 'num_classes')]"
3945,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3945,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3969,26,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
3969,29,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
3969,30,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
3969,31,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
397,0,gpu_init,runs,"[('int *', 'mapad'), ('int', 'max'), ('int', 'size')]"
397,2,gpu_reduce,runs,"[('int *', 'c'), ('int', 'size')]"
397,3,gpu_init,runs,"[('int *', 'mapad'), ('int', 'max'), ('int', 'size')]"
397,5,gpu_reduce,runs,"[('int *', 'c'), ('int', 'size')]"
397,6,gpu_init,runs,"[('int *', 'mapad'), ('int', 'max'), ('int', 'size')]"
397,8,gpu_init,runs,"[('int *', 'mapad'), ('int', 'max'), ('int', 'size')]"
397,10,gpu_reduce,runs,"[('int *', 'c'), ('int', 'size')]"
397,11,gpu_reduce,runs,"[('int *', 'c'), ('int', 'size')]"
397,12,gpu_init,runs,"[('int *', 'mapad'), ('int', 'max'), ('int', 'size')]"
397,14,gpu_init,runs,"[('int *', 'mapad'), ('int', 'max'), ('int', 'size')]"
397,16,gpu_reduce,runs,"[('int *', 'c'), ('int', 'size')]"
397,17,gpu_init,runs,"[('int *', 'mapad'), ('int', 'max'), ('int', 'size')]"
397,18,gpu_init,runs,"[('int *', 'mapad'), ('int', 'max'), ('int', 'size')]"
397,20,gpu_reduce,runs,"[('int *', 'c'), ('int', 'size')]"
397,21,gpu_init,runs,"[('int *', 'mapad'), ('int', 'max'), ('int', 'size')]"
3978,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
3978,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
3983,187,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
3983,328,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
3988,0,test,runs,[]
399,0,nmfw,runs,"[('float *', 'a'), ('int', 'r'), ('int', 'c'), ('int', 'k'), ('float *', 'w'), ('float *', 'h'), ('float *', 'wcp')]"
399,1,nmfh,runs,"[('float *', 'a'), ('int', 'r'), ('int', 'c'), ('int', 'k'), ('float *', 'w'), ('float *', 'h'), ('float *', 'hcp')]"
399,2,nmfcpy,runs,"[('float *', 'mat'), ('float *', 'matcp'), ('int', 'm'), ('int', 'n')]"
399,3,nmfw,runs,"[('double *', 'a'), ('int', 'r'), ('int', 'c'), ('int', 'k'), ('double *', 'w'), ('double *', 'h'), ('double *', 'wcp')]"
399,4,nmfh,runs,"[('double *', 'a'), ('int', 'r'), ('int', 'c'), ('int', 'k'), ('double *', 'w'), ('double *', 'h'), ('double *', 'hcp')]"
399,5,nmfcpy,runs,"[('double *', 'mat'), ('double *', 'matcp'), ('int', 'm'), ('int', 'n')]"
399,6,quad,runs,"[('float *', 'a'), ('int', 'n'), ('float *', 'u'), ('float *', 'v')]"
4004,0,kernel,runs,[]
4012,0,convolutionParallel,runs,"[('unsigned char *', 'image'), ('unsigned char *', 'new_image'), ('unsigned', 'height'), ('unsigned', 'width'), ('int', 'thread_count'), ('int', 'convolution_size')]"
4012,2,rectify,runs,"[('unsigned char *', 'image'), ('unsigned', 'height'), ('unsigned', 'width'), ('int', 'thread_count')]"
4012,3,pool,runs,"[('unsigned char *', 'image'), ('unsigned char *', 'new_image'), ('unsigned', 'height'), ('unsigned', 'width'), ('int', 'thread_count')]"
4013,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
4013,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
4016,0,AddVector,runs,"[('int', 'vecSize'), ('const float *', 'vecA'), ('const float *', 'vecB'), ('float *', 'vecC')]"
4017,0,kronecker,runs,"[('double *', 'a'), ('int', 'nax'), ('int', 'nay'), ('double *', 'b'), ('int', 'nbx'), ('int', 'nby'), ('double *', 'result')]"
4017,3,reduceSum,runs,"[('double *', 'd_arr'), ('const size_t', 'sz'), ('double *', 'd_out')]"
4017,5,randomKey,runs,"[('size_t', 'N'), ('float *', 'd_dst'), ('unsigned long', 'seed')]"
4017,6,pick,runs,"[('size_t', 'N'), ('size_t *', 'd_dst'), ('unsigned long', 'seed')]"
4017,7,fillUp,runs,"[('size_t *', 'd_dst'), ('size_t', 'N')]"
4017,14,dummyKernel,runs,[]
4017,16,findID,runs,"[('double *', 'a'), ('int', 'n')]"
402,4,step_1_row_sub,runs,[]
402,5,step_1_col_sub,runs,[]
402,6,compress_matrix,runs,[]
4020,4,computeTemporalSmoothRmatrices,runs,"[('const float *', 'Rmatrices'), ('uint32_t', 'numSamples'), ('uint32_t', 'subArraySize'), ('uint32_t', 'numSubArrays'), ('const uint32_t *', 'subArraySizes'), ('uint32_t', 'temporalSmoothing'), ('float *', 'TempRmatrices')]"
4020,21,computeTemporalSmoothRmatrices,runs,"[('const float *', 'Rmatrices'), ('uint32_t', 'numSamples'), ('uint32_t', 'subArraySize'), ('uint32_t', 'numSubArrays'), ('const uint32_t *', 'subArraySizes'), ('uint32_t', 'temporalSmoothing'), ('float *', 'TempRmatrices')]"
4020,23,fillUnusedDiagonal,runs,"[('float *', 'Rmatrices'), ('uint32_t', 'numSamples'), ('uint32_t', 'subArraySize'), ('const uint32_t *', 'subArraySizes')]"
4024,0,matrixMulOptimized,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
4024,1,matrixMul,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
4036,7,kernel_rand_init,runs,"[('curandState __restrict__ *', 'pState'), ('int', 'seed')]"
4037,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
4037,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
4037,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
4037,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
4037,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
4037,16,scan_kernel,runs,"[('unsigned int *', 'd_bins'), ('int', 'size')]"
4037,19,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
4037,30,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
4037,31,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
4037,32,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
4037,33,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
4037,34,hello,runs,[]
4037,38,hello,runs,[]
4037,50,add,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
4037,52,add,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
4038,21,sync_deconv_groups,runs,[]
4038,37,sync_conv_groups,runs,[]
405,1,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
4057,0,multiply,runs,"[('float *', 'left'), ('float *', 'right'), ('float *', 'res'), ('int', 'dim')]"
4063,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4063,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4064,204,cuda_debug_kernel,runs,[]
4073,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
4073,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
4073,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
4073,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
4073,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
4080,21,sync_deconv_groups,runs,[]
4081,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
4081,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
4081,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
4081,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
4081,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
4085,0,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
4085,1,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
4085,2,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4085,3,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
4085,4,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
4085,5,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
4085,10,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
4085,11,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
4085,12,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
4085,13,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
4085,14,simple_input_shortcut_kernel,runs,"[('float *', 'in'), ('int', 'size'), ('float *', 'add'), ('float *', 'out')]"
4085,15,input_shortcut_kernel,runs,"[('float *', 'in'), ('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
4085,17,cuda_f32_to_int8_nomax,runs,"[('float *', 'input_f32'), ('size_t', 'size'), ('int8_t *', 'output_int8'), ('float', 'multipler')]"
4085,18,cuda_int8_to_f32,runs,"[('int8_t *', 'input_int8'), ('size_t', 'size'), ('float *', 'output_f32'), ('float', 'multipler')]"
4085,19,cuda_multiply_f32,runs,"[('float *', 'input_output'), ('size_t', 'size'), ('float', 'multipler')]"
4085,20,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
4085,21,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
4085,30,transpose_uint32_kernel,runs,"[('uint32_t *', 'src'), ('uint32_t *', 'dst'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'src_align'), ('int', 'dst_align')]"
4085,32,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
4091,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
4095,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4095,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4112,0,render_init,runs,"[('int', 'max_x'), ('int', 'max_y'), ('curandState *', 'rand_state')]"
4127,0,jacobiOnDevice,runs,"[('float *', 'x_next'), ('float *', 'A'), ('float *', 'x_now'), ('float *', 'b'), ('int', 'Ni'), ('int', 'Nj')]"
4127,1,jacobiOptimizedOnDevice,runs,"[('float *', 'x_next'), ('float *', 'A'), ('float *', 'x_now'), ('float *', 'b'), ('int', 'Ni'), ('int', 'Nj')]"
4128,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
4128,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
4128,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
4128,3,set_zero_kernel,runs,"[('float *', 'src'), ('int', 'size')]"
4128,5,binarize_weights_mean_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary'), ('float *', 'mean_arr_gpu')]"
4128,8,calc_avg_activation_kernel,runs,"[('float *', 'src'), ('float *', 'dst'), ('int', 'size'), ('int', 'channels'), ('int', 'batches')]"
4128,9,assisted_activation_kernel,runs,"[('float', 'alpha'), ('float *', 'output'), ('float *', 'gt_gpu'), ('float *', 'a_avg_gpu'), ('int', 'size'), ('int', 'channels'), ('int', 'batches')]"
4128,10,assisted_activation2_kernel,runs,"[('float', 'alpha'), ('float *', 'output'), ('float *', 'gt_gpu'), ('float *', 'a_avg_gpu'), ('int', 'size'), ('int', 'channels'), ('int', 'batches')]"
4128,11,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
4128,12,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
4128,13,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
4128,15,im2col_align_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col'), ('const int', 'bit_align')]"
4128,22,transpose_uint32_kernel,runs,"[('uint32_t *', 'src'), ('uint32_t *', 'dst'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'src_align'), ('int', 'dst_align')]"
4128,23,transpose_uint32_kernel_2,runs,"[('uint32_t *', 'src'), ('uint32_t *', 'dst'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'src_align'), ('int', 'dst_align')]"
4128,24,repack_input_kernel,runs,"[('float *', 'input'), ('float *', 're_packed_input'), ('int', 'w'), ('int', 'h'), ('int', 'c')]"
4128,25,repack_input_kernel_2,runs,"[('float *', 'input'), ('float *', 're_packed_input'), ('int', 'w'), ('int', 'h'), ('int', 'c')]"
4128,35,convolve_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad')]"
4128,36,convolve_bin_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad'), ('int', 'new_lda'), ('float *', 'mean_arr_gpu')]"
4128,37,convolve_bin_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad'), ('int', 'new_lda'), ('float *', 'mean_arr_gpu')]"
414,1,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
4149,0,gpu_seqwr_kernel,runs,"[('int *', 'buffer'), ('size_t', 'reps'), ('size_t', 'elements')]"
4149,1,gpu_seqrd_kernel,runs,"[('int *', 'buffer'), ('size_t', 'reps'), ('size_t', 'elements')]"
4149,2,gpu_rndwr_kernel,runs,"[('int *', 'buffer'), ('size_t', 'reps'), ('size_t', 'steps'), ('size_t', 'elements')]"
4149,3,gpu_rndrd_kernel,runs,"[('int *', 'buffer'), ('size_t', 'reps'), ('size_t', 'steps'), ('size_t', 'elements')]"
4149,4,gpu_latency_setup_kernel,runs,"[('int *', 'buffer'), ('size_t', 'delta'), ('size_t', 'elements')]"
4149,5,gpu_latency_kernel,runs,"[('int *', 'buffer'), ('size_t', 'reps'), ('size_t', 'steps'), ('size_t', 'elements')]"
415,0,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
415,1,reduceUnrolling,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n'), ('unsigned int', 'q')]"
415,2,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
415,3,reduceUnrolling,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
415,4,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
415,5,reduceUnrolling,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n'), ('unsigned int', 'q')]"
415,6,reduceUnrolling,runs,"[('double *', 'g_idata'), ('double *', 'g_odata'), ('unsigned int', 'n'), ('unsigned int', 'q')]"
4150,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4150,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4152,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4152,227,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
4152,228,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
4152,229,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
4152,234,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
4152,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
4152,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4153,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
4153,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
4153,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
4153,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
4153,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
4153,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
4154,0,mapToGLKernel,runs,"[('uint8_t *', 'dSrc'), ('uint8_t *', 'dDst'), ('int', 'nWidth'), ('int', 'nHeight')]"
4154,1,convertToP208Kernel,runs,"[('uint16_t *', 'pV210'), ('uint16_t *', 'dP208'), ('int', 'nPitch'), ('int', 'nWidth'), ('int', 'nHeight')]"
4154,2,resizeBatchKernel,runs,"[('const uint8_t *', 'p_Src'), ('int', 'nSrcPitch'), ('int', 'nSrcHeight'), ('uint8_t *', 'p_dst'), ('int', 'nDstWidth'), ('int', 'nDstHeight')]"
4154,3,resizeBatchKernel,runs,"[('const uint16_t *', 'p_Src'), ('int', 'nSrcPitch'), ('int', 'nSrcHeight'), ('uint16_t *', 'p_dst'), ('int', 'nDstWidth'), ('int', 'nDstHeight')]"
4154,4,resizeBatchKernel,runs,"[('const uint16_t *', 'p_Src'), ('int', 'nSrcPitch'), ('int', 'nSrcHeight'), ('uint8_t *', 'dpDst'), ('int', 'nDstWidth'), ('int', 'nDstHeight'), ('int *', 'lookupTable_cuda')]"
4154,5,resizeBatchKernel,runs,"[('const uint16_t *', 'p_Src'), ('int', 'nSrcPitch'), ('int', 'nSrcHeight'), ('uint8_t *', 'dpDst0'), ('uint8_t *', 'dpDst1'), ('uint8_t *', 'dpDst2'), ('int', 'nDstWidth'), ('int', 'nDstHeight'), ('int *', 'lookupTable_cuda')]"
4154,6,convertToRGBKernel,runs,"[('const uint16_t *', 'pV210'), ('uint16_t *', 'tt'), ('int', 'nSrcWidth'), ('int', 'nDstWidth'), ('int', 'nDstHeight')]"
4154,8,convertVToRGBKernel,runs,"[('const uint16_t *', 'pV210'), ('uint8_t *', 'tt1'), ('int', 'nSrcWidth'), ('int', 'nDstWidth'), ('int', 'nDstHeight'), ('int *', 'lookupTable')]"
4154,9,convertPToRGBKernel,runs,"[('const uint16_t *', 'dpSrc'), ('uint8_t *', 'tt1'), ('int', 'nSrcWidth'), ('int', 'nDstWidth'), ('int', 'nDstHeight'), ('int *', 'lookupTable')]"
4154,10,convertToNppiKernel,runs,"[('uint16_t *', 'dSrc'), ('uint8_t *', 'dDst'), ('int', 'nSrcWidth'), ('int', 'nDstWidth'), ('int', 'nDstHeight'), ('int *', 'lookupTable')]"
4156,11,copy_mem,runs,"[('unsigned char *', 'source'), ('unsigned char *', 'render')]"
4156,13,char_to_int,runs,"[('int *', 'img2'), ('unsigned char *', 'img')]"
4156,14,int_to_char,runs,"[('int *', 'img2'), ('unsigned char *', 'img')]"
4156,16,selection_sum_weights,runs,"[('float *', 'selection_sum'), ('float *', 'selection'), ('int', 'n'), ('int', 'stride')]"
4156,17,merge,runs,"[('unsigned char *', 'img_all'), ('unsigned char *', 'img'), ('float *', 'selection'), ('int', 'n'), ('int', 'stride')]"
4156,18,merge_sum,runs,"[('unsigned char *', 'img_all'), ('unsigned char *', 'img'), ('float *', 'selection'), ('float *', 'selection_sum'), ('int', 'n'), ('int', 'stride')]"
4156,19,to3d_point,runs,"[('float *', 'depth'), ('float *', 'points3d')]"
4156,20,transform,runs,"[('float *', 'points3d_after'), ('float *', 'points3d'), ('float *', 'transformation_matrix')]"
4156,21,transform2d,runs,"[('float *', 'points3d_after'), ('float', 'fov_scale')]"
4156,22,render_depth,runs,"[('float *', 'points3d_polar'), ('unsigned int *', 'depth_render')]"
4156,23,get_average,runs,"[('unsigned char *', 'img'), ('int *', 'nz'), ('int *', 'average'), ('int', 'scale')]"
4156,24,fill_with_average,runs,"[('unsigned char *', 'img'), ('int *', 'nz'), ('int *', 'average'), ('int', 'scale')]"
4156,25,render_final,runs,"[('float *', 'points3d_polar'), ('float *', 'selection'), ('float *', 'depth_render'), ('int *', 'img'), ('int *', 'render'), ('int', 'oh'), ('int', 'ow')]"
4173,2,kernel_looping,runs,"[('float *', 'point'), ('unsigned int', 'num')]"
4173,5,init,runs,"[('uint32_t *', 'v'), ('uint32_t', 'val'), ('uint32_t', 'n')]"
4173,21,analyze,runs,"[('const float *', 'input'), ('float *', 'sum'), ('int', 'numElements')]"
4173,22,sum,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
4178,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
4178,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
4184,0,generateImg,runs,"[('unsigned char *', 'data'), ('unsigned char *', 'img'), ('unsigned char *', 'tabDepth'), ('int4 *', '_tabParents'), ('int', 'i'), ('int', 'tailleTab')]"
4188,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
4188,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
4188,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
4188,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
4188,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
4197,28,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
4197,31,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
4197,43,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
4197,44,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
4197,55,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
4199,0,simple_addition,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'len')]"
4199,1,good_addition,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'len')]"
4199,2,matrix_matrix_mul_old,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n_row'), ('int', 'n_col'), ('int', 'n_comm')]"
4199,3,matrix_matrix_new,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n_row'), ('int', 'n_col'), ('int', 'n_comm')]"
42,2,FlushKernel,runs,[]
42,6,splitNodes,runs,"[('int *', 'octree'), ('int *', 'numNodes'), ('int', 'poolSize'), ('int', 'startNode')]"
42,11,extractValues,runs,"[('void *', 'fb'), ('int *', 'voxels'), ('int', 'num_voxels'), ('int *', 'values')]"
4200,0,addAry,runs,"[('int *', 'ary1'), ('int *', 'ary2')]"
4201,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
4201,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
4201,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
4201,8,null_kernel,runs,[]
4201,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
4211,0,geo_invert,runs,"[('double2 *', 'd_dot1'), ('double2 *', 'd_dot2'), ('double *', 'd_dist'), ('double *', 'd_azimut'), ('long', 'count')]"
4211,2,d_cudainit,runs,"[('int *', 'a'), ('int *', 'b')]"
4212,16,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
4212,19,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
4212,21,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
4212,23,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
4212,25,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
4212,27,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
4212,28,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
4212,30,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
4212,33,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
4212,36,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
4213,42,compute_absv,runs,"[('const unsigned int', 'nSpheres'), ('const float *', 'velX'), ('const float *', 'velY'), ('const float *', 'velZ'), ('float *', 'd_absv')]"
4223,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
4223,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
4223,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
4223,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
4223,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
4223,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
4223,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
4223,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
4223,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
4223,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
4223,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
4223,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
4223,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
4223,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
4223,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
4223,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
4223,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
4223,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
4223,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
4223,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
4223,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
4223,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
4223,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
4223,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
4223,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
4223,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
4223,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4223,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4223,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4223,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4223,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4223,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4223,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
4223,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
4223,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
4223,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
4223,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
4223,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
4223,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
4223,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
4223,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
4223,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4223,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4223,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4223,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4223,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4223,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4223,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
4223,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
4223,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
4223,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
4223,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
4223,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
4223,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
4223,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
4223,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
4223,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
4223,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
4223,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
4223,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
4223,65,make_pillar_histo_kernel,runs,"[('const float *', 'dev_points'), ('float *', 'dev_pillar_x_in_coors'), ('float *', 'dev_pillar_y_in_coors'), ('float *', 'dev_pillar_z_in_coors'), ('float *', 'dev_pillar_i_in_coors'), ('int *', 'pillar_count_histo'), ('const int', 'num_points'), ('const int', 'max_points_per_pillar'), ('const int', 'GRID_X_SIZE'), ('const int', 'GRID_Y_SIZE'), ('const int', 'GRID_Z_SIZE'), ('const float', 'MIN_X_RANGE'), ('const float', 'MIN_Y_RANGE'), ('const float', 'MIN_Z_RANGE'), ('const float', 'PILLAR_X_SIZE'), ('const float', 'PILLAR_Y_SIZE'), ('const float', 'PILLAR_Z_SIZE'), ('const int', 'NUM_BOX_CORNERS')]"
4223,66,make_pillar_index_kernel,runs,"[('int *', 'dev_pillar_count_histo'), ('int *', 'dev_counter'), ('int *', 'dev_pillar_count'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('int *', 'dev_sparse_pillar_map'), ('const int', 'max_pillars'), ('const int', 'max_points_per_pillar'), ('const int', 'GRID_X_SIZE'), ('const float', 'PILLAR_X_SIZE'), ('const float', 'PILLAR_Y_SIZE'), ('const int', 'NUM_INDS_FOR_SCAN')]"
4223,67,make_pillar_feature_kernel,runs,"[('float *', 'dev_pillar_x_in_coors'), ('float *', 'dev_pillar_y_in_coors'), ('float *', 'dev_pillar_z_in_coors'), ('float *', 'dev_pillar_i_in_coors'), ('float *', 'dev_pillar_x'), ('float *', 'dev_pillar_y'), ('float *', 'dev_pillar_z'), ('float *', 'dev_pillar_i'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_num_points_per_pillar'), ('const int', 'max_points'), ('const int', 'GRID_X_SIZE')]"
4223,68,make_extra_network_input_kernel,runs,"[('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('float *', 'dev_x_coors_for_sub_shaped'), ('float *', 'dev_y_coors_for_sub_shaped'), ('float *', 'dev_pillar_feature_mask'), ('const int', 'MAX_NUM_POINTS_PER_PILLAR')]"
4223,69,filter_kernel,runs,"[('const float *', 'box_preds'), ('const float *', 'cls_preds'), ('const float *', 'dir_preds'), ('const int *', 'anchor_mask'), ('const float *', 'dev_anchors_px'), ('const float *', 'dev_anchors_py'), ('const float *', 'dev_anchors_pz'), ('const float *', 'dev_anchors_dx'), ('const float *', 'dev_anchors_dy'), ('const float *', 'dev_anchors_dz'), ('const float *', 'dev_anchors_ro'), ('float *', 'filtered_box'), ('float *', 'filtered_score'), ('int *', 'filtered_dir'), ('float *', 'box_for_nms'), ('int *', 'filter_count'), ('const float', 'FLOAT_MIN'), ('const float', 'FLOAT_MAX'), ('const float', 'score_threshold'), ('const int', 'NUM_BOX_CORNERS'), ('const int', 'NUM_OUTPUT_BOX_FEATURE')]"
4223,70,sort_boxes_by_indexes_kernel,runs,"[('float *', 'filtered_box'), ('int *', 'filtered_dir'), ('float *', 'box_for_nms'), ('int *', 'indexes'), ('int', 'filter_count'), ('float *', 'sorted_filtered_boxes'), ('int *', 'sorted_filtered_dir'), ('float *', 'sorted_box_for_nms'), ('const int', 'NUM_BOX_CORNERS'), ('const int', 'NUM_OUTPUT_BOX_FEATURE')]"
4223,71,nms_kernel,runs,"[('const int', 'n_boxes'), ('const float', 'nms_overlap_thresh'), ('const float *', 'dev_boxes'), ('unsigned long long *', 'dev_mask'), ('const int', 'NUM_BOX_CORNERS')]"
4223,72,scan_x,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
4223,73,scan_y,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
4223,75,scatter_kernel,runs,"[('int *', 'x_coors'), ('int *', 'y_coors'), ('float *', 'pfe_output'), ('float *', 'scattered_feature'), ('const int', 'MAX_NUM_PILLARS_'), ('const int', 'GRID_X_SIZE'), ('const int', 'GRID_Y_SIZE')]"
4223,78,computePointGradients1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dj_ang'), ('double *', 'pg24'), ('double *', 'pg05'), ('double *', 'pg15'), ('double *', 'pg25')]"
4223,79,computePointHessian0,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph93'), ('double *', 'ph103'), ('double *', 'ph113'), ('double *', 'ph123'), ('double *', 'ph94'), ('double *', 'ph133'), ('double *', 'ph104'), ('double *', 'ph143'), ('double *', 'ph114'), ('double *', 'ph153'), ('double *', 'ph95'), ('double *', 'ph163'), ('double *', 'ph105'), ('double *', 'ph173'), ('double *', 'ph115')]"
4223,80,computePointHessian1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph124'), ('double *', 'ph134'), ('double *', 'ph144'), ('double *', 'ph154'), ('double *', 'ph125'), ('double *', 'ph164'), ('double *', 'ph135'), ('double *', 'ph174'), ('double *', 'ph145')]"
4223,81,computePointHessian2,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph155'), ('double *', 'ph165'), ('double *', 'ph175')]"
4223,82,computeScoreList,runs,"[('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'e_x_cov_x'), ('double', 'gauss_d1'), ('double *', 'score')]"
4223,83,computeScoreGradientList,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('int', 'voxel_num'), ('double *', 'e_x_cov_x'), ('double *', 'cov_dxd_pi'), ('double', 'gauss_d1'), ('int', 'valid_voxel_num'), ('double *', 'score_gradients')]"
4223,84,computeExCovX,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centr_x'), ('double *', 'centr_y'), ('double *', 'centr_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22')]"
4223,85,updateExCovX,runs,"[('double *', 'e_x_cov_x'), ('double', 'gauss_d2'), ('int', 'valid_voxel_num')]"
4223,86,computeCovDxdPi,runs,"[('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'inverse_covariance'), ('int', 'voxel_num'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'point_gradients'), ('double *', 'cov_dxd_pi'), ('int', 'valid_voxel_num')]"
4223,87,computeHessianListS0,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_gradients'), ('double *', 'tmp_hessian'), ('int', 'valid_voxel_num')]"
4223,88,computeHessianListS1,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'hessians'), ('double *', 'e_x_cov_x'), ('double *', 'tmp_hessian'), ('double *', 'cov_dxd_pi'), ('double *', 'point_gradients'), ('int', 'valid_voxel_num')]"
4223,89,computeHessianListS2,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_hessians'), ('double *', 'hessians'), ('int', 'valid_voxel_num')]"
4223,91,sumScore,runs,"[('double *', 'score'), ('int', 'full_size'), ('int', 'half_size')]"
4224,90,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
4224,103,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
4224,104,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
4224,105,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
4224,106,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
4229,28,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
4229,31,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
4229,43,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
4229,44,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
4229,55,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
423,3,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const long', 'size'), ('const float', 'maxnorm')]"
423,5,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
4231,33,sync_conv_groups,runs,[]
4234,1,kernel_128_winograd_AtIA,runs,"[('float *', 'pInputs'), ('float *', 'pBiases'), ('float *', 'pScales'), ('float *', 'pOutputs')]"
4234,4,kernel_256_winograd_AtIA,runs,"[('float *', 'pInputs'), ('float *', 'pBiases'), ('float *', 'pScales'), ('float *', 'pOutputs')]"
4234,5,kernel_256_OuterProduct_256,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
4234,6,kernel_512_one_128,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'bnBias'), ('float *', 'bnScale'), ('float *', 'C')]"
4234,7,kernel_128_one_512,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'bnBias'), ('float *', 'bnScale'), ('float *', 'C')]"
4234,8,kernel_1024_one_256,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'bnBias'), ('float *', 'bnScale'), ('float *', 'C')]"
4234,9,kernel_256_one_1024,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'bnBias'), ('float *', 'bnScale'), ('float *', 'C')]"
424,16,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
424,27,getIntYArray_kernel,runs,"[('int2 *', 'd_input'), ('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_output')]"
424,32,copyChunks_kernel,runs,"[('void *', 'd_source'), ('int', 'startPos'), ('int2 *', 'd_Rin'), ('int', 'rLen'), ('int *', 'd_sum'), ('void *', 'd_dest')]"
424,34,setBoundaryInt2_kernel,runs,"[('int *', 'd_boundary'), ('int', 'startPos'), ('int', 'numKey'), ('int', 'rLen'), ('int2 *', 'd_boundaryRange')]"
424,35,writeBoundary_kernel,runs,"[('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_startArray'), ('int *', 'd_startSumArray'), ('int *', 'd_bounary')]"
424,37,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
424,48,getIntYArray_kernel,runs,"[('int2 *', 'd_input'), ('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_output')]"
424,53,copyChunks_kernel,runs,"[('void *', 'd_source'), ('int', 'startPos'), ('int2 *', 'd_Rin'), ('int', 'rLen'), ('int *', 'd_sum'), ('void *', 'd_dest')]"
424,55,setBoundaryInt2_kernel,runs,"[('int *', 'd_boundary'), ('int', 'startPos'), ('int', 'numKey'), ('int', 'rLen'), ('int2 *', 'd_boundaryRange')]"
424,56,writeBoundary_kernel,runs,"[('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_startArray'), ('int *', 'd_startSumArray'), ('int *', 'd_bounary')]"
424,58,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
424,69,getIntYArray_kernel,runs,"[('int2 *', 'd_input'), ('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_output')]"
424,74,copyChunks_kernel,runs,"[('void *', 'd_source'), ('int', 'startPos'), ('int2 *', 'd_Rin'), ('int', 'rLen'), ('int *', 'd_sum'), ('void *', 'd_dest')]"
424,76,setBoundaryInt2_kernel,runs,"[('int *', 'd_boundary'), ('int', 'startPos'), ('int', 'numKey'), ('int', 'rLen'), ('int2 *', 'd_boundaryRange')]"
424,77,writeBoundary_kernel,runs,"[('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_startArray'), ('int *', 'd_startSumArray'), ('int *', 'd_bounary')]"
424,79,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
424,90,getIntYArray_kernel,runs,"[('int2 *', 'd_input'), ('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_output')]"
424,95,copyChunks_kernel,runs,"[('void *', 'd_source'), ('int', 'startPos'), ('int2 *', 'd_Rin'), ('int', 'rLen'), ('int *', 'd_sum'), ('void *', 'd_dest')]"
424,97,setBoundaryInt2_kernel,runs,"[('int *', 'd_boundary'), ('int', 'startPos'), ('int', 'numKey'), ('int', 'rLen'), ('int2 *', 'd_boundaryRange')]"
424,98,writeBoundary_kernel,runs,"[('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_startArray'), ('int *', 'd_startSumArray'), ('int *', 'd_bounary')]"
424,100,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
424,111,getIntYArray_kernel,runs,"[('int2 *', 'd_input'), ('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_output')]"
424,116,copyChunks_kernel,runs,"[('void *', 'd_source'), ('int', 'startPos'), ('int2 *', 'd_Rin'), ('int', 'rLen'), ('int *', 'd_sum'), ('void *', 'd_dest')]"
424,118,setBoundaryInt2_kernel,runs,"[('int *', 'd_boundary'), ('int', 'startPos'), ('int', 'numKey'), ('int', 'rLen'), ('int2 *', 'd_boundaryRange')]"
424,119,writeBoundary_kernel,runs,"[('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_startArray'), ('int *', 'd_startSumArray'), ('int *', 'd_bounary')]"
424,121,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
424,132,getIntYArray_kernel,runs,"[('int2 *', 'd_input'), ('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_output')]"
424,137,copyChunks_kernel,runs,"[('void *', 'd_source'), ('int', 'startPos'), ('int2 *', 'd_Rin'), ('int', 'rLen'), ('int *', 'd_sum'), ('void *', 'd_dest')]"
424,139,setBoundaryInt2_kernel,runs,"[('int *', 'd_boundary'), ('int', 'startPos'), ('int', 'numKey'), ('int', 'rLen'), ('int2 *', 'd_boundaryRange')]"
424,140,writeBoundary_kernel,runs,"[('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_startArray'), ('int *', 'd_startSumArray'), ('int *', 'd_bounary')]"
424,142,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
424,153,getIntYArray_kernel,runs,"[('int2 *', 'd_input'), ('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_output')]"
424,158,copyChunks_kernel,runs,"[('void *', 'd_source'), ('int', 'startPos'), ('int2 *', 'd_Rin'), ('int', 'rLen'), ('int *', 'd_sum'), ('void *', 'd_dest')]"
424,160,setBoundaryInt2_kernel,runs,"[('int *', 'd_boundary'), ('int', 'startPos'), ('int', 'numKey'), ('int', 'rLen'), ('int2 *', 'd_boundaryRange')]"
424,161,writeBoundary_kernel,runs,"[('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_startArray'), ('int *', 'd_startSumArray'), ('int *', 'd_bounary')]"
424,163,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
424,174,getIntYArray_kernel,runs,"[('int2 *', 'd_input'), ('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_output')]"
424,179,copyChunks_kernel,runs,"[('void *', 'd_source'), ('int', 'startPos'), ('int2 *', 'd_Rin'), ('int', 'rLen'), ('int *', 'd_sum'), ('void *', 'd_dest')]"
424,181,setBoundaryInt2_kernel,runs,"[('int *', 'd_boundary'), ('int', 'startPos'), ('int', 'numKey'), ('int', 'rLen'), ('int2 *', 'd_boundaryRange')]"
424,182,writeBoundary_kernel,runs,"[('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_startArray'), ('int *', 'd_startSumArray'), ('int *', 'd_bounary')]"
424,184,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
424,195,getIntYArray_kernel,runs,"[('int2 *', 'd_input'), ('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_output')]"
424,200,copyChunks_kernel,runs,"[('void *', 'd_source'), ('int', 'startPos'), ('int2 *', 'd_Rin'), ('int', 'rLen'), ('int *', 'd_sum'), ('void *', 'd_dest')]"
424,202,setBoundaryInt2_kernel,runs,"[('int *', 'd_boundary'), ('int', 'startPos'), ('int', 'numKey'), ('int', 'rLen'), ('int2 *', 'd_boundaryRange')]"
424,203,writeBoundary_kernel,runs,"[('int', 'startPos'), ('int', 'rLen'), ('int *', 'd_startArray'), ('int *', 'd_startSumArray'), ('int *', 'd_bounary')]"
424,205,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
4240,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
4240,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
4240,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
4240,5,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
4240,6,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
4240,7,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
4240,8,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
4240,9,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
4240,10,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
4240,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
4240,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
4240,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
4240,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
4240,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
4240,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
4240,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
4240,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
4240,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
4240,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
4240,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
4240,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
4240,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
4240,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
4240,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
4240,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4240,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4240,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4240,29,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4240,30,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4240,31,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
4240,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
4240,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
4240,34,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
4240,35,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
4240,36,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
4240,37,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
4240,38,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4240,39,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4240,40,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
4240,41,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
4240,42,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
4240,43,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
4240,44,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
4240,45,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
4240,47,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
4240,48,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
4240,49,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
4240,50,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
425,4,initializeRandomGenerator,runs,"[('curandState *', 'state'), ('unsigned long', 'seed'), ('int', 'count')]"
4255,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4255,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4259,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4259,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
426,0,convolution_1D_tiled,runs,"[('float *', 'N'), ('float *', 'M'), ('float *', 'P')]"
4260,0,processData,runs,"[('unsigned char *', 'Da'), ('int *', 'filter')]"
4263,1,vecmul,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'size')]"
4274,0,matting_laplacian_kernel,runs,"[('float *', 'input'), ('float *', 'grad'), ('int', 'h'), ('int', 'w'), ('int *', 'CSR_rowIdx'), ('int *', 'CSR_colIdx'), ('float *', 'CSR_val'), ('int', 'N')]"
4274,1,best_local_affine_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'affine_model'), ('int', 'h'), ('int', 'w'), ('float', 'epsilon'), ('int', 'kernel_radius')]"
4274,2,bilateral_smooth_kernel,runs,"[('float *', 'affine_model'), ('float *', 'filtered_affine_model'), ('float *', 'guide'), ('int', 'h'), ('int', 'w'), ('int', 'kernel_radius'), ('float', 'sigma1'), ('float', 'sigma2')]"
4274,3,reconstruction_best_kernel,runs,"[('float *', 'input'), ('float *', 'filtered_affine_model'), ('float *', 'filtered_best_output'), ('int', 'h'), ('int', 'w')]"
4276,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
4276,1,addLoopGPU,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
43,1,chol_kernel_cudaUFMG_division,runs,"[('float *', 'U'), ('int', 'elem_per_thr')]"
43,2,chol_kernel_cudaUFMG_elimination,runs,"[('float *', 'U'), ('int', 'k')]"
43,3,chol_kernel_cudaUFMG_zero,runs,"[('float *', 'U'), ('int', 'elem_per_thr')]"
43,4,chol_kernel,runs,"[('float *', 'U'), ('int', 'ops_per_thread')]"
43,5,chol_kernel_optimized_div_old,runs,"[('float *', 'U'), ('int', 'k'), ('int', 'stride')]"
43,6,chol_kernel_optimized_div,runs,"[('float *', 'U'), ('int', 'k'), ('int', 'stride')]"
43,7,chol_kernel_optimized,runs,"[('float *', 'U'), ('int', 'k'), ('int', 'stride')]"
43,8,chol_kernel_optimized_no_stride,runs,"[('float *', 'U'), ('int', 'k'), ('int', 'stride')]"
430,0,sayHi,runs,[]
4307,30,updateGradInputVarScaleKernel,runs,"[('float *', 'gradOutputIntData'), ('float *', 'gradInputData'), ('int', 'h'), ('int', 'w'), ('int', 'nWindows'), ('float *', 'xMin'), ('float *', 'xMax'), ('float *', 'yMin'), ('float *', 'yMax')]"
4307,40,dirtyFixWindowsVarScaleKernel,runs,"[('float *', 'xMin'), ('float *', 'xMax'), ('float *', 'yMin'), ('float *', 'yMax'), ('const int', 'size'), ('const float', 'h'), ('const float', 'w'), ('const float', 'minWidth')]"
4307,42,accumulateRowsKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'channels'), ('int', 'h'), ('int', 'w')]"
4307,43,accumulateColsKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'channels'), ('int', 'h'), ('int', 'w')]"
4307,44,accumulateColsInplaceTransposedKernel,runs,"[('float *', 'input'), ('int', 'channels'), ('int', 'h'), ('int', 'w')]"
4307,45,accumulateColsInplaceKernel,runs,"[('float *', 'input'), ('int', 'channels'), ('int', 'h'), ('int', 'w')]"
4307,49,updateGradInputPlanewiseKernel,runs,"[('float *', 'gradOutputIntData'), ('float *', 'gradInputData'), ('int', 'h'), ('int', 'w'), ('int', 'nWindows'), ('float *', 'xMin'), ('float *', 'xMax'), ('float *', 'yMin'), ('float *', 'yMax')]"
4307,51,xMaxDeltaIntegralFracKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMax'), ('const float *', 'yMin'), ('const float *', 'yMax'), ('const float *', 'inData'), ('const int', 'inDataStrideRow')]"
4307,52,xMinDeltaIntegralFracKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'yMin'), ('const float *', 'yMax'), ('const float *', 'inData'), ('const int', 'inDataStrideRow')]"
4307,53,yMaxDeltaIntegralFracKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMax'), ('const float *', 'inData'), ('const int', 'inDataStrideRow')]"
4307,54,yMinDeltaIntegralFracKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMin'), ('const float *', 'inData'), ('const int', 'inDataStrideRow')]"
4307,55,xMaxDeltaIntegralKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMax'), ('const float *', 'yMin'), ('const float *', 'yMax')]"
4307,56,xMinDeltaIntegralKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'yMin'), ('const float *', 'yMax')]"
4307,57,yMaxDeltaIntegralKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMax')]"
4307,58,yMinDeltaIntegralKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMin')]"
4307,65,xMaxDeltaIntegralReplicateFracKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMax'), ('const float *', 'yMin'), ('const float *', 'yMax'), ('const float *', 'inData'), ('const int', 'inDataStrideRow'), ('const int', 'strideH'), ('const int', 'strideW')]"
4307,66,xMinDeltaIntegralReplicateFracKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'yMin'), ('const float *', 'yMax'), ('const float *', 'inData'), ('const int', 'inDataStrideRow'), ('const int', 'strideH'), ('const int', 'strideW')]"
4307,67,yMaxDeltaIntegralReplicateFracKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMax'), ('const float *', 'inData'), ('const int', 'inDataStrideRow'), ('const int', 'strideH'), ('const int', 'strideW')]"
4307,68,yMinDeltaIntegralReplicateFracKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMin'), ('const float *', 'inData'), ('const int', 'inDataStrideRow'), ('const int', 'strideH'), ('const int', 'strideW')]"
4307,69,xMaxDeltaIntegralReplicateKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMax'), ('const float *', 'yMin'), ('const float *', 'yMax'), ('const int', 'strideH'), ('const int', 'strideW')]"
4307,70,xMinDeltaIntegralReplicateKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'yMin'), ('const float *', 'yMax'), ('const int', 'strideH'), ('const int', 'strideW')]"
4307,71,yMaxDeltaIntegralReplicateKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMax'), ('const int', 'strideH'), ('const int', 'strideW')]"
4307,72,yMinDeltaIntegralReplicateKernel,runs,"[('const float *', 'intData'), ('float *', 'tmpArray'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMin'), ('const int', 'strideH'), ('const int', 'strideW')]"
4307,79,xMaxDeltaIntegralFracKernel,runs,"[('const float *', 'intData'), ('const int', 'intDataStrideChannel'), ('float *', 'tmpArray'), ('const int', 'batchSize'), ('const int', 'nInputPlane'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMax'), ('const float *', 'yMin'), ('const float *', 'yMax'), ('const float *', 'inData'), ('const int', 'inDataStrideRow'), ('const int', 'inDataStrideChannel')]"
4307,80,xMinDeltaIntegralFracKernel,runs,"[('const float *', 'intData'), ('const int', 'intDataStrideChannel'), ('float *', 'tmpArray'), ('const int', 'batchSize'), ('const int', 'nInputPlane'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'yMin'), ('const float *', 'yMax'), ('const float *', 'inData'), ('const int', 'inDataStrideRow'), ('const int', 'inDataStrideChannel')]"
4307,81,yMaxDeltaIntegralFracKernel,runs,"[('const float *', 'intData'), ('const int', 'intDataStrideChannel'), ('float *', 'tmpArray'), ('const int', 'batchSize'), ('const int', 'nInputPlane'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMax'), ('const float *', 'inData'), ('const int', 'inDataStrideRow'), ('const int', 'inDataStrideChannel')]"
4307,82,yMinDeltaIntegralFracKernel,runs,"[('const float *', 'intData'), ('const int', 'intDataStrideChannel'), ('float *', 'tmpArray'), ('const int', 'batchSize'), ('const int', 'nInputPlane'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMin'), ('const float *', 'inData'), ('const int', 'inDataStrideRow'), ('const int', 'inDataStrideChannel')]"
4307,83,xMaxDeltaIntegralKernel,runs,"[('const float *', 'intData'), ('const int', 'intDataStrideChannel'), ('float *', 'tmpArray'), ('const int', 'batchSize'), ('const int', 'nInputPlane'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMax'), ('const float *', 'yMin'), ('const float *', 'yMax')]"
4307,84,xMinDeltaIntegralKernel,runs,"[('const float *', 'intData'), ('const int', 'intDataStrideChannel'), ('float *', 'tmpArray'), ('const int', 'batchSize'), ('const int', 'nInputPlane'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'yMin'), ('const float *', 'yMax')]"
4307,85,yMaxDeltaIntegralKernel,runs,"[('const float *', 'intData'), ('const int', 'intDataStrideChannel'), ('float *', 'tmpArray'), ('const int', 'batchSize'), ('const int', 'nInputPlane'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMax')]"
4307,86,yMinDeltaIntegralKernel,runs,"[('const float *', 'intData'), ('const int', 'intDataStrideChannel'), ('float *', 'tmpArray'), ('const int', 'batchSize'), ('const int', 'nInputPlane'), ('const int', 'nWindows'), ('const int', 'h'), ('const int', 'w'), ('const float *', 'xMin'), ('const float *', 'xMax'), ('const float *', 'yMin')]"
4309,97,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
4309,98,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
4309,99,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
4309,100,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
4309,173,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
4310,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4310,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4310,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4310,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4310,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4310,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4310,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4310,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
4310,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4310,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
4310,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
4310,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
4310,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
4310,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
4310,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4310,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4310,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
4312,19,markPotentialMatchedDepthPairKernel,runs,"[('cudaTextureObject_t', 'index_map'), ('unsigned', 'img_rows'), ('unsigned', 'img_cols'), ('unsigned *', 'reference_pixel_matched_indicator')]"
4312,35,assembleBinBlockCSRKernel,runs,"[('const unsigned', 'matrix_size'), ('const float *', 'diagonal_blks'), ('const float *', 'nondiagonal_blks'), ('const int *', 'csr_rowptr'), ('const unsigned *', 'blkrow_offset'), ('float *', 'JtJ_data')]"
4312,57,compactIndicatorToPixelKernel,runs,"[('const unsigned *', 'candidate_pixel_indicator'), ('const unsigned *', 'prefixsum_indicator'), ('unsigned', 'img_cols'), ('ushort2 *', 'compacted_pixels')]"
4312,86,buildCompactedIndexKernel,runs,"[('const unsigned *', 'valid_indicator'), ('const unsigned', 'table_size'), ('unsigned *', 'compacted_index')]"
4312,116,markValidIndexMapPixelKernel,runs,"[('cudaTextureObject_t', 'index_map'), ('int', 'validity_halfsize'), ('unsigned', 'img_rows'), ('unsigned', 'img_cols'), ('unsigned char *', 'flatten_validity_indicator')]"
4312,117,clipFilterDepthKernel,runs,"[('cudaTextureObject_t', 'raw_depth'), ('const unsigned', 'clip_img_rows'), ('const unsigned', 'clip_img_cols'), ('const unsigned', 'clip_near'), ('const unsigned', 'clip_far'), ('const float', 'sigma_s_inv_square'), ('const float', 'sigma_r_inv_square'), ('cudaSurfaceObject_t', 'filter_depth')]"
4312,119,foregroundMaskUpsampleFilterKernel,runs,"[('cudaTextureObject_t', 'subsampled_mask'), ('unsigned', 'upsample_rows'), ('unsigned', 'upsample_cols'), ('const float', 'sigma'), ('cudaSurfaceObject_t', 'upsampled_mask'), ('cudaSurfaceObject_t', 'filter_mask')]"
4312,124,filterDensityMapKernel,runs,"[('cudaTextureObject_t', 'density_map'), ('unsigned', 'rows'), ('unsigned', 'cols'), ('cudaSurfaceObject_t', 'filter_density_map')]"
4312,134,upsampleFilterForegroundMaskKernel,runs,"[('cudaTextureObject_t', 'subsampled_mask'), ('unsigned', 'upsample_rows'), ('unsigned', 'upsample_cols'), ('unsigned', 'sample_rate'), ('const float', 'sigma'), ('cudaSurfaceObject_t', 'upsampled_mask'), ('cudaSurfaceObject_t', 'filter_mask')]"
4312,135,filterForegroundMaskKernel,runs,"[('cudaTextureObject_t', 'foreground_mask'), ('unsigned', 'mask_rows'), ('unsigned', 'mask_cols'), ('const float', 'sigma'), ('cudaSurfaceObject_t', 'filter_mask')]"
4318,5,vector_max_kernel,runs,"[('const float *', 'x'), ('int', 'len'), ('int', 'blen'), ('float *', 'result')]"
4318,10,saxpy_kernel,runs,"[('const float', 'a'), ('const float *', 'x'), ('const float *', 'y'), ('float *', 'result'), ('unsigned int', 'len')]"
4318,11,saxpy_kernel_large,runs,"[('const float', 'a'), ('const float *', 'x'), ('const float *', 'y'), ('float *', 'result'), ('unsigned int', 'len'), ('unsigned int', 'rowsz')]"
4318,12,sxypz_kernel_large,runs,"[('float', 'a'), ('const float *', 'x'), ('const float *', 'y'), ('const float *', 'z'), ('float *', 'result'), ('unsigned int', 'len'), ('unsigned int', 'rowsz')]"
4318,13,vxy_kernel,runs,"[('const float *', 'x'), ('float *', 'y'), ('float *', 'result'), ('unsigned int', 'len')]"
4318,14,vxy_kernel_large,runs,"[('const float *', 'x'), ('float *', 'y'), ('float *', 'result'), ('unsigned int', 'len'), ('unsigned int', 'rowsz')]"
4318,15,sqrt_kernel_large,runs,"[('float *', 'x'), ('unsigned int', 'len'), ('unsigned int', 'rowsz')]"
4318,16,rsqrt_kernel_large,runs,"[('float *', 'x'), ('unsigned int', 'len'), ('unsigned int', 'rowsz')]"
4318,17,sax_kernel,runs,"[('const float', 'a'), ('const float *', 'x'), ('float *', 'result'), ('unsigned int', 'len')]"
4318,18,sax_kernel_large,runs,"[('const float', 'a'), ('const float *', 'x'), ('float *', 'result'), ('unsigned int', 'len'), ('unsigned int', 'rowsz')]"
4336,0,conv2DDevice,runs,"[('const int *', 'in'), ('int *', 'out')]"
4340,0,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
4340,1,matrixMultiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
4340,2,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
4340,5,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
4340,6,matrixMultiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
4340,7,scan,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
4340,8,vecAdd,runs,"[('float *', 'in1'), ('int', 'offset'), ('int', 'len')]"
4340,9,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
4346,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
4349,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
435,0,xTA,runs,"[('double *', 'y'), ('int', 'k'), ('double *', 'A'), ('int', 'm'), ('int', 'lda'), ('double *', 'x'), ('int', 'ldx')]"
435,1,scale,runs,"[('double *', 'd'), ('int', 'm'), ('int', 'ld'), ('double *', 's')]"
435,2,r1_update,runs,"[('double *', 'A'), ('int', 'm'), ('int', 'n'), ('int', 'lda'), ('double *', 'col'), ('int', 'ldc'), ('double *', 'row')]"
4356,1,TestDimensions,runs,[]
4365,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
437,8,_segmentedScanBackKer,runs,"[('float *', 'maxdist'), ('int *', 'maxdistidx'), ('int *', 'label'), ('float *', 'blockmaxdist'), ('int *', 'blocklabel'), ('int *', 'blockmaxdistidx'), ('int', 'numelements')]"
4372,0,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('double', 'drift'), ('int', 'numSims'), ('double', 'lowerThreshold'), ('double', 'upperThreshold'), ('double', 'deviceID')]"
4372,1,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('double', 'drift'), ('int', 'numSims'), ('double', 'lowerThreshold'), ('double', 'upperThreshold'), ('int', 'deviceID')]"
4372,2,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('int', 'numSims'), ('double', 'lowerThreshold'), ('double', 'upperThreshold'), ('int *', 'dev_failCross'), ('double', 'seconds')]"
4372,4,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('int', 'numSims')]"
4372,5,getCrossingTimes,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'N'), ('int', 'numSims'), ('int', 'lowerThreshold'), ('int', 'upperThreshold')]"
4372,6,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('double', 'T'), ('int', 'N'), ('int', 'numSims'), ('double', 'lowerThreshold'), ('double', 'upperThreshold'), ('int *', 'dev_failCross'), ('double', 'seconds')]"
4372,7,randomWalk,runs,"[('double *', 'results'), ('int', 'T'), ('int', 'N')]"
4372,8,randomWalk,runs,"[('double *', 'results'), ('int', 'T'), ('int', 'N')]"
4372,9,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('int', 'numSims'), ('double', 'upperThreshold'), ('double', 'deviceID')]"
4372,10,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('int', 'numSims'), ('double', 'upperThreshold'), ('double', 'deviceID')]"
4372,11,changeValues,runs,"[('float *', 'matrix'), ('int', 'size')]"
4372,12,updateState,runs,"[('float *', 'B'), ('float *', 'external'), ('int', 'dim'), ('float', 'timestep'), ('int', 'length'), ('float', 'L'), ('float', 'M')]"
4372,13,changeValues,runs,"[('float *', 'matrix'), ('int', 'size')]"
4372,14,updateState,runs,"[('float *', 'B'), ('float *', 'external'), ('int', 'dim'), ('float', 'timestep'), ('float', 'noise'), ('int', 'length'), ('int', 'totalIterations'), ('int', 'iterationNum'), ('float', 'L'), ('float', 'M')]"
4372,15,changeValues,runs,"[('double *', 'matrix'), ('int', 'size')]"
4372,16,updateState,runs,"[('double *', 'B'), ('double *', 'external'), ('double *', 'lamBeta'), ('int', 'dim'), ('float', 'timestep'), ('double', 'noise'), ('int', 'length'), ('int', 'totalIterations'), ('int', 'iterationNum')]"
4372,17,squeeze,runs,"[('float *', 'B'), ('int', 'dim'), ('int', 'length'), ('float', 'L'), ('float', 'M')]"
4372,18,changeValues,runs,"[('float *', 'matrix'), ('int', 'size')]"
4372,19,squeeze,runs,"[('float *', 'B'), ('int', 'dim'), ('int', 'length'), ('float', 'L'), ('float', 'M')]"
4372,20,changeValues,runs,"[('float *', 'matrix'), ('int', 'size')]"
4372,21,squeeze,runs,"[('float *', 'B'), ('int', 'dim'), ('int', 'length'), ('float', 'L'), ('float', 'M')]"
4378,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4378,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
438,33,latbnd,runs,"[('int', 'nx'), ('int', 'ny'), ('DECNUM *', 'uu')]"
438,34,vvlatbnd,runs,"[('int', 'nx'), ('int', 'ny'), ('DECNUM *', 'uu')]"
4386,0,binary_gemm_kernel,runs,"[('uint32_t *', 'A'), ('uint32_t *', 'B'), ('float *', 'C'), ('int', 'm'), ('int', 'nn'), ('int', 'k'), ('int', 'transb'), ('int', 'alpha'), ('int', 'beta'), ('float *', 'alphas')]"
4386,1,im2col_kernel,runs,"[('int', 'n'), ('float *', 'data_im'), ('int', 'height'), ('int', 'width'), ('int', 'ksize_h'), ('int', 'ksize_w'), ('int', 'pad_h'), ('int', 'pad_w'), ('int', 'stride_h'), ('int', 'stride_w'), ('int', 'dilation_h'), ('int', 'dilation_w'), ('int', 'height_col'), ('int', 'width_col'), ('float *', 'data_col')]"
4386,3,encode_cols_kernel,runs,"[('float *', 'a'), ('uint32_t *', 'b'), ('int', 'm'), ('int', 'n')]"
4388,0,bordes,runs,"[('int *', 'val2'), ('int *', 'val1'), ('int', 'm'), ('int', 'n')]"
4388,1,processMandelbrotElement,runs,"[('double *', 'out'), ('const double *', 'x'), ('const double *', 'y'), ('const unsigned int', 'maxIters'), ('const unsigned int', 'numel')]"
4388,2,add3,runs,"[('float *', 'val1'), ('float *', 'val2'), ('int *', 'num_elem')]"
4388,3,sub3,runs,"[('float *', 'val1'), ('float *', 'val2'), ('int *', 'num_elem')]"
4391,0,kernel,runs,[]
4391,1,kernel,runs,[]
4391,2,kernel,runs,[]
4391,3,kernel,runs,[]
4407,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4407,310,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4408,0,kernelAddConstant,runs,"[('int *', 'g_a'), ('const int', 'b')]"
4408,4,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
4413,26,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
4413,29,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
4413,30,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
4413,31,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
4416,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4416,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4419,1,TestDimensions,runs,[]
442,2,map_index_to_prefix,runs,"[('uint8_t *', 'hashes'), ('uint32_t *', 'sort_indices'), ('uint32_t *', 'comb_count'), ('uint32_t *', 'comb_sum'), ('uint32_t *', 'comb_prefix'), ('uint32_t', 'r'), ('uint32_t', 'size')]"
442,5,remap_reduction,runs,"[('uint32_t *', 'd_reduction'), ('uint32_t *', 'd_mapping'), ('uint32_t *', 'old_d_ij_buf'), ('uint32_t', 'sum_prev_size'), ('uint32_t', 'prev_size'), ('uint32_t *', 'new_d_ij_buf'), ('uint32_t', 'new_size')]"
442,8,expand_array,runs,"[('unsigned char *', 'd_in'), ('unsigned char *', 'd_out')]"
442,9,get_sort_keys,runs,"[('unsigned char *', 'd_hashes'), ('uint32_t *', 'd_sort_keys'), ('uint32_t *', 'd_sort_indices'), ('uint32_t', 'r'), ('uint32_t', 'num_keys')]"
442,10,initialize_to_one,runs,"[('uint32_t *', 'reduction'), ('uint32_t', 'size')]"
442,11,final_mark_starts,runs,"[('uint8_t *', 'hashes'), ('uint32_t *', 'sort_indices'), ('uint32_t *', 'off_map'), ('uint32_t', 'r'), ('uint32_t', 'hash_count')]"
442,14,final_map_index_to_prefix,runs,"[('uint8_t *', 'hashes'), ('uint32_t *', 'sort_indices'), ('uint32_t *', 'off_map'), ('uint32_t *', 'comb_count'), ('uint32_t *', 'comb_sum'), ('uint32_t *', 'comb_prefix'), ('uint32_t', 'r'), ('uint32_t', 'size')]"
4431,5,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
4431,6,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
4431,7,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
4431,8,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
4431,9,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
4431,10,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
4431,11,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
4431,12,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
4431,13,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
4431,14,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
4431,15,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
4431,16,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
4431,17,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
4431,18,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
4431,19,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('float *', 'dist'), ('int *', 'idx'), ('float *', 'val')]"
4433,90,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
4433,103,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
4433,104,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
4433,105,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
4433,106,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
4435,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4435,301,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
4435,306,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4437,3,floatToDouble,runs,"[('float *', 'input'), ('double *', 'output'), ('int', 'numElements')]"
4437,4,doubleToFloat,runs,"[('double *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
4441,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4441,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4442,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4442,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4445,4,computeTemporalSmoothRmatrices,runs,"[('const float *', 'Rmatrices'), ('uint32_t', 'numSamples'), ('uint32_t', 'subArraySize'), ('uint32_t', 'numSubArrays'), ('const uint32_t *', 'subArraySizes'), ('uint32_t', 'temporalSmoothing'), ('float *', 'TempRmatrices')]"
4445,21,computeTemporalSmoothRmatrices,runs,"[('const float *', 'Rmatrices'), ('uint32_t', 'numSamples'), ('uint32_t', 'subArraySize'), ('uint32_t', 'numSubArrays'), ('const uint32_t *', 'subArraySizes'), ('uint32_t', 'temporalSmoothing'), ('float *', 'TempRmatrices')]"
4445,23,fillUnusedDiagonal,runs,"[('float *', 'Rmatrices'), ('uint32_t', 'numSamples'), ('uint32_t', 'subArraySize'), ('const uint32_t *', 'subArraySizes')]"
4449,0,ScaleArray,runs,"[('float *', 'd_a'), ('float', 'alpha'), ('int', 'arraySize')]"
4449,2,ConvertCmplx2Polar,runs,"[('float *', 'inRe'), ('float *', 'inIm'), ('float *', 'mag'), ('float *', 'phase'), ('int', 'size')]"
4449,6,ScaleMatrix_Kernel,runs,"[('float *', 'd_a'), ('float', 'alpha'), ('int', 'arraySize')]"
4449,8,makeKernel,runs,"[('float *', 'KernelPhase'), ('int', 'row'), ('int', 'column'), ('float *', 'ImgProperties'), ('float', 'MagXscaling')]"
4449,9,makeKernel_nonefftshift,runs,"[('float *', 'KernelPhase'), ('int', 'row'), ('int', 'column'), ('float *', 'ImgProperties')]"
4449,10,makeKernelPhase,runs,"[('float *', 'KernelPhase'), ('int', 'row'), ('int', 'column'), ('float *', 'ImgProperties')]"
4457,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
4457,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
4457,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
4457,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
4457,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
4459,88,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
446,1,calc_consts,runs,"[('float *', 'fvals'), ('double *', 'dvals')]"
446,3,init,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states')]"
446,5,init,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states')]"
446,7,init,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states')]"
4462,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
4462,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
4462,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
4462,8,null_kernel,runs,[]
4462,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
4470,38,sync_conv_groups,runs,[]
4472,0,spinKernel,runs,[]
4472,1,pw_biasAdd,runs,"[('float *', 'y'), ('float *', 'bias'), ('int', 'n'), ('int', 'nBias')]"
4472,2,pw_vecAdd,runs,"[('float *', 'y'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
4472,3,pw_vecMul,runs,"[('float *', 'y'), ('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
4472,4,pw_tanh,runs,"[('float *', 'y'), ('float *', 'a'), ('int', 'n')]"
4472,7,init_data_kernel,runs,"[('int', 'n'), ('double *', 'x')]"
4472,8,daxpy_kernel,runs,"[('int', 'n'), ('double', 'a'), ('double *', 'x'), ('double *', 'y')]"
4472,9,check_results_kernel,runs,"[('int', 'n'), ('double', 'correctvalue'), ('double *', 'x')]"
4472,10,init_data_kernel,runs,"[('int', 'n'), ('double *', 'x')]"
4472,11,daxpy_kernel,runs,"[('int', 'n'), ('double', 'a'), ('double *', 'x'), ('double *', 'y')]"
4472,12,check_results_kernel,runs,"[('int', 'n'), ('double', 'correctvalue'), ('double *', 'x')]"
4472,36,staticReverse,runs,"[('int *', 'd'), ('int', 'n')]"
4472,37,dynamicReverse,runs,"[('int *', 'd'), ('int', 'n')]"
4472,38,kernel,runs,"[('float *', 'a'), ('int', 'offset')]"
4472,39,copy,runs,"[('float *', 'odata'), ('const float *', 'idata')]"
4472,40,copySharedMem,runs,"[('float *', 'odata'), ('const float *', 'idata')]"
4472,41,transposeNaive,runs,"[('float *', 'odata'), ('const float *', 'idata')]"
4472,42,transposeCoalesced,runs,"[('float *', 'odata'), ('const float *', 'idata')]"
4472,43,transposeNoBankConflicts,runs,"[('float *', 'odata'), ('const float *', 'idata')]"
4475,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
4475,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
4475,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
4475,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
4475,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
4476,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4476,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4477,171,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4477,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4483,0,global_memory_kernel,runs,"[('int *', 'd_go_to_state'), ('unsigned int *', 'd_failure_state'), ('unsigned int *', 'd_output_state'), ('unsigned char *', 'd_text'), ('unsigned int *', 'd_out'), ('size_t', 'pitch'), ('int', 'm'), ('int', 'n'), ('int', 'p_size'), ('int', 'alphabet'), ('int', 'num_blocks')]"
4483,7,ac_kernel1,runs,"[('int *', 'd_state_transition'), ('unsigned int *', 'd_state_supply'), ('unsigned int *', 'd_state_final'), ('unsigned char *', 'd_text'), ('unsigned int *', 'd_out'), ('size_t', 'pitch'), ('int', 'm'), ('int', 'n'), ('int', 'p_size'), ('int', 'alphabet'), ('int', 'numBlocks')]"
4484,28,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
4484,31,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
4484,43,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
4484,44,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
4484,55,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
4489,75,index_init,runs,"[('int *', 'out_data'), ('int', 'h'), ('int', 'w')]"
4489,134,calibrate_fix2float,runs,"[('float *', 'dst'), ('const float *', 'sA'), ('const float *', 'sB'), ('float', 'alpha'), ('float', 'beta'), ('int', 'height'), ('int', 'width'), ('int', 'threads')]"
449,0,kernelSumHistogram,runs,"[('unsigned long long int *', 'InputHists'), ('unsigned long long int *', 'hist'), ('int', 'num_atoms'), ('int', 'num_buckets'), ('int', 'block_size')]"
449,1,GPUKernelFunction,runs,"[('unsigned long long', 'PDH_acnt'), ('float', 'PDH_res'), ('atom *', 'atom_list_GPU'), ('unsigned long long *', 'histogram_GPU'), ('int', 'num_buckets')]"
4490,6,initialize_clause_output_predict,runs,"[('int *', 'clause_output'), ('int *', 'all_exclude')]"
4490,8,update_with_all_exclude,runs,"[('int *', 'clause_output'), ('int *', 'all_exclude')]"
4493,66,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
45,0,test,runs,"[('Node *', 'd_graph_nodes'), ('int', 'no_of_nodes')]"
45,1,test1,runs,"[('bool *', 'd_graph_visited'), ('int', 'no_of_nodes')]"
45,2,bfs_kernel,runs,"[('Node *', 'd_graph_nodes'), ('int *', 'd_edge_list'), ('bool *', 'd_graph_level'), ('bool *', 'd_graph_visited'), ('int *', 'd_cost'), ('bool *', 'loop'), ('int', 'no_of_nodes')]"
4512,0,constantMemoryKernel,runs,"[('float *', 'array'), ('int', 'size')]"
4512,1,simple_vbo_kernel,runs,"[('float4 *', 'pos'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'time')]"
4512,2,reduce,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
4512,4,childKernel,runs,"[('unsigned int', 'parentThreadIndex'), ('float *', 'data')]"
4512,6,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
4516,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
4522,8,RGBToRGBAf,runs,"[('uchar3 *', 'srcImage'), ('float4 *', 'dstImage'), ('int', 'width'), ('int', 'height')]"
4522,9,RGBToBGRA8,runs,"[('float3 *', 'srcImage'), ('uchar4 *', 'dstImage'), ('int', 'width'), ('int', 'height'), ('float', 'scaling_factor')]"
4522,15,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
4522,16,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
4522,17,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
4522,18,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
4522,19,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
4522,20,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
4522,21,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
4522,22,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
4522,23,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
4522,24,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
4522,25,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
4522,26,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
4522,27,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
4522,28,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
4522,29,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
4522,30,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
4522,31,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
4522,32,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
4522,33,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
4522,34,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
4522,35,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
4522,36,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
4522,37,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
4522,38,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
4522,39,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
4522,40,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
4522,41,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4522,42,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4522,43,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4522,44,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4522,45,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4522,46,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4522,47,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
4522,48,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
4522,49,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
4522,50,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
4522,51,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
4522,52,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
4522,53,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
4522,54,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
4522,55,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
4522,56,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4522,57,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4522,58,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4522,59,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4522,60,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4522,61,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4522,62,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
4522,63,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
4522,64,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
4522,65,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
4522,66,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
4522,67,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
4522,68,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
4522,69,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
4522,70,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
4522,72,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
4522,73,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
4522,74,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
4522,75,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
4525,0,hello_cuda,runs,[]
4525,1,print_thread_id,runs,[]
4525,2,print_thread_variables,runs,[]
4525,3,print_unique_thread_id_1D,runs,[]
4537,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
4550,0,hotspotOpt1,runs,"[('float *', 'p'), ('float *', 'tIn'), ('float *', 'tOut'), ('float', 'sdc'), ('int', 'nx'), ('int', 'ny'), ('int', 'nz'), ('float', 'ce'), ('float', 'cw'), ('float', 'cn'), ('float', 'cs'), ('float', 'ct'), ('float', 'cb'), ('float', 'cc')]"
4552,38,sync_conv_groups,runs,[]
4555,0,MatMultKernel,runs,"[('double *', 'array1'), ('double *', 'array2'), ('double *', 'output'), ('int', 'arr1_rows'), ('int', 'arr1_cols'), ('int', 'arr2_cols')]"
4555,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
4559,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4559,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
456,1,kernel,runs,[]
456,2,add,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
456,3,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
4577,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4577,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
459,0,kernel_set_vector_to_zero,runs,"[('double *', 'd_vec'), ('int', 'dimension')]"
459,3,kernel_add_regularization_term,runs,"[('double *', 'd_input_vector'), ('int', 'dimension'), ('double', 'regularization_parameter'), ('double *', 'd_rv')]"
459,6,kernel_vec_equals_vec1_plus_alpha_times_vec2,runs,"[('double *', 'vec'), ('double *', 'vec1'), ('double', 'alpha'), ('double *', 'd_a1'), ('double *', 'vec2'), ('int', 'numElements')]"
459,7,kernel_vec_equals_minus_vec1,runs,"[('double *', 'vec'), ('double *', 'vec1'), ('int', 'numElements')]"
459,8,kernel_euclidean_norm,runs,"[('const double *', 'vec'), ('int', 'numElements'), ('double *', 'answer')]"
459,9,kernel_mult_vector_by_number,runs,"[('double *', 'vec'), ('double', 'alpha'), ('int', 'numElements')]"
459,10,kernel_dot_product,runs,"[('const double *', 'vec1'), ('const double *', 'vec2'), ('int', 'numElements'), ('double *', 'answer')]"
459,11,floatArray2doubleArray,runs,"[('const float *', 'floatArray'), ('double *', 'doubleArray'), ('const int', 'size')]"
459,12,doubleArray2floatArray,runs,"[('const double *', 'doubleArray'), ('float *', 'floatArray'), ('const int', 'size')]"
4596,0,kernel1,runs,"[('int *', 'D'), ('int *', 'Q'), ('int', 'k')]"
4596,1,kernel2,runs,"[('int *', 'D'), ('int *', 'Q')]"
4596,2,kernel,runs,"[('int *', 'D'), ('int *', 'Q'), ('int', 'bits')]"
4596,3,kernel1,runs,"[('int *', 'D'), ('int *', 'q'), ('int', 'b')]"
4596,4,kernel2,runs,"[('int *', 'D'), ('int *', 'q'), ('int', 'b')]"
4596,5,kernel3,runs,"[('int *', 'D'), ('int *', 'q'), ('int', 'b')]"
4596,6,kernel,runs,"[('int *', 'D'), ('int *', 'q'), ('int', 'k')]"
4597,86,kernel,runs,"[('float *', 'a'), ('size_t', 'N')]"
4597,89,update_inverse_cuda,runs,"[('float *', 'Ainv'), ('float *', 'u'), ('int', 'N'), ('int', 'rowstride'), ('int', 'k')]"
4603,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4603,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4603,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4603,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4603,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4603,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4603,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4603,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
4603,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4603,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
4603,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
4603,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
4603,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
4603,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
4603,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4603,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4603,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
4610,0,calcmean,runs,"[('double *', 'd_data'), ('double *', 'd_mean'), ('int', 'M'), ('int', 'N')]"
4610,1,calcdata,runs,"[('double *', 'd_data'), ('double *', 'd_mean'), ('int', 'M'), ('int', 'N')]"
4610,2,calcsymmat,runs,"[('double *', 'd_data'), ('double *', 'd_symmat'), ('int', 'M'), ('int', 'N')]"
4610,3,trans_norm_vector,runs,"[('double *', 'A'), ('double *', 'x'), ('double *', 'y'), ('double *', 'tmp'), ('int', 'NX'), ('int', 'NY')]"
4610,4,atemp,runs,"[('double *', 'A'), ('double *', 'y'), ('double *', 'tmp'), ('int', 'NX'), ('int', 'NY')]"
4610,5,Convolution,runs,"[('double *', 'A'), ('double *', 'B'), ('int', 'I'), ('int', 'J')]"
4626,177,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4626,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4629,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4629,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4630,0,prepareData,runs,"[('int *', 'dp'), ('int', 'n')]"
4630,1,setData,runs,"[('int *', 'dp'), ('int', 'n')]"
4630,2,helperKernel,runs,"[('char *', 'S'), ('int *', 'dp'), ('int', 'n'), ('long', 'kMod'), ('int', 'len')]"
4633,4,kernelF,runs,"[('const float *', 'd_xAx'), ('const float *', 'd_bx'), ('const float *', 'd_c'), ('float *', 'd_y')]"
4633,5,kernelGradf,runs,"[('const float *', 'd_x'), ('float *', 'd_grad'), ('float *', 'A'), ('float *', 'b'), ('const size_t', 'len')]"
4633,10,update2,runs,"[('float *', 'alphaMinusBeta_out'), ('const float *', 'rho'), ('const float *', 'yDotZ'), ('const float *', 'alpha')]"
4633,11,update3,runs,"[('float *', 'rho_out'), ('float *', 'H0_out'), ('const float *', 'yDotS'), ('const float *', 'yDotY')]"
4633,12,kernelF,runs,"[('const float *', 'd_xAx'), ('const float *', 'd_bx'), ('const float *', 'd_c'), ('float *', 'd_y')]"
4633,13,kernelGradf,runs,"[('const float *', 'd_x'), ('float *', 'd_grad'), ('float *', 'A'), ('float *', 'b'), ('const size_t', 'len')]"
4633,16,kernelF,runs,"[('const float *', 'd_x'), ('float *', 'd_y')]"
4633,17,kernelGradf,runs,"[('const float *', 'd_x'), ('float *', 'd_grad')]"
4635,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
4635,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
4639,21,sync_deconv_groups,runs,[]
4639,37,sync_conv_groups,runs,[]
4642,0,MatrixTranspose,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'nx'), ('int', 'ny')]"
4642,1,MatrixMul,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
4642,2,MatAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nx'), ('int', 'ny')]"
4642,3,Mul,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nx'), ('int', 'ny')]"
4642,4,div,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nx'), ('int', 'ny')]"
4642,5,MatSub,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nx'), ('int', 'ny')]"
4642,6,MatrixTranspose,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'nx'), ('int', 'ny')]"
4642,7,MatrixMul,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
4642,8,MatAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nx'), ('int', 'ny')]"
4642,9,Mul,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nx'), ('int', 'ny')]"
4642,10,div,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nx'), ('int', 'ny')]"
4642,11,MatSub,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nx'), ('int', 'ny')]"
4661,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4661,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4666,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4666,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4672,1,naivekernel,runs,"[('float *', 'output'), ('float *', 'frameA'), ('float *', 'frameB'), ('int', 'chans')]"
4672,2,smoothing,runs,"[('float *', 'input'), ('float *', 'output'), ('double', 'alpha'), ('double', 'beta'), ('int', 'length')]"
4672,3,naivekernel,runs,"[('float *', 'output'), ('float *', 'frameA'), ('float *', 'frameB'), ('int', 'chans')]"
4672,4,initialize,runs,"[('float *', 'matrix'), ('float', 'sr'), ('int', 'numFrames'), ('int', 'length')]"
4672,5,blurnaive,runs,"[('float *', 'matrix'), ('float *', 'output'), ('int', 'firstFrame'), ('int', 'numFrames'), ('int', 'frameCount'), ('int', 'max'), ('int', 'length')]"
4672,6,morph,runs,"[('float *', 'output'), ('float *', 'input1'), ('float *', 'input2'), ('float', 'ampCoeff'), ('float', 'freqCoeff'), ('int', 'length')]"
4672,8,winrotate,runs,"[('float *', 'inframe2'), ('float *', 'inframe'), ('float *', 'win'), ('int', 'N'), ('int', 'offset')]"
4672,10,rotatewin,runs,"[('float *', 'aframe2'), ('float *', 'aframe'), ('float *', 'win'), ('int', 'N'), ('int', 'offset')]"
4672,12,fixPVandGain,runs,"[('float *', 'output'), ('float', 'gain'), ('int', 'length')]"
4672,13,takeLog,runs,"[('float *', 'input'), ('float *', 'env'), ('int', 'nhalf')]"
4672,14,lifter,runs,"[('float *', 'cepstrum'), ('int', 'nCoefs'), ('int', 'nhalf')]"
4672,15,expon,runs,"[('float *', 'env'), ('int', 'nhalf')]"
4672,17,update,runs,"[('float *', 'original'), ('float *', 'newTE'), ('float *', 'current'), ('int', 'nhalf')]"
4672,18,test,runs,"[('float *', 'nonSmoothed'), ('float *', 'smoothed'), ('int *', 'mask'), ('int', 'nhalf')]"
4672,21,fixPVandGain,runs,"[('float *', 'output'), ('float', 'gain'), ('int', 'lowestIndx'), ('int', 'length')]"
4672,22,takeLog,runs,"[('float *', 'input'), ('float *', 'env'), ('int', 'nhalf')]"
4672,23,lifter,runs,"[('float *', 'cepstrum'), ('int', 'nCoefs'), ('int', 'nhalf')]"
4672,24,expon,runs,"[('float *', 'env'), ('int', 'nhalf')]"
4672,26,update,runs,"[('float *', 'original'), ('float *', 'newTE'), ('float *', 'current'), ('int', 'nhalf')]"
4672,27,test,runs,"[('float *', 'nonSmoothed'), ('float *', 'smoothed'), ('int *', 'mask'), ('int', 'nhalf')]"
4672,29,fixPVandGain,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'gain'), ('int', 'length')]"
4672,30,takeLog,runs,"[('float *', 'input'), ('float *', 'env'), ('int', 'nhalf')]"
4672,31,lifter,runs,"[('float *', 'cepstrum'), ('int', 'nCoefs'), ('int', 'nhalf')]"
4672,32,expon,runs,"[('float *', 'env'), ('int', 'nhalf')]"
4672,34,update,runs,"[('float *', 'original'), ('float *', 'newTE'), ('float *', 'current'), ('int', 'nhalf')]"
4672,35,test,runs,"[('float *', 'nonSmoothed'), ('float *', 'smoothed'), ('int *', 'mask'), ('int', 'nhalf')]"
4672,37,fixPVandGain,runs,"[('float *', 'output'), ('float', 'gain'), ('int', 'length')]"
4672,38,takeLog,runs,"[('float *', 'input'), ('float *', 'env'), ('int', 'nhalf')]"
4672,39,lifter,runs,"[('float *', 'cepstrum'), ('int', 'nCoefs'), ('int', 'nhalf')]"
4672,40,expon,runs,"[('float *', 'env'), ('int', 'nhalf')]"
4672,42,update,runs,"[('float *', 'original'), ('float *', 'newTE'), ('float *', 'current'), ('int', 'nhalf')]"
4672,43,test,runs,"[('float *', 'nonSmoothed'), ('float *', 'smoothed'), ('int *', 'mask'), ('int', 'nhalf')]"
4672,45,fixPVandGain,runs,"[('float *', 'output'), ('float', 'gain'), ('int', 'lowestIndx'), ('int', 'length')]"
4672,46,takeLog,runs,"[('float *', 'input'), ('float *', 'env'), ('int', 'nhalf')]"
4672,47,lifter,runs,"[('float *', 'cepstrum'), ('int', 'nCoefs'), ('int', 'nhalf')]"
4672,48,expon,runs,"[('float *', 'env'), ('int', 'nhalf')]"
4672,50,update,runs,"[('float *', 'original'), ('float *', 'newTE'), ('float *', 'current'), ('int', 'nhalf')]"
4672,51,test,runs,"[('float *', 'nonSmoothed'), ('float *', 'smoothed'), ('int *', 'mask'), ('int', 'nhalf')]"
4672,54,fixPVandGain,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'gain'), ('int', 'lowestIndx'), ('int', 'length')]"
4672,55,takeLog,runs,"[('float *', 'input'), ('float *', 'env'), ('int', 'nhalf')]"
4672,56,lifter,runs,"[('float *', 'cepstrum'), ('int', 'nCoefs'), ('int', 'nhalf')]"
4672,57,expon,runs,"[('float *', 'env'), ('int', 'nhalf')]"
4672,59,update,runs,"[('float *', 'original'), ('float *', 'newTE'), ('float *', 'current'), ('int', 'nhalf')]"
4672,60,test,runs,"[('float *', 'nonSmoothed'), ('float *', 'smoothed'), ('int *', 'mask'), ('int', 'nhalf')]"
4672,61,morph,runs,"[('float *', 'output'), ('float *', 'input1'), ('float *', 'input2'), ('float', 'ampCoeff'), ('float', 'freqCoeff'), ('int', 'length')]"
4672,63,fixPVandGain,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'gain'), ('int', 'length')]"
4672,64,takeLog,runs,"[('float *', 'input'), ('float *', 'env'), ('int', 'nhalf')]"
4672,65,lifter,runs,"[('float *', 'cepstrum'), ('int', 'nCoefs'), ('int', 'nhalf')]"
4672,66,expon,runs,"[('float *', 'env'), ('int', 'nhalf')]"
4672,68,update,runs,"[('float *', 'original'), ('float *', 'newTE'), ('float *', 'current'), ('int', 'nhalf')]"
4672,69,test,runs,"[('float *', 'nonSmoothed'), ('float *', 'smoothed'), ('int *', 'mask'), ('int', 'nhalf')]"
4672,71,initialize,runs,"[('float *', 'matrix'), ('float', 'sr'), ('int', 'numFrames'), ('int', 'length')]"
4672,72,blurnaive,runs,"[('float *', 'matrix'), ('float *', 'output'), ('int', 'firstFrame'), ('int', 'numFrames'), ('int', 'frameCount'), ('int', 'max'), ('int', 'length')]"
4672,74,smoothing,runs,"[('float *', 'input'), ('float *', 'output'), ('double', 'alpha'), ('double', 'beta'), ('int', 'length')]"
4672,76,fixPVandGain,runs,"[('float *', 'output'), ('float', 'gain'), ('int', 'length')]"
4672,77,takeLog,runs,"[('float *', 'input'), ('float *', 'env'), ('int', 'nhalf')]"
4672,78,lifter,runs,"[('float *', 'cepstrum'), ('int', 'nCoefs'), ('int', 'nhalf')]"
4672,79,expon,runs,"[('float *', 'env'), ('int', 'nhalf')]"
4672,81,update,runs,"[('float *', 'original'), ('float *', 'newTE'), ('float *', 'current'), ('int', 'nhalf')]"
4672,82,test,runs,"[('float *', 'nonSmoothed'), ('float *', 'smoothed'), ('int *', 'mask'), ('int', 'nhalf')]"
4674,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
468,0,blending_pairs,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float *', 'd'), ('float *', 'wei'), ('int', 'width'), ('int', 'height'), ('int', 'w'), ('float', 'A'), ('float', 'error_lm'), ('float', 'error_mm'), ('int', 'class_num')]"
468,1,blending,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float *', 'd'), ('int', 'width'), ('int', 'height'), ('int', 'w'), ('float', 'A'), ('float', 'error_lm'), ('float', 'error_mm'), ('int', 'class_num')]"
4681,3,floatToDouble,runs,"[('float *', 'input'), ('double *', 'output'), ('int', 'numElements')]"
4681,4,doubleToFloat,runs,"[('double *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
469,2,yuan,runs,"[('const char *', 'text'), ('int *', 'pos'), ('int', 'text_size')]"
469,3,SimpleClone,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const float *', 'mask'), ('float *', 'output'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
4694,3,print_my_index,runs,[]
4694,7,redunction_neighbored_pairs_1,runs,"[('int *', 'input'), ('int *', 'temp'), ('int', 'size')]"
4694,8,reduction_neighbored_pairs_improved_1,runs,"[('int *', 'int_array'), ('int *', 'temp_array'), ('int', 'size')]"
4694,9,reduction_interleaved_pairs_1,runs,"[('int *', 'int_array'), ('int *', 'temp_array'), ('int', 'size')]"
4694,10,reduction_interleaved_unrolling_blocks2_1,runs,"[('int *', 'input'), ('int *', 'temp'), ('int', 'size')]"
4694,11,reduction_interleaved_unrolling_blocks8_1,runs,"[('int *', 'input'), ('int *', 'temp'), ('int', 'size')]"
4694,12,reduction_kernel_interleaved_warp_unrolling8_1,runs,"[('int *', 'input'), ('int *', 'temp_array'), ('int', 'size')]"
4694,13,reduction_kernel_complete_unrolling8_1,runs,"[('int *', 'input'), ('int *', 'temp'), ('int', 'size')]"
4694,16,sum_arrays_2Dgrid_2Dblock,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'nx'), ('int', 'ny')]"
4694,18,misaligned_write_test,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'size'), ('int', 'offset')]"
4694,19,check_index,runs,[]
4694,20,atomics,runs,"[('int *', 'shared_var'), ('int', 'iters')]"
4694,21,unsafe,runs,"[('int *', 'shared_var'), ('int', 'iters')]"
4694,30,lots_of_float_compute,runs,"[('float *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('float *', 'outputs')]"
4694,31,lots_of_double_compute,runs,"[('double *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('double *', 'outputs')]"
4694,33,print_details,runs,[]
4694,37,misaligned_read_unrolled4,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'size'), ('int', 'offset')]"
4694,41,sparse_mat_compact,runs,"[('int *', 'input'), ('int *', 'output'), ('int *', 'output_index_array'), ('int', 'array_size')]"
4694,43,reduction_unrolling_blocks4,runs,"[('int *', 'input'), ('int *', 'temp'), ('int', 'size')]"
4694,44,standard_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
4694,45,intrinsic_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
4694,53,smem_dynamic_test,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'size')]"
4694,54,register_usage_test,runs,"[('int *', 'results'), ('int', 'size')]"
4694,58,copy_column,runs,"[('int *', 'mat'), ('int *', 'transpose'), ('int', 'nx'), ('int', 'ny')]"
4694,59,transpose_read_row_write_column,runs,"[('int *', 'mat'), ('int *', 'transpose'), ('int', 'nx'), ('int', 'ny')]"
4694,60,transpose_read_column_write_row,runs,"[('int *', 'mat'), ('int *', 'transpose'), ('int', 'nx'), ('int', 'ny')]"
4694,61,transpose_unroll4_row,runs,"[('int *', 'mat'), ('int *', 'transpose'), ('int', 'nx'), ('int', 'ny')]"
4694,62,transpose_unroll4_col,runs,"[('int *', 'mat'), ('int *', 'transpose'), ('int', 'nx'), ('int', 'ny')]"
4694,63,transpose_diagonal_row,runs,"[('int *', 'mat'), ('int *', 'transpose'), ('int', 'nx'), ('int', 'ny')]"
4694,66,print_threadIds,runs,[]
4694,70,print_details_of_warps,runs,[]
4694,73,compact2d_1D_array,runs,"[('int *', 'input'), ('int *', 'output'), ('int *', 'output_column_index_array'), ('int *', 'output_row_index_array'), ('int *', 'prev_output_index_array'), ('int *', 'auxiliry_array'), ('int', 'array_size')]"
4694,79,transpose_smem,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'nx'), ('int', 'ny')]"
4694,80,transpose_smem_pad,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'nx'), ('int', 'ny')]"
4694,81,transpose_smem_pad_unrolling,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'nx'), ('int', 'ny')]"
4694,84,misaligned_read_test,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'size'), ('int', 'offset')]"
4694,86,copyRow_1,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4694,87,FindClosestGPU,runs,"[('float3 *', 'points'), ('int *', 'indices'), ('int', 'count')]"
4694,89,matrix_transpose_k1,runs,"[('float *', 'input'), ('float *', 'output'), ('const int', 'nx'), ('const int', 'ny')]"
4694,90,copy_rows,runs,"[('float *', 'input'), ('float *', 'output'), ('const int', 'nx'), ('const int', 'ny')]"
4694,91,copy_columns,runs,"[('float *', 'input'), ('float *', 'output'), ('const int', 'nx'), ('const int', 'ny')]"
4694,92,read_coaleased_write_stride_mat_trans,runs,"[('float *', 'input'), ('float *', 'output'), ('const int', 'nx'), ('const int', 'ny')]"
4694,93,read_stride_write_coaleased_mat_trans,runs,"[('float *', 'input'), ('float *', 'output'), ('const int', 'nx'), ('const int', 'ny')]"
4694,97,mem_trs_test2,runs,"[('int *', 'input'), ('int', 'size')]"
4694,100,compact_1D_array,runs,"[('int *', 'input'), ('int *', 'output'), ('int *', 'output_index_array'), ('int', 'array_size')]"
4694,106,cb_k2,runs,[]
4694,107,cb_k3,runs,[]
4694,109,hello_cuda,runs,[]
4694,114,test_shfl_broadcast_16,runs,"[('int *', 'in'), ('int *', 'out')]"
4694,115,test_shfl_up,runs,"[('int *', 'in'), ('int *', 'out')]"
4694,116,test_shfl_down,runs,"[('int *', 'in'), ('int *', 'out')]"
4694,117,test_shfl_xor_butterfly,runs,"[('int *', 'in'), ('int *', 'out')]"
4694,132,sumArraysZeroCopy,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('const int', 'N')]"
4708,1,vecAdd,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
4718,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4718,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4718,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4718,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4718,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4718,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4718,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4718,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
4718,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4718,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
4718,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
4718,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
4718,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
4718,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
4718,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4718,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4718,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
4723,0,UpdateSurface,runs,"[('cudaSurfaceObject_t', 'surf'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'time')]"
473,0,gpu_matrix_mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
473,1,gpu_square_matrix_mult,runs,"[('int *', 'd_a'), ('int *', 'd_b'), ('int *', 'd_result'), ('int', 'n')]"
473,2,gpu_matrix_transpose,runs,"[('int *', 'mat_in'), ('int *', 'mat_out'), ('unsigned int', 'rows'), ('unsigned int', 'cols')]"
473,3,gpu_matrix_mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
473,4,gpu_square_matrix_mult,runs,"[('int *', 'd_a'), ('int *', 'd_b'), ('int *', 'd_result'), ('int', 'n')]"
473,5,gpu_matrix_transpose,runs,"[('int *', 'mat_in'), ('int *', 'mat_out'), ('unsigned int', 'rows'), ('unsigned int', 'cols')]"
4732,4,absoluteDifferenceCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
4732,5,bitwiseAndCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
4732,6,bitwiseOrCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
4732,7,bitwiseXorCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
4732,10,copyCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
4732,13,flipCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('bool', 'horizontal'), ('bool', 'vertical')]"
4732,14,histogramCuda,runs,"[('const uint8_t *', 'data'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'histogram')]"
4732,15,invertCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
4732,16,isEqualCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'isEqual')]"
4732,17,lookupTableCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint8_t *', 'table')]"
4732,18,maximumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
4732,19,minimumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
4732,20,projectionProfileHorizontalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
4732,21,projectionProfileVerticalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
4732,22,rotateCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('float', 'inXStart'), ('float', 'inYStart'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('float', 'cosAngle'), ('float', 'sinAngle')]"
4732,24,setPixelCuda,runs,"[('uint8_t *', 'in'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'pointX'), ('uint32_t *', 'pointY'), ('uint32_t', 'pointSize'), ('uint32_t', 'value')]"
4732,25,subtractCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
4732,29,isAnyEqualCuda,runs,"[('const uint8_t *', 'image'), ('uint8_t *', 'value'), ('size_t', 'valueCount'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'differenceCount')]"
4746,98,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
4746,99,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
475,0,calcul_min,runs,"[('unsigned long *', 'ord'), ('int', 'ind_start'), ('int', 'ind_end'), ('unsigned long long *', 'ymin'), ('int *', 'ind_min'), ('int', 'size_max_parallel')]"
4753,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4753,299,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
4753,304,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
478,50,loadOP,runs,[]
478,56,use_ptr3,runs,[]
478,67,prova3,runs,[]
4781,96,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
4781,97,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
4781,98,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
4781,99,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
4781,170,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
4782,34,sync_conv_groups,runs,[]
4786,0,Cholesky_GPU,runs,"[('double *', 'matrix'), ('int', 'n')]"
4807,53,saxpy_baseline,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
4807,54,saxpy_float4s,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
4807,55,saxpy_shmem,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
4807,56,saxpy_shmem_doublebuffer,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
4807,57,saxpy_float4s_shmem,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
4807,58,saxpy_float4s_shmem_doublebuffer,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
4807,62,saxpy_float4s,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
4807,65,saxpy_float4s_shmem,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
4807,66,saxpy_float4s_shmem_doublebuffer,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
4807,69,saxpy_baseline,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
4807,79,sgemvn_kernel1_fermi,runs,"[('int', 'n'), ('int', 'm'), ('int', 'n1'), ('float', 'alpha'), ('float *', 'A'), ('int', 'lda'), ('float *', 'x'), ('float *', 'y')]"
4807,80,sgemvn_kernel2_fermi,runs,"[('int', 'n'), ('int', 'm'), ('int', 'n1'), ('float', 'alpha'), ('float *', 'A'), ('int', 'lda'), ('float *', 'x'), ('float *', 'y')]"
4826,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
4826,20,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
4829,0,VecAddInt32,runs,"[('int32_t *', 'in0'), ('int32_t *', 'in1'), ('int32_t *', 'out'), ('int', 'cnt')]"
4829,1,VecAddFp32,runs,"[('float *', 'in0'), ('float *', 'in1'), ('float *', 'out'), ('int', 'cnt')]"
4829,2,VecSubInt32,runs,"[('int32_t *', 'in0'), ('int32_t *', 'in1'), ('int32_t *', 'out'), ('int', 'cnt')]"
4829,3,VecSubFp32,runs,"[('float *', 'in0'), ('float *', 'in1'), ('float *', 'out'), ('int', 'cnt')]"
4832,2,l2_regularize_kernel,runs,"[('int', 'factors'), ('float', 'regularization'), ('float *', 'YtY')]"
4844,15,KerComputeAceMod,runs,"[('unsigned', 'n'), ('const float3 *', 'ace'), ('float *', 'acemod')]"
4844,17,KerComputeVelMod,runs,"[('unsigned', 'n'), ('const float4 *', 'vel'), ('float *', 'velmod')]"
4844,21,KerComputeSpsTau,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('float', 'smag'), ('float', 'blin'), ('const float4 *', 'velrhop'), ('const float2 *', 'gradvelff'), ('float2 *', 'tauff')]"
4844,24,KerCalcRidp,runs,"[('unsigned', 'n'), ('unsigned', 'ini'), ('unsigned', 'idini'), ('unsigned', 'idfin'), ('const unsigned *', 'idp'), ('unsigned *', 'ridp')]"
4844,26,KerFtCalcForcesRes,runs,"[('unsigned', 'ftcount'), ('bool', 'simulate2d'), ('double', 'dt'), ('const float3 *', 'ftoomega'), ('const float3 *', 'ftovel'), ('const double3 *', 'ftocenter'), ('const float3 *', 'ftoforces'), ('float3 *', 'ftoforcesres'), ('double3 *', 'ftocenterres')]"
4844,31,KerPeriodicDuplicateNormals,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'listp'), ('float3 *', 'normals'), ('float3 *', 'motionvel')]"
4844,37,KerResety,runs,"[('unsigned', 'n'), ('unsigned', 'ini'), ('float3 *', 'v')]"
4844,45,KerSortDataParticles,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'sortpart'), ('const float4 *', 'a'), ('float4 *', 'a2')]"
4844,46,KerSortDataParticles,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'sortpart'), ('const float *', 'a'), ('const float *', 'b'), ('float *', 'a2'), ('float *', 'b2')]"
4844,47,KerSortDataParticles,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'sortpart'), ('const double2 *', 'a'), ('const double *', 'b'), ('const float4 *', 'c'), ('double2 *', 'a2'), ('double *', 'b2'), ('float4 *', 'c2')]"
4844,49,KerSortDataParticles,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'sortpart'), ('const float3 *', 'a'), ('float3 *', 'a2')]"
4844,50,KerSortDataParticles,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'sortpart'), ('const float *', 'a'), ('float *', 'a2')]"
4844,60,KerInOutIgnoreFluidDef,runs,"[('unsigned', 'n'), ('typecode', 'cod'), ('typecode', 'codnew'), ('typecode *', 'code')]"
4844,65,KerInOutUpdateVelrhopM1,runs,"[('unsigned', 'n'), ('const int *', 'inoutpart'), ('const float4 *', 'velrhop'), ('float4 *', 'velrhopm1')]"
4844,70,KerInOutInterpolateTime,runs,"[('unsigned', 'npt'), ('double', 'fxtime'), ('const float *', 'vel0'), ('const float *', 'vel1'), ('float *', 'vel')]"
4844,74,KerResety,runs,"[('unsigned', 'n'), ('unsigned', 'ini'), ('float3 *', 'v')]"
4844,75,KerComputeAceMod,runs,"[('unsigned', 'n'), ('const float3 *', 'ace'), ('float *', 'acemod')]"
4844,77,KerComputeVelMod,runs,"[('unsigned', 'n'), ('const float4 *', 'vel'), ('float *', 'velmod')]"
4844,81,KerComputeSpsTau,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('float', 'smag'), ('float', 'blin'), ('const float4 *', 'velrhop'), ('const float2 *', 'gradvelff'), ('float2 *', 'tauff')]"
4844,84,KerCalcRidp,runs,"[('unsigned', 'n'), ('unsigned', 'ini'), ('unsigned', 'idini'), ('unsigned', 'idfin'), ('const unsigned *', 'idp'), ('unsigned *', 'ridp')]"
4844,86,KerFtCalcForcesRes,runs,"[('unsigned', 'ftcount'), ('bool', 'simulate2d'), ('double', 'dt'), ('const float3 *', 'ftoomega'), ('const float3 *', 'ftovel'), ('const double3 *', 'ftocenter'), ('const float3 *', 'ftoforces'), ('float3 *', 'ftoforcesres'), ('double3 *', 'ftocenterres')]"
4844,91,KerPeriodicDuplicateNormals,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'listp'), ('float3 *', 'normals'), ('float3 *', 'motionvel')]"
4844,97,KerResety,runs,"[('unsigned', 'n'), ('unsigned', 'ini'), ('float3 *', 'v')]"
4844,105,KerSortDataParticles,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'sortpart'), ('const float4 *', 'a'), ('float4 *', 'a2')]"
4844,106,KerSortDataParticles,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'sortpart'), ('const float *', 'a'), ('const float *', 'b'), ('float *', 'a2'), ('float *', 'b2')]"
4844,107,KerSortDataParticles,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'sortpart'), ('const double2 *', 'a'), ('const double *', 'b'), ('const float4 *', 'c'), ('double2 *', 'a2'), ('double *', 'b2'), ('float4 *', 'c2')]"
4844,109,KerSortDataParticles,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'sortpart'), ('const float3 *', 'a'), ('float3 *', 'a2')]"
4844,110,KerSortDataParticles,runs,"[('unsigned', 'n'), ('unsigned', 'pini'), ('const unsigned *', 'sortpart'), ('const float *', 'a'), ('float *', 'a2')]"
4854,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
4858,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4858,310,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
486,2,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
4863,0,histogram,runs,"[('int *', 'Hist'), ('long long *', 'arrayofkeys'), ('long long', 'size'), ('int', 'noofpartitions')]"
4863,1,prefixScan,runs,"[('int *', 'Hist'), ('int *', 'Hist_dev_pre'), ('int', 'noofpartitions'), ('long long', 'size')]"
4863,2,Reorder,runs,"[('long long *', 'arrayofkeys'), ('int *', 'Hist_pre'), ('int', 'noofpartitions'), ('long long', 'size'), ('long long *', 'output')]"
487,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
487,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
487,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
487,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
487,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
487,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
487,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
487,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
487,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
487,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
487,24,hello,runs,[]
487,28,hello,runs,[]
4876,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
4876,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
4879,0,maxpooling,runs,"[('float *', 'output'), ('const float *', 'input'), ('const int', 'width'), ('const int', 'channels')]"
4879,1,transform_image,runs,"[('float *', 'input'), ('const float *', 'raw_input'), ('const int', 'width'), ('const int', 'channels')]"
4879,2,transform_fc,runs,"[('float *', 'input'), ('const float *', 'raw_input'), ('const int', 'width'), ('const int', 'channels')]"
4879,3,transform,runs,"[('float *', 'input'), ('const float *', 'raw_input'), ('const int', 'width'), ('const int', 'channels')]"
489,0,CudaSobelEdgeDetection,runs,"[('uint8_t *', 'input'), ('uint8_t *', 'output'), ('int', 'height'), ('int', 'width'), ('int', 'gradientThreshold')]"
4895,26,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
4895,29,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
4895,30,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
4895,31,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
49,0,kExp,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,1,kLogistic1,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,2,kLogistic2,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,3,kLog,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,4,kSquare,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,5,kSqrt,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,6,kZero,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,7,kReciprocal,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,8,kSign,runs,"[('float *', 'gData'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,9,kSubtractFromScalar,runs,"[('float *', 'gData'), ('float', 'scalar'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,10,kAddScalar,runs,"[('float *', 'gData'), ('float', 'scalar'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,11,kBiggerThanScalar,runs,"[('float *', 'gData'), ('float', 'scalar'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,12,kSmallerThanScalar,runs,"[('float *', 'gData'), ('float', 'scalar'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,13,kInRangeInc,runs,"[('float *', 'gData'), ('float', 'lower'), ('float', 'upper'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,14,kInRangeExc,runs,"[('float *', 'gData'), ('float', 'lower'), ('float', 'upper'), ('float *', 'target'), ('unsigned int', 'numElements')]"
49,22,kBiggerThan,runs,"[('float *', 'gMat1'), ('float *', 'gMat2'), ('float *', 'gMatTarget'), ('unsigned int', 'numElements')]"
49,23,kCopy,runs,"[('float *', 'srcStart'), ('float *', 'destStart'), ('const int', 'copyWidth'), ('const int', 'srcJumpWidth'), ('const int', 'destJumpWidth'), ('const int', 'numElements')]"
49,24,kCopyToTransDestSlow,runs,"[('float *', 'srcStart'), ('float *', 'destStart'), ('unsigned int', 'srcCopyWidth'), ('unsigned int', 'srcJumpWidth'), ('unsigned int', 'destJumpHeight'), ('unsigned int', 'numElements')]"
49,25,kCopyToTransDestFast,runs,"[('float *', 'srcStart'), ('float *', 'destStart'), ('unsigned int', 'srcCopyWidth'), ('unsigned int', 'srcCopyHeight'), ('unsigned int', 'srcJumpSize'), ('unsigned int', 'destJumpSize')]"
49,26,kAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls'), ('float', 'scaleA'), ('float', 'scaleB')]"
49,27,kMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
49,28,kDivide,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
49,29,kTranspose,runs,"[('float *', 'a'), ('float *', 'dest'), ('int', 'width'), ('int', 'height')]"
49,30,kSquaredDiff,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
49,31,kAdd3,runs,"[('float *', 'a'), ('const float *', 'b'), ('const float *', 'c'), ('const unsigned int', 'numEls'), ('const float', 'scaleA'), ('const float', 'scaleB'), ('const float', 'scaleC')]"
49,32,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const int', 'srcWidth'), ('const int', 'srcHeight'), ('const int', 'tgtWidth'), ('const int', 'tgtHeight')]"
49,33,kAddRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'scaleVec')]"
49,34,kAddColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('const unsigned int', 'width'), ('const unsigned int', 'height'), ('const float', 'scaleVec')]"
49,35,kEqualsRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('const int', 'width'), ('const int', 'height')]"
49,36,kEqualsColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('const int', 'width'), ('const int', 'height')]"
49,37,kBiggerThanRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('const int', 'width'), ('const int', 'height')]"
49,38,kBiggerThanColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('const int', 'width'), ('const int', 'height')]"
49,39,kMultByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
49,40,kMultByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
49,41,kDivideByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
49,42,kDivideByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
49,43,kDumbSumCols,runs,"[('float *', 'mat'), ('float *', 'vec'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
49,46,kCopyInto,runs,"[('float *', 'images'), ('float *', 'targets'), ('const int', 'imgSize'), ('const int', 'paddingSize'), ('const int', 'numImages')]"
49,77,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
49,78,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
49,79,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
49,95,k_copy_reshape_rowmajor,runs,"[('unsigned int', 'numEls'), ('unsigned int', 'a_nd'), ('const float *', 'a_data'), ('const int *', 'a_dim'), ('const int *', 'a_str'), ('unsigned int', 'z_nd'), ('float *', 'z_data'), ('const int *', 'z_dim'), ('const int *', 'z_str')]"
49,96,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
49,100,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
49,113,hessianKernel,runs,"[('float *', 'd_output'), ('const float *', 'd_gxx'), ('const float *', 'd_gxy'), ('const float *', 'd_gxz'), ('const float *', 'd_gyy'), ('const float *', 'd_gyz'), ('const float *', 'd_gzz'), ('float', 'sigma'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD')]"
49,114,hessianKernelO,runs,"[('float *', 'd_output'), ('float *', 'd_output_theta'), ('float *', 'd_output_phi'), ('const float *', 'd_gxx'), ('const float *', 'd_gxy'), ('const float *', 'd_gxz'), ('const float *', 'd_gyy'), ('const float *', 'd_gyz'), ('const float *', 'd_gzz'), ('float', 'sigma'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD')]"
49,117,bitflip_kernel,runs,"[('float *', 'M'), ('int', 'height'), ('int', 'row'), ('int', 'n')]"
490,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
490,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
490,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
490,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
490,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
490,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
490,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
490,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
490,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
490,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
490,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
490,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
490,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
490,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
490,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
490,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
490,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
4901,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
4901,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
4901,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
4901,3,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
4901,4,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
4901,5,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
4901,6,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
4901,7,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
4901,8,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
4901,9,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
4901,10,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
4901,11,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
4901,12,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
4901,13,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
4901,14,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
4901,15,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
4901,16,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
4901,17,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
4901,18,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
4901,19,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
4901,20,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
4901,21,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
4901,22,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
4901,23,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
4901,24,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4901,25,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4901,26,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4901,27,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4901,28,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
4901,29,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
4901,30,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
4901,31,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
4901,32,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
4901,33,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
4901,34,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
4901,35,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
4901,36,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4901,37,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
4901,38,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
4901,39,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
4901,40,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
4901,41,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
4901,42,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
4901,44,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
4901,45,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
4901,46,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
4901,47,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
4901,48,forward_softmax_layer_kernel,runs,"[('int', 'n'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
4910,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4910,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4910,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4910,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4910,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4910,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4910,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
4910,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
4910,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4910,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
4910,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
4910,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
4910,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
4910,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
4910,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4910,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
4910,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
4911,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
4911,23,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
4919,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
4919,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
4919,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
4919,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
4919,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
4919,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
492,1,one_stencil,runs,"[('int *', 'A'), ('int *', 'B'), ('int', 'sizeOfA')]"
492,2,one_stencil_with_rc,runs,"[('int *', 'A'), ('int *', 'B'), ('int', 'sizeOfA')]"
492,3,k_stencil,runs,"[('int *', 'A'), ('int *', 'B'), ('int', 'sizeOfA')]"
492,4,k_stencil_with_rc,runs,"[('int *', 'A'), ('int *', 'B'), ('int', 'sizeOfA')]"
4923,5,quark_filter_gpu_sm2,runs,"[('const uint32_t', 'threads'), ('const uint32_t *', 'd_hash'), ('uint32_t *', 'd_branch2'), ('uint32_t *', 'd_NonceBranch')]"
4923,18,lyra2Z_gpu_hash_32_sm2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash'), ('uint32_t *', 'resNonces')]"
4923,20,lyra2Z_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash')]"
4923,21,lyra2Z_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint2 *', 'g_hash'), ('uint32_t *', 'resNonces')]"
4923,27,lyra2_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint64_t *', 'g_hash')]"
4923,28,lyra2_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint2 *', 'g_hash')]"
4923,30,lyra2_gpu_hash_64_3,runs,"[('uint32_t', 'threads'), ('uint2 *', 'd_hash_512'), ('const uint32_t', 'round')]"
4924,7,refine_dilateFPPlaneDepthMapXpYp_kernel,runs,"[('float *', 'fpPlaneDepthMap'), ('int', 'fpPlaneDepthMap_p'), ('float *', 'maskMap'), ('int', 'maskMap_p'), ('int', 'width'), ('int', 'height'), ('int', 'xp'), ('int', 'yp'), ('float', 'fpPlaneDepth')]"
4924,16,refine_computeBestDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float3 *', 'isims'), ('int', 'isims_p'), ('float3 *', 'idpts'), ('int', 'idpts_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
4924,17,refine_fuseThreeDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float *', 'isimLst'), ('int', 'isimLst_p'), ('float *', 'idptLst'), ('int', 'idptLst_p'), ('float *', 'isimAct'), ('int', 'isimAct_p'), ('float *', 'idptAct'), ('int', 'idptAct_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
4924,78,generateGaussian_kernel,runs,"[('float *', 'og'), ('float', 'delta'), ('int', 'radius')]"
4932,0,bpnn_layerforward_CUDA,runs,"[('float *', 'input_cuda'), ('float *', 'output_hidden_cuda'), ('float *', 'input_hidden_cuda'), ('float *', 'hidden_partial_sum'), ('int', 'in'), ('int', 'hid')]"
4932,1,bpnn_adjust_weights_cuda,runs,"[('float *', 'delta'), ('int', 'hid'), ('float *', 'ly'), ('int', 'in'), ('float *', 'w'), ('float *', 'oldw')]"
4932,2,bpnn_layerforward_CUDA,runs,"[('float *', 'input_cuda'), ('float *', 'output_hidden_cuda'), ('float *', 'input_hidden_cuda'), ('float *', 'hidden_partial_sum'), ('int', 'in'), ('int', 'hid')]"
4932,3,bpnn_adjust_weights_cuda,runs,"[('float *', 'delta'), ('int', 'hid'), ('float *', 'ly'), ('int', 'in'), ('float *', 'w'), ('float *', 'oldw')]"
4933,2,checkIndex,runs,[]
4933,3,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,4,mk_kernel,runs,"[('char *', 'keep_mem'), ('size_t', 'bytes')]"
4933,5,helloFromGPU,runs,[]
4933,6,helloFromGPU,runs,[]
4933,7,helloFromGPU,runs,[]
4933,13,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,14,sumMatrixOnGPU2D,runs,"[('int *', 'MatA'), ('int *', 'MatB'), ('int *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,17,warmup,runs,"[('int *', 'out'), ('int', 'N')]"
4933,18,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,19,reduceCompleteUnrollWarps8Sync,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,20,reduceCompleteUnrollWarps8SyncVolatile,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,21,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,22,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,23,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,24,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,25,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,26,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,27,reduceUnrolling16,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,28,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,29,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,31,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,32,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,33,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,34,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,35,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,36,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,37,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,38,reduceUnrolling8New,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,39,reduceUnrolling16,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,40,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,41,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,43,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,44,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,45,reduceInterleavedFloat,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
4933,46,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,47,reduceCompleteUnrollWarps8Float,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
4933,48,warmup,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,49,copyRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,50,copyCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,51,transposeNaiveRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,52,transposeNaiveCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,53,transposeUnroll4Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,54,transposeRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,55,transposeUnroll8Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,56,transposeUnroll4Col,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,57,transposeDiagonalRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,58,transposeDiagonalCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,59,transposeDiagonalColUnroll4,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,60,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,61,sumArraysZeroCopy,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,62,sumArraysZeroCopyWithUVA,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,65,readWriteOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,66,readWriteOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,67,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,70,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,71,sumArraysZeroCopyOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N'), ('int', 'offset')]"
4933,72,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,73,writeOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,74,readWriteOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,75,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,78,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,79,sumArraysZeroCopyWithUVAOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N'), ('int', 'offset')]"
4933,80,kernel_add_wavelet,runs,"[('float *', 'g_u2'), ('float', 'wavelets'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'ngpus')]"
4933,81,kernel_2dfd_last,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
4933,82,kernel_2dfd,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
4933,83,iKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,84,iKernel,runs,"[('float *', 'src'), ('float *', 'dst')]"
4933,85,iKernel,runs,"[('float *', 'src'), ('float *', 'dst')]"
4933,86,iKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,105,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out')]"
4933,107,stencil_1d_global,runs,"[('float *', 'in'), ('float *', 'out'), ('float *', 'dcoef')]"
4933,124,reduceGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,125,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,126,reduceSmemDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,127,reduceGmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,128,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,129,reduceSmemUnrollDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,130,reduceNeighboredGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,131,reduceNeighboredSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,132,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,133,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,141,simple_reduction,runs,"[('int *', 'shared_var'), ('int *', 'input_values'), ('int', 'N'), ('int', 'iters')]"
4933,143,helloFromGPU,runs,[]
4933,144,lots_of_float_compute,runs,"[('float *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('float *', 'outputs')]"
4933,145,lots_of_double_compute,runs,"[('double *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('double *', 'outputs')]"
4933,146,fmad_kernel,runs,"[('double', 'x'), ('double', 'y'), ('double *', 'out')]"
4933,147,kernel,runs,"[('float *', 'F'), ('double *', 'D')]"
4933,150,standard_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
4933,151,intrinsic_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
4933,152,atomics,runs,"[('int *', 'shared_var'), ('int *', 'values_read'), ('int', 'N'), ('int', 'iters')]"
4933,153,unsafe,runs,"[('int *', 'shared_var'), ('int *', 'values_read'), ('int', 'N'), ('int', 'iters')]"
4933,155,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,156,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,157,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,158,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,159,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,160,printThreadIndex,runs,"[('int *', 'A'), ('const int', 'nx'), ('const int', 'ny')]"
4933,161,checkIndex,runs,[]
4933,162,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,163,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,164,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,165,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,169,sumMatrixOnGPU2D,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'NX'), ('int', 'NY')]"
4933,176,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,177,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,178,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,179,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,180,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,181,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,182,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,183,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,185,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,186,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,188,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,191,host_api_kernel,runs,"[('float *', 'randomValues'), ('float *', 'out'), ('int', 'N')]"
4933,192,device_api_kernel,runs,"[('curandState *', 'states'), ('float *', 'out'), ('int', 'N')]"
4933,194,refill_randoms,runs,"[('float *', 'dRand'), ('int', 'N'), ('curandState *', 'states')]"
4933,196,refill_randoms,runs,"[('float *', 'dRand'), ('int', 'N'), ('curandState *', 'states')]"
4933,197,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,198,sumArraysZeroCopy,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,201,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,202,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,203,warmup,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,204,copyRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,205,copyCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,206,transposeNaiveRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,207,transposeNaiveCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,208,transposeUnroll4Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,209,transposeUnroll4Col,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,210,transposeDiagonalRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,211,transposeDiagonalCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
4933,213,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,216,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,217,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,218,readOffsetUnroll2,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,219,readOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,220,writeOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,221,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,222,writeOffsetUnroll2,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,223,writeOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
4933,224,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,225,iKernel,runs,"[('float *', 'src'), ('float *', 'dst')]"
4933,226,iKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,227,kernel_add_wavelet,runs,"[('float *', 'g_u2'), ('float', 'wavelets'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'ngpus')]"
4933,228,kernel_2dfd_last,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
4933,229,kernel_2dfd,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
4933,256,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out')]"
4933,264,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'N')]"
4933,265,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,268,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,284,reduceGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,285,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,286,reduceSmemDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,287,reduceGmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,288,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,289,reduceSmemUnrollDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,290,reduceNeighboredGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,291,reduceNeighboredSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,306,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,311,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
4933,324,kernel,runs,"[('float *', 'g_data'), ('float', 'value')]"
4933,325,warmup,runs,"[('int *', 'in'), ('int *', 'out'), ('const int', 'nx'), ('const int', 'ny')]"
4933,326,copyRow,runs,"[('int *', 'in'), ('int *', 'out'), ('const int', 'nx'), ('const int', 'ny')]"
4933,327,copyCol,runs,"[('int *', 'in'), ('int *', 'out'), ('const int', 'nx'), ('const int', 'ny')]"
4933,328,transposeNaiveRow,runs,"[('int *', 'in'), ('int *', 'out'), ('const int', 'nx'), ('const int', 'ny')]"
4933,329,transposeNaiveCol,runs,"[('int *', 'in'), ('int *', 'out'), ('const int', 'nx'), ('const int', 'ny')]"
4933,330,transposeUnroll4Row,runs,"[('int *', 'in'), ('int *', 'out'), ('const int', 'nx'), ('const int', 'ny')]"
4933,331,transposeUnroll4Col,runs,"[('int *', 'in'), ('int *', 'out'), ('const int', 'nx'), ('const int', 'ny')]"
4933,338,printThreadIndex,runs,"[('int *', 'A'), ('const int', 'nx'), ('const int', 'ny')]"
4933,339,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
4933,340,sumMatrixOnGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,341,checkIndex,runs,[]
4933,342,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
4933,343,sumMatrixOnGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
4933,345,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,346,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,347,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,348,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,349,reduceUnrollWarp8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4933,350,reduceCompUnrollW,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
4938,0,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('int *', 'histo')]"
4938,1,histo_equalization_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('int *', 'histo'), ('unsigned char *', 'output')]"
4938,2,histo_kernel_2,runs,"[('unsigned char *', 'buffer'), ('int', 'img_w'), ('int', 'img_h'), ('int *', 'histo')]"
4938,3,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('int *', 'histo')]"
4938,4,histo_equalization_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('int *', 'histo'), ('unsigned char *', 'output')]"
4938,5,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('int *', 'histo')]"
4938,6,histo_equalization_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('int *', 'histo'), ('unsigned char *', 'output')]"
4938,7,histo_kernel_2,runs,"[('unsigned char *', 'buffer'), ('int', 'img_w'), ('int', 'img_h'), ('int *', 'histo')]"
4938,8,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('int *', 'histo')]"
4938,9,histo_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('int *', 'histo')]"
4938,10,histo_equalization_kernel,runs,"[('unsigned char *', 'buffer'), ('long', 'size'), ('int *', 'histo'), ('unsigned char *', 'output')]"
4968,0,sqr_norm_kernel,runs,"[('const float *', 'in'), ('float *', 'block_res'), ('int', 'total')]"
4968,1,sqr_mag_kernel,runs,"[('const float *', 'data'), ('float *', 'result'), ('int', 'total')]"
4968,2,conj_kernel,runs,"[('const float *', 'data'), ('float *', 'result'), ('int', 'total')]"
4968,3,sum_channels,runs,"[('float *', 'dest'), ('const float *', 'src'), ('uint', 'channels'), ('uint', 'num_channel_elem')]"
4968,4,same_num_channels_mul_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('int', 'total')]"
4968,5,same_num_channels_div_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('unsigned', 'total')]"
4968,6,same_num_channels_add_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('int', 'total')]"
4968,7,constant_mul_kernel,runs,"[('const float *', 'data_l'), ('float', 'constant'), ('float *', 'result'), ('int', 'total')]"
4968,8,constant_add_kernel,runs,"[('const float *', 'data_l'), ('float', 'constant'), ('float *', 'result'), ('int', 'total')]"
4968,9,one_channel_mul_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('int', 'channel_total'), ('int', 'total')]"
497,2,reduction,runs,"[('float *', 'g_data'), ('int', 'n')]"
497,5,compute_shared,runs,"[('const int *', 'destination_offsets'), ('const int *', 'source_indices'), ('const int *', 'out_degrees'), ('const int', 'node_count'), ('const float *', 'input'), ('float *', 'output')]"
497,6,compute,runs,"[('const int *', 'destination_offsets'), ('const int *', 'source_indices'), ('const int *', 'out_degrees'), ('const int', 'node_count'), ('const float *', 'input'), ('float *', 'output')]"
497,9,compute_shared_inv,runs,"[('const int *', 'destination_offsets'), ('const int *', 'source_indices'), ('const float *', 'out_degrees'), ('const int', 'node_count'), ('const float *', 'input'), ('float *', 'output')]"
497,10,compute_inv,runs,"[('const int *', 'destination_offsets'), ('const int *', 'source_indices'), ('const float *', 'out_degrees'), ('const int', 'node_count'), ('const float *', 'input'), ('float *', 'output')]"
497,11,max_abs_diff,runs,"[('float *', 'diff'), ('const float *', 'output1'), ('const float *', 'output2'), ('const int', 'size')]"
497,12,invert,runs,"[('float *', 'output'), ('int *', 'input'), ('const int', 'size')]"
497,13,addOneElementPerThread,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
497,14,addOneRowPerThread,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
497,15,addOneColumnPerThread,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
4981,1,do_nothing,runs,[]
4989,4,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
499,6,externSet,runs,"[('int *', 'variablesMem'), ('int *', 'lastValuesMem'), ('int', 'nQueen'), ('int', 'nVariableCollection')]"
499,17,externUndoAssignParallel,runs,"[('int *', 'domain'), ('int', 'size'), ('int', 'value')]"
5002,199,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5002,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5003,4,mprts_update_offsets,runs,"[('int', 'nr_total_blocks'), ('uint *', 'd_off'), ('uint *', 'd_spine_sums')]"
5003,5,k_count_received,runs,"[('int', 'nr_total_blocks'), ('uint *', 'd_n_recv_by_block'), ('uint *', 'd_spine_cnts')]"
5003,6,k_reorder_send_buf_total,runs,"[('int', 'nr_prts'), ('int', 'nr_total_blocks'), ('uint *', 'd_bidx'), ('uint *', 'd_sums'), ('float4 *', 'd_xi4'), ('float4 *', 'd_pxi4'), ('float4 *', 'd_xchg_xi4'), ('float4 *', 'd_xchg_pxi4')]"
5003,20,k_zero_comp_xyz,runs,"[('float *', 'data'), ('uint', 'n'), ('uint', 'stride')]"
5005,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
5008,0,matrixMultKernel,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
5008,1,vecAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
501,0,euclidean_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,1,euclidean_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,2,maximum_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,3,maximum_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,4,manhattan_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,5,manhattan_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,6,canberra_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,7,canberra_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,8,binary_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,9,binary_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,10,minkowski_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,11,minkowski_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,12,dot_kernel,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,13,dot_kernel_same,runs,"[('const float *', 'vg_a'), ('size_t', 'pitch_a'), ('size_t', 'n_a'), ('const float *', 'vg_b'), ('size_t', 'pitch_b'), ('size_t', 'n_b'), ('size_t', 'k'), ('float *', 'd'), ('size_t', 'pitch_d'), ('float', 'p')]"
501,14,getColNorms,runs,"[('int', 'rows'), ('int', 'cols'), ('float *', 'da'), ('int', 'lda'), ('float *', 'colNorms')]"
501,15,gpuFindMax,runs,"[('int', 'n'), ('float *', 'data'), ('int', 'threadWorkLoad'), ('int *', 'maxIndex')]"
501,16,gpuSwapCol,runs,"[('int', 'rows'), ('float *', 'dArray'), ('int', 'coli'), ('int *', 'dColj'), ('int *', 'dPivot')]"
501,17,makeHVector,runs,"[('int', 'rows'), ('float *', 'input'), ('float *', 'output')]"
501,18,UpdateHHNorms,runs,"[('int', 'cols'), ('float *', 'dV'), ('float *', 'dNorms')]"
501,19,gpuKendall,runs,"[('const float *', 'a'), ('size_t', 'na'), ('const float *', 'b'), ('size_t', 'nb'), ('size_t', 'sampleSize'), ('double *', 'results')]"
501,20,getRestricted,runs,"[('int', 'countx'), ('int', 'county'), ('int', 'rows'), ('int', 'cols'), ('float *', 'mX'), ('int', 'mXdim'), ('float *', 'vY'), ('int', 'vYdim'), ('float *', 'mQ'), ('int', 'mQdim'), ('float *', 'mR'), ('int', 'mRdim'), ('float *', 'vectB'), ('int', 'vectBdim')]"
501,21,getUnrestricted,runs,"[('int', 'countx'), ('int', 'county'), ('int', 'rows'), ('int', 'cols'), ('float *', 'mX'), ('int', 'mXdim'), ('float *', 'vY'), ('int', 'vYdim'), ('float *', 'mQ'), ('int', 'mQdim'), ('float *', 'mR'), ('int', 'mRdim'), ('float *', 'vectB'), ('int', 'vectBdim')]"
501,22,ftest,runs,"[('int', 'diagFlag'), ('int', 'p'), ('int', 'rows'), ('int', 'colsx'), ('int', 'colsy'), ('int', 'rCols'), ('int', 'unrCols'), ('float *', 'obs'), ('int', 'obsDim'), ('float *', 'rCoeffs'), ('int', 'rCoeffsDim'), ('float *', 'unrCoeffs'), ('int', 'unrCoeffsDim'), ('float *', 'rdata'), ('int', 'rdataDim'), ('float *', 'unrdata'), ('int', 'unrdataDim'), ('float *', 'dfStats')]"
501,36,gpuMeans,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('float *', 'means'), ('float *', 'numPairs')]"
501,37,gpuSD,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'means'), ('const float *', 'numPairs'), ('float *', 'sds')]"
501,38,gpuPMCC,runs,"[('const float *', 'vectsa'), ('size_t', 'na'), ('const float *', 'vectsb'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'numPairs'), ('const float *', 'means'), ('const float *', 'sds'), ('float *', 'correlations')]"
501,39,gpuMeansNoTest,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('float *', 'means'), ('float *', 'numPairs')]"
501,40,gpuSDNoTest,runs,"[('const float *', 'vectsA'), ('size_t', 'na'), ('const float *', 'vectsB'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'means'), ('const float *', 'numPairs'), ('float *', 'sds')]"
501,41,gpuPMCCNoTest,runs,"[('const float *', 'vectsa'), ('size_t', 'na'), ('const float *', 'vectsb'), ('size_t', 'nb'), ('size_t', 'dim'), ('const float *', 'numPairs'), ('const float *', 'means'), ('const float *', 'sds'), ('float *', 'correlations')]"
501,42,gpuSignif,runs,"[('const float *', 'gpuNumPairs'), ('const float *', 'gpuCorrelations'), ('size_t', 'n'), ('float *', 'gpuTScores')]"
501,43,dUpdateSignif,runs,"[('const float *', 'gpuData'), ('size_t', 'n'), ('float *', 'gpuResults')]"
501,44,noNAsPmccMeans,runs,"[('int', 'nRows'), ('int', 'nCols'), ('float *', 'a'), ('float *', 'means')]"
501,45,scale,runs,"[('float', 'knot_max'), ('int', 'nx'), ('int', 'nsamples'), ('float *', 'x'), ('int', 'pitch_x')]"
501,46,get_bin_scores,runs,"[('int', 'nbins'), ('int', 'order'), ('int', 'nknots'), ('float *', 'knots'), ('int', 'nsamples'), ('int', 'nx'), ('float *', 'x'), ('int', 'pitch_x'), ('float *', 'bins'), ('int', 'pitch_bins')]"
501,47,get_entropy,runs,"[('int', 'nbins'), ('int', 'nsamples'), ('int', 'nx'), ('float *', 'bin_scores'), ('int', 'pitch_bin_scores'), ('float *', 'entropies')]"
501,48,get_mi,runs,"[('int', 'nbins'), ('int', 'nsamples'), ('int', 'nx'), ('float *', 'x_bin_scores'), ('int', 'pitch_x_bin_scores'), ('float *', 'entropies_x'), ('int', 'ny'), ('float *', 'y_bin_scores'), ('int', 'pitch_y_bin_scores'), ('float *', 'entropies_y'), ('float *', 'mis'), ('int', 'pitch_mis')]"
5020,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5020,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5025,0,calcmean,runs,"[('float *', 'matrix'), ('float *', 'mean')]"
5034,7,refine_dilateFPPlaneDepthMapXpYp_kernel,runs,"[('float *', 'fpPlaneDepthMap'), ('int', 'fpPlaneDepthMap_p'), ('float *', 'maskMap'), ('int', 'maskMap_p'), ('int', 'width'), ('int', 'height'), ('int', 'xp'), ('int', 'yp'), ('float', 'fpPlaneDepth')]"
5034,16,refine_computeBestDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float3 *', 'isims'), ('int', 'isims_p'), ('float3 *', 'idpts'), ('int', 'idpts_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
5034,17,refine_fuseThreeDepthSimMaps_kernel,runs,"[('float *', 'osim'), ('int', 'osim_p'), ('float *', 'odpt'), ('int', 'odpt_p'), ('float *', 'isimLst'), ('int', 'isimLst_p'), ('float *', 'idptLst'), ('int', 'idptLst_p'), ('float *', 'isimAct'), ('int', 'isimAct_p'), ('float *', 'idptAct'), ('int', 'idptAct_p'), ('int', 'width'), ('int', 'height'), ('float', 'simThr')]"
5034,79,generateGaussian_kernel,runs,"[('float *', 'og'), ('float', 'delta'), ('int', 'radius')]"
5035,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
5035,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
5035,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
5035,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
5035,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
5062,68,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
5065,0,pi,runs,"[('const struct point *', 'A'), ('int *', 'res'), ('const int', 'nbPoint'), ('const float', 'ray')]"
5065,1,pi_double,runs,"[('const struct point2 *', 'A'), ('int *', 'res'), ('const int', 'nbPoint'), ('const float', 'ray')]"
5065,2,vec_add,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,3,vec_mult,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,4,vec_div,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,5,vec_sub,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,6,vec_fma,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('float *', 'D'), ('int', 'N')]"
5065,7,vec_add_64,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'N')]"
5065,8,sum,runs,"[('int *', 'vec1'), ('int *', 'result'), ('int *', 'tmp1'), ('const int', 'count')]"
5065,9,spoc_max,runs,"[('const double *', 'input'), ('double *', 'output'), ('const int', 'size')]"
5065,10,int_bubble_filter,runs,"[('int *', 'input'), ('const int *', 'vec1'), ('int *', 'output'), ('const int', 'count')]"
5065,11,mandelbrot,runs,"[('int *', 'A'), ('const int', 'N'), ('const int', 'largeur'), ('const int', 'hauteur'), ('const int', 'start_hauteur'), ('const int', 'end_hauteur')]"
5065,12,mandelbrot,runs,"[('int *', 'A'), ('const int', 'N'), ('const int', 'largeur'), ('const int', 'hauteur')]"
5065,13,game,runs,"[('int *', 'A'), ('const int', 'N'), ('const int', 'largeur'), ('const int', 'hauteur')]"
5065,14,mandelbrot,runs,"[('int *', 'A'), ('const int', 'N'), ('const int', 'largeur'), ('const int', 'hauteur')]"
5065,15,vec_add,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'size')]"
5065,16,vec_add_double,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'size')]"
5065,17,vec_add,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'size')]"
5065,18,vec_add_double,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'size')]"
5065,19,vec_add,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,20,vec_mult,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,21,vec_div,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,22,vec_sub,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,23,vec_fma,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('float *', 'D'), ('int', 'N')]"
5065,24,vec_add_64,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'N')]"
5065,25,sum,runs,"[('int *', 'vec1'), ('int *', 'result'), ('int *', 'tmp1'), ('const int', 'count')]"
5065,26,spoc_max,runs,"[('const double *', 'input'), ('double *', 'output'), ('const int', 'size')]"
5065,27,int_bubble_filter,runs,"[('int *', 'input'), ('const int *', 'vec1'), ('int *', 'output'), ('const int', 'count')]"
5065,28,kernel_compute,runs,"[('int *', 'trainingSet'), ('int *', 'data'), ('int *', 'res'), ('int', 'setSize'), ('int', 'dataSize')]"
5065,29,vec_add,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,30,vec_mult,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,31,vec_div,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,32,vec_sub,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5065,33,vec_fma,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('float *', 'D'), ('int', 'N')]"
5065,34,vec_add_64,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'N')]"
5065,35,sum,runs,"[('int *', 'vec1'), ('int *', 'result'), ('int *', 'tmp1'), ('const int', 'count')]"
5065,36,spoc_max,runs,"[('const double *', 'input'), ('double *', 'output'), ('const int', 'size')]"
5065,37,int_bubble_filter,runs,"[('int *', 'input'), ('const int *', 'vec1'), ('int *', 'output'), ('const int', 'count')]"
5065,38,init,runs,"[('double *', 'A'), ('double *', 'V'), ('double *', 'VN'), ('int', 'size'), ('int', 'n')]"
5065,39,divide,runs,"[('double *', 'VN'), ('const double *', 'max'), ('int', 'size')]"
5065,40,norme,runs,"[('const double *', 'VN'), ('double *', 'V'), ('double *', 'v_norme'), ('int', 'size')]"
5068,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5068,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
5068,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5068,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5068,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5068,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5068,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5068,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
5068,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
5068,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
5068,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
5068,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
5068,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
5068,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
5068,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
5068,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
5068,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
508,2,end_coloring_mark,runs,[]
508,50,permute_colors_kernel,runs,"[('int', 'num_rows'), ('int *', 'row_colors'), ('int *', 'color_permutation')]"
508,51,reverse_colors_kernel,runs,"[('int', 'num_rows'), ('int', 'max_color'), ('int *', 'row_colors')]"
508,81,profileLevelUp_kernel,runs,[]
508,82,profileLevelDown_kernel,runs,[]
508,83,profileLevelZero_kernel,runs,[]
508,84,profilePhaseSetup_kernel,runs,[]
508,85,profilePhaseSolve_kernel,runs,[]
508,86,profilePhaseNone_kernel,runs,[]
508,87,profileSubphaseMatrixColoring_kernel,runs,[]
508,88,profileSubphaseSmootherSetup_kernel,runs,[]
508,89,profileSubphaseFindAggregates_kernel,runs,[]
508,90,profileSubphaseComputeRestriction_kernel,runs,[]
508,91,profileSubphaseComputeCoarseA_kernel,runs,[]
508,92,profileSubphaseNone_kernel,runs,[]
508,93,profileSubphaseTruncateP_kernel,runs,[]
509,1,check_if_unique,runs,"[('const unsigned *', 'keys'), ('unsigned *', 'is_unique'), ('size_t', 'kSize')]"
509,3,prepare_indices,runs,"[('const unsigned', 'num_keys'), ('unsigned *', 'data')]"
5094,3,spread,runs,"[('Real *', 'src'), ('unsigned int', 'spitch'), ('Real *', 'dst'), ('unsigned int', 'dpitch')]"
5094,4,spread_i,runs,"[('Real *', 'src'), ('unsigned int', 'spitch'), ('Real *', 'dst'), ('unsigned int', 'dpitch')]"
5094,6,spread_y_r,runs,"[('Real *', 'src'), ('Real *', 'dst')]"
5094,7,spread_z,runs,"[('Real *', 'src'), ('Real *', 'dst')]"
5094,9,spread_y_i_r,runs,"[('Real *', 'src'), ('Real *', 'dst')]"
5094,12,zero,runs,"[('int', 'nx'), ('int', 'ny'), ('int', 'nz'), ('Real *', 'z')]"
5094,13,copy_0,runs,"[('int', 'nx'), ('int', 'ny'), ('int', 'nz'), ('Real *', 'in'), ('Real *', 'out')]"
5094,14,copy,runs,"[('int', 'nx'), ('int', 'ny'), ('int', 'nz'), ('Real *', 'in'), ('Real *', 'out')]"
5116,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5116,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5118,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
5129,0,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
5129,3,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
5129,5,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
5129,7,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
5129,9,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
5129,11,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
5129,12,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
5129,14,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
5129,17,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
5129,20,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
5136,189,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5136,330,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
514,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
514,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
514,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
514,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
514,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
514,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
514,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
514,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
514,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
514,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
514,24,hello,runs,[]
514,28,hello,runs,[]
5145,7,random,runs,"[('unsigned int', 'seed'), ('int *', 'result')]"
5146,1,grayScale,runs,"[('uchar3 *', 'input'), ('uchar3 *', 'output')]"
5146,2,grayScale2,runs,"[('uchar3 *', 'input'), ('uchar3 *', 'output'), ('int', 'width'), ('int', 'height')]"
5146,3,grayScale3,runs,"[('uchar3 *', 'input'), ('uchar3 *', 'output'), ('int', 'width'), ('int', 'height')]"
5146,4,blur,runs,"[('uchar3 *', 'input'), ('uchar3 *', 'output'), ('int', 'width'), ('int', 'height')]"
5146,7,blendingGray,runs,"[('uchar3 *', 'input'), ('uchar3 *', 'input2'), ('uchar3 *', 'output'), ('int', 'width'), ('int', 'height'), ('float', 'coefficient')]"
5146,12,hsv2rgb,runs,"[('float *', 'inputH'), ('float *', 'inputS'), ('float *', 'inputV'), ('uchar3 *', 'output'), ('int', 'width'), ('int', 'height')]"
515,3,imgGray,runs,"[('unsigned char *', 'd_image'), ('unsigned char *', 'd_imagegray'), ('int', 'width'), ('int', 'height')]"
515,5,imgGray,runs,"[('unsigned char *', 'd_image'), ('unsigned char *', 'd_imagegray'), ('int', 'width'), ('int', 'height')]"
515,6,MultiplicarMatrices,runs,"[('float *', 'm1'), ('float *', 'm2'), ('float *', 'mr'), ('int', 'columna1'), ('int', 'fila1'), ('int', 'columna2'), ('int', 'fila2')]"
517,6,debugMark,runs,[]
517,15,debugMark,runs,[]
5171,1,TestDimensions,runs,[]
5175,21,sync_deconv_groups,runs,[]
5175,37,sync_conv_groups,runs,[]
5182,1,ShuffleRGB,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
5182,6,EncodeValues,runs,"[('float *', 'values'), ('int', 'numOfValues'), ('float *', 'output'), ('int', 'symbolSize'), ('int', 'squaredMode'), ('float *', 'dirX'), ('float *', 'dirY'), ('float *', 'negDirX'), ('float *', 'negDirY'), ('float *', 'originX'), ('float *', 'originY')]"
5182,7,DecodeValues,runs,"[('float *', 'superposition'), ('int', 'symbolSize'), ('float *', 'output'), ('float *', 'reliability'), ('int', 'numOfValues'), ('int', 'squaredMode'), ('float *', 'dirX'), ('float *', 'dirY'), ('float *', 'negDirX'), ('float *', 'negDirY'), ('float *', 'originX'), ('float *', 'originY')]"
5182,8,NormalizePositionKernel,runs,"[('float *', 'input'), ('float *', 'normalized'), ('float', 'xMax'), ('float', 'yMax')]"
5182,9,InterpolateSymbolsKernel,runs,"[('float *', 'symbolVectors'), ('int', 'symbolOneId'), ('int', 'symbolTwoId'), ('float', 'weightOne'), ('float', 'weightTwo'), ('float *', 'resultSymbol'), ('int', 'symbolSize')]"
5182,10,SumSymbolsKernel,runs,"[('float *', 'symbolOne'), ('float *', 'symbolTwo'), ('float *', 'result'), ('int', 'symbolSize')]"
5182,11,SumBasicSymbolsKernel,runs,"[('float *', 'symbolVectors'), ('int', 'symbolOneId'), ('int', 'symbolTwoId'), ('float *', 'result'), ('int', 'symbolSize')]"
5182,12,ComputeDistanceKernel,runs,"[('float *', 'symbolVectors'), ('float *', 'inputVector'), ('float *', 'distance'), ('int', 'symbolSize'), ('int', 'symbols')]"
5182,13,findMaxIndMultipleDetector,runs,"[('float *', 'input'), ('int *', 'maxInd'), ('int', 'size')]"
5182,14,oneOfNSelection,runs,"[('float *', 'buffer'), ('int *', 'index'), ('int', 'size'), ('float', 'value')]"
5182,15,dummyKernel,runs,[]
5182,16,copyKernel,runs,"[('float *', 'from'), ('float *', 'to'), ('int', 'size')]"
5182,17,detectChanges,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'result'), ('int', 'size'), ('float', 'value')]"
5182,19,crate3Dplot,runs,"[('float *', 'plotValues'), ('float', 'patchSize'), ('int', 'itemsX'), ('int', 'itemsY'), ('float', 'maxValue'), ('float *', 'vertexData')]"
5182,20,ApplyEyeMovement,runs,"[('float *', 'currentEye'), ('float *', 'stats'), ('float', 'moveFactor'), ('float', 'scaleFactor'), ('float', 'scaleBase')]"
5182,22,InputWeightsRTRLDerivativesKernel,runs,"[('float *', 'input'), ('float *', 'hiddenActivationDerivatives'), ('float *', 'recurrentWeights'), ('float *', 'inputWeightRTRLDerivatives'), ('float *', 'previousInputWeightRTRLDerivatives')]"
5182,23,RecurrentWeightsRTRLDerivativesKernel,runs,"[('float *', 'previousHiddenActivations'), ('float *', 'hiddenActivationDerivatives'), ('float *', 'recurrentWeights'), ('float *', 'recurrentWeightRTRLDerivatives'), ('float *', 'previousRecurrentWeightRTRLDerivatives')]"
5182,24,OutputDeltaKernel,runs,"[('float *', 'outputDeltas'), ('float *', 'target'), ('float *', 'outputActivations'), ('float *', 'outputActivationDerivatives')]"
5182,25,PIDControllerKernel,runs,"[('float *', 'input'), ('float *', 'goal'), ('float *', 'output'), ('float *', 'previousError'), ('float *', 'integral')]"
5182,26,CompareVectorsKernel,runs,"[('float *', 'inputOne'), ('float *', 'inputTwo'), ('float *', 'output')]"
5182,29,ChangeInputWeightsKernel,runs,"[('float *', 'inputWeights'), ('float *', 'inputWeightDeltas'), ('float *', 'outputWeights'), ('float *', 'outputDeltas'), ('float *', 'inputWeightRTRLDerivatives'), ('float', 'trainingRate'), ('float', 'momentum')]"
5182,30,ChangeRecurrentWeightsKernel,runs,"[('float *', 'recurrentWeights'), ('float *', 'recurrentWeightDeltas'), ('float *', 'outputWeights'), ('float *', 'outputDeltas'), ('float *', 'recurrentWeightRTRLDerivatives'), ('float', 'trainingRate'), ('float', 'momentum')]"
5182,31,ChangeOutputWeightsKernel,runs,"[('float *', 'outputWeights'), ('float *', 'outputWeightDeltas'), ('float *', 'outputDeltas'), ('float *', 'hiddenActivations'), ('float', 'trainingRate'), ('float', 'momentum')]"
5182,32,InitCentroidsKernel,runs,"[('float *', 'centroidCoordinates'), ('float *', 'randomNumbers'), ('float', 'minX'), ('float', 'maxX'), ('float', 'minY'), ('float', 'maxY'), ('int', 'centroids')]"
5182,33,ComputeEuklidianDistancesKernel,runs,"[('float *', 'inputImg'), ('int', 'imgWidth'), ('int', 'imgHeight'), ('float *', 'centroidCoordinates'), ('float *', 'distanceMatrix'), ('int', 'centroids'), ('int', 'inputSize')]"
5182,35,SumNewCentroidCoordinatesKernel,runs,"[('float *', 'input'), ('int', 'imgWidth'), ('int', 'imgHeight'), ('float *', 'centroidCoordinates'), ('int *', 'nearestCentroid'), ('float *', 'pointsWeight'), ('int', 'inputSize')]"
5182,36,AvgCentroidCoordinatesKernel,runs,"[('float *', 'centroidCoordinates'), ('float *', 'pointsWeight'), ('int', 'inputSize'), ('int', 'centroids')]"
5182,37,CopyInputToVisFieldKernel,runs,"[('float *', 'input'), ('float *', 'visField'), ('int', 'inputSize')]"
5182,38,MarkCentroidsKernel,runs,"[('float *', 'centroidCoordinates'), ('float *', 'visField'), ('int', 'imgWidth'), ('int', 'imgHeight'), ('int', 'centroids')]"
5182,43,LSTMDeltaKernelBPTT,runs,"[('float *', 'deltas'), ('float *', 'cellStates'), ('float *', 'previousCellStates'), ('float *', 'cellStateErrors'), ('float *', 'nextCellStateErrors'), ('float *', 'outputGateDeltas'), ('float *', 'forgetGateDeltas'), ('float *', 'nextForgetGateDeltas'), ('float *', 'inputGateDeltas'), ('float *', 'nextInputGateDeltas'), ('float *', 'cellInputDeltas'), ('float *', 'cellInputActivations'), ('float *', 'cellStateActivations'), ('float *', 'outputGateActivations'), ('float *', 'nextForgetGateActivations'), ('float *', 'inputGateActivations'), ('float *', 'cellInputActivationDerivatives'), ('float *', 'cellStateActivationDerivatives'), ('float *', 'outputGateActivationDerivatives'), ('float *', 'forgetGateActivationDerivatives'), ('float *', 'inputGateActivationDerivatives'), ('float *', 'cellInputWeights'), ('float *', 'outputGateWeights'), ('float *', 'forgetGateWeights'), ('float *', 'inputGateWeights'), ('int', 'inputCount'), ('int', 'cellCount'), ('int', 'cellsPerBlock')]"
5182,44,LSTMGateGradientKernelBPTT,runs,"[('float *', 'input'), ('float *', 'previousOutput'), ('float *', 'cellStates'), ('float *', 'inputGateDeltas'), ('float *', 'forgetGateDeltas'), ('float *', 'outputGateDeltas'), ('float *', 'outputGateWeightGradient'), ('float *', 'inputGateWeightGradient'), ('float *', 'forgetGateWeightGradient'), ('int', 'inputCount'), ('int', 'previousOutputCount'), ('int', 'cellsPerBlock')]"
5182,45,LSTMCellInputGradientKernelBPTT,runs,"[('float *', 'input'), ('float *', 'previousOutput'), ('float *', 'cellInputDeltas'), ('float *', 'cellInputWeightGradient'), ('int', 'inputCount'), ('int', 'previousOutputCount'), ('int', 'cellsPerBlock')]"
5182,47,LSTMDeltaKernel,runs,"[('float *', 'cellStateErrors'), ('float *', 'outputGateDeltas'), ('float *', 'cellStates'), ('float *', 'outputGateActivations'), ('float *', 'outputGateActivationDerivatives'), ('float *', 'deltas'), ('int', 'cellCount'), ('int', 'cellsPerBlock')]"
5182,55,OutputDeltaKernel,runs,"[('float *', 'outputDeltas'), ('float *', 'target'), ('float *', 'outputActivations'), ('float *', 'outputActivationDerivatives')]"
5182,58,ChangeInputWeightsKernel,runs,"[('float *', 'inputWeights'), ('float *', 'inputWeightDeltas'), ('float *', 'outputWeights'), ('float *', 'outputDeltas'), ('float *', 'inputWeightRTRLDerivatives'), ('float', 'trainingRate'), ('float', 'momentum')]"
5182,59,ChangeRecurrentWeightsKernel,runs,"[('float *', 'recurrentWeights'), ('float *', 'recurrentWeightDeltas'), ('float *', 'outputWeights'), ('float *', 'outputDeltas'), ('float *', 'recurrentWeightRTRLDerivatives'), ('float', 'trainingRate'), ('float', 'momentum')]"
5182,60,ChangeOutputWeightsKernel,runs,"[('float *', 'outputWeights'), ('float *', 'outputWeightDeltas'), ('float *', 'outputDeltas'), ('float *', 'hiddenActivations'), ('float', 'trainingRate'), ('float', 'momentum')]"
5182,61,InputWeightsRTRLDerivativesKernel,runs,"[('float *', 'input'), ('float *', 'hiddenActivationDerivatives'), ('float *', 'recurrentWeights'), ('float *', 'inputWeightRTRLDerivatives'), ('float *', 'previousInputWeightRTRLDerivatives')]"
5182,62,RecurrentWeightsRTRLDerivativesKernel,runs,"[('float *', 'previousHiddenActivations'), ('float *', 'hiddenActivationDerivatives'), ('float *', 'recurrentWeights'), ('float *', 'recurrentWeightRTRLDerivatives'), ('float *', 'previousRecurrentWeightRTRLDerivatives')]"
5182,63,ResetLayerKernel,runs,"[('float *', 'layer'), ('float', 'value'), ('int', 'count')]"
5182,64,CopyRectangleKernel,runs,"[('float *', 'src'), ('int', 'srcOffset'), ('int', 'srcWidth'), ('int', 'srcRectX'), ('int', 'srcRectY'), ('int', 'rectWidth'), ('int', 'rectHeight'), ('float *', 'dest'), ('int', 'destOffset'), ('int', 'destWidth'), ('int', 'destRectX'), ('int', 'destRectY')]"
5182,65,CopyRectangleCheckBoundsKernel,runs,"[('float *', 'src'), ('int', 'srcOffset'), ('int', 'srcWidth'), ('int', 'srcHeight'), ('int', 'srcRectX'), ('int', 'srcRectY'), ('int', 'rectWidth'), ('int', 'rectHeight'), ('float *', 'dest'), ('int', 'destOffset'), ('int', 'destWidth'), ('int', 'destRectX'), ('int', 'destRectY'), ('float', 'defaultValue')]"
5182,66,PrepareMeanStdDev,runs,"[('float *', 'input'), ('float *', 'delta'), ('int', 'imageWidth'), ('int', 'imageHeight')]"
5182,69,SumCentroids,runs,"[('float *', 'delta'), ('float *', 'sumDelta'), ('int', 'numOfCentroids'), ('int', 'numOfElements')]"
5182,72,Prepare_1_MeansForJoin,runs,"[('float *', 'input'), ('int', 'c_src1'), ('int', 'c_src2'), ('int', 'c_n'), ('float *', 'delta'), ('int', 'imageWidth'), ('int', 'imageHeight')]"
5182,77,LengthFromElements,runs,"[('float *', 'element1'), ('float *', 'element2'), ('float *', 'output'), ('int', 'count')]"
5182,79,InvolveVector,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputSize')]"
5182,80,Interpolate,runs,"[('float *', 'input1'), ('float *', 'input2'), ('float *', 'output'), ('float', 'weight'), ('int', 'inputSize')]"
5182,81,SetAllButOneKernel,runs,"[('float *', 'buffer'), ('float', 'value'), ('int', 'index'), ('int', 'count')]"
5182,82,SetKernel,runs,"[('float *', 'buffer'), ('int', 'offset'), ('float', 'value'), ('int', 'count')]"
5182,83,Convolution3x3Single,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'width'), ('int', 'height')]"
5182,91,LengthFromElements,runs,"[('float *', 'element1'), ('float *', 'element2'), ('float *', 'output'), ('int', 'count')]"
5182,93,InvolveVector,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputSize')]"
5182,94,Interpolate,runs,"[('float *', 'input1'), ('float *', 'input2'), ('float *', 'output'), ('float', 'weight'), ('int', 'inputSize')]"
5182,95,InterpolateFromMemBlock,runs,"[('float *', 'input1'), ('float *', 'input2'), ('float *', 'output'), ('float *', 'weightMemBlock'), ('int', 'inputSize')]"
5182,96,MatMultipl_naive,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nColsA'), ('int', 'nColsB'), ('int', 'sizeC')]"
5182,99,RBMInputForwardKernel,runs,"[('float *', 'inputPtr'), ('float *', 'outputPtr'), ('float *', 'biasPtr'), ('bool', 'applyBias'), ('int', 'thisLayerSize')]"
5182,100,RBMInputForwardAndStoreKernel,runs,"[('float *', 'inputPtr'), ('float *', 'outputPtr'), ('float *', 'biasPtr'), ('float *', 'storePtr'), ('bool', 'applyBias'), ('int', 'thisLayerSize')]"
5182,102,RBMRandomActivationKernel,runs,"[('float *', 'outputPtr'), ('float *', 'randomPtr'), ('int', 'size')]"
5182,103,RBMForwardKernel,runs,"[('float *', 'inputPtr'), ('float *', 'outputPtr'), ('float *', 'weightPtr'), ('float *', 'biasPtr'), ('float', 'sigma'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize'), ('bool', 'useDropoutMask'), ('bool', 'useDropout'), ('float', 'dropoutRate'), ('float *', 'dropoutMask')]"
5182,104,RBMForwardAndStoreKernel,runs,"[('float *', 'inputPtr'), ('float *', 'outputPtr'), ('float *', 'weightPtr'), ('float *', 'biasPtr'), ('float *', 'storedOutputPtr'), ('float', 'sigma'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize'), ('bool', 'useDropout'), ('float *', 'dropoutMask')]"
5182,108,RBMCopyFilterKernel,runs,"[('float *', 'weightPtr'), ('float *', 'filterPtr'), ('int', 'weightCount'), ('int', 'i'), ('int', 'thisLayerSize')]"
5182,110,RBMDropoutMaskKernel,runs,"[('float *', 'maskPtr'), ('float', 'dropout'), ('int', 'thisLayerSize')]"
5182,111,implantCoeffs,runs,"[('float *', 'matrices'), ('float *', 'coeffArray'), ('int', 'savedCoeffs'), ('int', 'dimsize')]"
5182,112,createCosineMatrix,runs,"[('float *', 'matrix'), ('int', 'xsize')]"
5182,113,extractCoeffs,runs,"[('const float *', 'matrices'), ('float *', 'coeffArray'), ('int', 'savedCoeffs'), ('int', 'dimsize')]"
5182,114,generateCoefficients,runs,"[('float *', 'chromosomes'), ('const int', 'chromSize'), ('const float *', 'noise'), ('const int', 'population'), ('const int', 'alpha')]"
5182,115,grow,runs,"[('float *', 'matrices'), ('const int', 'dimension'), ('const int', 'coefficients'), ('const int', 'population'), ('float *', 'chromosomes'), ('const float *', 'noise'), ('const float', 'mutationRate'), ('const int', 'kept'), ('const float *', 'fitnesses'), ('int *', 'mark'), ('const int', 'alpha')]"
5182,116,CumulateThroughTimeKernel,runs,"[('float *', 'memoryBlocks'), ('int', 'count'), ('int', 'sequenceLength')]"
5182,123,SoftmaxKernel,runs,"[('float *', 'outputPtr'), ('float', 'expSum'), ('int', 'layerSize')]"
5182,128,GaussianMinMaxField,runs,"[('float *', 'input'), ('int', 'inputCount'), ('float *', 'mins'), ('float *', 'maxes')]"
5182,130,GaussianSamplePrior,runs,"[('float *', 'input'), ('int', 'inputCount'), ('float *', 'mins'), ('float *', 'maxes'), ('float *', 'randomUniform')]"
5182,131,NegativeCorrelationForwardResetKernel,runs,"[('float *', 'outputPtr'), ('int', 'thisLayerSize')]"
5182,132,NegativeCorrelationForwardSumKernel,runs,"[('float *', 'inputPtr'), ('float *', 'outputPtr'), ('int', 'thisLayerSize')]"
5182,133,NegativeCorrelationForwardDivideKernel,runs,"[('float *', 'outputPtr'), ('int', 'thisLayerSize'), ('int', 'inputModelCount')]"
5182,148,DropoutMaskKernel,runs,"[('float *', 'dropoutMaskPtr'), ('float', 'dropout'), ('int', 'inputSize')]"
5182,149,FullyConnectedCurvatureKernel,runs,"[('float *', 'weightsGradPtr'), ('float *', 'biasGradPtr'), ('float *', 'shiftedWeightsPtr'), ('float *', 'shiftedBiasPtr'), ('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'weightGradCurvePtr'), ('float *', 'biasGradCurvePtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
5182,150,FullyConnectedEstimateLearningRateKernel,runs,"[('float *', 'weightLearningRatePtr'), ('float *', 'biasLearningRatePtr'), ('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'avgWeightGradVarPtr'), ('float *', 'avgBiasGradVarPtr'), ('float *', 'avgWeightGradCurvePtr'), ('float *', 'avgBiasGradCurvePtr'), ('float *', 'avgWeightGradCurveVarPtr'), ('float *', 'avgBiasGradCurveVarPtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
5182,152,FullyConnectedAdjustMemoryKernel,runs,"[('float *', 'weightsGradPtr'), ('float *', 'biasGradPtr'), ('float *', 'weightGradCurvePtr'), ('float *', 'biasGradCurvePtr'), ('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'avgWeightGradVarPtr'), ('float *', 'avgBiasGradVarPtr'), ('float *', 'avgWeightGradCurvePtr'), ('float *', 'avgBiasGradCurvePtr'), ('float *', 'avgWeightGradCurveVarPtr'), ('float *', 'avgBiasGradCurveVarPtr'), ('float *', 'weightMemorySizePtr'), ('float *', 'biasMemorySizePtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
5182,153,FullyConnectedUpdateMemoryKernel,runs,"[('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'avgWeightGradVarPtr'), ('float *', 'avgBiasGradVarPtr'), ('float *', 'weightMemorySizePtr'), ('float *', 'biasMemorySizePtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
5182,155,FullyConnectedShiftKernel,runs,"[('float *', 'weightPtr'), ('float *', 'biasPtr'), ('float *', 'shiftedWeightsPtr'), ('float *', 'shiftedBiasPtr'), ('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
5182,156,FullyConnectedUpdateMovingAveragesKernel,runs,"[('float *', 'weightsGradPtr'), ('float *', 'biasGradPtr'), ('float *', 'weightsGradCurvePtr'), ('float *', 'biasGradCurvePtr'), ('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'avgWeightGradVarPtr'), ('float *', 'avgBiasGradVarPtr'), ('float *', 'avgWeightGradCurvePtr'), ('float *', 'avgBiasGradCurvePtr'), ('float *', 'avgWeightGradCurveVarPtr'), ('float *', 'avgBiasGradCurveVarPtr'), ('float *', 'weightMemorySizePtr'), ('float *', 'biasMemorySizePtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
5182,157,FullyConnectedUpdateParametersKernel,runs,"[('float *', 'weightPtr'), ('float *', 'biasPtr'), ('float *', 'weightLearningRatePtr'), ('float *', 'biasLearningRatePtr'), ('float *', 'weightGradientPtr'), ('float *', 'biasGradientPtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
5182,176,ComputeHistogramKernel,runs,"[('float *', 'globalMemData'), ('int *', 'globalHist')]"
5182,190,PlotObserverScaleDownScaleKernel,runs,"[('float *', 'history'), ('int', 'nbCurves'), ('int', 'size')]"
5182,193,VectorInputDiffKernel,runs,"[('float *', 'input'), ('int', 'inputSize'), ('float *', 'referenceVector'), ('int', 'maxCells'), ('float *', 'difference')]"
5182,194,ComputeDistanceKernel,runs,"[('int', 'inputSize'), ('float *', 'distance'), ('float *', 'dimensionWeight'), ('int', 'maxCells'), ('float *', 'difference')]"
5182,195,AddLocalErrorKernel,runs,"[('int', 's1'), ('float *', 'distance'), ('float *', 'localError')]"
5182,196,AddUtilityKernel,runs,"[('int', 's1'), ('int', 's2'), ('float *', 'distance'), ('float *', 'utility')]"
5182,197,AdaptWinningFractionKernel,runs,"[('int', 's1'), ('float *', 'winningFraction'), ('int *', 'winningCount'), ('float', 'bParam'), ('int', 'maxCells')]"
5182,198,ComputeBiasTermKernel,runs,"[('float *', 'biasTerm'), ('float', 'cFactor'), ('float *', 'winningFraction'), ('int', 'activeCells'), ('int', 'maxCells')]"
5182,199,ComputeBiasedDistanceKernel,runs,"[('float *', 'distance'), ('float *', 'biasedDistance'), ('float *', 'biasTerm'), ('int', 'maxCells')]"
5182,200,CreateAndRefreshConnectionKernel,runs,"[('int', 's1'), ('int', 's2'), ('int *', 'connection'), ('int *', 'age'), ('int', 'maxCells')]"
5182,201,AdaptRefVectorKernel,runs,"[('int', 'cell'), ('float *', 'referenceVector'), ('float', 'oldErrorFraction'), ('float', 'youngErrorFraction'), ('float', 'decayFactor'), ('int *', 'winningCount'), ('float *', 'difference'), ('int', 'inputSize')]"
5182,202,IncrementConnectionAgeKernel,runs,"[('int', 'cell'), ('int *', 'connection'), ('int *', 'age'), ('int', 'maxCells')]"
5182,203,RemoveEdgesKernel,runs,"[('int *', 'connection'), ('int *', 'age'), ('int', 'maxAge'), ('int *', 'activityFlag'), ('float *', 'winningFraction'), ('int *', 'winningCount'), ('float *', 'utility'), ('float *', 'localError'), ('int *', 'neuronAge'), ('int', 'maxCells')]"
5182,204,RemoveNodeByUtilityKernel,runs,"[('int *', 'connectionMatrix'), ('int *', 'connectionAge'), ('int *', 'activityFlag'), ('float *', 'utility'), ('float', 'utilityConstant'), ('float *', 'localError'), ('int *', 'neuronAge'), ('float *', 'winningFraction'), ('int *', 'winningCount'), ('float', 'maxError'), ('int', 'maxCells')]"
5182,205,InterpolateVectorKernel,runs,"[('int', 'r'), ('int', 'q'), ('int', 'f'), ('int', 'inputSize'), ('float *', 'referenceVector')]"
5182,206,NewNodeConnectionKernel,runs,"[('int', 'f'), ('int', 'q'), ('int', 'r'), ('int *', 'activityFlag'), ('int *', 'connection'), ('int *', 'age'), ('float *', 'localError'), ('float', 'alfa'), ('int', 'maxCells'), ('float', 'errorFraction')]"
5182,207,AddAndRefreshConnectionKernel,runs,"[('int', 'node1'), ('int', 'node2'), ('int *', 'activityFlag'), ('int *', 'connection'), ('int *', 'age'), ('int', 'maxCells')]"
5182,208,TwoNodesDifferenceKernel,runs,"[('int', 'nodeOne'), ('int', 'nodeTwo'), ('int', 'vectorLength'), ('float *', 'referenceVector'), ('float *', 'twoNodesDifference')]"
5182,209,TwoNodesDistanceKernel,runs,"[('float *', 'twoNodesDifference'), ('float *', 'twoNodesDistance'), ('int', 'vectorLength')]"
5182,210,CopyVectorKernel,runs,"[('float *', 'from'), ('int', 'fromOffset'), ('float *', 'to'), ('int', 'toOffset'), ('int', 'vectorSize')]"
5182,211,DecreaseErrorAndUtilityKernel,runs,"[('float *', 'localError'), ('float *', 'utility'), ('int *', 'activityFlag'), ('int', 'maxCells'), ('float', 'beta')]"
5182,212,ComputeErrorPerWinningKernel,runs,"[('float *', 'localError'), ('int *', 'winningCount'), ('float *', 'errorPerWinning'), ('int *', 'activityFlag'), ('int', 'maxCells')]"
5182,213,SetForcesToZeroKernel,runs,"[('float *', 'force'), ('int', 'maxCells')]"
5182,216,UseForceKernel,runs,"[('float *', 'force'), ('float', 'forceFactor'), ('float *', 'pointsCoordinates'), ('int', 'maxCells')]"
5182,217,CenterOfGravityKernel,runs,"[('float *', 'pointsCoordinates'), ('float *', 'centerOfGravity'), ('int *', 'activityFlag'), ('int', 'maxCells')]"
5182,219,CopyPointsCoordinatesKernel,runs,"[('float *', 'pointsCoordinates'), ('int *', 'activityFlag'), ('float', 'xNonValid'), ('float', 'yNonValid'), ('float', 'zNonValid'), ('float *', 'dataVertex'), ('int', 'dataVertexOffset'), ('int', 'maxCells')]"
5182,220,CopyConnectionsCoordinatesKernel,runs,"[('int *', 'connectionMatrix'), ('float *', 'pointsCoordinates'), ('float *', 'vertexData'), ('int *', 'connectionCount'), ('int', 'maxCells')]"
5182,221,ComputeQuadsKernel,runs,"[('float *', 'pointsCoordinates'), ('float *', 'vertexData'), ('int', 'quadOffset'), ('float', 'textureSide'), ('int *', 'activityFlag'), ('int', 'textureWidth'), ('int', 'maxCells')]"
5182,224,WinnersKernel,runs,"[('float *', 'winner'), ('float *', 'vertexData'), ('int', 'vertexOffset'), ('float *', 'pointsCoordinates'), ('float', 'cubeSize'), ('int', 'maxCells')]"
5182,225,ComputeCubes2Kernel,runs,"[('float *', 'pointsCoordinates'), ('float *', 'vertexData'), ('int', 'quadOffset'), ('float', 'cubeSide'), ('float *', 'cubeOperation'), ('float *', 'cubeTexCoordinates'), ('int *', 'activityFlag'), ('float', 'textureWidth'), ('int', 'maxCells')]"
5182,226,ComputeCubesKernel,runs,"[('float *', 'pointsCoordinates'), ('float *', 'vertexData'), ('int', 'quadOffset'), ('float', 'cubeSide'), ('int *', 'activityFlag'), ('int', 'textureWidth'), ('int', 'maxCells')]"
5182,231,MatrixCopy_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
5182,232,Matrix_getRow_FloatId_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols'), ('const float', 'row_id')]"
5182,233,Matrix_getRow_FloatPointer_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('const float *', 'rowId'), ('int', 'empty_par1'), ('int', 'empty_par2'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols')]"
5182,234,Matrix_getCol_FloatId_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols'), ('float', 'col_id')]"
5182,235,Matrix_getCol_FloatPointer_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('const float *', 'colId'), ('int', 'empty_par1'), ('int', 'empty_par2'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols')]"
5182,236,Matrix_cos_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
5182,237,Matrix_sin_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
5182,238,Matrix_transposeFromSVDnodeCOPY,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0')]"
5182,239,Matrix_MultiplElementWise_naiveOLD,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('const float *', 'B'), ('int', 'Bcount'), ('int', 'Bcols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols')]"
5182,244,AbsKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
5182,245,RoundKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
5182,246,ExpKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
5182,247,LogKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
5182,248,FloorKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
5182,249,CeilKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
5182,250,Matrix_PermuteRows,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('const float *', 'B'), ('int', 'Bcount'), ('int', 'Bcols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols')]"
5182,258,ResetImage,runs,"[('float *', 'im'), ('int', 'size')]"
5182,259,SetValue,runs,"[('float *', 'im'), ('float', 'val'), ('int', 'size')]"
5182,260,Multiply,runs,"[('float *', 'im'), ('float', 'val'), ('int', 'size')]"
5182,261,SetVauleInIdxMinMax,runs,"[('float *', 'vector'), ('int', 'id_min'), ('int', 'id_max'), ('float', 'value')]"
5182,262,SetMatrixVauleMinMaxX,runs,"[('float *', 'matrix'), ('int', 'cols'), ('int', 'size'), ('int', 'id_min'), ('int', 'id_max'), ('float', 'value')]"
5182,263,SetMatrixVauleMinMaxY,runs,"[('float *', 'matrix'), ('int', 'cols'), ('int', 'size'), ('int', 'id_min'), ('int', 'id_max'), ('float', 'value')]"
5182,264,MatrixCopy,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
5182,265,Dist_between_two_vec_naive,runs,"[('float *', 'v0'), ('float *', 'v1'), ('int', 'size'), ('float *', 'dst')]"
5182,266,Sum,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'size')]"
5182,267,Round,runs,"[('float *', 'A'), ('float *', 'out'), ('int', 'size')]"
5182,268,ElementwiseNorm,runs,"[('float *', 'A'), ('float *', 'B'), ('int', 'size')]"
5182,271,getRow_naive,runs,"[('const float *', 'A'), ('float *', 'row_id'), ('float *', 'out'), ('int', 'Acols')]"
5182,272,getRow_IntId_naive,runs,"[('const float *', 'A'), ('int', 'row_id'), ('float *', 'out'), ('int', 'Acols')]"
5182,273,Matrix_getCol_FloatId_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols'), ('float', 'col_id')]"
5182,274,Matrix_getRow_FloatId_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols'), ('float', 'row_id')]"
5182,275,NN_naive,runs,"[('float *', 'A'), ('int', 'colsA'), ('int', 'sizeA'), ('float *', 'B'), ('int', 'colsB'), ('int', 'numsB'), ('int', 'dim'), ('float *', 'idx'), ('float *', 'dist')]"
5182,276,MaskInput,runs,"[('float *', 'image'), ('float *', 'mask'), ('float *', 'maskedValues'), ('float *', 'output'), ('int', 'count')]"
5182,277,MaskByNaN,runs,"[('float *', 'inputImage'), ('float *', 'mask'), ('float *', 'outputImage'), ('int', 'count')]"
5182,278,ApplyThreshold,runs,"[('float *', 'probabilitiesInputs'), ('float *', 'binaryOutput'), ('float *', 'probability'), ('int', 'count')]"
5182,280,UpdateCC_XY,runs,"[('float *', 'CCXY'), ('int', 'id_CC'), ('float *', 'XY_tofill'), ('int', 'dim_XY')]"
5182,282,ApplyBrainsMovement,runs,"[('float *', 'CCXY'), ('int', 'dim_XY'), ('float *', 'movement'), ('int', 'dim_movement'), ('int', 'max_clusters')]"
5182,283,Copy_A_to_B,runs,"[('float *', 'A'), ('float *', 'B'), ('int', 'size')]"
5182,284,Copy_matA_to_matB_withShuffleIdx,runs,"[('float *', 'A'), ('float *', 'B'), ('int', 'size'), ('int', 'cols'), ('float *', 'new_idxs'), ('int', 'max_rows')]"
5182,297,FillAdjacencyMatrix,runs,"[('float *', 'adj_mat'), ('float *', 'maskBuffer'), ('int', 'size'), ('int', 'cols'), ('int', 'rows'), ('int', 'Nsegs')]"
5182,298,CumulatePositionOfNewObjects,runs,"[('float *', 'mask'), ('float *', 'maskNewIds'), ('float *', 'maskOut'), ('int', 'mask_size'), ('int', 'mask_cols'), ('float *', 'centers'), ('int', 'centers_size'), ('int', 'centers_columns')]"
5182,303,OFConvert2AngleSize,runs,"[('float *', 'of'), ('int', 'imageSize')]"
5182,305,UdpateEnergyTerm_movement,runs,"[('float *', 'energy'), ('int', 'energy_dim'), ('int', 'nPatches'), ('float *', 'desc'), ('int', 'desc_dim'), ('int', 'id_desc_move')]"
5182,306,UdpateEnergyTerm_time,runs,"[('float *', 'energy'), ('int', 'energy_dim'), ('int', 'nPatches'), ('float *', 'idFocuser_focused'), ('float', 'par_time_increase_energy_on_focus'), ('float', 'par_time_decrease_energy_in_time')]"
5182,313,DrawRgbBackgroundKernel,runs,"[('float *', 'target'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('float', 'r'), ('float', 'g'), ('float', 'b')]"
5182,315,DrawRgbaColorKernel,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('int', 'areaWidth'), ('int', 'areaHeight'), ('float', 'r'), ('float', 'g'), ('float', 'b')]"
5182,316,DrawRgbaTextureKernel,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'texture'), ('int', 'textureWidth'), ('int', 'textureHeight')]"
5182,317,DrawRgbaTextureKernelNearestNeighbor,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'texture'), ('int', 'textureWidth'), ('int', 'textureHeight'), ('int', 'objectWidth'), ('int', 'objectHeight')]"
5182,318,DrawMaskedColorKernelNearestNeighbor,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'texture'), ('int', 'textureWidth'), ('int', 'textureHeight'), ('int', 'objectWidth'), ('int', 'objectHeight'), ('float', 'r'), ('float', 'g'), ('float', 'b')]"
5182,319,DrawRgbaTextureKernel2DBlock,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'texture'), ('int', 'textureWidth'), ('int', 'textureHeight')]"
5182,320,DrawMaskedColorKernel,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'textureMask'), ('int', 'textureWidth'), ('int', 'textureHeight'), ('float', 'r'), ('float', 'g'), ('float', 'b')]"
5182,321,DrawMaskedColorKernel2DBlock,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'textureMask'), ('int', 'textureWidth'), ('int', 'textureHeight'), ('float', 'r'), ('float', 'g'), ('float', 'b')]"
5182,326,InvertValuesKernel,runs,"[('float *', 'input'), ('float *', 'outputs'), ('int', 'size')]"
5182,328,InvertPermutationKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
5182,329,IntervalToBinaryVector,runs,"[('float', 'input'), ('float *', 'outputs'), ('int', 'steps')]"
5182,331,AbsoluteValueKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
5182,332,ModuloKernel,runs,"[('float *', 'input'), ('int', 'divisor'), ('float *', 'output'), ('int', 'size')]"
5182,333,RoundKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
5182,334,FloorKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
5182,335,CeilKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
5182,336,CropKernel,runs,"[('float', 'min'), ('float', 'max'), ('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
5182,337,ThresholdKernel,runs,"[('float', 'min'), ('float', 'max'), ('int', 'mode'), ('float *', 'input'), ('float *', 'output'), ('int', 'size'), ('int', 'count')]"
5182,338,PolynomialFunctionKernel,runs,"[('float', 'a3'), ('float', 'a2'), ('float', 'a1'), ('float', 'a0'), ('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
5182,339,PolynomialFunctionKernel_Double,runs,"[('float', 'a3'), ('float', 'a2'), ('float', 'a1'), ('float', 'a0'), ('double *', 'input'), ('double *', 'output'), ('int', 'size')]"
5182,340,LinearFunctionKernelDouble,runs,"[('double', 'a1'), ('double', 'a0'), ('double *', 'input'), ('double *', 'output'), ('int', 'size')]"
5182,341,LinearValuesKernel,runs,"[('const float', 'min'), ('const float', 'max'), ('float *', 'output'), ('const int', 'size'), ('const int', 'shift')]"
5182,342,GoniometricFunctionKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('const int', 'size'), ('const int', 'type')]"
5182,343,ExponentialFunctionKernel,runs,"[('float', 'exponent'), ('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
5182,344,LogarithmicFunctionKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size'), ('const int', 'type')]"
5182,346,LinearCombinationKernel,runs,"[('float *', 'input1'), ('float', 'input1_coeff'), ('int', 'input1_start_index'), ('float *', 'input2'), ('float', 'input2_coeff'), ('int', 'input2_start_index'), ('float *', 'output'), ('int', 'output_start_index'), ('int', 'size')]"
5182,348,UniformNormalDistribution,runs,"[('float *', 'from'), ('float *', 'to'), ('int', 'size')]"
5182,350,PrepareDerivativesKernel,runs,"[('float *', 'input'), ('float *', 'lastInput'), ('float *', 'derivatives'), ('int', 'inputWidth'), ('int', 'inputHeight')]"
5182,352,FinalizeVelocityKernel,runs,"[('float *', 'velocities'), ('float *', 'globalFlow'), ('int', 'inputWidth'), ('int', 'inputHeight')]"
5182,374,BilinearResampleKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
5182,375,ExactResampleKernel_1toN,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
5182,376,ExactResampleKernel_Nto1,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
5182,377,NNResampleKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
5182,378,CutSubImageKernel_SingleParams,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'subImageX'), ('float', 'subImageY'), ('float', 'subImageDiameter'), ('bool', 'safeBounds'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
5182,379,BilinearResampleSubImageKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'subImageDefs'), ('bool', 'safeBounds'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
5182,380,BilinearResampleSubImageKernel_ForManyProposals,runs,"[('const float *', 'input'), ('float *', 'output'), ('const float *', 'subImageDefs'), ('bool', 'safeBounds'), ('int', 'subImageDefsDim'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight'), ('int', 'numberSubImages'), ('int', 'outputSize')]"
5182,381,BilinearAddSubImageKernel,runs,"[('float *', 'input'), ('float *', 'opImage'), ('float *', 'subImageDefs'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'opImageWidth'), ('int', 'opImageHeight')]"
5182,383,Crop2DKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'size'), ('int', 'leftMargin'), ('int', 'topMargin'), ('float', 'fillValue')]"
5182,384,RetinaTransform_HaveAtLeastOneValueThere,runs,"[('float *', 'subImageDefs'), ('float *', 'input'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('float *', 'output'), ('int', 'outputDataSize'), ('float *', 'retinaMask'), ('int', 'retinaDataSize'), ('int', 'retinaMaskColHint'), ('float *', 'retinaDataInserted')]"
5182,385,RetinaTransform_FillRetinaAtomic,runs,"[('float *', 'subImageDefs'), ('float *', 'input'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('float *', 'output'), ('int', 'outputDataSize'), ('float *', 'retinaMask'), ('int', 'retinaDataSize'), ('int', 'retinaMaskColHint'), ('float *', 'retinaDataInserted')]"
5183,0,add_kernel,runs,"[('Para *', 'para'), ('int', 'size')]"
5183,1,matrixMul_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5183,20,matrixMul_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
5183,40,matrixMul_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
52,0,sequence_gpu,runs,"[('int *', 'd_ptr'), ('int', 'length')]"
520,1,modifyArrayKernel,runs,"[('int *', 'val'), ('int *', 'arr')]"
520,4,testKernel,runs,"[('int *', 's'), ('const int *', 're')]"
520,5,minValue,runs,"[('int *', 'source'), ('int *', 'val')]"
520,7,arrayReduce,runs,"[('int *', 'm'), ('int *', 'ms')]"
520,8,cleanCopy,runs,"[('int *', 'S'), ('int *', 'D')]"
5203,1,render_init,runs,"[('int', 'max_x'), ('int', 'max_y'), ('curandState *', 'rand_state')]"
5206,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
5206,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
5206,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
5206,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
5206,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
5216,0,test_float_1D,runs,"[('float *', 'output'), ('float', 'posX')]"
5216,1,test_float_2D,runs,"[('float *', 'output'), ('float', 'posX'), ('float', 'posY')]"
5216,2,test_float_3D,runs,"[('float *', 'output'), ('float', 'posX'), ('float', 'posY'), ('float', 'posZ')]"
5216,3,test_float4_1D,runs,"[('float4 *', 'output'), ('float', 'posX')]"
5216,4,test_float4_2D,runs,"[('float4 *', 'output'), ('float', 'posX'), ('float', 'posY')]"
5216,5,test_float4_3D,runs,"[('float4 *', 'output'), ('float', 'posX'), ('float', 'posY'), ('float', 'posZ')]"
5217,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5217,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5217,3,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5217,4,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5217,5,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5217,6,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5223,0,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
5223,1,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
5224,0,convolve,runs,"[('const int', 'input_width'), ('const int', 'input_height'), ('const int', 'kernel_radius'), ('float *', 'output')]"
5226,1,vectorAddition,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'numElements')]"
5226,2,vectorSubtraction,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'numElements')]"
5226,3,vectorScaling,runs,"[('const double *', 'A'), ('double', 's'), ('double *', 'C'), ('int', 'numElements')]"
5226,5,matrixMultiplication,runs,"[('double *', 'M'), ('double *', 'N'), ('double *', 'P'), ('int', 'widthAHeightB'), ('int', 'heightA'), ('int', 'widthB')]"
5226,6,matrixTransposeSqr,runs,"[('double *', 'P'), ('double *', 'M'), ('int', 'width'), ('int', 'height')]"
5226,7,MatrixMulVarKernel,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'widthAHeightB'), ('int', 'heightA'), ('int', 'widthB')]"
5226,8,MatrixMulVarSharedMemoryKernel,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'widthAHeightB'), ('int', 'heightA'), ('int', 'widthB')]"
5226,9,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
5226,10,checkIndex,runs,[]
5226,11,vectorAdd,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'numElements')]"
5226,13,testKernel,runs,"[('float *', 'g_idata'), ('float *', 'g_odata')]"
5226,14,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
5226,15,total,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
5226,16,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
5226,17,MatrixMulKernel,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'Width')]"
5226,18,MatrixMulKernel,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'Width')]"
5239,90,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
5239,91,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
5241,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5241,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5243,0,add,runs,"[('int', 'N'), ('float *', 'x')]"
5243,3,checkIndex,runs,[]
5243,4,vectorAdd,runs,"[('int *', 'A'), ('int', 'numElements')]"
5243,5,checkIndex,runs,[]
5243,6,vectorAdd,runs,"[('int *', 'A'), ('int', 'numElements')]"
5243,7,add,runs,"[('int *', 'fData'), ('int *', 'sData'), ('int *', 'oData'), ('int', 'x'), ('int', 'y')]"
5243,8,sub,runs,"[('int *', 'fData'), ('int *', 'sData'), ('int *', 'oData'), ('int', 'x'), ('int', 'y')]"
5243,0,add,runs,"[('int', 'N'), ('float *', 'x')]"
5243,3,checkIndex,runs,[]
5243,4,vectorAdd,runs,"[('int *', 'A'), ('int', 'numElements')]"
5243,5,checkIndex,runs,[]
5243,6,vectorAdd,runs,"[('int *', 'A'), ('int', 'numElements')]"
5243,7,add,runs,"[('int *', 'fData'), ('int *', 'sData'), ('int *', 'oData'), ('int', 'x'), ('int', 'y')]"
5243,8,sub,runs,"[('int *', 'fData'), ('int *', 'sData'), ('int *', 'oData'), ('int', 'x'), ('int', 'y')]"
5248,0,matrixMulCUDA1,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'n')]"
5248,1,matrixMulCUDA2,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'n')]"
5248,2,matrixMulCUDA3,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'n')]"
5251,10,ker_gkylCartFieldAccumulate,runs,"[('unsigned', 's'), ('unsigned', 'nv'), ('double', 'fact'), ('const double *', 'inp'), ('double *', 'out')]"
5251,11,ker_gkylCartFieldAccumulateOffset,runs,"[('unsigned', 'sInp'), ('unsigned', 'sOut'), ('unsigned', 'nCells'), ('unsigned', 'compStart'), ('unsigned', 'nCompInp'), ('unsigned', 'nCompOut'), ('double', 'fact'), ('const double *', 'inp'), ('double *', 'out')]"
5251,12,ker_gkylCartFieldAssign,runs,"[('unsigned', 's'), ('unsigned', 'nv'), ('double', 'fact'), ('const double *', 'inp'), ('double *', 'out')]"
5251,13,ker_gkylCartFieldScale,runs,"[('unsigned', 's'), ('unsigned', 'nv'), ('double', 'fact'), ('double *', 'out')]"
5251,14,ker_gkylCartFieldAbs,runs,"[('unsigned', 's'), ('unsigned', 'nv'), ('double *', 'out')]"
5251,16,ker_gkylCartFieldAssignAll,runs,"[('unsigned', 's'), ('unsigned', 'nv'), ('double', 'val'), ('double *', 'out')]"
5252,25,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
5252,26,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo')]"
5252,32,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
5252,35,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
5253,0,rnd_init,runs,"[('size_t', '_count'), ('curandState *', '_state')]"
5262,28,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
5262,31,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
5262,43,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
5262,44,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5262,55,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5263,180,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5263,320,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
528,0,kernel,runs,"[('bool *', 'adj_mat'), ('const int', 'N'), ('bool *', 'visited'), ('int *', 'frontier'), ('bool *', 'new_frontier'), ('bool *', 'par_mat'), ('int *', 'cap_mat'), ('int *', 'cap_max_mat')]"
528,1,k2,runs,"[('const int', 'N'), ('bool *', 'visited'), ('int *', 'frontier'), ('bool *', 'new_frontier')]"
528,2,kernel,runs,"[('bool *', 'adj_mat'), ('const int', 'N'), ('bool *', 'visited'), ('int *', 'frontier'), ('bool *', 'new_frontier'), ('bool *', 'par_mat'), ('int *', 'cap_mat'), ('int *', 'cap_max_mat')]"
528,3,k2,runs,"[('const int', 'N'), ('bool *', 'visited'), ('int *', 'frontier'), ('bool *', 'new_frontier'), ('bool *', 'augFound')]"
528,4,k3,runs,"[('const int', 'N'), ('int *', 'augPath'), ('bool *', 'visited'), ('int *', 'frontier'), ('bool *', 'new_frontier'), ('bool *', 'par_mat'), ('int *', 'cap_mat'), ('bool *', 'adj_mat'), ('int *', 'cap_max_mat'), ('int *', 'maxflow'), ('bool *', 'augFound')]"
528,5,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
5280,7,mul_kernel,runs,"[('const int', 'n'), ('const float *', 'a'), ('const float *', 'b'), ('float *', 'y')]"
5280,8,multi_scale_kernel,runs,"[('const float *', 'data_in'), ('const float *', 'scale'), ('float *', 'data_out'), ('int', 'width'), ('int', 'height')]"
5280,9,set_kernel,runs,"[('const int', 'n'), ('const float', 'alpha'), ('float *', 'y')]"
5280,23,make_pillar_feature_kernel,runs,"[('float *', 'dev_pillar_point_feature_in_coors'), ('float *', 'dev_pillar_point_feature'), ('float *', 'dev_pillar_coors'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_num_points_per_pillar'), ('const int', 'max_points'), ('const int', 'num_point_feature'), ('const int', 'grid_x_size')]"
5280,25,sort_boxes_by_indexes_kernel,runs,"[('float *', 'filtered_box'), ('int *', 'filtered_label'), ('int *', 'filtered_dir'), ('float *', 'box_for_nms'), ('int *', 'indexes'), ('int', 'filter_count'), ('float *', 'sorted_filtered_boxes'), ('int *', 'sorted_filtered_label'), ('int *', 'sorted_filtered_dir'), ('float *', 'sorted_box_for_nms'), ('const int', 'num_box_corners'), ('const int', 'num_output_box_feature')]"
5280,28,scan_y,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
5280,30,scatter_kernel,runs,"[('int *', 'x_coors'), ('int *', 'y_coors'), ('float *', 'pfe_output'), ('float *', 'scattered_feature'), ('const int', 'max_num_pillars_'), ('const int', 'grid_x_size'), ('const int', 'grid_y_size')]"
5280,31,fill_lower_left_gpu,runs,"[('int *', 'iRow'), ('int *', 'jCol'), ('unsigned int *', 'rind_L'), ('unsigned int *', 'cind_L'), ('const int', 'nnz_L')]"
5295,0,kernel_colorSpaceYUV420PToRGBA,runs,"[('dev_t *', 'src'), ('dev_t *', 'dst'), ('int', 'pitch_src'), ('int', 'pitch_dst'), ('int', 'w'), ('int', 'h')]"
5295,1,kernel_colorSpaceRGBAToYUV420P,runs,"[('dev_t *', 'src'), ('dev_t *', 'dst'), ('int', 'pitch_src'), ('int', 'pitch_dst'), ('int', 'w'), ('int', 'h')]"
5295,2,kernel_horizontalReversal,runs,"[('dev_t *', 'src'), ('dev_t *', 'dst'), ('uint', 'pitch_src'), ('uint', 'pitch_dst'), ('uint', 'pixel_w'), ('uint', 'pixel_h')]"
5295,3,kernel_verticalReversal,runs,"[('dev_t *', 'src'), ('dev_t *', 'dst'), ('uint', 'pitch_src'), ('uint', 'pitch_dst'), ('uint', 'pixel_w'), ('uint', 'pixel_h')]"
5295,4,kernel_renderRGBA2Surface,runs,"[('cudaSurfaceObject_t', 'surface'), ('dev_t *', 'src'), ('int', 'pitch'), ('int', 'pixel_w'), ('int', 'pixel_h')]"
5299,1,vectorAddition,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'numElements')]"
5299,2,vectorSubtraction,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'numElements')]"
5299,3,vectorScaling,runs,"[('const double *', 'A'), ('double', 's'), ('double *', 'C'), ('int', 'numElements')]"
5299,5,matrixMultiplication,runs,"[('double *', 'M'), ('double *', 'N'), ('double *', 'P'), ('int', 'widthAHeightB'), ('int', 'heightA'), ('int', 'widthB')]"
5299,6,matrixTransposeSqr,runs,"[('double *', 'P'), ('double *', 'M'), ('int', 'width'), ('int', 'height')]"
5299,7,MatrixMulVarKernel,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'widthAHeightB'), ('int', 'heightA'), ('int', 'widthB')]"
5299,8,MatrixMulVarSharedMemoryKernel,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'widthAHeightB'), ('int', 'heightA'), ('int', 'widthB')]"
5299,9,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
5299,10,checkIndex,runs,[]
5299,11,vectorAdd,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'numElements')]"
5299,13,testKernel,runs,"[('float *', 'g_idata'), ('float *', 'g_odata')]"
5299,14,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
5299,15,total,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
5299,16,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
5299,17,MatrixMulKernel,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'Width')]"
5299,18,MatrixMulKernel,runs,"[('float *', 'M'), ('float *', 'N'), ('float *', 'P'), ('int', 'Width')]"
5313,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
5324,0,multiplyDigits,runs,"[('char *', 'd_str1'), ('char *', 'd_str2'), ('int *', 'd_matrix'), ('int', 'str1_len'), ('int', 'str2_len')]"
5324,1,propagateCarries,runs,"[('int *', 'd_matrix'), ('int', 'numCols')]"
5324,2,sumCols,runs,"[('int *', 'd_matrix'), ('int *', 'd_result'), ('int', 'numRows'), ('int', 'numCols')]"
5325,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5325,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5330,0,ca_forward_kernel,runs,"[('const float *', 't'), ('const float *', 'f'), ('float *', 'weight'), ('int', 'num'), ('int', 'chn'), ('int', 'height'), ('int', 'width')]"
5330,1,ca_backward_kernel_t,runs,"[('const float *', 'dw'), ('const float *', 't'), ('const float *', 'f'), ('float *', 'dt'), ('int', 'num'), ('int', 'chn'), ('int', 'height'), ('int', 'width')]"
5330,2,ca_backward_kernel_f,runs,"[('const float *', 'dw'), ('const float *', 't'), ('const float *', 'f'), ('float *', 'df'), ('int', 'num'), ('int', 'chn'), ('int', 'height'), ('int', 'width')]"
5330,3,ca_map_forward_kernel,runs,"[('const float *', 'weight'), ('const float *', 'g'), ('float *', 'out'), ('int', 'num'), ('int', 'chn'), ('int', 'height'), ('int', 'width')]"
5330,4,ca_map_backward_kernel_w,runs,"[('const float *', 'dout'), ('const float *', 'weight'), ('const float *', 'g'), ('float *', 'dw'), ('int', 'num'), ('int', 'chn'), ('int', 'height'), ('int', 'width')]"
5330,5,ca_map_backward_kernel_g,runs,"[('const float *', 'dout'), ('const float *', 'weight'), ('const float *', 'g'), ('float *', 'dg'), ('int', 'num'), ('int', 'chn'), ('int', 'height'), ('int', 'width')]"
5330,7,forward_kernel,runs,"[('const float *', 'x'), ('const float *', 'mean'), ('const float *', 'var'), ('const float *', 'weight'), ('const float *', 'bias'), ('float *', 'y'), ('float *', 'z'), ('float', 'eps'), ('int', 'N'), ('int', 'C'), ('int', 'S')]"
5330,9,backward_kernel,runs,"[('const float *', 'dz'), ('const float *', 'z'), ('const float *', 'var'), ('const float *', 'weight'), ('const float *', 'bias'), ('const float *', 'edz'), ('const float *', 'eydz'), ('float *', 'dx'), ('float *', 'dweight'), ('float *', 'dbias'), ('float', 'eps'), ('int', 'N'), ('int', 'C'), ('int', 'S')]"
5335,204,cuda_debug_kernel,runs,[]
5339,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
5339,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
5339,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
5339,8,null_kernel,runs,[]
5339,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
535,0,parallel_passwordCrack,runs,"[('int', 'length'), ('int *', 'd_output'), ('int *', 'a')]"
5350,0,add_bias_kernel,runs,"[('int', 'n'), ('float *', 'data_out'), ('const float *', 'bias'), ('const int', 'out_channels'), ('const int', 'height_out'), ('const int', 'width_out')]"
5350,1,calculate_dbias_kernel,runs,"[('int', 'n'), ('const float *', 'grad_output'), ('float *', 'grad_bias'), ('const int', 'out_channels'), ('const int', 'height_out'), ('const int', 'width_out')]"
5351,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
5351,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
5351,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
5351,8,null_kernel,runs,[]
5351,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
536,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5366,0,ForwardCrossEntropy,runs,"[('float *', 'output'), ('float *', 'labels'), ('int', 'nColsOutput'), ('float *', 'loss')]"
5366,1,BackwardCrossEntropy,runs,"[('float *', 'output'), ('float *', 'labels'), ('int', 'nColsOutput'), ('float *', 'dOutput')]"
5366,2,ForwardSigmoid,runs,"[('float *', 'Z'), ('int', 'nRowsZ'), ('int', 'nColsZ'), ('float *', 'A')]"
5366,3,BackwardSigmoid,runs,"[('float *', 'Z'), ('float *', 'dA'), ('int', 'nRowsdZ'), ('int', 'nColsdZ'), ('float *', 'dZ')]"
5366,4,ForwardLinear,runs,"[('float *', 'A'), ('float *', 'W'), ('float *', 'b'), ('int', 'nRowsW'), ('int', 'nColsW'), ('int', 'nColsA'), ('float *', 'Z')]"
5366,5,BackwardLinear,runs,"[('float *', 'dZ'), ('float *', 'W'), ('int', 'nColsW'), ('int', 'nRowsW'), ('int', 'nColsdZ'), ('float *', 'dA')]"
5366,6,UpdateParamsLinear,runs,"[('float *', 'dZ'), ('float *', 'A'), ('int', 'nRowsdZ'), ('int', 'nColsdZ'), ('int', 'nRowsA'), ('float', 'lr'), ('float *', 'W'), ('float *', 'b')]"
5366,7,ForwardReLU,runs,"[('float *', 'Z'), ('int', 'nRowsZ'), ('int', 'nColsZ'), ('float *', 'A')]"
5366,8,BackwardReLU,runs,"[('float *', 'Z'), ('float *', 'dA'), ('int', 'nRowsdZ'), ('int', 'nColsdZ'), ('float *', 'dZ')]"
5366,9,ForwardSoftmax,runs,"[('float *', 'Z'), ('int', 'nColsZ'), ('float *', 'sumExp'), ('float *', 'A')]"
5366,10,BackwardSoftmax,runs,"[('float *', 'A'), ('float *', 'dA'), ('int', 'nColsdZ'), ('float *', 'dZ')]"
5373,15,set_array_double,runs,"[('double *', 'a'), ('double', 'value'), ('size_t', 'len')]"
5373,16,STREAM_Copy,runs,"[('float *', 'a'), ('float *', 'b'), ('size_t', 'len')]"
5373,17,STREAM_Copy_double,runs,"[('double *', 'a'), ('double *', 'b'), ('size_t', 'len')]"
5373,18,STREAM_Copy_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('size_t', 'len')]"
5373,19,STREAM_Copy_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('size_t', 'len')]"
5373,20,STREAM_Scale,runs,"[('float *', 'a'), ('float *', 'b'), ('float', 'scale'), ('size_t', 'len')]"
5373,21,STREAM_Scale_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double', 'scale'), ('size_t', 'len')]"
5373,22,STREAM_Scale_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float', 'scale'), ('size_t', 'len')]"
5373,23,STREAM_Scale_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double', 'scale'), ('size_t', 'len')]"
5373,24,STREAM_Add,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('size_t', 'len')]"
5373,25,STREAM_Add_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('size_t', 'len')]"
5373,26,STREAM_Add_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('size_t', 'len')]"
5373,27,STREAM_Add_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('size_t', 'len')]"
5373,28,STREAM_Triad,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float', 'scalar'), ('size_t', 'len')]"
5373,29,STREAM_Triad_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double', 'scalar'), ('size_t', 'len')]"
5373,30,STREAM_Triad_Optimized,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float', 'scalar'), ('size_t', 'len')]"
5373,31,STREAM_Triad_Optimized_double,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double', 'scalar'), ('size_t', 'len')]"
5375,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5375,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
538,0,init_r,runs,"[('float *', 'r'), ('int', 'N_cube')]"
538,2,potForce,runs,"[('float *', 'PairWise'), ('int', 'N'), ('float *', 'PotOut'), ('float *', 'ForceOut')]"
538,3,kinematics,runs,"[('float *', 'positions'), ('float *', 'force'), ('float *', 'vel'), ('int', 'len')]"
538,4,kinematics_phase1,runs,"[('float *', 'positions'), ('float *', 'force'), ('float *', 'vel'), ('int', 'len')]"
538,5,kinematics_phase2,runs,"[('float *', 'force'), ('float *', 'vel'), ('int', 'len')]"
538,6,total,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
538,7,forcered_simple,runs,"[('float *', 'force'), ('float *', 'forcered')]"
538,8,newForceReduction,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'startunit'), ('int', 'len')]"
5386,59,g_updatePrimalVar,runs,"[('float *', 'u'), ('float *', 'u_bar'), ('float *', 'u_diff'), ('const float *', 'p'), ('const float *', 'f'), ('const float *', 'scalar_op'), ('float', 'tau'), ('float', 'theta'), ('size_t', 'width'), ('size_t', 'height'), ('size_t', 'channels'), ('const bool *', 'mask')]"
5387,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5387,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
5387,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5387,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5387,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5387,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5387,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
5387,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
5387,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
5387,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
5387,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
5387,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
5387,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
5387,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
5387,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
5387,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
5387,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
5391,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5391,2,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
5391,3,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
5398,1,reduce_sum_kernel,runs,"[('const float *', 'input'), ('float *', 'd_out'), ('int', 'size')]"
54,0,computeMI_Kernel,runs,"[('float *', 'MIs'), ('uint8_t *', 'input'), ('int', 'rowCount'), ('int', 'colCount'), ('int *', 'countNZ'), ('int', 'offset')]"
5405,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5405,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5415,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5415,1,render_init,runs,"[('int', 'max_x'), ('int', 'max_y'), ('curandState *', 'rand_state')]"
5419,3,channels_first,runs,"[('float *', 'input'), ('float *', 'rinput'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'pad_size')]"
5419,4,Correlation_forward,runs,"[('float *', 'output'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
5419,5,Correlation_backward_input1,runs,"[('int', 'item'), ('float *', 'gradInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
5419,6,Correlation_backward_input2,runs,"[('int', 'item'), ('float *', 'gradInput2'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
5433,14,cuComputeDistanceGlobal,runs,"[('float *', 'A'), ('int', 'wA'), ('float *', 'B'), ('int', 'wB'), ('int', 'dim'), ('float *', 'AB')]"
5433,15,cuInsertionSort,runs,"[('float *', 'dist'), ('long *', 'ind'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
5433,16,cuParallelSqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'k')]"
5434,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5434,6,finiteDiff,runs,"[('const int', 'c'), ('const double', 'dt'), ('const double', 'dx'), ('const int', 'nt'), ('const int', 'nx'), ('double *', 'u'), ('double *', 'un')]"
5434,7,stepFunction,runs,"[('const double', 'dx'), ('const int', 'nx'), ('double *', 'u')]"
544,9,WriteClockValues,runs,"[('unsigned int *', 'completionTimes'), ('unsigned int *', 'threadIDs')]"
544,13,AddToFloat,runs,"[('float *', 'sum'), ('float *', 'out'), ('const float *', 'pIn')]"
544,14,ReturnFloat,runs,"[('float *', 'sum'), ('float *', 'out'), ('const float *', 'pIn')]"
544,15,AddTo32,runs,"[('int *', 'sum'), ('int *', 'out'), ('const int *', 'pIn')]"
544,16,Return32,runs,"[('int *', 'sum'), ('int *', 'out'), ('const int *', 'pIn')]"
544,17,ReturnFloat,runs,"[('float *', 'sum'), ('float *', 'out'), ('const float *', 'pIn')]"
544,18,Return64,runs,"[('unsigned long long *', 'sum'), ('unsigned long long *', 'out'), ('const unsigned long long *', 'pIn')]"
544,19,Return32,runs,"[('int *', 'sum'), ('int *', 'out'), ('const int *', 'pIn')]"
544,46,RadixHistogram_device,runs,"[('int *', 'dptrHistogram'), ('const int *', 'in'), ('size_t', 'N'), ('int', 'shift'), ('int', 'mask')]"
544,52,p2pPingPongLatencyTest,runs,"[('void *', '_pLocal'), ('void *', '_pRemote'), ('uint64_t *', 'pTimestamps'), ('int', 'bWait'), ('int', 'cIterations')]"
5442,4,updateHeightmapKernel,runs,"[('float *', 'heightMap'), ('float2 *', 'ht'), ('unsigned int', 'width')]"
5442,5,calculateSlopeKernel,runs,"[('float *', 'h'), ('float2 *', 'slopeOut'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
5453,0,kMultiplyBySigmoidGrad,runs,"[('float *', 'act'), ('float *', 'target'), ('const unsigned int', 'len')]"
5453,6,kTranspose,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
5453,7,kLessThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,8,kLessThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,9,kGreaterThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,10,kGreaterThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,11,kEquals,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,12,kEqualsScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,13,kMinimum,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,14,kMinimumScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,15,kMaximum,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,16,kMaximumScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,25,kSign,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,26,kApplySigmoid,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,27,kApplyTanh,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,28,kApplySoftThreshold,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,29,kApplyAbs,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,30,kApplyLog1PlusExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,31,kLog,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,32,kExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,33,kGamma,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,34,kLogGamma,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,35,kSqrt,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,36,kPow,runs,"[('float *', 'mat'), ('float', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,37,kPowMatrix,runs,"[('float *', 'mat'), ('float *', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,38,kReciprocal,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,39,kAddColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
5453,40,kAddRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
5453,41,kAddColMult,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
5453,42,kMultByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
5453,43,kMultByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
5453,44,kDivByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
5453,45,kDivByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
5453,46,kAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
5453,47,kSubtract,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
5453,48,kDivide,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
5453,49,kMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
5453,50,kMultScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len')]"
5453,51,kAssignScalar,runs,"[('float *', 'dest'), ('float', 'alpha'), ('unsigned int', 'len')]"
5453,52,kDivideScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len')]"
5453,53,kAddScalar,runs,"[('float *', 'a'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
5453,54,kSelectRows,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nSourceRows')]"
5453,55,kSetSelectedRows,runs,"[('float *', 'target'), ('float *', 'source'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nTargetRows')]"
5453,56,kWhere,runs,"[('float *', 'condition_mat'), ('float *', 'if_mat'), ('float *', 'else_mat'), ('float *', 'target'), ('unsigned int', 'len')]"
5453,57,kCorrelate,runs,"[('float *', 'source'), ('float *', 'kernel'), ('float *', 'dest'), ('int', 'width'), ('int', 'height'), ('int', 'kwidth'), ('int', 'kheight')]"
5462,37,test_launch_cuda_native,runs,"[('float *', 'scalar'), ('float *', 'vector'), ('int', 'sxy'), ('int', 'sx'), ('int', 'sy'), ('int', 'sz'), ('int', 'stride')]"
5462,40,fill_one,runs,"[('float *', 'prp_0'), ('int', 'sz')]"
5462,41,fill_count,runs,"[('float *', 'prp_0'), ('int', 'sz')]"
5473,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
5473,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
5473,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
5473,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
5473,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
5473,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
5473,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
5473,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
5473,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
5473,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
5473,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
5473,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
5473,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
5473,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
5473,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
5473,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
5473,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
5473,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
5473,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
5473,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
5473,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
5473,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
5473,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
5473,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
5473,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
5473,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
5473,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5473,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5473,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5473,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5473,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5473,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5473,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
5473,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
5473,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
5473,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
5473,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
5473,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
5473,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
5473,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
5473,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
5473,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5473,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5473,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5473,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5473,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5473,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5473,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
5473,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
5473,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
5473,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
5473,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
5473,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
5473,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
5473,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
5473,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
5473,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
5473,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
5473,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
5473,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
5473,65,make_pillar_histo_kernel,runs,"[('const float *', 'dev_points'), ('float *', 'dev_pillar_x_in_coors'), ('float *', 'dev_pillar_y_in_coors'), ('float *', 'dev_pillar_z_in_coors'), ('float *', 'dev_pillar_i_in_coors'), ('int *', 'pillar_count_histo'), ('const int', 'num_points'), ('const int', 'max_points_per_pillar'), ('const int', 'GRID_X_SIZE'), ('const int', 'GRID_Y_SIZE'), ('const int', 'GRID_Z_SIZE'), ('const float', 'MIN_X_RANGE'), ('const float', 'MIN_Y_RANGE'), ('const float', 'MIN_Z_RANGE'), ('const float', 'PILLAR_X_SIZE'), ('const float', 'PILLAR_Y_SIZE'), ('const float', 'PILLAR_Z_SIZE'), ('const int', 'NUM_BOX_CORNERS')]"
5473,66,make_pillar_index_kernel,runs,"[('int *', 'dev_pillar_count_histo'), ('int *', 'dev_counter'), ('int *', 'dev_pillar_count'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('int *', 'dev_sparse_pillar_map'), ('const int', 'max_pillars'), ('const int', 'max_points_per_pillar'), ('const int', 'GRID_X_SIZE'), ('const float', 'PILLAR_X_SIZE'), ('const float', 'PILLAR_Y_SIZE'), ('const int', 'NUM_INDS_FOR_SCAN')]"
5473,67,make_pillar_feature_kernel,runs,"[('float *', 'dev_pillar_x_in_coors'), ('float *', 'dev_pillar_y_in_coors'), ('float *', 'dev_pillar_z_in_coors'), ('float *', 'dev_pillar_i_in_coors'), ('float *', 'dev_pillar_x'), ('float *', 'dev_pillar_y'), ('float *', 'dev_pillar_z'), ('float *', 'dev_pillar_i'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_num_points_per_pillar'), ('const int', 'max_points'), ('const int', 'GRID_X_SIZE')]"
5473,68,make_extra_network_input_kernel,runs,"[('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('float *', 'dev_x_coors_for_sub_shaped'), ('float *', 'dev_y_coors_for_sub_shaped'), ('float *', 'dev_pillar_feature_mask'), ('const int', 'MAX_NUM_POINTS_PER_PILLAR')]"
5473,69,filter_kernel,runs,"[('const float *', 'box_preds'), ('const float *', 'cls_preds'), ('const float *', 'dir_preds'), ('const int *', 'anchor_mask'), ('const float *', 'dev_anchors_px'), ('const float *', 'dev_anchors_py'), ('const float *', 'dev_anchors_pz'), ('const float *', 'dev_anchors_dx'), ('const float *', 'dev_anchors_dy'), ('const float *', 'dev_anchors_dz'), ('const float *', 'dev_anchors_ro'), ('float *', 'filtered_box'), ('float *', 'filtered_score'), ('int *', 'filtered_dir'), ('float *', 'box_for_nms'), ('int *', 'filter_count'), ('const float', 'FLOAT_MIN'), ('const float', 'FLOAT_MAX'), ('const float', 'score_threshold'), ('const int', 'NUM_BOX_CORNERS'), ('const int', 'NUM_OUTPUT_BOX_FEATURE')]"
5473,70,sort_boxes_by_indexes_kernel,runs,"[('float *', 'filtered_box'), ('int *', 'filtered_dir'), ('float *', 'box_for_nms'), ('int *', 'indexes'), ('int', 'filter_count'), ('float *', 'sorted_filtered_boxes'), ('int *', 'sorted_filtered_dir'), ('float *', 'sorted_box_for_nms'), ('const int', 'NUM_BOX_CORNERS'), ('const int', 'NUM_OUTPUT_BOX_FEATURE')]"
5473,71,nms_kernel,runs,"[('const int', 'n_boxes'), ('const float', 'nms_overlap_thresh'), ('const float *', 'dev_boxes'), ('unsigned long long *', 'dev_mask'), ('const int', 'NUM_BOX_CORNERS')]"
5473,72,scan_x,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
5473,73,scan_y,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
5473,75,scatter_kernel,runs,"[('int *', 'x_coors'), ('int *', 'y_coors'), ('float *', 'pfe_output'), ('float *', 'scattered_feature'), ('const int', 'MAX_NUM_PILLARS_'), ('const int', 'GRID_X_SIZE'), ('const int', 'GRID_Y_SIZE')]"
5473,78,computePointGradients1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dj_ang'), ('double *', 'pg24'), ('double *', 'pg05'), ('double *', 'pg15'), ('double *', 'pg25')]"
5473,79,computePointHessian0,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph93'), ('double *', 'ph103'), ('double *', 'ph113'), ('double *', 'ph123'), ('double *', 'ph94'), ('double *', 'ph133'), ('double *', 'ph104'), ('double *', 'ph143'), ('double *', 'ph114'), ('double *', 'ph153'), ('double *', 'ph95'), ('double *', 'ph163'), ('double *', 'ph105'), ('double *', 'ph173'), ('double *', 'ph115')]"
5473,80,computePointHessian1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph124'), ('double *', 'ph134'), ('double *', 'ph144'), ('double *', 'ph154'), ('double *', 'ph125'), ('double *', 'ph164'), ('double *', 'ph135'), ('double *', 'ph174'), ('double *', 'ph145')]"
5473,81,computePointHessian2,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph155'), ('double *', 'ph165'), ('double *', 'ph175')]"
5473,82,computeScoreList,runs,"[('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'e_x_cov_x'), ('double', 'gauss_d1'), ('double *', 'score')]"
5473,83,computeScoreGradientList,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('int', 'voxel_num'), ('double *', 'e_x_cov_x'), ('double *', 'cov_dxd_pi'), ('double', 'gauss_d1'), ('int', 'valid_voxel_num'), ('double *', 'score_gradients')]"
5473,84,computeExCovX,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centr_x'), ('double *', 'centr_y'), ('double *', 'centr_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22')]"
5473,85,updateExCovX,runs,"[('double *', 'e_x_cov_x'), ('double', 'gauss_d2'), ('int', 'valid_voxel_num')]"
5473,86,computeCovDxdPi,runs,"[('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'inverse_covariance'), ('int', 'voxel_num'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'point_gradients'), ('double *', 'cov_dxd_pi'), ('int', 'valid_voxel_num')]"
5473,87,computeHessianListS0,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_gradients'), ('double *', 'tmp_hessian'), ('int', 'valid_voxel_num')]"
5473,88,computeHessianListS1,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'hessians'), ('double *', 'e_x_cov_x'), ('double *', 'tmp_hessian'), ('double *', 'cov_dxd_pi'), ('double *', 'point_gradients'), ('int', 'valid_voxel_num')]"
5473,89,computeHessianListS2,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_hessians'), ('double *', 'hessians'), ('int', 'valid_voxel_num')]"
5473,91,sumScore,runs,"[('double *', 'score'), ('int', 'full_size'), ('int', 'half_size')]"
5484,16,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
5484,19,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
5484,21,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
5484,23,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
5484,25,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
5484,27,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
5484,28,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
5484,30,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
5484,33,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
5484,36,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
5487,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
5487,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
5487,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
5487,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5487,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5492,4,absoluteDifferenceCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
5492,5,bitwiseAndCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
5492,6,bitwiseOrCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
5492,7,bitwiseXorCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
5492,10,copyCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
5492,13,flipCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('bool', 'horizontal'), ('bool', 'vertical')]"
5492,14,histogramCuda,runs,"[('const uint8_t *', 'data'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'histogram')]"
5492,15,invertCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
5492,16,isEqualCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'isEqual')]"
5492,17,lookupTableCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint8_t *', 'table')]"
5492,18,maximumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
5492,19,minimumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
5492,20,projectionProfileHorizontalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
5492,21,projectionProfileVerticalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
5492,22,rotateCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('float', 'inXStart'), ('float', 'inYStart'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('float', 'cosAngle'), ('float', 'sinAngle')]"
5492,24,setPixelCuda,runs,"[('uint8_t *', 'in'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'pointX'), ('uint32_t *', 'pointY'), ('uint32_t', 'pointSize'), ('uint32_t', 'value')]"
5492,25,subtractCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
5492,29,isAnyEqualCuda,runs,"[('const uint8_t *', 'image'), ('uint8_t *', 'value'), ('size_t', 'valueCount'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'differenceCount')]"
55,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
55,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
55,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
55,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
55,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
55,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
55,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
55,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
55,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
55,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
55,24,hello,runs,[]
55,28,hello,runs,[]
5500,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5501,21,sync_deconv_groups,runs,[]
5501,37,sync_conv_groups,runs,[]
5505,20,box_encode_kernel,runs,"[('float *', 'targets_dx'), ('float *', 'targets_dy'), ('float *', 'targets_dw'), ('float *', 'targets_dh'), ('float4 *', 'boxes'), ('float4 *', 'anchors'), ('float', 'wx'), ('float', 'wy'), ('float', 'ww'), ('float', 'wh'), ('size_t', 'gt'), ('size_t', 'idxJump')]"
5505,30,box_iou_cuda_kernel,runs,"[('float *', 'box_iou'), ('float4 *', 'box1'), ('float4 *', 'box2'), ('long', 'M'), ('long', 'N'), ('int', 'idxJump')]"
5508,0,getMask,runs,"[('unsigned int *', 'd_in'), ('unsigned int *', 'd_out'), ('unsigned int', 'in_size'), ('unsigned int', 'bit_shift'), ('unsigned int', 'One')]"
5508,1,getIndex,runs,"[('unsigned int *', 'd_index'), ('unsigned int *', 'd_scan'), ('unsigned int *', 'd_mask'), ('unsigned int', 'in_size'), ('unsigned int', 'total_pre')]"
5508,2,scatter,runs,"[('unsigned int *', 'd_in'), ('unsigned int *', 'd_index'), ('unsigned int *', 'd_out'), ('unsigned int', 'in_size')]"
5511,0,periodicityPreservationGPU,runs,"[('int', 'N'), ('char *', 'cells')]"
5511,1,evovle_kernel,runs,"[('int', 'N'), ('char *', 'oldGen'), ('char *', 'newGen'), ('int *', 'allzeros'), ('int *', 'change')]"
5511,2,evovle_kernel_shared,runs,"[('int', 'N'), ('char *', 'oldGen'), ('char *', 'newGen'), ('int *', 'allzeros'), ('int *', 'change')]"
5511,3,periodicityPreservationGPU,runs,"[('int', 'N'), ('char *', 'cells')]"
5511,4,evovle_kernel,runs,"[('int', 'N'), ('char *', 'oldGen'), ('char *', 'newGen'), ('int *', 'allzeros'), ('int *', 'change')]"
5511,5,evovle_kernel_shared,runs,"[('int', 'N'), ('char *', 'oldGen'), ('char *', 'newGen'), ('int *', 'allzeros'), ('int *', 'change')]"
5511,6,periodicityPreservationGPU,runs,"[('int', 'N'), ('char *', 'cells')]"
5511,7,evovle_kernel,runs,"[('int', 'N'), ('char *', 'oldGen'), ('char *', 'newGen'), ('int *', 'allzeros'), ('int *', 'change')]"
5511,8,evovle_kernel_shared,runs,"[('int', 'N'), ('char *', 'oldGen'), ('char *', 'newGen'), ('int *', 'allzeros'), ('int *', 'change')]"
5511,9,periodicityPreservationGPU,runs,"[('int', 'N'), ('char *', 'cells')]"
5511,10,evovle_kernel,runs,"[('int', 'N'), ('char *', 'oldGen'), ('char *', 'newGen'), ('int *', 'allzeros'), ('int *', 'change')]"
5511,11,evovle_kernel_shared,runs,"[('int', 'N'), ('char *', 'oldGen'), ('char *', 'newGen'), ('int *', 'allzeros'), ('int *', 'change')]"
5511,12,periodicityPreservationGPU,runs,"[('int', 'N'), ('char *', 'cells')]"
5511,13,evovle_kernel,runs,"[('int', 'N'), ('char *', 'oldGen'), ('char *', 'newGen'), ('int *', 'allzeros'), ('int *', 'change')]"
5511,14,evovle_kernel_shared,runs,"[('int', 'N'), ('char *', 'oldGen'), ('char *', 'newGen'), ('int *', 'allzeros'), ('int *', 'change')]"
5512,16,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
5512,19,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
5512,21,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
5512,23,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
5512,25,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
5512,27,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
5512,28,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
5512,30,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
5512,33,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
5512,36,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
5524,26,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
5524,29,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
5524,30,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
5524,31,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5526,88,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
5529,0,add,runs,"[('std::size_t', 'n'), ('const float *', 'x'), ('float *', 'y')]"
553,1,myCudaCount,runs,"[('const char *', 'text'), ('int *', 'pos'), ('int', 'n')]"
553,5,SimpleClone,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const int *', 'mask'), ('float *', 'output'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
553,6,CalculateFixed,runs,"[('const float *', 'subBG'), ('const float *', 'subT'), ('const int *', 'subM'), ('float *', 'fixed'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
553,7,PossionImageCloningIteration,runs,"[('const float *', 'fixed'), ('const int *', 'mask'), ('float *', 'input'), ('float *', 'output'), ('const int', 'wt'), ('const int', 'ht')]"
553,8,CalculateSampleT,runs,"[('const float *', 'target'), ('const float *', 'mask'), ('float *', 'subT'), ('int *', 'subM'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'ws'), ('const int', 'hs'), ('const int', 'sRate')]"
553,9,CalculateSampleB,runs,"[('const float *', 'background'), ('float *', 'subBG'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'ws'), ('const int', 'hs'), ('const int', 'sRate')]"
553,10,CalculateDiffSample,runs,"[('float *', 'cur'), ('float *', 'pre'), ('const int', 'wts'), ('const int', 'hts')]"
553,11,CalculateTransSample,runs,"[('const float *', 'input'), ('float *', 'output'), ('const int', 'wtss'), ('const int', 'htss'), ('const int', 'wts'), ('const int', 'hts'), ('const int', 'ratio')]"
553,12,SimpleClone,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const float *', 'mask'), ('float *', 'output'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
553,13,CalculateFixed,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const float *', 'mask'), ('float *', 'fixed'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
553,14,PossionImageCloningIteration,runs,"[('const float *', 'fixed'), ('const float *', 'mask'), ('float *', 'input'), ('float *', 'output'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'round')]"
553,15,SimpleClone,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const int *', 'mask'), ('float *', 'output'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
553,16,CalculateFixed,runs,"[('const float *', 'subBG'), ('const float *', 'subT'), ('const int *', 'subM'), ('float *', 'fixed'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
553,17,PossionImageCloningIteration,runs,"[('const float *', 'fixed'), ('const int *', 'mask'), ('float *', 'input'), ('float *', 'output'), ('const int', 'wt'), ('const int', 'ht')]"
553,18,CalculateSampleT,runs,"[('const float *', 'target'), ('const float *', 'mask'), ('float *', 'subT'), ('int *', 'subM'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'ws'), ('const int', 'hs'), ('const int', 'sRate')]"
553,19,CalculateSampleB,runs,"[('const float *', 'background'), ('float *', 'subBG'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'ws'), ('const int', 'hs'), ('const int', 'sRate')]"
553,20,CalculateDiffSample,runs,"[('float *', 'cur'), ('float *', 'pre'), ('const int', 'wts'), ('const int', 'hts')]"
553,21,CalculateTransSample,runs,"[('const float *', 'input'), ('float *', 'output'), ('const int', 'wtss'), ('const int', 'htss'), ('const int', 'wts'), ('const int', 'hts'), ('const int', 'ratio')]"
553,22,SimpleClone,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const float *', 'mask'), ('float *', 'output'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
553,23,CalculateFixed,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const float *', 'mask'), ('float *', 'fixed'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
553,24,PossionImageCloningIteration,runs,"[('const float *', 'fixed'), ('const float *', 'mask'), ('float *', 'input'), ('float *', 'output'), ('const int', 'wt'), ('const int', 'ht')]"
5556,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5556,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C')]"
5556,2,VecAdd,runs,[]
556,0,KernelVersionShim,runs,[]
5565,2,kernelCalculateHistogram,runs,"[('unsigned int *', 'histogram'), ('unsigned char *', 'rawPixels'), ('long', 'chunkSize'), ('long', 'totalPixels')]"
5566,0,kernel,runs,[]
5566,1,kernel,runs,[]
5566,2,kernel,runs,[]
5575,3,vsub,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
5575,4,vmul,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
5575,5,vdiv,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c')]"
5575,6,dummy,runs,[]
5581,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5581,227,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
5581,228,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
5581,229,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
5581,234,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
5581,346,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
5581,351,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5585,1,sobelCuda,runs,"[('byte *', 'image'), ('byte *', 'edged'), ('int', 'width'), ('int', 'height')]"
5586,0,hist_inGlobal,runs,"[('const int *', 'values'), ('int', 'length'), ('int *', 'hist')]"
5586,1,hist_inShared,runs,"[('const int *', 'values'), ('int', 'length'), ('int *', 'hist')]"
5586,2,matrixMulKernel,runs,"[('float *', 'd_M'), ('float *', 'd_N'), ('float *', 'd_P'), ('int', 'width')]"
5586,3,vectorAddKernel,runs,"[('float *', 'inputA'), ('float *', 'inputB'), ('float *', 'output'), ('int', 'length')]"
5586,4,matrixVectorMultKernel,runs,"[('float *', 'fltMatrix'), ('float *', 'vec'), ('float *', 'output'), ('int', 'rows'), ('int', 'columns')]"
5586,5,matrixAdd_A_Kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('size_t', 'pitch'), ('int', 'width')]"
5586,6,matrixAdd_B_Kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('size_t', 'pitch'), ('int', 'width')]"
5586,7,matrixAdd_C_Kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('size_t', 'pitch'), ('int', 'width')]"
5586,12,inefficient_prefixSum,runs,"[('float *', 'in'), ('int', 'in_length'), ('float *', 'out')]"
5586,13,prefixSum_UniqueBlock,runs,"[('float *', 'in'), ('int', 'in_length'), ('float *', 'out')]"
5586,14,prefixSum_multiBlocks,runs,"[('float *', 'in'), ('int', 'in_length'), ('float *', 'out'), ('float *', 'temp')]"
5586,15,prefixsum_combine,runs,"[('float *', 'in'), ('int', 'in_length'), ('float *', 'out'), ('int', 'out_length')]"
5586,16,reductionKernel,runs,"[('float *', 'vec'), ('int', 'width'), ('double *', 'sumUp')]"
5587,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
5587,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
5587,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
5587,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
5587,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
5587,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
5587,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
5587,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
5587,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
5587,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
5587,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
5587,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
5587,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
5587,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
5587,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
5587,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
5587,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
5587,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
5587,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
5587,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
5587,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
5587,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
5587,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5587,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5587,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5587,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5587,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5587,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5587,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
5587,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
5587,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
5587,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
5587,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
5587,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
5587,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
5587,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5587,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5587,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5587,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5587,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5587,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5587,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
5587,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
5587,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
5587,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
5587,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
5587,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
5587,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
5587,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
5587,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
5587,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
5587,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
5587,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
5587,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
5587,67,computePointGradients1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dj_ang'), ('double *', 'pg24'), ('double *', 'pg05'), ('double *', 'pg15'), ('double *', 'pg25')]"
5587,68,computePointHessian0,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph93'), ('double *', 'ph103'), ('double *', 'ph113'), ('double *', 'ph123'), ('double *', 'ph94'), ('double *', 'ph133'), ('double *', 'ph104'), ('double *', 'ph143'), ('double *', 'ph114'), ('double *', 'ph153'), ('double *', 'ph95'), ('double *', 'ph163'), ('double *', 'ph105'), ('double *', 'ph173'), ('double *', 'ph115')]"
5587,69,computePointHessian1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph124'), ('double *', 'ph134'), ('double *', 'ph144'), ('double *', 'ph154'), ('double *', 'ph125'), ('double *', 'ph164'), ('double *', 'ph135'), ('double *', 'ph174'), ('double *', 'ph145')]"
5587,70,computePointHessian2,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph155'), ('double *', 'ph165'), ('double *', 'ph175')]"
5587,71,computeScoreList,runs,"[('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'e_x_cov_x'), ('double', 'gauss_d1'), ('double *', 'score')]"
5587,72,computeScoreGradientList,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('int', 'voxel_num'), ('double *', 'e_x_cov_x'), ('double *', 'cov_dxd_pi'), ('double', 'gauss_d1'), ('int', 'valid_voxel_num'), ('double *', 'score_gradients')]"
5587,73,computeExCovX,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centr_x'), ('double *', 'centr_y'), ('double *', 'centr_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22')]"
5587,74,updateExCovX,runs,"[('double *', 'e_x_cov_x'), ('double', 'gauss_d2'), ('int', 'valid_voxel_num')]"
5587,75,computeCovDxdPi,runs,"[('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'inverse_covariance'), ('int', 'voxel_num'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'point_gradients'), ('double *', 'cov_dxd_pi'), ('int', 'valid_voxel_num')]"
5587,76,computeHessianListS0,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_gradients'), ('double *', 'tmp_hessian'), ('int', 'valid_voxel_num')]"
5587,77,computeHessianListS1,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'hessians'), ('double *', 'e_x_cov_x'), ('double *', 'tmp_hessian'), ('double *', 'cov_dxd_pi'), ('double *', 'point_gradients'), ('int', 'valid_voxel_num')]"
5587,78,computeHessianListS2,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_hessians'), ('double *', 'hessians'), ('int', 'valid_voxel_num')]"
5587,80,sumScore,runs,"[('double *', 'score'), ('int', 'full_size'), ('int', 'half_size')]"
5595,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5595,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
561,1,img2gray,runs,"[('unsigned char *', 'imageInput'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'imageOutput')]"
5629,4,staticReverse,runs,"[('int *', 'd'), ('int', 'n')]"
5629,5,dynamicReverse,runs,"[('int *', 'd'), ('int', 'n')]"
5629,6,kernel,runs,"[('float *', 'a'), ('int', 'offset')]"
5630,0,hello,runs,[]
5638,3,channels_first,runs,"[('float *', 'input'), ('float *', 'rinput'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'pad_size')]"
5638,4,Correlation_forward,runs,"[('float *', 'output'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
5638,5,Correlation_backward_input1,runs,"[('int', 'item'), ('float *', 'gradInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
5638,6,Correlation_backward_input2,runs,"[('int', 'item'), ('float *', 'gradInput2'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
565,5,stencil_1d,runs,"[('int', 'n'), ('double *', 'in'), ('double *', 'out')]"
565,7,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
565,8,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
565,10,mykernel,runs,[]
565,12,stencil_1d,runs,"[('int', 'n'), ('double *', 'in'), ('double *', 'out')]"
565,21,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
565,22,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
565,30,stencil_1d,runs,"[('int', 'n'), ('double *', 'in'), ('double *', 'out')]"
565,32,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
565,35,mykernel,runs,[]
565,52,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
5652,0,square,runs,"[('int *', 'array'), ('int', 'n')]"
566,3,init_random_states,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states'), ('size_t', 'num_states')]"
5661,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
5665,0,init_randoms,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states')]"
5665,1,randoms,runs,"[('curandState_t *', 'states'), ('float *', 'numbers'), ('float', 'lower'), ('float', 'higher')]"
5665,3,sigmoidForward,runs,"[('float *', 'R'), ('float *', 'V'), ('int', 'x'), ('int', 'y')]"
5665,4,sigmoidBackward,runs,"[('float *', 'R'), ('float *', 'V'), ('int', 'x'), ('int', 'y')]"
5665,5,binaryCrossEntropyCost,runs,"[('float *', 'cost'), ('float *', 'predictions'), ('float *', 'target'), ('int', 'size')]"
5665,6,dBinaryCrossEntropyCost,runs,"[('float *', 'predictions'), ('float *', 'target'), ('float *', 'dY'), ('int', 'x')]"
5665,7,reluForward,runs,"[('float *', 'R'), ('float *', 'V'), ('int', 'x'), ('int', 'y')]"
5665,8,reluBackward,runs,"[('float *', 'dZ'), ('float *', 'top_diff'), ('float *', 'V'), ('int', 'x'), ('int', 'y')]"
5667,0,add32,runs,"[('float *', 'A'), ('float *', 'B'), ('int', 'size')]"
5667,1,testMemset,runs,"[('float *', 'array'), ('float', 'value'), ('int', 'N')]"
567,9,kernel_array_beam_slave_sincos_original,runs,"[('int', 'N'), ('float', 'r1'), ('float', 'r2'), ('float', 'r3'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('float *', 'sum'), ('int', 'blockDim_2')]"
5686,1,dotProductSingle,runs,"[('int *', 'pFeatureList'), ('float *', 'pValuesList'), ('size_t *', 'pSizeOfInstanceList'), ('size_t', 'pSize'), ('size_t', 'pMaxNnz'), ('float *', 'pDevDotProduct')]"
5686,2,computeDotProducts,runs,"[('float3 *', 'pDotProducts'), ('size_t', 'pSize'), ('int *', 'pCandidates'), ('size_t *', 'pJumpLength'), ('size_t *', 'pCandidateSize'), ('size_t', 'pNumberOfCandidates'), ('int *', 'pFeatureIdsNeighbor'), ('float *', 'pValuesNeighbor'), ('size_t', 'pMaxNnzNeighbor'), ('size_t *', 'pSizeNeighbor'), ('int *', 'pFeatureIdsInstance'), ('float *', 'pValuesInstance'), ('size_t', 'pMaxNnzInstance'), ('size_t *', 'pSizeInstance'), ('float *', 'pPreComputedDotProductsNeighbor'), ('float *', 'pPreComputedDotProductsInstance')]"
5686,3,euclideanDistanceCuda,runs,"[('float3 *', 'pDotProducts'), ('size_t', 'pSize'), ('float *', 'results')]"
5686,4,cosineSimilarityCuda,runs,"[('float3 *', 'pDotProducts'), ('size_t', 'pSize'), ('float *', 'results')]"
5687,28,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
5687,31,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
5687,43,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
5687,44,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5687,55,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5692,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
5698,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
5698,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
570,0,init_r,runs,"[('float *', 'r'), ('int', 'N_cube')]"
570,2,potForce,runs,"[('float *', 'PairWise'), ('int', 'N'), ('float *', 'PotOut'), ('float *', 'ForceOut')]"
570,3,kinematics,runs,"[('float *', 'positions'), ('float *', 'force'), ('float *', 'vel'), ('int', 'len')]"
570,4,kinematics_phase1,runs,"[('float *', 'positions'), ('float *', 'force'), ('float *', 'vel'), ('int', 'len')]"
570,5,kinematics_phase2,runs,"[('float *', 'force'), ('float *', 'vel'), ('int', 'len')]"
570,6,total,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
570,7,forcered_simple,runs,"[('float *', 'force'), ('float *', 'forcered')]"
570,8,newForceReduction,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'startunit'), ('int', 'len')]"
5710,0,grayscale,runs,"[('float4 *', 'imagem'), ('int', 'width'), ('int', 'height')]"
5710,3,vecAdd,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
5710,5,vecMultiplyReverse,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
5710,14,count,runs,"[('int *', 'data'), ('int', 'input'), ('int *', 'result')]"
5710,17,reverseArray,runs,"[('int *', 'A'), ('int *', 'B')]"
5710,19,matrixMul,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'width')]"
5710,20,MatrixMulKernel,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'ncols')]"
5710,21,matrixMul,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'width')]"
5710,22,MatrixMulKernel,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'ncols')]"
5710,23,MatrixMulKernel,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'ncols')]"
5710,25,vecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
5710,27,vecAdd,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
5710,28,MatrixMulKernel,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'ncols')]"
5713,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5713,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5714,21,sync_deconv_groups,runs,[]
5714,37,sync_conv_groups,runs,[]
5723,40,initActiveSlices,runs,"[('int *', 'buffer'), ('int', 'num')]"
5723,42,computeGradientCentralDiff,runs,"[('const float *', 'similarities'), ('float *', 'gradient'), ('int *', 'activeMask'), ('int', 'activeSlices'), ('int', 'slices'), ('int', 'p')]"
5723,43,normalizeGradient,runs,"[('float *', 'gradient'), ('int *', 'activeMask'), ('int', 'activeSlices'), ('int', 'slices')]"
5723,44,copySimilarity,runs,"[('float *', 'similarities'), ('int', 'active_slices'), ('int', 'slices'), ('int *', 'activeMask'), ('int', 'target'), ('int', 'source')]"
5723,49,addNccValues,runs,"[('const float *', 'prevData'), ('float *', 'result'), ('int', 'slices')]"
5723,50,writeSimilarities,runs,"[('const float *', 'nvccResults'), ('int *', 'activelayers'), ('int', 'writestep'), ('int', 'writenum'), ('float *', 'similarities'), ('int', 'active_slices'), ('int', 'slices')]"
5723,53,initActivePatches,runs,"[('int *', 'buffer'), ('int', 'num')]"
5723,57,addNccValues,runs,"[('const float *', 'prevData'), ('float *', 'result'), ('int', 'patches')]"
5723,58,writeSimilarities,runs,"[('const float *', 'nvccResults'), ('int *', 'activelayers'), ('int', 'writestep'), ('int', 'writenum'), ('float *', 'similarities'), ('int', 'active_patches'), ('int', 'patches')]"
5723,63,computeGradientCentralDiff,runs,"[('const float *', 'similarities'), ('float *', 'gradient'), ('int *', 'activeMask'), ('int', 'activePatches'), ('int', 'patches'), ('int', 'p')]"
5723,64,normalizeGradient,runs,"[('float *', 'gradient'), ('int *', 'activeMask'), ('int', 'activePatches'), ('int', 'patches')]"
5723,65,copySimilarity,runs,"[('float *', 'similarities'), ('int', 'active_patches'), ('int', 'patches'), ('int *', 'activeMask'), ('int', 'target'), ('int', 'source')]"
5726,165,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5726,224,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
5726,225,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
5726,226,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
5726,231,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
5726,347,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
5726,352,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5735,0,ker_dense_to_sparse_assign,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
5735,1,ker_sparse_to_dense_assign,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
5735,2,ker_dense_to_sparse_subtract,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
5735,3,ker_sparse_to_dense_block_assign_and_multiply,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float', 'mult'), ('float *', 'src'), ('float *', 'trg')]"
5735,6,ker_dense_to_sparse_block_add,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float *', 'src'), ('float *', 'trg')]"
5736,30,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
5739,204,cuda_debug_kernel,runs,[]
574,38,sync_conv_groups,runs,[]
5741,28,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
5741,31,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
5741,43,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
5741,44,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5741,55,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5749,80,createLookupKernel,runs,"[('const int *', 'inds'), ('int', 'total'), ('int *', 'output')]"
5749,100,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
5749,101,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
5749,102,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
5751,29,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5751,35,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
5751,38,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
5751,39,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
5751,40,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5752,35,gSetSparse,runs,"[('float *', 'out'), ('const size_t *', 'indices'), ('const float *', 'values'), ('int', 'length')]"
5752,42,gMaxPoolingForward,runs,"[('float *', 'out'), ('int', 'outRows'), ('int', 'outCols'), ('float *', 'in'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
5752,43,gMaxPoolingBackward,runs,"[('float *', 'adj'), ('int', 'adjRows'), ('int', 'adjCols'), ('float *', 'in'), ('float *', 'adjIn'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
5752,46,gGetValueByKey,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('int *', 'indeces'), ('int', 'n')]"
5752,49,gScatterAdd,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
5752,50,gScatterUpdate,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
5752,51,gGather,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
5754,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5754,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5755,0,dotProductKernel,runs,"[('double *', 'a'), ('double *', 'b'), ('int', 'a_size'), ('int', 'b_size'), ('double *', 'results'), ('int', 'vector_size')]"
5755,1,normKernel,runs,"[('double *', 'vectors'), ('int', 'size'), ('double *', 'results'), ('int', 'vector_size')]"
5755,2,cosineSimilarityKernel,runs,"[('double *', 'dot_products'), ('int', 'a_size'), ('int', 'b_size'), ('double *', 'a_norms'), ('double *', 'b_norms'), ('double *', 'results')]"
5766,1,Mean,runs,"[('float *', 'dIn'), ('unsigned', 'n'), ('unsigned', 'd'), ('int *', 'dGroupIn'), ('float *', 'dMeanIn'), ('unsigned', 'k'), ('int *', 'count')]"
5766,2,MeanUpdate,runs,"[('float *', 'dMeanIn'), ('unsigned', 'k'), ('unsigned', 'd'), ('int *', 'count')]"
5766,3,ComputeSquareDistance,runs,"[('float *', 'dOut'), ('float *', 'dIn'), ('int', 'n'), ('int', 'd')]"
5766,4,InsertionSortDistances,runs,"[('float *', 'dist'), ('int *', 'idMat'), ('int', 'n'), ('int', 'k')]"
5766,5,SortDistances,runs,"[('float *', 'dist'), ('int *', 'idMat'), ('int', 'n'), ('int', 'k')]"
5766,6,ComputeAdjacencyMatrix,runs,"[('float *', 'dOut'), ('int *', 'nn'), ('int', 'n'), ('int', 'k')]"
5766,7,ComputeLaplacianInPlace,runs,"[('float *', 'd'), ('int', 'n')]"
5779,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
5779,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
5779,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
5779,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5779,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
5780,0,max,runs,"[('int *', 'input'), ('int *', 'maxOut')]"
5780,1,sum,runs,"[('int *', 'input'), ('int *', 'sumOut')]"
5780,6,addVect,runs,"[('int *', 'vect1'), ('int *', 'vect2'), ('int *', 'resultVect')]"
5781,204,cuda_debug_kernel,runs,[]
5787,0,calculate,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
5788,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5788,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5789,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
5789,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
5789,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
5789,8,null_kernel,runs,[]
5789,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
580,0,network_corr,runs,"[('float *', 'templates'), ('float *', 'sum_square_template'), ('int *', 'moveout'), ('float *', 'data'), ('float *', 'weights'), ('size_t', 'step'), ('size_t', 'n_samples_template'), ('size_t', 'n_samples_data'), ('size_t', 'n_stations'), ('size_t', 'n_components'), ('int', 'chunk_offset'), ('int', 'chunk_size'), ('float *', 'cc_mat')]"
580,1,sum_cc,runs,"[('float *', 'cc_mat'), ('float *', 'cc_sum'), ('float *', 'weights'), ('int', 'n_stations'), ('int', 'n_components'), ('int', 'n_corr'), ('int', 'chunk_offset'), ('int', 'chunk_size')]"
5800,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
5805,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
5805,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
5805,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
5805,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
5805,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
5805,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
5811,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5811,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5817,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5817,303,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
5817,308,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
582,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
582,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
582,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
582,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
582,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
582,9,reduceMax,runs,"[('const float *', 'd_in'), ('float *', 'd_out')]"
582,10,histogram,runs,"[('const float *', 'd_in'), ('unsigned int *', 'd_out'), ('const float', 'lumMin'), ('const float', 'lumRange'), ('const size_t', 'numBins'), ('const size_t', 'size')]"
582,11,inclusivePrefixAdd,runs,"[('unsigned int *', 'd_in'), ('unsigned int *', 'd_out')]"
582,12,exclusivePrefixAdd,runs,"[('unsigned int *', 'd_in'), ('unsigned int *', 'd_out')]"
582,14,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
582,25,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
582,26,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
582,27,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
582,28,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
582,29,hello,runs,[]
582,33,hello,runs,[]
5827,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
5827,20,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
5837,36,sync_conv_groups,runs,[]
584,1,generate_initial_population,runs,"[('const unsigned int', 'genes_len'), ('unsigned char *', 'all_genes'), ('unsigned int', 'seed')]"
584,2,_fitness_test_kernel,runs,"[('unsigned char *', 'expected_genes'), ('unsigned char *', 'actual_genes'), ('const int', 'genes_size'), ('int *', 'ftnss_ptr')]"
5844,11,init_rand_states_kernel,runs,"[('curandState *', 'state'), ('int', 'seed')]"
5848,1,startScanKernel,runs,"[('const int', 'N'), ('const int *', 'v'), ('int *', 'scanv'), ('int *', 'starts')]"
5848,2,finishScanKernel,runs,"[('const int', 'N'), ('int *', 'scanv'), ('int *', 'starts')]"
5848,5,nothingKernel,runs,[]
5848,11,nothingKernel,runs,[]
5848,24,nothingKernel,runs,[]
5848,30,nothingKernel,runs,[]
585,5,MatMulKernel,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'width')]"
585,7,MatMulKernel,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('int', 'width')]"
585,9,global_max,runs,"[('int *', 'd_values'), ('int *', 'd_global_max')]"
5850,1,TestDimensions,runs,[]
5854,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5854,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
586,1,normalize,runs,"[('float *', 'nor_ary'), ('float *', 'flit_ary'), ('float', 'tw'), ('float', 'ts'), ('size_t', 'N')]"
586,3,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
5866,5,set_valid_pos_flag,runs,"[('int32_t *', 'pos_buff'), ('const int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
5866,6,set_valid_pos,runs,"[('int32_t *', 'pos_buff'), ('int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
5866,9,init_render_buffer_wrapper,runs,"[('int64_t *', 'render_buffer'), ('const uint32_t', 'qw_count')]"
5866,12,init_group,runs,"[('int8_t *', 'groups'), ('const size_t', 'group_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t *', 'init_vals')]"
5866,14,columnarize_groups,runs,"[('int8_t *', 'columnar_buffer'), ('const int8_t *', 'rowwise_buffer'), ('const size_t', 'row_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t', 'row_size')]"
5869,1,accel_update,runs,"[('int', 'nx'), ('int', 'ny'), ('double', 'dx2inv'), ('double', 'dy2inv'), ('double *', 'd_z'), ('double *', 'd_a')]"
5869,2,pos_update,runs,"[('int', 'nx'), ('int', 'ny'), ('double', 'dt'), ('double *', 'd_z'), ('double *', 'd_v'), ('double *', 'd_a')]"
5869,3,transpose,runs,"[('double *', 'in_d'), ('double *', 'out_d'), ('int', 'row'), ('int', 'col')]"
5869,4,kernel_1,runs,"[('float *', 'd_data_in'), ('float *', 'd_data_out'), ('int', 'data_size')]"
5869,5,kernel_2,runs,"[('float *', 'd_data_in'), ('float *', 'd_data_out'), ('int', 'data_size')]"
5869,6,kernel_3,runs,"[('float *', 'd_data_in'), ('float *', 'd_data_out'), ('int', 'data_size')]"
5869,7,kernel_4,runs,"[('float *', 'd_data_in'), ('float *', 'd_data_out'), ('int', 'data_size')]"
5869,8,kernel_5,runs,"[('float *', 'd_data_in'), ('float *', 'd_data_out'), ('int', 'data_size')]"
5884,1,solve128X_127EN,runs,"[('uint32_t *', 'gRege'), ('uint8_t *', 'gRHash'), ('uint32_t *', 'gproof')]"
5886,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
59,6,kExpand,runs,"[('float *', 'images'), ('float *', 'targets'), ('int', 'num_images'), ('int', 'num_input_channels'), ('int', 'image_size_y'), ('int', 'image_size_x'), ('int', 'num_modules_y'), ('int', 'num_modules_x'), ('int', 'kernel_size_y'), ('int', 'kernel_size_x'), ('int', 'padding_y'), ('int', 'padding_x'), ('int', 'stride_y'), ('int', 'stride_x'), ('int', 'num_modules_batch'), ('int', 'module_id_offset')]"
59,7,kOutpTraceMultiplyImages,runs,"[('float *', 'expanded_images'), ('float *', 'expanded_derivs'), ('int', 'num_images'), ('int', 'num_channels'), ('int', 'num_modules_batch'), ('int', 'kernel_size')]"
59,8,kSetOnes,runs,"[('float *', 'dest'), ('int', 'count')]"
59,13,kContract,runs,"[('float *', 'expanded_data'), ('float *', 'targets'), ('int', 'num_images'), ('int', 'num_input_channels'), ('int', 'image_size_y'), ('int', 'image_size_x'), ('int', 'num_modules_y'), ('int', 'num_modules_x'), ('int', 'kernel_size_y'), ('int', 'kernel_size_x'), ('int', 'padding_y'), ('int', 'padding_x'), ('int', 'stride_y'), ('int', 'stride_x'), ('int', 'num_modules_batch'), ('int', 'module_id_offset')]"
59,14,kWriteRows,runs,"[('float *', 'data'), ('float *', 'target'), ('int', 'num_images'), ('int', 'num_modules'), ('int', 'num_modules_batch'), ('int', 'module_id_offset'), ('float', 'beta')]"
59,15,kReadRows,runs,"[('float *', 'data'), ('float *', 'target'), ('int', 'num_images'), ('int', 'num_modules'), ('int', 'num_modules_batch'), ('int', 'module_id_offset')]"
59,16,kWriteRowsMult,runs,"[('float *', 'data'), ('float *', 'target'), ('int', 'num_images'), ('int', 'num_modules'), ('int', 'num_modules_batch'), ('int', 'module_id_offset'), ('float', 'alpha'), ('float', 'beta')]"
59,59,kTranspose,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
59,60,kTransposeBig,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'height'), ('int', 'width')]"
59,61,kLessThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
59,62,kLessThanEq,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
59,63,kLessThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
59,64,kLessThanEqScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
59,65,kGreaterThan,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
59,66,kGreaterThanEq,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
59,67,kGreaterThanScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
59,68,kGreaterThanEqScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
59,69,kUpperBound,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
59,70,kLowerBound,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'target'), ('unsigned int', 'len')]"
59,71,kUpperBoundScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
59,72,kLowerBoundScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
59,73,kUpperBoundModScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'target'), ('unsigned int', 'len')]"
59,74,kSparseDot,runs,"[('int', 'm'), ('int', 'n'), ('int', 'k'), ('float *', 'data'), ('int *', 'indptr'), ('int *', 'indices'), ('float *', 'dense_data'), ('float *', 'target'), ('float', 'beta'), ('float', 'alpha')]"
59,75,kSign,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,76,kApplySin,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,77,kApplyCos,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,78,kApplySigmoid,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,79,kApplyTanh,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,80,kApplyAbs,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,81,kApplyLog1PlusExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,82,kLog,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
59,83,kSquashRelu,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'lambda')]"
59,84,kExp,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,85,kCeil,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,86,kFloor,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,87,kSqrt,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,88,kPow,runs,"[('float *', 'mat'), ('float', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
59,89,kPowMatrix,runs,"[('float *', 'mat'), ('float *', 'pow'), ('float *', 'target'), ('unsigned int', 'len')]"
59,90,kCrossEntropy,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
59,91,kCrossEntropyBernoulli,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'tiny')]"
59,92,kCorrectPreds,runs,"[('float *', 'mat'), ('float *', 'p'), ('float *', 'target'), ('unsigned int', 'len'), ('float', 'cutoff')]"
59,93,kReciprocal,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,94,kBesselRatioActivation,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'len')]"
59,95,kBesselRatioActivationContinuedFraction,runs,"[('float *', 'mat'), ('float *', 'target'), ('float', 'order'), ('int', 'num_terms'), ('unsigned int', 'len')]"
59,96,kAddColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
59,97,kAddDiagonalScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
59,98,kAddDiagonal,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
59,99,kMultDiagonalScalar,runs,"[('float *', 'mat'), ('float', 'val'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
59,100,kMultDiagonal,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width')]"
59,101,kAddRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
59,102,kAddColMult,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
59,103,kAddToEachPixel,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('unsigned int', 'num_pix')]"
59,104,kAddRowMult,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('float', 'mult'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
59,105,kMultByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
59,106,kDivByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
59,107,kDivByColVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
59,108,kMultByRowVector,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
59,109,kMultByRowVectorScale,runs,"[('float *', 'mat'), ('float *', 'vec'), ('float *', 'tgtMat'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'scale_targets')]"
59,110,kAddMultSign,runs,"[('float *', 'a'), ('float *', 'b'), ('unsigned int', 'numEls'), ('float', 'mult')]"
59,111,kAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
59,112,kSubtract,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
59,113,kDivide,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
59,114,kMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls'), ('float', 'scale_targets')]"
59,115,kCosDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
59,116,kSinDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
59,117,kLogisticDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
59,118,kLogisticGrad,runs,"[('float *', 'mat'), ('float *', 'targets'), ('float *', 'out_grad'), ('unsigned int', 'numEls')]"
59,119,kLogisticCorrectNormalized,runs,"[('float *', 'mat'), ('float *', 'targets'), ('float *', 'out'), ('unsigned int', 'height'), ('unsigned int', 'width')]"
59,120,kTanhDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
59,121,kRectifiedLinearDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
59,122,kRectifiedLinearSmoothDeriv,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
59,123,kMultScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len'), ('float', 'scale_targets')]"
59,124,kAssignScalar,runs,"[('float *', 'dest'), ('float', 'alpha'), ('unsigned int', 'len')]"
59,125,kDivideScalar,runs,"[('float *', 'mat'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'len')]"
59,126,kAddScalar,runs,"[('float *', 'a'), ('float', 'alpha'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
59,127,kSelectRows,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nSourceRows')]"
59,128,kSwapColumns,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices1'), ('float *', 'indices2'), ('int', 'cols'), ('int', 'width'), ('int', 'height')]"
59,129,kShuffleColumns,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'indices'), ('int', 'width'), ('int', 'height')]"
59,130,kSetSelectedRows,runs,"[('float *', 'target'), ('float *', 'source'), ('float *', 'indices'), ('int', 'nRowIs'), ('int', 'nCols'), ('int', 'nTargetRows')]"
59,131,kBlockify,runs,"[('float *', 'source'), ('float *', 'target'), ('int', 'numdims'), ('int', 'blocksize')]"
59,132,kGenerateTranslationsBigVarOff,runs,"[('float *', 'source'), ('float *', 'target'), ('float *', 'off_x_arr'), ('float *', 'off_y_arr'), ('int', 'source_w'), ('int', 'target_w'), ('int', 'num_channels')]"
59,133,kSoftMaxGrad,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
59,134,kSoftMaxGradRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
59,135,kHingeQuadraticRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'margin')]"
59,136,kHingeLinearRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'margin')]"
59,137,kSoftMaxGradCLS,runs,"[('float *', 'mat'), ('int *', 'labels'), ('float *', 'indices'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
59,138,kSoftMaxCrossEntropy,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'tiny')]"
59,139,kSoftMaxCrossEntropyRowMajor,runs,"[('float *', 'mat'), ('float *', 'labels'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'tiny')]"
59,154,kSumRowwise,runs,"[('float *', 'mat'), ('float *', 'target'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'mult'), ('float', 'p')]"
59,159,kExpand,runs,"[('float *', 'source'), ('float *', 'indices'), ('float *', 'target'), ('int', 'height'), ('int', 'width'), ('int', 'target_width')]"
59,160,kExpandAndAdd,runs,"[('float *', 'source'), ('float *', 'mat'), ('float *', 'indices'), ('float *', 'target'), ('int', 'width'), ('int', 'height'), ('float', 'mult'), ('int', 'width2')]"
59,161,kAccumulateColumns,runs,"[('float *', 'mat'), ('float *', 'indices'), ('float *', 'target'), ('int', 'mat_width'), ('int', 'target_width'), ('int', 'height'), ('float', 'mult'), ('int', 'avg')]"
59,162,kExtractPatches,runs,"[('float *', 'images'), ('float *', 'patches'), ('float *', 'indices'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('int', 'num_images'), ('int', 'img_width'), ('int', 'img_height'), ('int', 'patch_width'), ('int', 'patch_height'), ('int', 'num_colors')]"
59,163,kExtractPatches2,runs,"[('float *', 'images'), ('float *', 'patches'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('float *', 'flip'), ('int', 'num_images'), ('int', 'img_width'), ('int', 'img_height'), ('int', 'patch_width'), ('int', 'patch_height'), ('int', 'num_colors')]"
59,164,kExtractPatches3,runs,"[('float *', 'images'), ('float *', 'patches'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('float *', 'flip'), ('int', 'num_images'), ('int', 'img_width'), ('int', 'img_height'), ('int', 'patch_width'), ('int', 'patch_height'), ('int', 'num_colors')]"
59,166,kRectifyBoundingBox,runs,"[('float *', 'boxes'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('float *', 'flip'), ('int', 'num_images'), ('int', 'patch_width'), ('int', 'patch_height'), ('int', 'num_locs')]"
59,167,kAdagrad,runs,"[('float *', 'history'), ('float *', 'grad'), ('float', 'delta'), ('int', 'len')]"
59,168,kRMSProp,runs,"[('float *', 'history'), ('float *', 'grad'), ('float', 'factor'), ('int', 'len')]"
59,169,kBoundingBoxLogisticGrad,runs,"[('float *', 'mat'), ('int *', 'bbox'), ('int *', 'label'), ('int *', 'seg'), ('float *', 'indices'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('int', 'size'), ('int', 'width'), ('int', 'height'), ('int', 'depth'), ('float', 'scale_width'), ('float', 'scale_height'), ('float *', 'grad')]"
59,171,kBoundingBoxSoftMaxGrad,runs,"[('float *', 'mat'), ('int *', 'bbox'), ('int *', 'label'), ('int *', 'seg'), ('float *', 'indices'), ('float *', 'width_offset'), ('float *', 'height_offset'), ('int', 'size'), ('int', 'width'), ('int', 'height'), ('int', 'depth'), ('float', 'scale_width'), ('float', 'scale_height'), ('float *', 'grad')]"
5900,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5900,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5906,0,render,runs,"[('float *', 'framebuffer'), ('int', 'width'), ('int', 'height')]"
591,12,stretch_kernel,runs,"[('int', 'acc'), ('int', 'samps'), ('float', 'tsamp'), ('float *', 'd_input'), ('float *', 'd_output'), ('float', 't_zero'), ('float', 'multiplier'), ('float', 'tsamp_inverse')]"
591,13,PD_ZC_GPU,runs,"[('float *', 'd_input'), ('float *', 'd_output'), ('int', 'maxTaps'), ('int', 'nTimesamples'), ('int', 'nLoops')]"
591,15,bootstrap,runs,"[('int', 'bins'), ('int', 'num_els'), ('int', 'num_boots'), ('float *', 'g_idata'), ('double *', 'g_odata'), ('unsigned int *', 'g_irand')]"
591,16,bootstrap2,runs,"[('int', 'bins'), ('int', 'num_els'), ('int', 'num_boots'), ('float *', 'g_idata'), ('double *', 'g_odata'), ('unsigned int *', 'g_irand')]"
591,17,bootstrap3,runs,"[('int', 'bins'), ('int', 'num_els'), ('int', 'num_boots'), ('float *', 'g_idata'), ('double *', 'g_odata'), ('unsigned int *', 'g_irand')]"
591,18,stats_kernel,runs,"[('int', 'half_samps'), ('float *', 'd_sum'), ('float *', 'd_sum_square'), ('float *', 'd_signal_power')]"
591,19,zero_dm_outliers_kernel_one,runs,"[('unsigned short *', 'd_input'), ('int', 'nchans'), ('int', 'nsamp')]"
591,20,zero_dm_outliers_kernel_two,runs,"[('unsigned short *', 'd_input'), ('int', 'nchans'), ('int', 'nsamp')]"
591,22,SNR_GPU_limited,runs,"[('float *', 'd_FIR_input'), ('float *', 'd_SNR_output'), ('ushort *', 'd_SNR_taps'), ('float *', 'd_MSD'), ('int', 'x_steps'), ('int', 'nTaps'), ('int', 'nColumns'), ('int', 'offset')]"
591,30,gpu_Filter_peaks_kernel,runs,"[('unsigned int *', 'd_new_peak_list_DM'), ('unsigned int *', 'd_new_peak_list_TS'), ('unsigned int *', 'd_new_peak_list_BW'), ('float *', 'd_new_peak_list_SNR'), ('unsigned int *', 'd_peak_list_DM'), ('unsigned int *', 'd_peak_list_TS'), ('unsigned int *', 'd_peak_list_BW'), ('float *', 'd_peak_list_SNR'), ('unsigned int', 'nElements'), ('unsigned int', 'max_distance'), ('int', 'nLoops'), ('int', 'max_list_pos'), ('int *', 'gmem_pos')]"
591,31,PD_ZC_GPU_KERNEL,runs,"[('float *', 'd_input'), ('float *', 'd_output'), ('int', 'maxTaps'), ('int', 'nTimesamples'), ('int', 'nLoops')]"
591,32,PD_INPLACE_GPU_KERNEL,runs,"[('float *', 'd_input'), ('float *', 'd_temp'), ('unsigned char *', 'd_output_taps'), ('float *', 'd_MSD'), ('int', 'maxTaps'), ('int', 'nTimesamples')]"
591,33,set_stretch_kernel,runs,"[('int', 'samps'), ('float', 'mean'), ('float *', 'd_input')]"
591,44,GPU_simple_power_and_interbin_kernel,runs,"[('float2 *', 'd_input_complex'), ('float *', 'd_output_power'), ('float *', 'd_output_interbinning'), ('int', 'nTimesamples'), ('float', 'norm')]"
591,49,bin,runs,"[('unsigned short *', 'd_input'), ('float *', 'd_output'), ('int', 'in_nsamp')]"
591,58,MSD_GPU_Interpolate_linear,runs,"[('float *', 'd_MSD_DIT'), ('float *', 'd_MSD_interpolated'), ('int *', 'd_MSD_DIT_widths'), ('int', 'MSD_DIT_size'), ('int *', 'boxcar'), ('int', 'max_width_performed')]"
591,64,simple_corner_turn_kernel,runs,"[('float *', 'd_input'), ('float *', 'd_output'), ('int', 'primary_size'), ('int', 'secondary_size')]"
591,66,simple_corner_turn_kernel,runs,"[('unsigned short *', 'd_input'), ('float *', 'd_output'), ('int', 'nchans'), ('int', 'nsamp')]"
591,67,swap,runs,"[('unsigned short *', 'd_input'), ('float *', 'd_output'), ('int', 'nchans'), ('int', 'nsamp')]"
591,68,rfi_gpu_kernel,runs,"[('unsigned short *', 'd_input'), ('int', 'nchans'), ('int', 'nsamp')]"
5912,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
5912,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
5912,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
5912,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
5912,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
5912,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
5912,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
5912,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
5912,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
5912,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
5912,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
5912,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
5912,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
5912,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
5912,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
5912,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
5912,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
5912,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
5912,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
5912,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
5912,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
5912,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
5912,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5912,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5912,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5912,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5912,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5912,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
5912,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
5912,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
5912,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
5912,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
5912,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
5912,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
5912,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
5912,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5912,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5912,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5912,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5912,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5912,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
5912,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
5912,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
5912,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
5912,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
5912,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
5912,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
5912,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
5912,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
5912,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
5912,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
5912,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
5912,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
5912,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
5912,67,computePointGradients1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dj_ang'), ('double *', 'pg24'), ('double *', 'pg05'), ('double *', 'pg15'), ('double *', 'pg25')]"
5912,68,computePointHessian0,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph93'), ('double *', 'ph103'), ('double *', 'ph113'), ('double *', 'ph123'), ('double *', 'ph94'), ('double *', 'ph133'), ('double *', 'ph104'), ('double *', 'ph143'), ('double *', 'ph114'), ('double *', 'ph153'), ('double *', 'ph95'), ('double *', 'ph163'), ('double *', 'ph105'), ('double *', 'ph173'), ('double *', 'ph115')]"
5912,69,computePointHessian1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph124'), ('double *', 'ph134'), ('double *', 'ph144'), ('double *', 'ph154'), ('double *', 'ph125'), ('double *', 'ph164'), ('double *', 'ph135'), ('double *', 'ph174'), ('double *', 'ph145')]"
5912,70,computePointHessian2,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph155'), ('double *', 'ph165'), ('double *', 'ph175')]"
5912,71,computeScoreList,runs,"[('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'e_x_cov_x'), ('double', 'gauss_d1'), ('double *', 'score')]"
5912,72,computeScoreGradientList,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('int', 'voxel_num'), ('double *', 'e_x_cov_x'), ('double *', 'cov_dxd_pi'), ('double', 'gauss_d1'), ('int', 'valid_voxel_num'), ('double *', 'score_gradients')]"
5912,73,computeExCovX,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centr_x'), ('double *', 'centr_y'), ('double *', 'centr_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22')]"
5912,74,updateExCovX,runs,"[('double *', 'e_x_cov_x'), ('double', 'gauss_d2'), ('int', 'valid_voxel_num')]"
5912,75,computeCovDxdPi,runs,"[('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'inverse_covariance'), ('int', 'voxel_num'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'point_gradients'), ('double *', 'cov_dxd_pi'), ('int', 'valid_voxel_num')]"
5912,76,computeHessianListS0,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_gradients'), ('double *', 'tmp_hessian'), ('int', 'valid_voxel_num')]"
5912,77,computeHessianListS1,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'hessians'), ('double *', 'e_x_cov_x'), ('double *', 'tmp_hessian'), ('double *', 'cov_dxd_pi'), ('double *', 'point_gradients'), ('int', 'valid_voxel_num')]"
5912,78,computeHessianListS2,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_hessians'), ('double *', 'hessians'), ('int', 'valid_voxel_num')]"
5912,80,sumScore,runs,"[('double *', 'score'), ('int', 'full_size'), ('int', 'half_size')]"
5914,1,sum,runs,"[('int *', 'dest'), ('int', 'a'), ('int', 'b')]"
5914,2,vector_add,runs,"[('double const *', 'A_dev'), ('double const *', 'B_dev'), ('double *', 'C_dev'), ('int const', 'N')]"
5919,31,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
5919,32,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
5919,33,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
593,2,getLoss,runs,"[('float *', 'dat'), ('float *', 'rst')]"
5930,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5930,299,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
5930,304,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5934,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
5936,0,kernel,runs,[]
5936,1,kernel,runs,[]
5936,2,kernel,runs,[]
5948,0,cal_pi,runs,"[('float *', 'sum'), ('int', 'nbin'), ('float', 'step'), ('int', 'nthreads'), ('int', 'nblocks')]"
5954,1,ExpProbPolynomProbsImpl,runs,"[('const float *', 'features'), ('int', 'batchSize'), ('const int *', 'splits'), ('const float *', 'conditions'), ('const int *', 'polynomOffsets'), ('int', 'polynomCount'), ('float', 'lambda'), ('float *', 'probs')]"
5954,2,ExpProbPolynomForwardImpl,runs,"[('const float *', 'probs'), ('int', 'batchSize'), ('const float *', 'values'), ('int', 'polynomCount'), ('int', 'outputDim'), ('float *', 'out')]"
5954,4,SigmoidProbPolynomProbsImpl,runs,"[('const float *', 'features'), ('int', 'batchSize'), ('const int *', 'splits'), ('const float *', 'conditions'), ('const int *', 'polynomOffsets'), ('int', 'polynomCount'), ('float', 'lambda'), ('float *', 'probs')]"
5954,5,SigmoidProbPolynomForwardImpl,runs,"[('const float *', 'probs'), ('int', 'batchSize'), ('const float *', 'values'), ('int', 'polynomCount'), ('int', 'outputDim'), ('float *', 'out')]"
5954,7,LinearPolynomProbsImpl,runs,"[('const float *', 'features'), ('int', 'batchSize'), ('const int *', 'splits'), ('const float *', 'conditions'), ('const int *', 'polynomOffsets'), ('int', 'polynomCount'), ('float', 'lambda'), ('float *', 'probs'), ('const int *', 'origFIds')]"
5954,8,LinearPolynomForwardImpl,runs,"[('const float *', 'probs'), ('int', 'batchSize'), ('const float *', 'values'), ('int', 'polynomCount'), ('int', 'outputDim'), ('float *', 'out')]"
5954,11,PolynomForwardImpl,runs,"[('const float *', 'probs'), ('int', 'batchSize'), ('const float *', 'values'), ('int', 'polynomCount'), ('int', 'outputDim'), ('float *', 'out')]"
596,0,daxbyAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('float', 'x'), ('int', 'numElements')]"
5964,37,test_launch_cuda_native,runs,"[('float *', 'scalar'), ('float *', 'vector'), ('int', 'sxy'), ('int', 'sx'), ('int', 'sy'), ('int', 'sz'), ('int', 'stride')]"
5964,40,fill_one,runs,"[('float *', 'prp_0'), ('int', 'sz')]"
5964,41,fill_count,runs,"[('float *', 'prp_0'), ('int', 'sz')]"
5967,161,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5967,220,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
5967,221,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
5967,222,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
5967,227,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
5967,333,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
5967,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
5976,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
5976,21,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
5984,5,reduceKernel,runs,"[('float *', 'd_Result'), ('float *', 'd_Input'), ('int', 'N')]"
5984,6,VecAdd,runs,"[('const float *', 'xs'), ('const float *', 'ys'), ('float *', 'out'), ('const unsigned int', 'N')]"
5994,6,helloFromGPU,runs,[]
5994,7,sumMatrixOnGPU2D,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'Nx'), ('int', 'Ny')]"
5994,8,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
5994,9,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
5994,10,reduceInterleave,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
5994,11,reduceUnroll2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
5994,12,reduceUnrollWarp8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
5994,13,reduceCompleteUnrollWarp8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
5998,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
5998,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6,1,reduction_KernelOptimized,runs,"[('int', 'numElements'), ('float *', 'dataIn'), ('float *', 'dataOut')]"
6,3,shMatMul_Kernel,runs,"[('int', 'matrixSize'), ('float *', 'matrixA'), ('float *', 'matrixB'), ('float *', 'matrixC')]"
6,5,globalMemStrideKernel,runs,[]
6,6,globalMemOffsetKernel,runs,[]
6,10,SharedMem2globalMem,runs,"[('float *', 'd_memoryA'), ('int', 'iSize')]"
6,11,SharedMem2Registers,runs,"[('float *', 'outFloat'), ('int', 'iSize')]"
6,12,Registers2SharedMem,runs,"[('float *', 'outFloat'), ('int', 'iSize')]"
6,13,bankConflictsRead,runs,"[('float *', 'outFloat'), ('int', 'iStride'), ('unsigned long long *', 'ullTime')]"
6,16,updatePosition_Kernel,runs,"[('int', 'numElements'), ('float4 *', 'bodyPos'), ('float3 *', 'bodySpeed')]"
6006,36,sync_conv_groups,runs,[]
6009,2,cuda_kernel,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'arraySize')]"
601,1,kernel_map,runs,"[('int *', 'values'), ('int *', 'next_values')]"
601,3,kernel_5,runs,"[('int *', 'new_data'), ('int *', 'data')]"
601,16,kernel_stencil,runs,"[('float *', 'new_data'), ('float *', 'data'), ('float *', 'param_a'), ('float *', 'param_b'), ('float *', 'param_c'), ('float *', 'param_wrk'), ('float *', 'param_bnd')]"
601,17,kernel,runs,[]
6011,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
6011,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
6011,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
6011,5,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
6011,6,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
6011,7,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
6011,9,im2col_align_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col'), ('const int', 'bit_align')]"
6011,24,convolve_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad')]"
6011,25,convolve_bin_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad'), ('int', 'new_lda'), ('float *', 'mean_arr_gpu')]"
6011,27,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
6011,29,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
6011,31,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
6011,32,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
6011,33,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
6011,34,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
6011,35,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
6011,36,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
6011,39,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
6011,40,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
6011,41,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
6011,42,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
6011,43,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
6011,44,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
6011,45,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6011,46,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6011,47,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6011,48,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6011,49,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6011,50,mask_kernel_new_api,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
6011,51,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
6011,52,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
6011,53,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
6011,56,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
6011,57,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
6011,58,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6011,59,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6011,60,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6011,61,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
6011,62,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
6011,63,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
6011,64,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
6011,65,softmax_kernel_new_api,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
6011,66,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
6011,67,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
6011,68,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
6011,70,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
6011,71,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
6011,72,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
6011,73,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
6011,75,activate_array_leaky_kernel,runs,"[('float *', 'x'), ('int', 'n')]"
6015,180,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6015,320,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6019,165,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6019,224,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
6019,225,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
6019,226,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
6019,231,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
6019,347,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
6019,352,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
602,1,Vector_Addition,runs,"[('const int *', 'dev_a'), ('const int *', 'dev_b'), ('int *', 'dev_c')]"
6020,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
6020,22,ComputeOffsetOfMatrixAB,runs,"[('const int32_t *', 'row_sum'), ('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'K_A_B'), ('int32_t', 'N')]"
6020,23,ComputeOffsetOfMatrixA,runs,"[('const int32_t *', 'col_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
6020,24,ComputeOffsetOfMatrixB,runs,"[('const int32_t *', 'row_sum'), ('int32_t *', 'output'), ('int32_t', 'N')]"
6020,32,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
6026,3,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
6026,4,childKernel,runs,"[('unsigned int', 'parentThreadIndex'), ('float *', 'data')]"
6026,6,inc,runs,"[('int', 'n'), ('float *', 'a')]"
6048,1,cuInsertionSort,runs,"[('float *', 'dist'), ('long *', 'ind'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
6054,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
6054,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
6054,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
6054,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
6054,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
6054,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
6054,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
6057,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
6057,26,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
606,0,kernelAdd,runs,"[('float *', 'dvalues'), ('int', 'numOperations'), ('int', 'firstInd'), ('int', 'nextColInd')]"
606,1,kernelAdd,runs,"[('float *', 'dvalues'), ('int', 'numOperations'), ('int', 'firstInd'), ('int', 'nextColInd')]"
606,2,kernelAdd,runs,"[('float *', 'dvalues'), ('int', 'numOperations'), ('int', 'firstInd'), ('int', 'nextColInd')]"
606,3,kernelAdd,runs,"[('float *', 'dvalues'), ('int', 'numOperations'), ('int', 'firstInd'), ('int', 'nextColInd')]"
606,4,kernelAdd,runs,"[('float *', 'dvalues'), ('int', 'numOperations'), ('int', 'firstInd'), ('int', 'nextColInd')]"
606,5,kernelAdd,runs,"[('float *', 'dvalues'), ('int', 'numOperations'), ('int', 'firstInd'), ('int', 'nextColInd')]"
606,6,kernelAdd,runs,"[('int *', 'dvalues'), ('int', 'numOperations'), ('int', 'firstInd'), ('int', 'nextColInd')]"
606,7,vecAddKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
606,8,vecAddKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
606,9,vecAddKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
606,10,grayscaleKernel,runs,"[('int *', 'ms'), ('int *', 'aux'), ('int', 'n')]"
6068,204,cuda_debug_kernel,runs,[]
6069,132,kernel_print,runs,"[('int const *', 'p'), ('int', 'n')]"
6069,133,kernel_print,runs,"[('long const *', 'p'), ('int', 'n')]"
6069,134,kernel_print,runs,"[('size_t const *', 'p'), ('int', 'n')]"
6070,8,RgbToRgbaKernel,runs,"[('const uint8_t __restrict__ *', 'input'), ('uint8_t __restrict__ *', 'output'), ('size_t', 'pitch'), ('size_t', 'width_px'), ('size_t', 'height')]"
6070,20,ConvertGrayToYCbCr8uKernel,runs,"[('const uint8_t *', 'input'), ('uint8_t *', 'output'), ('unsigned int', 'total_pixels')]"
6074,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
6080,2,get_attribute_kernel,runs,"[('int *', 'out'), ('int *', 'in')]"
6080,3,set_attribute_kernel,runs,"[('int *', 'out'), ('int *', 'in')]"
6086,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
6089,0,VecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
6089,1,VecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
6091,6,expandPlanes_kernel_Fp32_NCHW,runs,"[('float *', 'output'), ('const uint64_t *', 'masks'), ('const float *', 'values'), ('int', 'n')]"
6095,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6095,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6096,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
6105,0,HelloFromGPU,runs,[]
6109,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
6109,23,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
611,1,vignette,runs,"[('const unsigned char *', 'src'), ('unsigned char *', 'dst'), ('float', 'inner'), ('float', 'outer'), ('const size_t', 'width'), ('const size_t', 'height')]"
611,2,kernel,runs,"[('const unsigned char *', 'src'), ('unsigned char *', 'dst'), ('int', 'level'), ('const size_t', 'width'), ('const size_t', 'height')]"
6113,5,abc,runs,[]
6115,0,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
6115,1,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
6119,5,quark_filter_gpu_sm2,runs,"[('const uint32_t', 'threads'), ('const uint32_t *', 'd_hash'), ('uint32_t *', 'd_branch2'), ('uint32_t *', 'd_NonceBranch')]"
6119,18,lyra2Z_gpu_hash_32_sm2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash'), ('uint32_t *', 'resNonces')]"
6119,20,lyra2Z_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash')]"
6119,21,lyra2Z_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint2 *', 'g_hash'), ('uint32_t *', 'resNonces')]"
6119,27,lyra2_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint64_t *', 'g_hash')]"
6119,28,lyra2_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint2 *', 'g_hash')]"
6119,30,lyra2_gpu_hash_64_3,runs,"[('uint32_t', 'threads'), ('uint2 *', 'd_hash_512'), ('const uint32_t', 'round')]"
6120,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
6129,0,vecAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
613,0,histogram,runs,"[('unsigned int *', 'in'), ('unsigned int *', 'hist'), ('int', 'n'), ('unsigned int', 'nBins'), ('unsigned int', 'mask'), ('unsigned int', 'current_bits')]"
613,1,scanBlks,runs,"[('unsigned int *', 'in'), ('unsigned int *', 'out'), ('unsigned int', 'n'), ('unsigned int *', 'blkSums')]"
613,2,addPrevSum,runs,"[('unsigned int *', 'blkSumsScan'), ('unsigned int *', 'blkScans'), ('unsigned int', 'n')]"
613,3,exclusive_scan,runs,"[('unsigned int *', 'in'), ('unsigned int *', 'out'), ('int', 'n')]"
613,4,scatter,runs,"[('unsigned int *', 'in'), ('unsigned int *', 'in_pos'), ('unsigned int *', 'out'), ('unsigned int *', 'out_pos'), ('unsigned int', 'n'), ('unsigned int *', 'd_histScan'), ('unsigned int', 'mask'), ('unsigned int', 'current_bits'), ('unsigned int', 'nBins')]"
613,5,swap,runs,"[('unsigned int *', 'in'), ('unsigned int *', 'in_pos'), ('unsigned int *', 'out'), ('unsigned int *', 'out_pos'), ('unsigned int', 'n')]"
6132,0,calculatePi,runs,"[('double *', 'piTotal'), ('long int', 'iterations'), ('int', 'totalThreads')]"
6138,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6138,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6145,1,sobelFilter,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'width'), ('int', 'height')]"
6152,0,setupRandomStream,runs,"[('unsigned int', 'seed'), ('curandState *', 'states')]"
6154,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
6154,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
6154,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
6154,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
6154,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
6154,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
6159,93,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
6159,94,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
6173,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6173,301,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
6173,306,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6176,1,compute_distance_texture,runs,"[('cudaTextureObject_t', 'ref'), ('int', 'ref_width'), ('float *', 'query'), ('int', 'query_width'), ('int', 'query_pitch'), ('int', 'height'), ('float *', 'dist')]"
6176,2,modified_insertion_sort,runs,"[('float *', 'dist'), ('int', 'dist_pitch'), ('int *', 'index'), ('int', 'index_pitch'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
6176,3,compute_sqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'pitch'), ('int', 'k')]"
6176,4,compute_squared_norm,runs,"[('float *', 'array'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('float *', 'norm')]"
6176,5,add_reference_points_norm,runs,"[('float *', 'array'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('float *', 'norm')]"
6176,6,add_query_points_norm_and_sqrt,runs,"[('float *', 'array'), ('int', 'width'), ('int', 'pitch'), ('int', 'k'), ('float *', 'norm')]"
6179,0,interp,runs,"[('float *', 'out'), ('float *', 'out2'), ('int', 'N')]"
6179,1,vecadd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'N')]"
6179,2,fill,runs,"[('float4 *', 'localbuf'), ('float', 'val'), ('float4 *', 'ptr'), ('int', 'offset'), ('int', 'N')]"
6179,3,sum_2,runs,"[('float4 *', 'localbuf'), ('float4 *', 'ptrd'), ('int', 'offset_0'), ('int', 'offset_1'), ('int', 'N')]"
6179,4,vecadd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'N')]"
6179,8,shmem,runs,"[('int *', 'in'), ('int *', 'out'), ('int', 'N')]"
6179,10,vecadd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'N')]"
6179,11,sum,runs,"[('float4 *', 'a'), ('float4 *', 'b'), ('int', 'N')]"
6179,12,swan_fast_fill,runs,"[('uint4 *', 'ptr'), ('int', 'len')]"
6179,13,swan_fast_fill_word,runs,"[('uint *', 'ptr'), ('int', 'len')]"
618,1,kernel_initIntegrtalImage,runs,"[('unsigned int *', '_d_out_integralImage'), ('int', '_h_width'), ('int', '_h_height')]"
618,2,kernel_scanNaiveSumVertical,runs,"[('unsigned int *', '_d_out_integralImage'), ('unsigned char *', '_d_in_image'), ('int', '_h_width'), ('int', '_h_height')]"
618,3,kernel_scanNaiveSumHirizontal,runs,"[('unsigned int *', '_d_out_integralImage'), ('int', '_h_width'), ('int', '_h_height')]"
618,4,kernel_computeDesctriptorCUDARot,runs,"[('bool *', '_d_isdescriptor'), ('char *', '_d_vdescriptor'), ('int *', '_d_keypointsIndexX'), ('int *', '_d_keypointsIndexY'), ('int *', '_d_keypointsRotation'), ('int', '_amountofkeypoints'), ('unsigned int *', '_d_integralImage'), ('int', '_d_width'), ('int', '_d_height'), ('float', '_scale')]"
618,11,kernel_setAllPointsToRemove,runs,"[('bool *', 'd_markers'), ('int', 'number_of_points')]"
618,13,kernel_cudaWarmUpGPU,runs,[]
618,23,kernel_cudaWarmUpGPU,runs,[]
618,27,kernel_cudaWarmUpGPU,runs,[]
618,39,kernel_cudaWarmUpGPU,runs,[]
618,51,kernel_cudaWarmUpGPU,runs,[]
618,63,kernel_cudaPrepareProjectionIndexes,runs,"[('char *', 'd_v_is_projection'), ('int *', 'd_nearest_neighbour_indexes'), ('int', 'number_of_points')]"
618,64,kernel_copy_NN_with_NN_assuption,runs,"[('double *', 'd_temp_double_mem'), ('int *', 'd_nearest_neighbour_indexes'), ('int', 'number_of_points')]"
618,75,kernel_cudaWarmUpGPU,runs,[]
618,76,kernel_cudaCompute_AtP,runs,"[('double *', 'd_A'), ('double *', 'd_P'), ('double *', 'd_AtP'), ('int', 'rows'), ('int', 'columns')]"
618,83,kernel_setAllPointsToRemove,runs,"[('bool *', 'd_markers'), ('int', 'number_of_points')]"
618,85,kernel_cudaWarmUpGPU,runs,[]
618,86,kernel_cudaWarmUpGPU,runs,[]
618,94,kernel_cudaCompute_AtP,runs,"[('double *', 'd_A'), ('double *', 'd_P'), ('double *', 'd_AtP'), ('int', 'rows'), ('int', 'columns')]"
618,96,kernel_cudaWarmUpGPU,runs,[]
618,99,kernel_cudaWarmUpGPU,runs,[]
618,109,kernel_cudaWarmUpGPU,runs,[]
618,118,kernel_copy_NN_with_NN_assuption,runs,"[('double *', 'd_temp_double_mem'), ('int *', 'd_nearest_neighbour_indexes'), ('int', 'number_of_points')]"
618,128,kernel_cudaWarmUpGPU,runs,[]
618,130,kernel_cudaWarmUpGPU,runs,[]
618,141,kernel_cudaWarmUpGPU,runs,[]
618,149,kernel_cudaCompute_AtP,runs,"[('double *', 'd_A'), ('double *', 'd_P'), ('double *', 'd_AtP'), ('int', 'rows'), ('int', 'columns')]"
618,151,kernel_cudaWarmUpGPU,runs,[]
618,158,kernel_setAllPointsToRemove,runs,"[('int', 'number_of_points'), ('bool *', 'd_markers_out')]"
618,160,kernel_cudaWarmUpGPU,runs,[]
618,167,kernel_cudaCompute_AtP,runs,"[('double *', 'd_A'), ('double *', 'd_P'), ('double *', 'd_AtP'), ('int', 'rows'), ('int', 'columns')]"
618,171,kernel_cudaWarmUpGPU,runs,[]
618,178,kernel_cudaCompute_AtP,runs,"[('double *', 'd_A'), ('double *', 'd_P'), ('double *', 'd_AtP'), ('int', 'rows'), ('int', 'columns')]"
618,181,kernel_cudaWarmUpGPU,runs,[]
618,189,kernel_copy_NN_with_NN_assuption,runs,"[('double *', 'd_temp_double_mem'), ('int *', 'd_nearest_neighbour_indexes'), ('int', 'number_of_points')]"
618,230,kernel_cudaWarmUpGPU,runs,[]
618,233,kernel_setAllPointsToRemove,runs,"[('int', 'number_of_points'), ('bool *', 'd_markers_out')]"
618,236,kernel_setAllPointsToRemove,runs,"[('bool *', 'd_markers'), ('int', 'number_of_points')]"
618,248,kernel_fill_nn_cuda,runs,"[('unsigned int *', 'd_nn'), ('int *', 'nearest_neighbour_indexes'), ('unsigned int', 'number_nearest_neighbour_indexes')]"
6182,0,kernel,runs,[]
6182,1,kernel,runs,[]
6182,2,kernel,runs,[]
6182,3,kernel,runs,[]
6189,0,dev_const,runs,"[('float *', 'px'), ('float', 'k')]"
619,0,dev_accumDiffStims,runs,"[('float *', 'd_resp_tmp'), ('float *', 'diffV1GausBuf'), ('int', 'nrXnrY'), ('int', 'scale'), ('int', 'orderX'), ('int', 'orderY'), ('int', 'orderT')]"
619,1,dev_ave,runs,"[('float *', 'i1data'), ('float *', 'i2data'), ('float *', 'odata'), ('int', 'len')]"
619,2,dev_conv1,runs,"[('float *', 'idata'), ('float *', 'odata'), ('int', 'len'), ('const float *', 'filt'), ('int', 'filtlen')]"
619,3,dev_convn,runs,"[('float *', 'idata'), ('float *', 'odata'), ('int', 'nrX_'), ('int', 'nrN'), ('int', 'stride'), ('int', 'blockStride'), ('int', 'nrBlocks'), ('const float *', 'filt'), ('int', 'filtlen')]"
619,4,dev_edges,runs,"[('float *', 'data'), ('int', 'len'), ('int', 'nrX_'), ('int', 'nrY_')]"
619,6,dev_fullRect2,runs,"[('float *', 'data'), ('int', 'len'), ('double', 'scaleV1Linear'), ('double', 'scaleV1FullWaveRect')]"
619,7,dev_mean3,runs,"[('float *', 'idata'), ('float *', 'odata'), ('int', 'nrXnrY'), ('int', 'nrZ')]"
619,8,dev_normalize,runs,"[('float *', 'resp'), ('float *', 'pop'), ('int', 'nrXnrY'), ('double', 'scaleV1C50')]"
619,9,dev_scale,runs,"[('float *', 'data'), ('float', 'scale'), ('int', 'len')]"
619,10,dev_scaleHalfRect,runs,"[('float *', 'data'), ('int', 'len'), ('float', 'scale'), ('float', 'spont')]"
619,11,dev_split_gray,runs,"[('unsigned char *', 'idata'), ('float *', 'gray'), ('int', 'len')]"
619,12,dev_split_RGB,runs,"[('unsigned char *', 'idata'), ('float *', 'gray'), ('int', 'len')]"
619,13,dev_sub,runs,"[('float *', 'i1data'), ('float *', 'i2data'), ('float *', 'odata'), ('int', 'len')]"
619,14,dev_sum,runs,"[('float *', 'i1data'), ('float *', 'i2data'), ('float *', 'odata'), ('int', 'len')]"
6190,204,cuda_debug_kernel,runs,[]
6192,88,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
6199,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
6199,1,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
6199,2,mykernel,runs,[]
62,0,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
62,35,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
62,36,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numCols'), ('const uint', 'numElements')]"
62,37,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
6201,3,multKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
6201,4,multKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
6203,1,find_nearest_cluster,runs,"[('int', 'numCoords'), ('int', 'numObjs'), ('int', 'numClusters'), ('float *', 'objects'), ('float *', 'deviceClusters'), ('int *', 'membership'), ('int *', 'changedmembership')]"
6205,172,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6205,303,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
6205,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6210,2,kernel_looping,runs,"[('float *', 'point'), ('unsigned int', 'num')]"
6210,5,init,runs,"[('uint32_t *', 'v'), ('uint32_t', 'val'), ('uint32_t', 'n')]"
6210,21,analyze,runs,"[('const float *', 'input'), ('float *', 'sum'), ('int', 'numElements')]"
6210,22,sum,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
6220,204,cuda_debug_kernel,runs,[]
6221,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6221,316,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6222,3,ComputeHomographies,runs,"[('float *', 'coord'), ('int *', 'randPts'), ('float *', 'homo'), ('int', 'numPts')]"
6222,6,ScaleUp,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'newpitch')]"
6222,16,createHistCuda,runs,"[('float *', 'siftCentroids'), ('float *', 'siftImage'), ('int', 'linesCent'), ('int', 'linesIm'), ('float *', 'temp')]"
6222,17,matchHistCuda,runs,"[('float *', 'qSet'), ('float *', 'dbSet'), ('size_t', 'qSize'), ('size_t', 'dbSize'), ('size_t', 'hSize'), ('float *', 'out')]"
6222,18,rowMin,runs,"[('float *', 'input'), ('int *', 'output'), ('size_t', 'rowS'), ('size_t', 'rowNum')]"
6224,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
6224,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
6225,0,saxpy,runs,"[('float *', 'X'), ('float *', 'Y'), ('float *', 'Z'), ('int', 'A'), ('int', 'N')]"
6226,0,VectorSum,runs,"[('int *', 'result'), ('const int *', 'vector_a'), ('const int *', 'vector_b')]"
6226,1,gpu_matrix_mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
6226,2,gpu_square_matrix_mult,runs,"[('int *', 'd_a'), ('int *', 'd_b'), ('int *', 'd_result'), ('int', 'n')]"
6226,3,gpu_matrix_transpose,runs,"[('int *', 'mat_in'), ('int *', 'mat_out'), ('unsigned int', 'rows'), ('unsigned int', 'cols')]"
6226,4,reduction,runs,"[('float *', 'g_odata'), ('float *', 'g_idata')]"
6238,36,sync_conv_groups,runs,[]
6243,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6243,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6246,3,kernel_tanh_full_device,runs,"[('unsigned int', 'size'), ('int *', 'x'), ('int *', 'out')]"
6246,11,kernel_sigmoid_full_device,runs,"[('unsigned int', 'size'), ('int *', 'x'), ('int *', 'out')]"
6246,18,kernel_log_full_device,runs,"[('int *', 'x'), ('int *', 'out'), ('unsigned int', 'size'), ('int', 'epsilon')]"
6246,27,kernel_pow_grad_device,runs,"[('int *', 'x'), ('int', 'power'), ('int *', 'grad'), ('int *', 'out'), ('bool', 'grad_is_scalar'), ('unsigned int', 'size')]"
6252,188,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6252,329,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
627,0,DP,runs,"[('char *', 'dT_seq'), ('char *', 'dTrace'), ('int *', 'dScore')]"
628,0,setup_kernel,runs,"[('long long', 'seed'), ('curandState_t *', 'devStates'), ('ushort', 'N')]"
628,3,modcpy,runs,"[('void *', 'destination'), ('void *', 'source'), ('size_t', 'destination_size'), ('size_t', 'source_size')]"
628,4,setup_kernel,runs,"[('long long', 'seed'), ('curandState_t *', 'devStates'), ('ushort', 'N')]"
628,8,modcpy,runs,"[('void *', 'destination'), ('void *', 'source'), ('size_t', 'destination_size'), ('size_t', 'source_size')]"
6286,1,k2,runs,"[('int *', 'Aux'), ('int *', 'S')]"
6286,3,k4,runs,"[('int *', 'Aux'), ('int *', 'S')]"
6286,4,k5,runs,"[('int *', 'Aux'), ('int *', 'S')]"
6288,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
629,0,freqencyStep1,runs,"[('char *', 'd_dat'), ('int', 'len'), ('int *', 'd_freq')]"
629,1,freqencyMethod2,runs,"[('char *', 'd_dat'), ('int', 'len'), ('int *', 'd_freq')]"
6292,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6292,303,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
6292,308,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6301,25,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
6301,26,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo')]"
6301,32,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
6301,35,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
6315,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6315,318,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6323,0,simple_vbo_kernel,runs,"[('float4 *', 'pos'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'time')]"
6324,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
6324,1,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
6337,13,test_launch_cuda_native,runs,"[('float *', 'scalar'), ('float *', 'vector'), ('int', 'sxy'), ('int', 'sx'), ('int', 'sy'), ('int', 'sz'), ('int', 'stride')]"
6337,16,fill_one,runs,"[('float *', 'prp_0'), ('int', 'sz')]"
6337,17,fill_count,runs,"[('float *', 'prp_0'), ('int', 'sz')]"
636,2,map_index_to_prefix,runs,"[('uint8_t *', 'hashes'), ('uint32_t *', 'sort_indices'), ('uint32_t *', 'comb_count'), ('uint32_t *', 'comb_sum'), ('uint32_t *', 'comb_prefix'), ('uint32_t', 'r'), ('uint32_t', 'size')]"
636,5,remap_reduction,runs,"[('uint32_t *', 'd_reduction'), ('uint32_t *', 'd_mapping'), ('uint32_t *', 'old_d_ij_buf'), ('uint32_t', 'sum_prev_size'), ('uint32_t', 'prev_size'), ('uint32_t *', 'new_d_ij_buf'), ('uint32_t', 'new_size')]"
636,8,expand_array,runs,"[('unsigned char *', 'd_in'), ('unsigned char *', 'd_out')]"
636,9,get_sort_keys,runs,"[('unsigned char *', 'd_hashes'), ('uint32_t *', 'd_sort_keys'), ('uint32_t *', 'd_sort_indices'), ('uint32_t', 'r'), ('uint32_t', 'num_keys')]"
636,10,initialize_to_one,runs,"[('uint32_t *', 'reduction'), ('uint32_t', 'size')]"
636,11,final_mark_starts,runs,"[('uint8_t *', 'hashes'), ('uint32_t *', 'sort_indices'), ('uint32_t *', 'off_map'), ('uint32_t', 'r'), ('uint32_t', 'hash_count')]"
636,14,final_map_index_to_prefix,runs,"[('uint8_t *', 'hashes'), ('uint32_t *', 'sort_indices'), ('uint32_t *', 'off_map'), ('uint32_t *', 'comb_count'), ('uint32_t *', 'comb_sum'), ('uint32_t *', 'comb_prefix'), ('uint32_t', 'r'), ('uint32_t', 'size')]"
6360,4,detect_edges,runs,"[('unsigned char *', 'in'), ('unsigned char *', 'out')]"
6364,90,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
6364,103,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
6364,104,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
6364,105,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
6364,106,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
6369,0,allocHamiltonian,runs,"[('float *', 'devMat'), ('float *', 'devSpins'), ('int', 'index'), ('int', 'size'), ('double *', 'energyTempor')]"
6369,1,quickSum,runs,"[('double *', 'energyTempor'), ('int', 'size')]"
6369,2,cudaKernelPull,runs,"[('float *', 'mat'), ('float *', 'spins'), ('int', 'size'), ('float *', 'temp'), ('float', 'tempStep'), ('float *', 'meanFieldElements'), ('bool *', 'continueIteration'), ('float', 'minDiff'), ('int *', 'unemptyCells'), ('float', 'linearCoef')]"
637,3,imgGray,runs,"[('unsigned char *', 'd_image'), ('unsigned char *', 'd_imagegray'), ('int', 'width'), ('int', 'height')]"
637,5,imgGray,runs,"[('unsigned char *', 'd_image'), ('unsigned char *', 'd_imagegray'), ('int', 'width'), ('int', 'height')]"
637,6,MultiplicarMatrices,runs,"[('float *', 'm1'), ('float *', 'm2'), ('float *', 'mr'), ('int', 'columna1'), ('int', 'fila1'), ('int', 'columna2'), ('int', 'fila2')]"
6372,0,createVersionVisualization,runs,"[('uchar4 *', 'PBOpos'), ('int', 'width'), ('int', 'height'), ('int', 'major'), ('int', 'minor')]"
6375,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
6375,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
6375,2,binarize_filters_kernel,runs,"[('float *', 'filters'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
6375,3,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
6375,4,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
6375,5,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
6375,6,im2col_pad_kernel,runs,"[('float *', 'im'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'ksize'), ('int', 'stride'), ('float *', 'data_col')]"
6375,7,im2col_nopad_kernel,runs,"[('float *', 'im'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'ksize'), ('int', 'stride'), ('float *', 'data_col')]"
6375,8,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
6375,9,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
6375,10,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
6375,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
6375,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
6375,13,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
6375,14,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
6375,15,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
6375,16,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
6375,17,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
6375,18,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
6375,19,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
6375,20,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
6375,21,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
6375,22,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
6375,23,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
6375,24,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6375,25,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6375,26,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6375,27,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6375,28,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
6375,29,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
6375,30,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
6375,31,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
6375,32,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
6375,33,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
6375,34,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6375,35,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6375,36,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
6375,37,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
6375,38,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
6375,39,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
6375,41,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
6375,42,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
6375,43,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
6375,44,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
6375,45,forward_softmax_layer_kernel,runs,"[('int', 'n'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
639,7,BoxReciprocalGPU,runs,"[('double *', 'gpu_prefact'), ('double *', 'gpu_sumRnew'), ('double *', 'gpu_sumInew'), ('double *', 'gpu_energyRecip'), ('int', 'imageSize')]"
6394,0,setup_kernelf,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
6394,1,initializeFloat1Dpopulation,runs,"[('float *', 'population'), ('int', 'sizeofPopulation'), ('int', 'sizeofChormosome'), ('curandState *', 'globalState'), ('int', 'division')]"
6394,2,gpuCrossover,runs,"[('float *', 'chromosome'), ('curandState *', 'globalState'), ('int', 'sizeofChromosome'), ('int', 'sizeofPopulation'), ('int', 'Bias'), ('float', 'prob')]"
6394,4,setup_kernelc,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
6394,5,initializeChar1Dpopulation,runs,"[('char *', 'population'), ('int', 'sizeofPopulation'), ('int', 'sizeofChormosome'), ('curandState *', 'globalState'), ('int', 'division')]"
6394,6,initializeChar1DRangepopulation,runs,"[('char *', 'population'), ('int', 'sizeofPopulation'), ('int', 'sizeofChormosome'), ('curandState *', 'globalState'), ('int', 'division'), ('char *', 'range')]"
6394,7,gpuCrossover,runs,"[('char *', 'chromosome'), ('curandState *', 'globalState'), ('int', 'sizeofChromosome'), ('int', 'sizeofPopulation'), ('int', 'Bias'), ('float', 'prob'), ('char *', 'range')]"
6394,9,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
6394,10,initializeBinary1Dpopulation,runs,"[('int *', 'population'), ('int', 'sizeofPopulation'), ('int', 'sizeofChormosome'), ('curandState *', 'globalState'), ('int', 'division')]"
6394,11,gpuCrossover,runs,"[('int *', 'chromosome'), ('curandState *', 'globalState'), ('int', 'sizeofChromosome'), ('int', 'sizeofPopulation'), ('int', 'Bias'), ('float', 'prob')]"
64,1,copyPixelsInSlicesRGB,runs,"[('float *', 'ptrinput0'), ('float *', 'ptrkslices0'), ('int', 'dH'), ('int', 'dW'), ('int', 'kH'), ('int', 'kW'), ('int', 'size1'), ('int', 'size2'), ('int', 'isize1'), ('int', 'isize2'), ('int', 'nInputPlane'), ('int', 'padleft'), ('int', 'padright'), ('int', 'padup'), ('int', 'paddown'), ('int', 'inputstr0'), ('int', 'kslicesstr0'), ('int', 'batchsize')]"
64,3,copyBiasToOutputs,runs,"[('float *', 'ptrbias'), ('float *', 'ptroutput'), ('const int', 'size1'), ('const int', 'size2'), ('const int', 'nOutputPlane'), ('const int', 'linestride'), ('const int', 'imstride')]"
640,0,histogram,runs,"[('unsigned int *', 'in'), ('unsigned int *', 'hist'), ('int', 'n'), ('unsigned int', 'nBins'), ('unsigned int', 'mask'), ('unsigned int', 'current_bits')]"
640,1,scanBlks,runs,"[('unsigned int *', 'in'), ('unsigned int *', 'out'), ('unsigned int', 'n'), ('unsigned int *', 'blkSums')]"
640,2,addPrevSum,runs,"[('unsigned int *', 'blkSumsScan'), ('unsigned int *', 'blkScans'), ('unsigned int', 'n')]"
640,3,exclusive_scan,runs,"[('unsigned int *', 'in'), ('unsigned int *', 'out'), ('int', 'n')]"
640,4,scatter,runs,"[('unsigned int *', 'in'), ('unsigned int *', 'in_pos'), ('unsigned int *', 'out'), ('unsigned int *', 'out_pos'), ('unsigned int', 'n'), ('unsigned int *', 'd_histScan'), ('unsigned int', 'mask'), ('unsigned int', 'current_bits'), ('unsigned int', 'nBins')]"
640,5,swap,runs,"[('unsigned int *', 'in'), ('unsigned int *', 'in_pos'), ('unsigned int *', 'out'), ('unsigned int *', 'out_pos'), ('unsigned int', 'n')]"
640,6,pre_sort,runs,"[('unsigned int *', 'in'), ('unsigned int *', 'in_pos'), ('unsigned int *', 'out'), ('unsigned int *', 'out_pos'), ('unsigned int', 'n'), ('unsigned int', 'nBins'), ('unsigned int', 'mask'), ('unsigned int', 'current_bits'), ('unsigned int *', 'd_hist')]"
6401,26,GRUPrepare,runs,"[('unsigned int *', 'finished'), ('const int', 'round')]"
6407,26,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
6407,29,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
6407,30,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
6407,31,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
6408,186,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6408,327,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
642,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
642,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
642,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
642,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
642,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
642,11,lumHistExclusiveScan_kernel,runs,"[('unsigned int *', 'd_out'), ('unsigned int *', 'd_in'), ('int', 'numItems')]"
642,16,incSumScan_kernel,runs,"[('unsigned int *', 'd_outVals'), ('unsigned int *', 'd_inVals'), ('size_t', 'numVals')]"
642,17,incSumScanB1_kernel,runs,"[('unsigned int *', 'd_outVals'), ('unsigned int *', 'd_inVals'), ('size_t', 'numVals'), ('unsigned int *', 'd_blockOffset'), ('unsigned int', 'valOffset')]"
642,18,incSumScanB2_kernel,runs,"[('unsigned int *', 'd_outVals'), ('unsigned int *', 'd_inVals'), ('size_t', 'numVals'), ('unsigned int *', 'd_blockOffset')]"
642,19,arraySet_kernel,runs,"[('unsigned int *', 'd_vals'), ('unsigned int', 'value'), ('size_t', 'num_vals')]"
642,20,getPredicate_kernel,runs,"[('unsigned int *', 'd_inVal'), ('unsigned int *', 'd_predVal'), ('unsigned int', 'numElems'), ('unsigned int', 'bitMask')]"
642,22,swapVals_kernel,runs,"[('unsigned int *', 'd_newArray'), ('unsigned int *', 'd_oldArray'), ('unsigned int', 'numElems')]"
642,23,reverseSort_kernel,runs,"[('unsigned int *', 'd_newArray'), ('unsigned int *', 'd_oldArray'), ('unsigned int', 'numElems')]"
642,25,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
642,36,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
642,37,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
642,38,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
642,39,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
642,40,hello,runs,[]
642,44,hello,runs,[]
6420,0,pic,runs,"[('float *', 'sum'), ('int', 'nbin'), ('float', 'step'), ('int', 'nthreads'), ('int', 'nblocks')]"
6420,1,blur,runs,"[('unsigned char *', 'pixels'), ('int', 'rows'), ('int', 'cols'), ('int', 'channels'), ('int', 'kernel'), ('int', 'numThreads')]"
6422,0,check_collisions,runs,"[('float', 'x1_robot'), ('float', 'y1_robot'), ('float', 'x2_robot'), ('float', 'y2_robot'), ('float *', 'x1_obs'), ('float *', 'y1_obs'), ('float *', 'x2_obs'), ('float *', 'y2_obs'), ('bool *', 'collisions'), ('int *', 'indexes')]"
6425,0,gauss_elimination_cuda,runs,"[('float *', 'a_d'), ('float *', 'b_d'), ('int', 'size')]"
6425,1,gauss_elimination_cuda_new,runs,"[('float *', 'a_d'), ('float *', 'b_d'), ('int', 'size')]"
6426,6,confidenceTransformKernel,runs,"[('const int', 'width'), ('const int', 'height'), ('const float', 'threshold'), ('const float', 'gamma'), ('const float', 'clampedValue'), ('const float *', 'inputConfidence'), ('float *', 'outputConfidence')]"
6426,12,filterKernel,runs,"[('unsigned char *', 'data'), ('unsigned', 'width'), ('unsigned', 'height'), ('unsigned', 'hStride'), ('unsigned', 'vStride'), ('bool', 'wrapAround')]"
6426,18,horizOrKernel,runs,"[('const uint32_t __restrict__ *', 'contrib'), ('uint32_t __restrict__ *', 'rowHasImage'), ('unsigned', 'panoWidth'), ('unsigned', 'panoHeight')]"
6426,20,resetArrayKernel,runs,"[('cudaSurfaceObject_t', 'dst'), ('size_t', 'width'), ('size_t', 'height')]"
6426,53,unpackSourceKernelRGBA,runs,"[('uint32_t *', 'dst'), ('unsigned', 'pitch'), ('const cudaSurfaceObject_t', 'src'), ('unsigned', 'width'), ('unsigned', 'height')]"
6426,56,unpackSourceKernelF32C1,runs,"[('float *', 'dst'), ('unsigned', 'pitch'), ('const cudaSurfaceObject_t', 'src'), ('unsigned', 'width'), ('unsigned', 'height')]"
6426,57,unpackSourceKernelGrayscale16,runs,"[('uint16_t *', 'dst'), ('unsigned', 'pitch'), ('const cudaSurfaceObject_t', 'src'), ('unsigned', 'width'), ('unsigned', 'height')]"
6426,96,reduce6,runs,"[('const float *', 'g_idata'), ('float *', 'g_odata'), ('float *', 'g_omask'), ('unsigned int', 'n')]"
6426,105,onBothBufferOperatorKernel,runs,"[('const int', 'warpWidth'), ('const int', 'input0OffsetX'), ('const int', 'input0OffsetY'), ('const int', 'input0Width'), ('const int', 'input0Height'), ('const uint32_t *', 'input0Buffer'), ('const int', 'input1OffsetX'), ('const int', 'input1OffsetY'), ('const int', 'input1Width'), ('const int', 'input1Height'), ('const uint32_t *', 'input1Buffer'), ('const int', 'outputOffsetX'), ('const int', 'outputOffsetY'), ('const int', 'outputWidth'), ('const int', 'outputHeight'), ('uint32_t *', 'outputMask')]"
6427,0,sqr_norm_kernel,runs,"[('const float *', 'in'), ('float *', 'block_res'), ('int', 'total')]"
6427,1,sqr_mag_kernel,runs,"[('const float *', 'data'), ('float *', 'result'), ('int', 'total')]"
6427,2,conj_kernel,runs,"[('const float *', 'data'), ('float *', 'result'), ('int', 'total')]"
6427,3,sum_channels,runs,"[('float *', 'dest'), ('const float *', 'src'), ('uint', 'channels'), ('uint', 'num_channel_elem')]"
6427,4,same_num_channels_mul_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('int', 'total')]"
6427,5,same_num_channels_div_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('unsigned', 'total')]"
6427,6,same_num_channels_add_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('int', 'total')]"
6427,7,constant_mul_kernel,runs,"[('const float *', 'data_l'), ('float', 'constant'), ('float *', 'result'), ('int', 'total')]"
6427,8,constant_add_kernel,runs,"[('const float *', 'data_l'), ('float', 'constant'), ('float *', 'result'), ('int', 'total')]"
6427,9,one_channel_mul_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('int', 'channel_total'), ('int', 'total')]"
6430,0,cuda_hello,runs,[]
6438,174,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6438,234,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
6438,235,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
6438,236,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
6438,241,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
6438,352,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
6438,357,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6445,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
6447,2,vecAdd,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'n')]"
6447,3,vecAdd,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'n')]"
6447,4,stencil2DKernel,runs,"[('double *', 'temperature'), ('double *', 'new_temperature'), ('int', 'block_x'), ('int', 'block_y'), ('int', 'thread_size')]"
6447,6,initKernel,runs,"[('double *', 'temperature'), ('int', 'block_size')]"
6447,7,leftBoundaryKernel,runs,"[('double *', 'temperature'), ('int', 'block_size')]"
6447,8,rightBoundaryKernel,runs,"[('double *', 'temperature'), ('int', 'block_size')]"
6447,9,topBoundaryKernel,runs,"[('double *', 'temperature'), ('int', 'block_size')]"
6447,10,bottomBoundaryKernel,runs,"[('double *', 'temperature'), ('int', 'block_size')]"
6447,11,leftPackingKernel,runs,"[('double *', 'temperature'), ('double *', 'ghost'), ('int', 'block_size')]"
6447,12,rightPackingKernel,runs,"[('double *', 'temperature'), ('double *', 'ghost'), ('int', 'block_size')]"
6447,13,leftUnpackingKernel,runs,"[('double *', 'temperature'), ('double *', 'ghost'), ('int', 'block_size')]"
6447,14,rightUnpackingKernel,runs,"[('double *', 'temperature'), ('double *', 'ghost'), ('int', 'block_size')]"
6447,15,jacobiKernel,runs,"[('double *', 'temperature'), ('double *', 'new_temperature'), ('int', 'block_size')]"
6447,16,initKernel,runs,"[('double *', 'data'), ('int', 'count'), ('double', 'val')]"
6447,17,initKernel,runs,"[('double *', 'data'), ('int', 'count'), ('double', 'val')]"
6447,18,helloKernel,runs,[]
6447,20,initKernel,runs,"[('double *', 'data'), ('int', 'count'), ('double', 'val')]"
6448,1,matrixMultiplicationKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'N')]"
6457,0,simple_add,runs,"[('float *', 'a'), ('float *', 'b'), ('int', 'n')]"
6457,4,reduction,runs,"[('int *', 'input'), ('int *', 'output')]"
6457,5,bigstencil,runs,"[('int *', 'in'), ('int *', 'out')]"
6457,8,null_kernel,runs,[]
6457,10,matrix_multiply_kernel,runs,"[('double *', 'matrix'), ('double *', 'vector_in'), ('double *', 'vector_out'), ('long', 'dim_mn')]"
6459,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
6459,20,NormalizeOutput,runs,"[('const int', 'num_elements'), ('const int *', 'original'), ('int64_t *', 'to_normalize'), ('int64_t', 'batch_index'), ('int64_t', 'class_index')]"
6462,90,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
6462,103,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
6462,104,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
6462,105,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
6462,106,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
6468,0,kernel,runs,[]
6468,1,kernel,runs,[]
6468,2,kernel,runs,[]
6468,3,kernel,runs,[]
6478,0,errorsKernel,runs,"[('float *', 'points'), ('float *', 'individs'), ('float *', 'errors'), ('int', 'powCount'), ('int', 'sizePoint')]"
6481,90,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
6481,103,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
6481,104,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
6481,105,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
6481,106,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
649,1,initialize_rho,runs,"[('float *', 'rho'), ('int', 'size_c'), ('int', 'nc')]"
649,2,meshgrid_create,runs,"[('float *', 'xx'), ('float *', 'yy'), ('int', 'w'), ('int', 'h'), ('float', 'K02'), ('float', 'K12')]"
649,3,third_and_fourth_normal_component,runs,"[('float *', 'z'), ('float *', 'xx'), ('float *', 'yy'), ('float *', 'zx'), ('float *', 'zy'), ('int', 'npix'), ('float *', 'N3')]"
649,4,norm_components,runs,"[('float *', 'N'), ('int', 'npix'), ('float *', 'norm')]"
649,5,normalize_N,runs,"[('float *', 'N'), ('float *', 'norm'), ('int', 'npix_per_component')]"
649,6,A_for_lightning_estimation,runs,"[('float *', 'rho'), ('float *', 'N'), ('int', 'npix'), ('float *', 'A')]"
649,7,fill_A_expansion,runs,"[('float *', 'A'), ('int *', 'rowind'), ('int *', 'colind'), ('float *', 'val'), ('int', 'npix'), ('int', 'nimages')]"
649,8,fill_AT_expansion,runs,"[('float *', 'A'), ('int *', 'rowind'), ('int *', 'colind'), ('float *', 'val'), ('int', 'npix'), ('int', 'nimages')]"
649,9,compute_B_for_depth,runs,"[('float *', 'B'), ('float *', 'rho'), ('float *', 'Ns'), ('int', 'npix'), ('int', 'nchannels'), ('int', 'nimages')]"
649,10,calculate_A_ch_1_2,runs,"[('float *', 'rho'), ('float *', 'dz'), ('float *', 's_a'), ('float *', 'xx_or_yy'), ('float *', 's_b'), ('float', 'K'), ('int', 'npix'), ('int', 'nchannels'), ('int', 'nimages'), ('float *', 'A_ch')]"
649,11,calculate_A_ch_3,runs,"[('float *', 'rho'), ('float *', 'dz'), ('float *', 's_a'), ('int', 'npix'), ('int', 'nchannels'), ('int', 'nimages'), ('float *', 'A_ch')]"
649,12,add_constant,runs,"[('int *', 'arr'), ('int', 'k'), ('int', 'arr_size')]"
649,13,squared_difference,runs,"[('float *', 'x'), ('float *', 'y'), ('int', 'len')]"
6493,6,saveTheWhalesXX,runs,"[('const int', 'd0'), ('const int', 'd1'), ('const int', 'i2'), ('float *', 'xxx'), ('const int', 'd3'), ('const int', 'd4'), ('const float *', 'xx')]"
6493,7,saveTheWhalesX,runs,"[('const int', 'd0'), ('const int', 'd1'), ('const int', 'i0'), ('const int', 'i2'), ('float *', 'xxx'), ('const int', 'd3'), ('const float *', 'x')]"
6493,8,constantArray,runs,"[('const int', 'n'), ('const float', 'c'), ('float *', 'a')]"
6493,9,sliceArray,runs,"[('const int', 'n'), ('const int', 'indx'), ('const float *', 'ss'), ('float *', 'zz')]"
6493,10,sliceIntArray,runs,"[('const int', 'n'), ('const int', 'indx'), ('const int *', 'ss'), ('int *', 'zz')]"
6493,11,insertArray,runs,"[('const int', 'n'), ('const int', 'indx'), ('const float *', 'ss'), ('float *', 'zz')]"
6493,12,initializeAtRandom,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float', 'dlt'), ('const float *', 'x0'), ('const float *', 'stn'), ('float *', 'xx')]"
6493,13,returnStatistic,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'xx'), ('float *', 's')]"
6493,14,setWalkersAtLast,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'lst'), ('float *', 'xx')]"
6493,15,setStatisticAtLast,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'lst'), ('float *', 'stt')]"
6493,16,setChiAtLast,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'lst'), ('float *', 'stt')]"
6493,17,setDistanceAtLast,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'lst'), ('float *', 'didi')]"
6493,18,setPriorAtLast,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'lst'), ('float *', 'prr')]"
6493,21,chainFunction,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const int', 'nst'), ('const int', 'ipr'), ('const float *', 'smpls'), ('float *', 'chnFnctn')]"
6493,22,normArray,runs,"[('const int', 'n'), ('float *', 'a')]"
6493,23,scaleArray,runs,"[('const int', 'n'), ('const float', 'c'), ('float *', 'a')]"
6493,24,powWalkers,runs,"[('const int', 'n'), ('const float', 'c'), ('const float *', 'a'), ('float *', 'd')]"
6493,25,scaleWalkers,runs,"[('const int', 'n'), ('const float', 'c'), ('const float *', 'a'), ('float *', 'd')]"
6493,26,shiftWalkers,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'xx'), ('const float *', 'x'), ('float *', 'yy')]"
6493,27,addWalkers,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'xx0'), ('const float *', 'xxW'), ('float *', 'xx1')]"
6493,28,returnQ,runs,"[('const int', 'dim'), ('const int', 'n'), ('const float *', 's1'), ('const float *', 's0'), ('const float *', 'zr'), ('float *', 'q')]"
6493,29,returnQ1,runs,"[('const int', 'dim'), ('const int', 'n'), ('const float *', 'p1'), ('const float *', 'p0'), ('const float *', 's1'), ('const float *', 's0'), ('const float *', 'zr'), ('float *', 'q')]"
6493,30,returnQM,runs,"[('const int', 'dim'), ('const int', 'n'), ('const float *', 's1'), ('const float *', 's0'), ('float *', 'q')]"
6493,31,updateWalkers,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'xx1'), ('const float *', 'q'), ('const float *', 'r'), ('float *', 'xx0')]"
6493,32,updateStatistic,runs,"[('const int', 'nwl'), ('const float *', 'stt1'), ('const float *', 'q'), ('const float *', 'r'), ('float *', 'stt0')]"
6493,33,mapRandomNumbers,runs,"[('const int', 'nwl'), ('const int', 'ist'), ('const int', 'isb'), ('const float *', 'r'), ('float *', 'zr'), ('int *', 'kr'), ('float *', 'ru'), ('int *', 'kex')]"
6493,34,mapKex,runs,"[('const int', 'nwl'), ('const float *', 'r'), ('int *', 'kex')]"
6493,35,TestpermuteWalkers,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const int *', 'kr'), ('const float *', 'xxC'), ('float *', 'xxCP')]"
6493,36,permuteWalkers,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const int *', 'kr'), ('const float *', 'xxC'), ('float *', 'xxCP')]"
6493,37,substractWalkers,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'xx0'), ('const float *', 'xxCP'), ('float *', 'xx1')]"
6493,38,scale2DArray,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'zr'), ('const float *', 'xx'), ('float *', 'xx1')]"
6493,39,metropolisPoposal2,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const int', 'isb'), ('const float *', 'xx'), ('const float *', 'rr'), ('float *', 'xx1')]"
6493,40,chooseLaw,runs,"[('const int', 'nwl'), ('const int *', 'kex'), ('const float *', 'didi11'), ('const float *', 'didi12'), ('const float *', 'didi13'), ('float *', 'didi1')]"
6493,46,chooseSample,runs,"[('const int', 'nDB'), ('const int', 'si'), ('const float *', 'EE'), ('float *', 'EBV')]"
6493,48,chooseDistance,runs,"[('const int', 'nwl'), ('const int *', 'kex'), ('const float *', 'didi11'), ('float *', 'didi1')]"
6493,56,combineSourceAndBackground,runs,"[('const int', 'nwl'), ('const int', 'n'), ('const float', 'scale'), ('float *', 'src'), ('const float *', 'bkg')]"
6493,57,AssembleArrayOfAbsorptionFactors,runs,"[('const int', 'nmbrOfWlkrs'), ('const int', 'nmbrOfEnrgChnnls'), ('const int', 'nmbrOfElmnts'), ('const float *', 'crssctns'), ('const float *', 'abndncs'), ('const int *', 'atmcNmbrs'), ('const float *', 'wlkrs'), ('float *', 'absrptnFctrs')]"
6493,63,AssembleArrayOfNoticedChannels,runs,"[('const int', 'nmbrOfChnnls'), ('const float', 'lwrNtcdEnrg'), ('const float', 'hghrNtcdEnrg'), ('const float *', 'lwrChnnlBndrs'), ('const float *', 'hghrChnnlBndrs'), ('const float *', 'gdQltChnnls'), ('float *', 'ntcdChnnls')]"
6493,64,arrayOf2DConditions,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'bn'), ('const float *', 'xx'), ('float *', 'cc')]"
6493,65,arrayOfPriors,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'cn'), ('const float *', 'xx'), ('float *', 'pr')]"
6493,66,arrayOfPriors1,runs,"[('const int', 'dim'), ('const int', 'nwl'), ('const float *', 'cn'), ('const float *', 'nhMd'), ('const float *', 'nhSg'), ('const float *', 'xx'), ('float *', 'pr')]"
6493,67,lhkde,runs,"[('const int', 'n'), ('const float *', 'a'), ('const float *', 'b'), ('float *', 'l'), ('float *', 'h')]"
6493,68,sortMatrix,runs,"[('const int', 'nd'), ('const float *', 'a'), ('float *', 'sm')]"
6493,69,sortIndex,runs,"[('const int', 'd'), ('const int', 'n'), ('const float *', 'a'), ('int *', 'si'), ('float *', 'sa')]"
6493,70,extractParam,runs,"[('const int', 'd'), ('const int', 'n'), ('const int', 'Indx'), ('const float *', 's'), ('float *', 'a')]"
6493,71,lineSpace,runs,"[('const int', 'd'), ('const int', 'n'), ('const float *', 'l'), ('const float *', 'h'), ('float *', 'b')]"
6493,72,gaussKde1D,runs,"[('const int', 'dim'), ('const int', 'nd'), ('const int', 'nb'), ('const int', 'Indx'), ('const float *', 'hh'), ('const float *', 'a'), ('const float *', 'b'), ('float *', 'pdf')]"
6493,73,sortIndexKde,runs,"[('const int', 'd'), ('const int', 'n'), ('const float *', 'a'), ('const float *', 'b'), ('float *', 'sa'), ('float *', 'sb')]"
6497,0,distanceKernel,runs,"[('float *', 'd_out'), ('float', 'ref'), ('int', 'len')]"
6502,20,sd_t_s1_1_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x'), ('double *', 't3d')]"
6502,21,sd_t_s1_2_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x'), ('double *', 't3d')]"
6502,22,sd_t_s1_4_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p5d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'p5ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p5ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x')]"
6502,23,sd_t_s1_5_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p5d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'p5ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p5ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x')]"
6502,24,sd_t_s1_6_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p5d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'p5ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p5ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x')]"
6502,25,sd_t_s1_7_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x')]"
6502,26,sd_t_s1_8_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x')]"
6502,28,sd_t_s1_1_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x'), ('double *', 't3d')]"
6502,29,sd_t_s1_2_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x'), ('double *', 't3d')]"
6502,30,sd_t_s1_4_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
6502,31,sd_t_s1_5_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
6502,32,sd_t_s1_6_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
6502,33,sd_t_s1_7_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
6502,34,sd_t_s1_8_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
6503,0,convertToP208Kernel,runs,"[('uint16_t *', 'pV210'), ('uint16_t *', 'dP208'), ('int', 'nPitch'), ('int', 'nWidth'), ('int', 'nHeight')]"
6503,1,resizeBatchKernel,runs,"[('const uint8_t *', 'p_Src'), ('int', 'nSrcPitch'), ('int', 'nSrcHeight'), ('uint8_t *', 'p_dst'), ('int', 'nDstWidth'), ('int', 'nDstHeight')]"
6503,2,resizeRGBKernel,runs,"[('const uint16_t *', 'p_Src'), ('int', 'nSrcPitch'), ('int', 'nSrcHeight'), ('uint8_t *', 'p_dst'), ('int', 'nDstWidth'), ('int', 'nDstHeight'), ('int *', 'lookupTable_cuda')]"
6503,3,resizeBatchKernel,runs,"[('const uint16_t *', 'p_Src'), ('int', 'nSrcPitch'), ('int', 'nSrcHeight'), ('uint16_t *', 'p_dst'), ('int', 'nDstWidth'), ('int', 'nDstHeight')]"
6503,4,resizeBatchKernel,runs,"[('const uint16_t *', 'p_Src'), ('int', 'nSrcPitch'), ('int', 'nSrcHeight'), ('uint8_t *', 'dpDst'), ('int', 'nDstWidth'), ('int', 'nDstHeight'), ('int *', 'lookupTable_cuda')]"
6503,5,resizeBatchKernel,runs,"[('const uint16_t *', 'p_Src'), ('int', 'nSrcPitch'), ('int', 'nSrcHeight'), ('uint8_t *', 'dpDst0'), ('uint8_t *', 'dpDst1'), ('uint8_t *', 'dpDst2'), ('int', 'nDstWidth'), ('int', 'nDstHeight'), ('int *', 'lookupTable_cuda')]"
6503,6,convertToRGBKernel,runs,"[('const uint16_t *', 'pV210'), ('uint16_t *', 'tt'), ('int', 'nSrcWidth'), ('int', 'nDstWidth'), ('int', 'nDstHeight')]"
6503,7,convertToRGBTestKernel,runs,"[('const uint16_t *', 'pV210'), ('uint8_t *', 'tt'), ('int', 'nSrcWidth'), ('int', 'nDstWidth'), ('int', 'nDstHeight')]"
6503,8,convertVToRGBKernel,runs,"[('const uint16_t *', 'pV210'), ('uint8_t *', 'tt1'), ('int', 'nSrcWidth'), ('int', 'nDstWidth'), ('int', 'nDstHeight'), ('int *', 'lookupTable')]"
6503,9,convertPToRGBKernel,runs,"[('const uint16_t *', 'dpSrc'), ('uint8_t *', 'tt1'), ('int', 'nSrcWidth'), ('int', 'nDstWidth'), ('int', 'nDstHeight'), ('int *', 'lookupTable')]"
6503,10,convertToNppiKernel,runs,"[('uint16_t *', 'dSrc'), ('uint8_t *', 'dDst'), ('int', 'nSrcWidth'), ('int', 'nDstWidth'), ('int', 'nDstHeight'), ('int *', 'lookupTable')]"
6503,11,rgbToV210Kernel,runs,"[('uint16_t *', 'pSrc'), ('uint16_t *', 'pDst'), ('int', 'nSrcWidth'), ('int', 'nHeight')]"
6505,16,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
6505,19,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
6505,21,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
6505,23,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
6505,25,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
6505,27,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
6505,28,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
6505,30,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
6505,33,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
6505,36,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
6528,0,kernel,runs,[]
6528,1,kernel,runs,[]
6528,2,kernel,runs,[]
6528,3,kernel,runs,[]
6530,12,SidedDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
6539,18,kernel_curand_init,runs,"[('curandState *', 'state'), ('int', 'seed')]"
6546,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
6546,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
6546,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
6546,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
6546,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
6549,0,inverse_kernel,runs,"[('double *', 'd_y'), ('double *', 'd_x')]"
655,1,img2gray,runs,"[('unsigned char *', 'imageInput'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'imageOutput')]"
6553,0,updateWeights,runs,"[('double *', 'weights'), ('double *', 'parameters'), ('double *', 'otherp'), ('int', 'sign'), ('double', 'alpha')]"
6562,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
6562,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
6562,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
6562,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
6562,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
6562,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
6562,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
6562,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
6562,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
6562,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
6562,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
6562,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
6562,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
6562,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
6562,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
6562,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
6562,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
6562,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
6562,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
6562,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
6562,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
6562,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
6562,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
6562,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
6562,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
6562,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
6562,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6562,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6562,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6562,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6562,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6562,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6562,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
6562,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
6562,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
6562,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
6562,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
6562,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
6562,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
6562,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
6562,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
6562,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6562,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6562,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6562,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6562,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6562,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6562,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
6562,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
6562,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
6562,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
6562,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
6562,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
6562,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
6562,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
6562,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
6562,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
6562,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
6562,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
6562,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
6565,3,calcMaxPoolForwardGPU,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'in_size_x'), ('int', 'in_size_y'), ('int', 'in_size_z'), ('int', 'batch_size'), ('int', 'out_size_x'), ('int', 'out_size_y'), ('int', 'out_size_z'), ('int', 'stride'), ('int', 'kernel_size')]"
6565,5,calcLeakyReluForwardGPU,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'elements')]"
6565,6,calcLeakyReluBackwardGPU,runs,"[('float *', 'dz_next_layer'), ('float *', 'dz_in'), ('float *', 'dz'), ('float *', 'in'), ('int', 'elements')]"
6565,7,cudaFillArray,runs,"[('float *', 'gpu_array'), ('float', 'val'), ('int', 'N')]"
6565,8,setRandom,runs,"[('float *', 'gpu_array'), ('int', 'N'), ('int', 'maxval')]"
6565,9,calcDenseForwardGPU,runs,"[('float *', 'in'), ('float *', 'out'), ('float *', 'weights'), ('float *', 'biases'), ('int', 'batch_size'), ('int', 'in_size_x'), ('int', 'in_size_y'), ('int', 'in_size_z'), ('int', 'out_size_x'), ('int', 'out_size_y'), ('int', 'out_size_z')]"
6565,10,calcDenseUpdateWeightsGPU,runs,"[('float *', 'weights'), ('float *', 'biases'), ('float *', 'gradients'), ('float *', 'dW'), ('float *', 'dB'), ('int', 'batch_size'), ('int', 'in_size_x'), ('int', 'in_size_y'), ('int', 'in_size_z'), ('int', 'out_size_x'), ('int', 'out_size_y'), ('int', 'out_size_z'), ('float', 'learning_rate'), ('float', 'momentum')]"
6565,11,calcDenseBackwardGPU,runs,"[('float *', 'dz_in'), ('float *', 'dz'), ('float *', 'in'), ('float *', 'weights'), ('float *', 'biases'), ('float *', 'gradients'), ('float *', 'dW'), ('float *', 'dB'), ('int', 'batch_size'), ('int', 'in_size_x'), ('int', 'in_size_y'), ('int', 'in_size_z'), ('int', 'out_size_x'), ('int', 'out_size_y'), ('int', 'out_size_z'), ('float', 'momentum'), ('float', 'decay')]"
6565,12,calcDenseBarckwardNabraBGPU,runs,"[('float *', 'dz_in'), ('float *', 'dB'), ('int', 'batch_size'), ('int', 'out_size_x')]"
6565,13,calcRouteForwardGPU,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'in_size_x'), ('int', 'in_size_y'), ('int', 'in_size_z'), ('int', 'z_offset'), ('int', 'elements')]"
6565,14,calcRouteBackwardGPU,runs,"[('float *', 'dz_in'), ('float *', 'dz'), ('int', 'in_size_x'), ('int', 'in_size_y'), ('int', 'in_size_z'), ('int', 'z_offset'), ('int', 'elements')]"
6565,15,calcReluForwardGPU,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'elements')]"
6565,16,calcReluBackwardGPU,runs,"[('float *', 'dz_next_layer'), ('float *', 'dz_in'), ('float *', 'dz'), ('float *', 'in'), ('int', 'elements')]"
6565,17,calcSigmoidForwardGPU,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'elements')]"
6565,18,calcSigmoidBackwardGPU,runs,"[('float *', 'dz_next_layer'), ('float *', 'dz_in'), ('float *', 'dz'), ('float *', 'in'), ('int', 'elements')]"
6565,19,calcConvolutionForwardPaddedInGPU,runs,"[('float *', 'in'), ('float *', 'padded_in'), ('int', 'batch_size'), ('int', 'in_size_x'), ('int', 'in_size_y'), ('int', 'in_size_z'), ('int', 'padding')]"
6565,20,calcConvolutionForwardGPU,runs,"[('float *', 'out'), ('float *', 'padded_in'), ('float *', 'filters'), ('int', 'padded_in_size_x'), ('int', 'padded_in_size_y'), ('int', 'padded_in_size_z'), ('int', 'batch_size'), ('int', 'out_size_x'), ('int', 'out_size_y'), ('int', 'out_size_z'), ('int', 'kernel_size'), ('int', 'stride'), ('int', 'filter_size')]"
6565,21,calcConvolutionUpdateWeightsGPU,runs,"[('float *', 'filters'), ('float *', 'filter_grads'), ('int', 'in_size_z'), ('int', 'number_filters'), ('int', 'kernel_size'), ('float', 'momentum'), ('float', 'decay'), ('float', 'learning_rate'), ('int', 'elements')]"
6565,22,calcConvolutionBackwardResetGradGPU,runs,"[('float *', 'filter_grads'), ('int', 'in_size_z'), ('int', 'kernel_size'), ('int', 'filter_size'), ('int', 'elements')]"
6565,25,calcDetectObjectsForwardGPU,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'in_size_x'), ('int', 'in_size_y'), ('int', 'in_size_z'), ('int', 'max_bounding_boxes'), ('int', 'max_classes')]"
6565,26,calcDetectObjectsBackwardGPU,runs,"[('float *', 'dz_in'), ('float *', 'dz'), ('float *', 'in'), ('int', 'batch_size'), ('int', 'in_size_x'), ('int', 'in_size_y'), ('int', 'in_size_z'), ('int', 'max_bounding_boxes'), ('int', 'max_classes')]"
6565,27,calcSoftmaxMaxForwardGPU,runs,"[('float *', 'array'), ('float *', 'max'), ('int *', 'mutex'), ('int', 'batch_size'), ('int', 'in_size_x'), ('unsigned', 'n')]"
6565,28,calcSoftmaxSumForwardGPU,runs,"[('float *', 'array'), ('float *', 'out'), ('float *', 'max'), ('float *', 'sum'), ('int *', 'mutex'), ('int', 'batch_size'), ('int', 'in_size_x'), ('unsigned', 'n')]"
6565,29,calcSoftmaxDivForwardGPU,runs,"[('float *', 'out'), ('float *', 'sum'), ('int', 'batch_size'), ('int', 'in_size_x'), ('unsigned int', 'n')]"
6565,30,calcSoftmaxBackwardGPU,runs,"[('float *', 'dz_next_layer'), ('float *', 'dz_in'), ('float *', 'dz'), ('unsigned int', 'n')]"
6567,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
6567,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
6567,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
6567,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
6567,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
6567,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
6567,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
657,0,hello_from_gpu,runs,[]
657,1,hello_from_gpu,runs,[]
657,2,hello_from_gpu,runs,[]
6580,0,transpose_tanh,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
6580,1,matrixMultiplyAndTanh,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('float *', 'b'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
6580,2,matrixMultiplyBackPropTanh,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
6580,3,matrixMultiplyUpdateWeights_tanh,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns'), ('float', 'learning_rate')]"
6580,4,initializeBiasKernel_tanh,runs,"[('float *', 'b'), ('int', 'size')]"
6580,5,updateBiasKernel_tanh,runs,"[('float *', 'dZ'), ('float *', 'b'), ('int', 'cols'), ('int', 'row'), ('float', 'learning_rate')]"
6580,6,TanhBackKernel,runs,"[('float *', 'Z'), ('float *', 'dZ'), ('int', 'size')]"
6580,7,transpose_relu,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
6580,8,matrixMultiplyAndRelu,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('float *', 'b'), ('float *', 'T'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
6580,9,matrixMultiplyBackPropRelu,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
6580,10,matrixMultiplyUpdateWeights_relu,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns'), ('float', 'learning_rate')]"
6580,11,initializeBiasKernel_relu,runs,"[('float *', 'b'), ('int', 'size')]"
6580,12,updateBiasKernel_relu,runs,"[('float *', 'dZ'), ('float *', 'b'), ('int', 'cols'), ('int', 'row'), ('float', 'learning_rate')]"
6580,13,ReluBackKernel,runs,"[('float *', 'Z'), ('float *', 'dZ'), ('int', 'size')]"
6580,14,transpose,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
6580,16,matrixMultiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
6580,17,matrixMultiplyUpdateWeights,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns'), ('float', 'learning_rate')]"
6580,18,addBias,runs,"[('float *', 'Z'), ('float *', 'b'), ('int', 'Z_x_dim'), ('int', 'Z_y_dim')]"
6580,19,initializeBiasKernel,runs,"[('float *', 'b'), ('int', 'size')]"
6580,20,linearLayerForward,runs,"[('float *', 'W'), ('float *', 'A'), ('float *', 'Z'), ('float *', 'b'), ('int', 'W_x_dim'), ('int', 'W_y_dim'), ('int', 'A_x_dim'), ('int', 'A_y_dim')]"
6580,21,linearLayerBackprop,runs,"[('float *', 'W'), ('float *', 'dZ'), ('float *', 'dA'), ('int', 'W_x_dim'), ('int', 'W_y_dim'), ('int', 'dZ_x_dim'), ('int', 'dZ_y_dim')]"
6580,22,linearLayerUpdateWeights,runs,"[('float *', 'dZ'), ('float *', 'A'), ('float *', 'W'), ('int', 'dZ_x_dim'), ('int', 'dZ_y_dim'), ('int', 'A_x_dim'), ('int', 'A_y_dim'), ('float', 'learning_rate')]"
6580,23,linearLayerUpdateBias,runs,"[('float *', 'dZ'), ('float *', 'b'), ('int', 'dZ_x_dim'), ('int', 'dZ_y_dim'), ('int', 'b_x_dim'), ('float', 'learning_rate')]"
6580,24,updateBiasKernel,runs,"[('float *', 'dZ'), ('float *', 'b'), ('int', 'cols'), ('int', 'row'), ('float', 'learning_rate')]"
6580,25,expPlus,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'size')]"
6580,26,expMinus,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'size')]"
6580,27,minusTanh,runs,"[('float *', 'out'), ('float *', 'in1'), ('float *', 'in2'), ('int', 'size')]"
6580,28,plusTanh,runs,"[('float *', 'out'), ('float *', 'in1'), ('float *', 'in2'), ('int', 'size')]"
6580,29,divideTanh,runs,"[('float *', 'out'), ('float *', 'in1'), ('float *', 'in2'), ('int', 'size')]"
6580,30,multiplyTanh,runs,"[('float *', 'out'), ('float *', 'in1'), ('float *', 'in2'), ('int', 'size')]"
6580,31,oneMinusTanh,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'size')]"
6580,32,tanhActivationForward,runs,"[('float *', 'Z'), ('float *', 'A'), ('int', 'Z_x_dim'), ('int', 'Z_y_dim')]"
6580,33,tanhActivationBackprop,runs,"[('float *', 'Z'), ('float *', 'dA'), ('float *', 'dZ'), ('int', 'Z_x_dim'), ('int', 'Z_y_dim')]"
6580,34,softmax_trivial,runs,"[('float *', 'softmaxP'), ('float *', 'b'), ('int', 'rows'), ('int', 'cols')]"
6580,35,g_getSoftMaxP,runs,"[('float *', 'softMaxP'), ('float *', 'b'), ('int', 'cols'), ('int', 'row')]"
6580,36,softmaxActivationBackprop,runs,"[('float *', 'Z'), ('float *', 'dA'), ('float *', 'dZ'), ('int', 'Z_x_dim'), ('int', 'Z_y_dim')]"
6580,37,transpose_softmax,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
6580,38,matrixMultiplyAndSoftmax,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('float *', 'b'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
6580,39,matrixMultiplyBackPropSoftmax,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
6580,40,matrixMultiplyUpdateWeights_softmax,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns'), ('float', 'learning_rate')]"
6580,41,initializeBiasKernel_softmax,runs,"[('float *', 'b'), ('int', 'size')]"
6580,42,updateBiasKernel_softmax,runs,"[('float *', 'dZ'), ('float *', 'b'), ('int', 'cols'), ('int', 'row'), ('float', 'learning_rate')]"
6580,43,softmax_linear,runs,"[('float *', 'softmaxP'), ('float *', 'b'), ('int', 'rows'), ('int', 'cols')]"
6580,44,transpose_sigmoid,runs,"[('float *', 'odata'), ('float *', 'idata'), ('int', 'width'), ('int', 'height')]"
6580,45,matrixMultiplyAndSigmoid,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('float *', 'b'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
6580,46,matrixMultiplyBackPropSigmoid,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
6580,47,matrixMultiplyUpdateWeights_sigmoid,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns'), ('float', 'learning_rate')]"
6580,48,initializeBiasKernel_sigmoid,runs,"[('float *', 'b'), ('int', 'size')]"
6580,49,updateBiasKernel_sigmoid,runs,"[('float *', 'dZ'), ('float *', 'b'), ('int', 'cols'), ('int', 'row'), ('float', 'learning_rate')]"
6580,50,SigmoidBackKernel,runs,"[('float *', 'Z'), ('float *', 'dZ'), ('int', 'size')]"
6580,51,reluActivationForward,runs,"[('float *', 'Z'), ('float *', 'A'), ('int', 'Z_x_dim'), ('int', 'Z_y_dim')]"
6580,52,reluActivationBackprop,runs,"[('float *', 'Z'), ('float *', 'dA'), ('float *', 'dZ'), ('int', 'Z_x_dim'), ('int', 'Z_y_dim')]"
6580,53,sigmoidActivationForward,runs,"[('float *', 'Z'), ('float *', 'A'), ('int', 'Z_x_dim'), ('int', 'Z_y_dim')]"
6580,54,multiplyKernel,runs,"[('float *', 'Z'), ('float *', 'A'), ('float *', 'B'), ('int', 'size')]"
6580,55,expKernel,runs,"[('float *', 'Z'), ('float *', 'A'), ('int', 'size')]"
6580,56,addKernel,runs,"[('float *', 'A'), ('int', 'size')]"
6580,57,divideKernel,runs,"[('float *', 'A'), ('int', 'size')]"
6580,58,minusKernel,runs,"[('float *', 'A'), ('int', 'size')]"
6580,59,sigmoidActivationBackprop,runs,"[('float *', 'Z'), ('float *', 'dA'), ('float *', 'dZ'), ('int', 'Z_x_dim'), ('int', 'Z_y_dim')]"
6580,60,binaryCrossEntropyCost,runs,"[('float *', 'predictions'), ('float *', 'target'), ('int', 'size'), ('float *', 'cost')]"
6580,61,dBinaryCrossEntropyCost,runs,"[('float *', 'predictions'), ('float *', 'target'), ('float *', 'dY'), ('int', 'size')]"
6580,62,msecost,runs,"[('float *', 'predictions'), ('float *', 'target'), ('int', 'size'), ('float *', 'cost')]"
6580,63,dMSECost,runs,"[('float *', 'predictions'), ('float *', 'target'), ('float *', 'dY'), ('int', 'size')]"
6581,0,d_rms_error,runs,"[('double *', 'm'), ('double *', 'c'), ('double *', 'error_sum_arr'), ('point_t *', 'd_data')]"
6581,1,kernel,runs,[]
6581,2,detect_edges,runs,"[('unsigned char *', 'input'), ('unsigned char *', 'output')]"
6583,92,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
6583,105,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
6583,106,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
6583,107,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
6583,108,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
6583,186,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
6597,204,cuda_debug_kernel,runs,[]
6600,2,setup_state,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
6603,176,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6603,317,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6605,4,Subsample_Bilinear_uchar,runs,"[('cudaTextureObject_t', 'uchar_tex'), ('unsigned char *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
6605,5,Subsample_Bilinear_uchar2,runs,"[('cudaTextureObject_t', 'uchar2_tex'), ('uchar2 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch2'), ('int', 'src_width'), ('int', 'src_height')]"
6605,6,Subsample_Bilinear_uchar4,runs,"[('cudaTextureObject_t', 'uchar4_tex'), ('uchar4 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
6605,7,Subsample_Bilinear_ushort,runs,"[('cudaTextureObject_t', 'ushort_tex'), ('unsigned short *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
6605,8,Subsample_Bilinear_ushort2,runs,"[('cudaTextureObject_t', 'ushort2_tex'), ('ushort2 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch2'), ('int', 'src_width'), ('int', 'src_height')]"
6605,9,Subsample_Bilinear_ushort4,runs,"[('cudaTextureObject_t', 'ushort4_tex'), ('ushort4 *', 'dst'), ('int', 'dst_width'), ('int', 'dst_height'), ('int', 'dst_pitch'), ('int', 'src_width'), ('int', 'src_height')]"
6605,10,Thumbnail_uchar,runs,"[('cudaTextureObject_t', 'uchar_tex'), ('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
6605,11,Thumbnail_uchar2,runs,"[('cudaTextureObject_t', 'uchar2_tex'), ('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
6605,12,Thumbnail_ushort,runs,"[('cudaTextureObject_t', 'ushort_tex'), ('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
6605,13,Thumbnail_ushort2,runs,"[('cudaTextureObject_t', 'ushort2_tex'), ('int *', 'histogram'), ('int', 'src_width'), ('int', 'src_height')]"
6608,0,transform_vert_to_fit,runs,"[('const int *', 'src'), ('int *', 'dst'), ('const int', 'nb_vert')]"
6608,1,pack,runs,"[('const int *', 'prefix_sum'), ('const int *', 'src'), ('int *', 'dst'), ('const int', 'nb_vert')]"
661,8,bilateralFilterCudaKernel,runs,"[('float3 *', 'dev_input'), ('float3 *', 'dev_output'), ('float', 'l2norm'), ('int', 'width'), ('int', 'height'), ('int', 'radius')]"
662,2,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
6630,0,matrixSquareElementWiseKernel,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n'), ('int', 'm')]"
6630,1,matrixEuclideanDistanceKernelFast,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n'), ('int', 'm')]"
6630,2,matrixEuclideanDistanceKernelFastPartialOut,runs,"[('float *', 'in'), ('float *', 'out'), ('int_least64_t', 'n'), ('int_least64_t', 'm'), ('int_least64_t', 'start_out'), ('int_least64_t', 'end_out')]"
6630,3,matrixEuclideanDistanceKernelFastPartialOut,runs,"[('float *', 'in_X'), ('float *', 'in_Y'), ('float *', 'out'), ('int_least64_t', 'n'), ('int_least64_t', 'm'), ('int_least64_t', 'start_out'), ('int_least64_t', 'end_out')]"
6630,4,matrixEuclideanDistanceKernel,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n'), ('int', 'm')]"
6645,0,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
6645,1,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
665,1,setup_curand_states,runs,"[('curandState *', 'state_d'), ('unsigned long', 't'), ('int', 'THREADS')]"
665,2,initialize_ants,runs,"[('struct ant *', 'ants_d'), ('curandState *', 'state_d'), ('float *', 'bestdistance_d'), ('int', 'THREADS')]"
665,3,restart_ants,runs,"[('struct ant *', 'ants_d'), ('curandState *', 'state_d'), ('float *', 'bestdistance_d'), ('int', 'THREADS')]"
6655,0,kernel0,runs,"[('int', 'n'), ('float', 'a'), ('float *', 'x'), ('float *', 'y')]"
6655,1,kernel0,runs,"[('int', 'n'), ('float', 'a'), ('float *', 'x'), ('float *', 'y')]"
6655,2,kernel0,runs,"[('int', 'n'), ('float', 'a'), ('float *', 'x'), ('float *', 'y')]"
6655,3,kernel0,runs,"[('int', 'n'), ('float', 'a'), ('float *', 'x'), ('float *', 'y')]"
6655,4,kernel0,runs,"[('int', 'n'), ('float', 'a'), ('float *', 'x'), ('float *', 'y')]"
6676,2,Passthru,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('uint32_t *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
6676,3,NV12ToARGB,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('uint32_t *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
6676,4,NV12ToRGBAf,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('float4 *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
6676,7,RGBToRGBAf,runs,"[('uchar3 *', 'srcImage'), ('float4 *', 'dstImage'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
6683,165,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6683,224,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
6683,225,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
6683,226,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
6683,231,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
6683,337,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
6683,342,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
669,0,rgbUtoGreyF_kernel,runs,"[('int', 'width'), ('int', 'height'), ('unsigned int *', 'rgbU'), ('float *', 'grey')]"
669,1,rgbUtoLab3F_kernel,runs,"[('int', 'width'), ('int', 'height'), ('float', 'gamma'), ('unsigned int *', 'rgbU'), ('float *', 'devL'), ('float *', 'devA'), ('float *', 'devB')]"
669,2,normalizeLab_kernel,runs,"[('uint', 'width'), ('uint', 'height'), ('float *', 'devL'), ('float *', 'devA'), ('float *', 'devB')]"
669,3,mirrorImage_kernel,runs,"[('uint', 'width'), ('uint', 'height'), ('uint', 'border'), ('uint', 'borderWidth'), ('uint', 'borderHeight'), ('float *', 'devInput'), ('float *', 'devOutput')]"
669,4,mirrorImage_kernel,runs,"[('uint', 'width'), ('uint', 'height'), ('uint', 'border'), ('uint', 'borderWidth'), ('uint', 'borderHeight'), ('int *', 'devInput'), ('int *', 'devOutput')]"
669,5,unMirrorImage_kernel,runs,"[('uint', 'width'), ('uint', 'height'), ('uint', 'border'), ('uint', 'borderWidth'), ('uint', 'borderHeight'), ('float *', 'devInput'), ('float *', 'devOutput')]"
669,6,quantizeImage_kernel,runs,"[('uint', 'width'), ('uint', 'height'), ('uint', 'nbins'), ('float *', 'devInput'), ('int *', 'devOutput')]"
669,11,FindMaxMinPerGrid,runs,"[('int', 'p_nGridSize'), ('int', 'p_nEigNum'), ('float *', 'p_devMax'), ('float *', 'p_devMin'), ('float *', 'p_devReduceMax'), ('float *', 'p_devReduceMin'), ('int', 'p_nMaxLevel')]"
669,22,combine_kernel,runs,"[('int', 'nPixels'), ('int', 'cuePitchInFloats'), ('float *', 'devBg'), ('float *', 'devCga'), ('float *', 'devCgb'), ('float *', 'devTg'), ('float *', 'devMpb'), ('float *', 'devCombinedg')]"
669,23,combine_kernel,runs,"[('int', 'nPixels'), ('int', 'cuePitchInFloats'), ('float *', 'devBg'), ('float *', 'devCga'), ('float *', 'devCgb'), ('float *', 'devTg'), ('float *', 'devMpb'), ('float *', 'devCombinedg')]"
669,26,integrateBins,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nbins'), ('int *', 'devImage'), ('int', 'binPitch'), ('int *', 'devIntegrals')]"
669,27,integrateBinsT,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nbins'), ('int', 'binPitch'), ('int *', 'devIntegrals')]"
669,35,fillImage,runs,"[('int', 'width'), ('int', 'height'), ('int', 'value'), ('int *', 'devOutput')]"
669,42,fillImage,runs,"[('int', 'width'), ('int', 'height'), ('int', 'value'), ('int *', 'devOutput')]"
669,47,assignInitialClusters,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nPixels'), ('int', 'clusterCount'), ('int *', 'cluster'), ('int', 'filterCount'), ('float *', 'responses'), ('int *', 'intResponses')]"
669,48,assignInitialClusters_64,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nPixels'), ('int', 'clusterCount'), ('int *', 'cluster'), ('int', 'filterCount'), ('float *', 'responses'), ('int *', 'intResponses')]"
669,49,findCentroids,runs,"[('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
669,50,findCentroids_64,runs,"[('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
669,51,findCentroidsAtomicFreeLocal,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
669,52,findCentroidsAtomicFreeLocal_64,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
669,53,findCentroidsAtomicFreeReduce,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
669,54,findCentroidsAtomicFreeReduce_64,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
669,55,finishCentroids,runs,"[('int *', 'centroidMass'), ('unsigned int *', 'centroidCount'), ('float *', 'centroids')]"
669,56,finishCentroids_64,runs,"[('int *', 'centroidMass'), ('unsigned int *', 'centroidCount'), ('float *', 'centroids')]"
669,59,findLabels,runs,"[('int', 'nPixels'), ('int', 'filterCount'), ('int', 'clusterCount'), ('float *', 'responses'), ('float *', 'centroids'), ('int *', 'clusters'), ('int *', 'changes')]"
669,60,findDiffLabels,runs,"[('float *', 'devDiff'), ('int', 'diffPitchInFloats'), ('int', 'nPoints'), ('int', 'nClusters'), ('int *', 'devClusters'), ('int *', 'devChanges')]"
669,61,findDiffLabelsAtomicFree,runs,"[('float *', 'devDiff'), ('int', 'diffPitchInFloats'), ('int', 'nPoints'), ('int', 'nClusters'), ('int *', 'devClusters'), ('int *', 'devChanges')]"
669,64,assignInitialClusters,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nPixels'), ('int', 'clusterCount'), ('int *', 'cluster'), ('int', 'filterCount'), ('float *', 'responses'), ('int *', 'intResponses')]"
669,65,findCentroids,runs,"[('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
669,66,findCentroidsAtomicFreeLocal,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
669,67,findCentroidsAtomicFreeReduce,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
669,68,finishCentroids,runs,"[('int *', 'centroidMass'), ('unsigned int *', 'centroidCount'), ('float *', 'centroids')]"
669,71,findLabels,runs,"[('int', 'nPixels'), ('int', 'filterCount'), ('int', 'clusterCount'), ('float *', 'responses'), ('float *', 'centroids'), ('int *', 'clusters'), ('int *', 'changes')]"
669,72,findDiffLabels,runs,"[('float *', 'devDiff'), ('int', 'diffPitchInFloats'), ('int', 'nPoints'), ('int', 'nClusters'), ('int *', 'devClusters'), ('int *', 'devChanges')]"
669,73,findDiffLabelsAtomicFree,runs,"[('float *', 'devDiff'), ('int', 'diffPitchInFloats'), ('int', 'nPoints'), ('int', 'nClusters'), ('int *', 'devClusters'), ('int *', 'devChanges')]"
669,74,assignInitialClusters,runs,"[('int', 'width'), ('int', 'height'), ('int', 'nPixels'), ('int', 'clusterCount'), ('int *', 'cluster'), ('int', 'filterCount'), ('float *', 'responses'), ('int *', 'intResponses')]"
669,75,findCentroidsAtomicFreeLocal,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
669,76,findCentroidsAtomicFreeReduce,runs,"[('int', 'afLocal'), ('int *', 'responses'), ('int', 'nPixels'), ('int *', 'cluster'), ('int *', 'centroidMass'), ('unsigned int *', 'centroidCount')]"
669,77,finishCentroids,runs,"[('int *', 'centroidMass'), ('unsigned int *', 'centroidCount'), ('float *', 'centroids')]"
669,80,findDiffLabelsAtomicFree,runs,"[('float *', 'devDiff'), ('int', 'diffPitchInFloats'), ('int', 'nPoints'), ('int', 'nClusters'), ('int *', 'devClusters'), ('int *', 'devChanges')]"
6691,0,matmul_double,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'M'), ('int', 'N'), ('int', 'K')]"
6691,1,matmul_double,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'M'), ('int', 'N'), ('int', 'K')]"
6695,0,add,runs,"[('int *', 'x'), ('int *', 'y'), ('int *', 'z')]"
670,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
670,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
670,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
670,9,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
670,10,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
670,15,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
670,26,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
670,27,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
670,28,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
670,29,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
670,30,hello,runs,[]
670,34,hello,runs,[]
6704,5,quark_filter_gpu_sm2,runs,"[('const uint32_t', 'threads'), ('const uint32_t *', 'd_hash'), ('uint32_t *', 'd_branch2'), ('uint32_t *', 'd_NonceBranch')]"
6704,19,lyra2Z_gpu_hash_32_sm2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash'), ('uint32_t *', 'resNonces')]"
6704,21,lyra2Z_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash')]"
6704,22,lyra2Z_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint2 *', 'g_hash'), ('uint32_t *', 'resNonces')]"
6704,26,lyra2_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash')]"
6704,27,lyra2_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint2 *', 'g_hash')]"
6705,3,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
6705,4,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
6705,5,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
6705,6,kernel,runs,[]
6705,8,blend_kernel,runs,"[('float *', 'outSrc'), ('const float *', 'inSrc')]"
6705,9,copy_const_kernel,runs,"[('float *', 'iptr'), ('const float *', 'cptr')]"
6705,11,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
6705,12,kernel,runs,"[('unsigned char *', 'ptr'), ('int', 'ticks')]"
6706,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
6706,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
6706,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
6706,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
6706,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
6706,10,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
6706,21,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
6706,22,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
6706,23,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
6706,24,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
6706,25,hello,runs,[]
6706,29,hello,runs,[]
6709,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
6709,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
6710,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
6710,225,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
6710,226,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
6710,227,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
6710,232,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
6710,337,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
6710,342,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
6718,3,naive_matrix_transpose,runs,"[('float *', 'input'), ('int', 'axis_0'), ('int', 'axis_1'), ('float *', 'output')]"
6718,4,naive_bias_add,runs,"[('float *', 'in'), ('int', 'size'), ('float *', 'bias'), ('int', 'bias_size')]"
6718,5,naive_sum,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'out')]"
6718,6,naive_backward_cross_entropy,runs,"[('float *', 'in'), ('int *', 'one_hot_classes'), ('float', 'batches'), ('int', 'size'), ('float *', 'out')]"
6722,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
6722,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
6722,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
6722,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
6722,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
6722,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
6722,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
6722,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
6722,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
6722,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
6722,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
6722,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
6722,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
6722,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
6722,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
6722,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
6722,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
6722,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
6722,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
6722,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
6722,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
6722,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
6722,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
6722,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
6722,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
6722,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
6722,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6722,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6722,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6722,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6722,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6722,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6722,32,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
6722,33,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
6722,34,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
6722,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
6722,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
6722,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
6722,38,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
6722,39,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
6722,40,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6722,41,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6722,42,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6722,43,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
6722,44,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
6722,45,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
6722,46,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
6722,47,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
6722,48,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
6722,49,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
6722,50,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
6722,52,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
6722,53,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
6722,54,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
6722,55,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
6730,1,worker,runs,"[('double *', 'a'), ('long', 'n')]"
674,17,randInitGpu,runs,"[('curandState_t *', 'state'), ('const uint', 'seed'), ('const uint', 'rank'), ('const uint', 'size')]"
6745,3,gpu_check,runs,"[('int', 'threads'), ('uint64_t *', 'data'), ('uint32_t *', 'results'), ('uint64_t', 'target')]"
6749,1,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
676,1,labeling,runs,"[('const char *', 'text'), ('int *', 'pos'), ('int', 'text_size')]"
676,2,SimpleClone,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const float *', 'mask'), ('float *', 'output'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
676,4,PoissonImageCloningIteration,runs,"[('const float *', 'fixed'), ('const float *', 'mask'), ('const float *', 'source'), ('float *', 'target'), ('const int', 'wt'), ('const int', 'ht')]"
6772,21,sync_deconv_groups,runs,[]
6772,37,sync_conv_groups,runs,[]
6797,0,maxi,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n')]"
6797,1,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n')]"
6797,2,var,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n'), ('float', 'mean')]"
6797,3,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n')]"
6797,4,mini1,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n')]"
6798,13,DrawObstacles,runs,"[('uchar4 *', 'ptr'), ('int *', 'indices'), ('int', 'size')]"
6798,15,SynchStreams,runs,[]
68,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
68,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
68,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
68,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
68,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
68,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
68,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
68,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
68,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
68,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
68,24,hello,runs,[]
68,28,hello,runs,[]
6804,0,basicRun,runs,"[('double *', 'a'), ('double *', 'z')]"
6804,1,reduce,runs,"[('double *', 'a'), ('double *', 'z'), ('int', 'sizeOut')]"
6804,2,reduce,runs,"[('double *', 'a'), ('double *', 'z'), ('int', 'sizeOut')]"
6807,43,sync_conv_groups,runs,[]
6809,0,Split,runs,"[('float *', 'xf'), ('bool *', 'xb'), ('size_t', 'idxf'), ('size_t', 'idxb'), ('size_t', 'N'), ('float', 'threshold')]"
6809,1,Split,runs,"[('int *', 'xi'), ('bool *', 'xb'), ('size_t', 'idxi'), ('size_t', 'idxb'), ('size_t', 'N'), ('float', 'threshold')]"
6809,3,ConstantB,runs,"[('bool *', 'x'), ('bool', 'value'), ('size_t', 'idx'), ('size_t', 'N')]"
6809,5,Sign,runs,"[('float *', 'x'), ('size_t', 'idx'), ('size_t', 'N')]"
6809,7,Sin,runs,"[('float *', 'x'), ('size_t', 'idx'), ('size_t', 'N'), ('float', 'W0')]"
6809,9,Sqrt,runs,"[('float *', 'x'), ('size_t', 'idx'), ('size_t', 'N'), ('float', 'W0')]"
6809,11,Divide,runs,"[('float *', 'x'), ('size_t', 'idx'), ('size_t', 'N'), ('float', 'W0'), ('float', 'W1')]"
6809,12,Float,runs,"[('float *', 'x'), ('bool *', 'y'), ('size_t', 'idxf'), ('size_t', 'idxb'), ('size_t', 'N')]"
6809,13,Float,runs,"[('float *', 'x'), ('int *', 'y'), ('size_t', 'idxf'), ('size_t', 'idxi'), ('size_t', 'N')]"
6809,14,Add,runs,"[('float *', 'x'), ('size_t', 'idx'), ('size_t', 'N'), ('float', 'W0'), ('float', 'W1')]"
6809,15,Step,runs,"[('float *', 'x'), ('size_t', 'idx'), ('size_t', 'N')]"
6809,17,Relu,runs,"[('float *', 'x'), ('size_t', 'idx'), ('size_t', 'N'), ('float', 'W0')]"
6809,23,Cos,runs,"[('float *', 'x'), ('size_t', 'idx'), ('size_t', 'N'), ('float', 'W0')]"
6809,24,Subtract,runs,"[('float *', 'x'), ('size_t', 'idx'), ('size_t', 'N'), ('float', 'W0'), ('float', 'W1')]"
6809,25,If,runs,"[('bool *', 'xb'), ('float *', 'xf'), ('size_t', 'idxf'), ('size_t', 'idxb'), ('size_t', 'N')]"
6809,26,IfThenElse,runs,"[('bool *', 'b'), ('float *', 'x'), ('size_t', 'idxb'), ('size_t', 'idxf'), ('size_t', 'N')]"
6809,27,Equal,runs,"[('float *', 'xf'), ('bool *', 'xb'), ('size_t', 'idxf'), ('size_t', 'idxb'), ('size_t', 'N')]"
6809,28,LessThan,runs,"[('float *', 'xf'), ('bool *', 'xb'), ('size_t', 'idxf'), ('size_t', 'idxb'), ('size_t', 'N')]"
6809,29,LEQ,runs,"[('float *', 'xf'), ('bool *', 'xb'), ('size_t', 'idxf'), ('size_t', 'idxb'), ('size_t', 'N')]"
6809,30,GreaterThan,runs,"[('float *', 'xf'), ('bool *', 'xb'), ('size_t', 'idxf'), ('size_t', 'idxb'), ('size_t', 'N')]"
6809,31,Xor,runs,"[('bool *', 'x'), ('size_t', 'idx'), ('size_t', 'N')]"
6809,32,And,runs,"[('bool *', 'x'), ('size_t', 'idx'), ('size_t', 'N')]"
6809,33,Not,runs,"[('bool *', 'x'), ('size_t', 'idx'), ('size_t', 'N')]"
6809,34,Or,runs,"[('bool *', 'x'), ('size_t', 'idx'), ('size_t', 'N')]"
6809,35,GEQ,runs,"[('float *', 'xf'), ('bool *', 'xb'), ('size_t', 'idxf'), ('size_t', 'idxb'), ('size_t', 'N')]"
6810,3,channels_first,runs,"[('float *', 'input'), ('float *', 'rinput'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'pad_size')]"
6810,4,Correlation_forward,runs,"[('float *', 'output'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
6810,5,Correlation_backward_input1,runs,"[('int', 'item'), ('float *', 'gradInput1'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput2'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
6810,6,Correlation_backward_input2,runs,"[('int', 'item'), ('float *', 'gradInput2'), ('int', 'nInputChannels'), ('int', 'inputHeight'), ('int', 'inputWidth'), ('float *', 'gradOutput'), ('int', 'nOutputChannels'), ('int', 'outputHeight'), ('int', 'outputWidth'), ('float *', 'rInput1'), ('int', 'pad_size'), ('int', 'kernel_size'), ('int', 'max_displacement'), ('int', 'stride1'), ('int', 'stride2')]"
6819,35,sync_conv_groups,runs,[]
682,1,check_if_unique,runs,"[('const unsigned *', 'keys'), ('unsigned *', 'is_unique'), ('size_t', 'kSize')]"
682,3,prepare_indices,runs,"[('const unsigned', 'num_keys'), ('unsigned *', 'data')]"
6824,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
6824,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
6824,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
6824,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
6824,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
6824,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
6824,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
6824,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
6824,8,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
6824,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
6824,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
6824,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
6824,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
6824,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
6824,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
6824,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
6824,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
6824,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
6824,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
6824,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
6824,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
6824,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
6824,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
6824,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
6824,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
6824,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
6824,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6824,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6824,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6824,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6824,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6824,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
6824,32,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
6824,33,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
6824,34,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
6824,35,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
6824,36,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
6824,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
6824,38,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
6824,39,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
6824,40,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6824,41,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6824,42,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
6824,43,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
6824,44,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
6824,45,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
6824,46,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
6824,47,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
6824,48,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
6824,49,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
6824,50,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
6824,52,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
6824,53,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
6824,54,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
6824,55,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
6836,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
6836,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
684,1,scan,runs,"[('int *', 'v'), ('const int', 'n')]"
686,0,da_peaks,runs,"[('float *', 'd_i1'), ('float', 'thresh'), ('int', 'm'), ('int', 'n'), ('int', 'o')]"
686,17,xcorr,runs,"[('float *', 'd_i1'), ('float *', 'd_i2'), ('float *', 'd_icorr'), ('int', 'm1'), ('int', 'n1'), ('int', 'm2'), ('int', 'n2')]"
686,18,drift,runs,"[('float *', 'd_i1'), ('float *', 'd_icorr'), ('int', 'm1'), ('int', 'n1'), ('int', 'o1')]"
686,19,xcorr,runs,"[('float *', 'd_i1'), ('float *', 'd_i2'), ('float *', 'd_icorr'), ('int', 'm1'), ('int', 'n1'), ('int', 'm2'), ('int', 'n2')]"
686,20,xcorr,runs,"[('float *', 'd_i1'), ('float *', 'd_i2'), ('float *', 'd_icorr'), ('int', 'm1'), ('int', 'n1'), ('int', 'm2'), ('int', 'n2')]"
686,21,xcorr,runs,"[('float *', 'd_i1'), ('float *', 'd_i2'), ('float *', 'd_icorr'), ('int', 'm1'), ('int', 'n1'), ('int', 'm2'), ('int', 'n2')]"
690,0,VecAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
691,0,histogram_kernel,runs,"[('float *', 'I'), ('float *', 'minI'), ('float *', 'maxI'), ('float *', 'mask'), ('int', 'nbins'), ('int', 'c'), ('int', 'h'), ('int', 'w'), ('float *', 'hist')]"
691,1,hist_remap2_kernel,runs,"[('float *', 'I'), ('int', 'nI'), ('float *', 'mI'), ('float *', 'histJ'), ('float *', 'cumJ'), ('float *', '_minJ'), ('float *', '_maxJ'), ('int', 'nbins'), ('float *', '_sortI'), ('int *', '_idxI'), ('float *', 'R'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
691,4,avg_vote_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('int *', 'corrAB'), ('int', 'patch'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
691,5,blend_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('float *', 'M'), ('float *', 'AP'), ('float', 'alpha'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
691,6,patchmatch2_conv_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'AP'), ('float *', 'BP'), ('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int', 'patch'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
691,7,patchmatch2_argmax_kernel,runs,"[('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int *', 'corrAB'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
691,8,upsample_corr_kernel,runs,"[('int *', 'curr_corr'), ('int *', 'next_corr'), ('int', 'curr_h'), ('int', 'curr_w'), ('int', 'next_h'), ('int', 'next_w')]"
691,10,Ring_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('float *', 'M'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
691,11,Ring2_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('int *', 'mask'), ('int *', 'm'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
691,12,patchmatch_r_conv_kernel,runs,"[('float *', 'input'), ('float *', 'target'), ('float *', 'conv'), ('int', 'patch'), ('int', 'stride'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
691,13,patchmatch_r_argmax_kernel,runs,"[('float *', 'conv'), ('float *', 'target'), ('float *', 'match'), ('int *', 'correspondence'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
692,3,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
692,4,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
692,6,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
692,11,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
692,12,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
692,35,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
692,46,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
692,47,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
692,48,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
692,49,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
692,50,hello,runs,[]
692,54,hello,runs,[]
697,1,MatrixMultiple,runs,"[('int *', 'InputImage'), ('int', 'width'), ('int', 'height'), ('int *', 'filter'), ('int', 'filterWidth'), ('int *', 'featureMap')]"
697,4,shareMatrixMultiple,runs,"[('int *', 'InputImage'), ('int', 'width'), ('int', 'height'), ('int *', 'filter'), ('int', 'filterWidth'), ('int *', 'featureMap')]"
7,0,makeHE,runs,"[('float *', 'HE'), ('float *', 'force1'), ('float4 *', 'force2'), ('float *', 'masses'), ('float', 'eps'), ('int', 'k'), ('int', 'm'), ('int', 'N')]"
7,1,makeBlockHessian,runs,"[('float *', 'h'), ('float *', 'forces1'), ('float *', 'forces2'), ('float *', 'mass'), ('float', 'blockDelta'), ('int *', 'blocks'), ('int *', 'blocksizes'), ('int', 'numblocks'), ('int *', 'hessiannums'), ('int *', 'hessiansizes'), ('int', 'setnum'), ('int', 'N')]"
7,2,blockcopyFromOpenMM,runs,"[('float *', 'target'), ('float *', 'source'), ('int *', 'blocks'), ('int', 'numblocks'), ('int', 'setnum'), ('int', 'N')]"
7,3,makeEigenvalues,runs,"[('float *', 'eigenvalues'), ('float *', 'blockHessian'), ('int *', 'blocknums'), ('int *', 'blocksizes'), ('int *', 'hessiannums'), ('int', 'N'), ('int', 'numblocks')]"
7,4,computeNormsAndCenter,runs,"[('float *', 'norms'), ('float *', 'center'), ('float *', 'masses'), ('float4 *', 'positions'), ('int *', 'blocknums'), ('int *', 'blocksizes')]"
7,5,MatMulKernel,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'Aheight'), ('int', 'Awidth'), ('int', 'Bwidth')]"
7,6,symmetrize2D,runs,"[('float *', 'h'), ('int', 'natoms')]"
7,8,symmetrize1D,runs,"[('float *', 'h'), ('int *', 'blockPositions'), ('int *', 'blockSizes'), ('int', 'numBlocks')]"
7,9,geometricDOF,runs,"[('float *', 'Qi_gdof'), ('float4 *', 'positions'), ('float *', 'masses'), ('int *', 'blocknums'), ('int *', 'blocksizes'), ('int', 'largestsize'), ('float *', 'norm'), ('float *', 'pos_center')]"
7,10,blockcopyToOpenMM,runs,"[('float *', 'target'), ('float *', 'source'), ('int *', 'blocks'), ('int', 'numblocks'), ('int', 'setnum'), ('int', 'N')]"
7,11,copyFromOpenMM,runs,"[('float *', 'target'), ('float *', 'source'), ('int', 'N')]"
7,12,orthogonalize23,runs,"[('float *', 'Qi_gdof'), ('int *', 'blocksizes'), ('int', 'numblocks'), ('int', 'largestblock')]"
7,13,copyToOpenMM,runs,"[('float *', 'target'), ('float *', 'source'), ('int', 'N')]"
7,14,blockEigSort,runs,"[('float *', 'eigenvalues'), ('float *', 'eigenvectors'), ('int *', 'blocknums'), ('int *', 'blocksizes'), ('int', 'N')]"
7,15,makeProjection,runs,"[('float *', 'eT'), ('float *', 'e'), ('float *', 'eigenvec'), ('int *', 'indices'), ('int', 'M'), ('int', 'N')]"
7,16,orthogonalize,runs,"[('float *', 'eigvec'), ('float *', 'Qi_gdof'), ('int', 'cdof'), ('int *', 'blocksizes'), ('int *', 'blocknums'), ('int', 'largestblock')]"
7,17,perturbPositions,runs,"[('float *', 'blockpos'), ('float4 *', 'initpos'), ('float', 'delta'), ('int *', 'blocks'), ('int', 'numblocks'), ('int', 'setnum'), ('int', 'N')]"
7,18,perturbByE,runs,"[('float *', 'tmppos'), ('float4 *', 'mypos'), ('float', 'eps'), ('float *', 'E'), ('float *', 'masses'), ('int', 'k'), ('int', 'm'), ('int', 'N')]"
7,19,block_QR,runs,"[('float *', 'z'), ('float *', 'z1'), ('float *', 'vector'), ('float *', 'vector1'), ('float *', 'Q'), ('float *', 'NewQ'), ('float *', 'R'), ('float *', 'PrevM'), ('float *', 'NewM'), ('int *', 'converged'), ('float *', 'eigenvector'), ('const int *', 'WidthOfMatrix'), ('const int *', 'ind'), ('const int *', 'vind')]"
70,0,vecInit,runs,"[('float *', 'X'), ('unsigned int', 'size'), ('float', 'value')]"
70,1,xexp,runs,"[('float *', 'X'), ('float *', 'C'), ('float *', 'Y'), ('float *', 'Z'), ('unsigned int', 'size')]"
70,2,zexp,runs,"[('float *', 'Z'), ('float *', 'X'), ('float *', 'Y'), ('unsigned int', 'size')]"
70,3,rowNorm,runs,"[('float *', 'X'), ('float *', 'v'), ('unsigned int', 'size'), ('unsigned int', 'n')]"
70,4,colNorm,runs,"[('float *', 'X'), ('float *', 'v'), ('unsigned int', 'size'), ('unsigned int', 'n')]"
70,5,dual,runs,"[('float *', 'err'), ('float *', 'Y'), ('float *', 'X'), ('float *', 'Z'), ('unsigned int', 'size')]"
70,6,matsub,runs,"[('float *', 'X'), ('float *', 'Y'), ('unsigned int', 'size')]"
70,7,rowNorm_a,runs,"[('float *', 'X'), ('float *', 'v'), ('float *', 'a'), ('unsigned int', 'size'), ('unsigned int', 'n')]"
70,8,colNorm_b,runs,"[('float *', 'X'), ('float *', 'v'), ('float *', 'b'), ('unsigned int', 'size'), ('unsigned int', 'n')]"
70,9,reduce,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
7010,96,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
7010,97,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
7010,98,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
7010,99,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
7010,170,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
7013,0,ray_shoot,runs,"[('int *', 'maxX'), ('int *', 'maxY'), ('float *', 'lens_scale'), ('float *', 'xlens'), ('float *', 'ylens'), ('float *', 'eps'), ('int *', 'num_lenses'), ('float *', 'dev_arr')]"
7015,0,kernel,runs,"[('int', 'n'), ('float *', 'arr')]"
7015,1,kernel_feedforward,runs,"[('int', 'layer_id'), ('int *', 'l'), ('int *', 's'), ('int *', 'sw'), ('float *', 'z_arr'), ('float *', 'a_arr'), ('float *', 'w_arr')]"
7015,2,kernel_calc_gL,runs,"[('int', 'layer_id'), ('int *', 'l'), ('int *', 's'), ('float *', 'z_arr'), ('float *', 'a_arr'), ('float *', 't_arr'), ('float *', 'gjl')]"
7015,3,kernel_calc_gjL,runs,"[('int', 'layer_id'), ('int *', 'l'), ('int *', 's'), ('int *', 'sw'), ('float *', 'z_arr'), ('float *', 'a_arr'), ('float *', 't_arr'), ('float *', 'gjl'), ('float *', 'w_arr')]"
7015,4,kernel_weight_update,runs,"[('int', 'layer_id'), ('int *', 'l'), ('int *', 's'), ('int *', 'sw'), ('float *', 'z_arr'), ('float *', 'a_arr'), ('float *', 't_arr'), ('float *', 'gjl'), ('float *', 'w_arr'), ('float *', 'dw_arr'), ('float', 'eta'), ('float', 'alpha')]"
7015,5,kernel_feedforward_2,runs,"[('int', 'layer_id'), ('int *', 'l'), ('int *', 's_ext'), ('int *', 'sw_ext'), ('float *', 'z_ext_arr'), ('float *', 'a_ext_arr'), ('float *', 'w_ext_arr')]"
7015,6,kernel_calc_gL_2,runs,"[('int', 'layer_id'), ('int *', 'l'), ('int *', 's_ext'), ('float *', 'z_ext_arr'), ('float *', 'a_ext_arr'), ('float *', 't_arr'), ('float *', 'gjl_ext')]"
7015,7,kernel_calc_gjL_2,runs,"[('int', 'layer_id'), ('int *', 'l'), ('int *', 's_ext'), ('int *', 'sw_ext'), ('float *', 'z_ext_arr'), ('float *', 'a_ext_arr'), ('float *', 't_arr'), ('float *', 'gjl_ext'), ('float *', 'w_ext_arr')]"
7015,8,kernel_weight_update_2,runs,"[('int', 'layer_id'), ('int *', 'l'), ('int *', 's_ext'), ('int *', 'sw_ext'), ('float *', 'z_ext_arr'), ('float *', 'a_ext_arr'), ('float *', 't_arr'), ('float *', 'gjl_ext'), ('float *', 'w_ext_arr'), ('float *', 'dw_ext_arr'), ('float', 'eta'), ('float', 'alpha')]"
7024,0,cudaComputeXGradient,runs,"[('int *', 'x_gradient'), ('unsigned char *', 'channel'), ('int', 'image_width'), ('int', 'image_height')]"
7024,1,cudaComputeYGradient,runs,"[('int *', 'y_gradient'), ('unsigned char *', 'channel'), ('int', 'image_width'), ('int', 'image_height')]"
7024,2,cudaComputeAndNormalizeGradientLength,runs,"[('unsigned char *', 'channel_values'), ('int *', 'x_gradient'), ('int *', 'y_gradient')]"
7024,3,cudaComputeXGradient,runs,"[('int *', 'x_gradient'), ('unsigned char *', 'channel'), ('int', 'image_width'), ('int', 'image_height'), ('int', 'chunk_size_per_thread')]"
7024,4,cudaComputeYGradient,runs,"[('int *', 'y_gradient'), ('unsigned char *', 'channel'), ('int', 'image_width'), ('int', 'image_height'), ('int', 'chunk_size_per_thread')]"
7024,5,cudaComputeAndNormalizeGradientLength,runs,"[('unsigned char *', 'channel_values'), ('int *', 'x_gradient'), ('int *', 'y_gradient'), ('int', 'chunk_size_per_thread')]"
7033,0,cudaComputeXGradient,runs,"[('int *', 'x_gradient'), ('unsigned char *', 'channel'), ('int', 'image_width'), ('int', 'image_height')]"
7033,1,cudaComputeYGradient,runs,"[('int *', 'y_gradient'), ('unsigned char *', 'channel'), ('int', 'image_width'), ('int', 'image_height')]"
7033,2,cudaComputeAndNormalizeGradientLength,runs,"[('unsigned char *', 'channel_values'), ('int *', 'x_gradient'), ('int *', 'y_gradient')]"
7033,3,cudaComputeXGradient,runs,"[('int *', 'x_gradient'), ('unsigned char *', 'channel'), ('int', 'image_width'), ('int', 'image_height'), ('int', 'chunk_size_per_thread')]"
7033,4,cudaComputeYGradient,runs,"[('int *', 'y_gradient'), ('unsigned char *', 'channel'), ('int', 'image_width'), ('int', 'image_height'), ('int', 'chunk_size_per_thread')]"
7033,5,cudaComputeAndNormalizeGradientLength,runs,"[('unsigned char *', 'channel_values'), ('int *', 'x_gradient'), ('int *', 'y_gradient'), ('int', 'chunk_size_per_thread')]"
7041,4,KernelPrintInts,runs,"[('const int *', 'p'), ('int', 'len')]"
7041,24,KernelMemset,runs,"[('bool *', 'p'), ('int', 'len'), ('bool', 'value')]"
7041,49,KernelSelfPlusIters,runs,"[('const bool *', 'indexers'), ('int *', 'iters'), ('int', 'count')]"
7048,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7048,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7048,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7048,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7048,341,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7048,349,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7051,219,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7051,220,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7051,221,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7051,226,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7051,336,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7051,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7052,219,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7052,220,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7052,221,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7052,226,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7052,333,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7052,341,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7053,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7053,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7053,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7053,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7053,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7053,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7053,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7056,10,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7056,69,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7056,70,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7056,71,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7056,76,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7056,171,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7056,176,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7058,2,marks,runs,"[('float *', 'media'), ('int *', 'final')]"
7058,3,reduction,runs,"[('int *', 'in'), ('int *', 'out')]"
7058,4,reduction,runs,"[('int *', 'in'), ('int *', 'out')]"
7058,5,cudahello,runs,[]
7058,7,add,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
7058,10,mul,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
7064,9,gJoin2,runs,"[('float *', 'out'), ('size_t', 'rowBatch'), ('size_t', 'cols'), ('const float *', 'in1'), ('size_t', 'inStride1'), ('const float *', 'in2'), ('size_t', 'inStride2')]"
7064,13,gSoftmaxGrad,runs,"[('float *', 'grad'), ('const float *', 'adj'), ('const float *', 'val'), ('const int', 'rows'), ('const int', 'cols')]"
7064,14,gLogSoftmaxGrad,runs,"[('float *', 'grad'), ('const float *', 'adj'), ('const float *', 'val'), ('const int', 'rows'), ('const int', 'cols')]"
7064,15,gArgmax,runs,"[('float *', 'out'), ('const float *', 'data'), ('size_t', 'rows'), ('size_t', 'cols')]"
7064,16,gCopyRows,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'cols'), ('const size_t *', 'sourceRowIdx'), ('size_t', 'rows')]"
7064,17,gPasteRows,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'cols'), ('const size_t *', 'targetRowIdx'), ('size_t', 'rows')]"
7064,18,gCopyCols,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'rows'), ('size_t', 'colsIn'), ('const size_t *', 'sourceColIdx'), ('size_t', 'colsOut')]"
7064,19,gPasteCols,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'rows'), ('size_t', 'colsOut'), ('const size_t *', 'targetColIdx'), ('size_t', 'colsIn')]"
7064,22,gGRUFastForward,runs,"[('float *', 'out'), ('const float *', 'state'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('size_t', 'rows'), ('size_t', 'cols'), ('bool', 'final')]"
7064,23,gGRUFastBackward,runs,"[('float *', 'outState'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'state'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols'), ('bool', 'final')]"
7064,30,gShift,runs,"[('float *', 'out'), ('const float *', 'in'), ('int', 'length'), ('int', 'offset')]"
7064,31,gSetSparse,runs,"[('float *', 'out'), ('const size_t *', 'indices'), ('const float *', 'values'), ('int', 'length')]"
7064,32,gLSTMCellForward,runs,"[('float *', 'out'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('size_t', 'rows'), ('size_t', 'cols')]"
7064,33,gLSTMOutputForward,runs,"[('float *', 'out'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('size_t', 'rows'), ('size_t', 'cols')]"
7064,34,gLSTMCellBackward,runs,"[('float *', 'outCell'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols')]"
7064,35,gLSTMOutputBackward,runs,"[('float *', 'outCell'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols')]"
7064,36,gHighwayForward,runs,"[('float *', 'out'), ('const float *', 'in1'), ('const float *', 'in2'), ('const float *', 't'), ('size_t', 'length')]"
7064,37,gHighwayBackward,runs,"[('float *', 'out1'), ('float *', 'out2'), ('float *', 'outt'), ('const float *', 'in1'), ('const float *', 'in2'), ('const float *', 't'), ('const float *', 'adj'), ('size_t', 'length')]"
7064,38,gMaxPoolingForward,runs,"[('float *', 'out'), ('int', 'outRows'), ('int', 'outCols'), ('float *', 'in'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
7064,39,gMaxPoolingBackward,runs,"[('float *', 'adj'), ('int', 'adjRows'), ('int', 'adjCols'), ('float *', 'in'), ('float *', 'adjIn'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
7064,42,gGetValueByKey,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('int *', 'indeces'), ('int', 'n')]"
7064,45,gScatterAdd,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
7064,46,gScatterUpdate,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
7064,47,gGather,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
707,0,imgBlur,runs,"[('float *', 'imgIn'), ('float *', 'imgOut'), ('int', 'imageWidth'), ('int', 'imageHeight')]"
707,1,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'n')]"
707,2,matrixAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
707,7,matrix_multiply,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'num'), ('size_t', 'width')]"
707,8,matrixMul,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'n')]"
707,9,vecSum,runs,"[('double *', 'devIn'), ('int', 'pow_step'), ('int', 'n')]"
7071,0,mysgemm,runs,"[('int', 'm'), ('int', 'n'), ('int', 'k'), ('const float *', 'A'), ('const float *', 'B'), ('float *', 'C')]"
7071,1,vecAddKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
7071,2,vecAddKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
7071,3,mysgemm,runs,"[('int', 'm'), ('int', 'n'), ('int', 'k'), ('const float *', 'A'), ('const float *', 'B'), ('float *', 'C')]"
7071,8,histogram_kernel,runs,"[('unsigned int *', 'input'), ('unsigned int *', 'bins'), ('unsigned int', 'num_elements'), ('unsigned int', 'num_bins')]"
7071,9,histogram_kernel_optimized,runs,"[('unsigned int *', 'input'), ('unsigned int *', 'bins'), ('unsigned int', 'num_elements'), ('unsigned int', 'num_bins')]"
7071,10,convert_kernel,runs,"[('unsigned int *', 'bins32'), ('uint8_t *', 'bins8'), ('unsigned int', 'num_bins')]"
7072,5,selection_k_radius_gpu,runs,"[('int', 'b'), ('int', 'm'), ('int', 'k'), ('float', 'radius'), ('const int *', 'idx'), ('const float *', 'val'), ('int *', 'idx_out'), ('float *', 'val_out')]"
7072,6,cube_select,runs,"[('int', 'b'), ('int', 'n'), ('float', 'radius'), ('const float *', 'xyz'), ('int *', 'idx_out')]"
7072,7,cube_select_two,runs,"[('int', 'b'), ('int', 'n'), ('float', 'radius'), ('const float *', 'xyz'), ('int *', 'idx_out')]"
7072,8,cube_select_four,runs,"[('int', 'b'), ('int', 'n'), ('float', 'radius'), ('const float *', 'xyz'), ('int *', 'idx_out')]"
7072,9,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
7072,10,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
7072,11,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
7072,12,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
7072,13,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
7072,14,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
7072,15,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
7072,16,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
7072,17,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
7072,18,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
7072,19,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
7072,20,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
7072,21,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
7072,22,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
7072,23,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('float *', 'dist'), ('int *', 'idx'), ('float *', 'val')]"
7073,43,sync_conv_groups,runs,[]
7074,0,analyze_id,runs,"[('Person *', 'people'), ('int *', 'statResults')]"
7074,1,analyze_age,runs,"[('Person *', 'people'), ('int *', 'statResults')]"
7074,2,analyze_height,runs,"[('Person *', 'people'), ('int *', 'statResults')]"
7074,6,AplusB,runs,"[('int *', 'ret'), ('int', 'a'), ('int', 'b')]"
7076,21,sync_deconv_groups,runs,[]
7076,37,sync_conv_groups,runs,[]
7084,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
7084,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
7086,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7086,225,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7086,226,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7086,227,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7086,232,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7086,337,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7086,342,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7089,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7089,225,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7089,226,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7089,227,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7089,232,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7089,337,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7089,342,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7094,10,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7094,69,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7094,70,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7094,71,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7094,76,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7094,171,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7094,176,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
71,0,printThreadIndex,runs,"[('int *', 'A'), ('const int', 'nx'), ('const int', 'ny')]"
71,1,kernel,runs,[]
71,3,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
71,4,sumMatrix,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nx'), ('int', 'ny')]"
71,5,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
71,6,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
71,8,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
71,9,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
710,0,cuComputeDistanceGlobal,runs,"[('float *', 'A'), ('int', 'wA'), ('float *', 'B'), ('int', 'wB'), ('int', 'dim'), ('float *', 'AB')]"
710,1,cuInsertionSort,runs,"[('float *', 'dist'), ('long *', 'ind'), ('int', 'width'), ('int', 'height'), ('int', 'k')]"
710,2,cuParallelSqrt,runs,"[('float *', 'dist'), ('int', 'width'), ('int', 'k')]"
7100,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
7100,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
7100,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
7100,3,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
7100,4,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
7100,5,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
7100,6,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
7100,7,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
7100,8,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
7100,9,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
7100,10,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
7100,11,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
7100,12,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
7100,13,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
7100,14,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
7100,15,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
7100,16,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
7100,17,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
7100,18,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
7100,19,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
7100,20,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
7100,21,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
7100,22,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
7100,23,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
7100,24,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7100,25,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7100,26,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7100,27,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7100,28,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7100,29,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
7100,30,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
7100,31,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
7100,32,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
7100,33,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
7100,34,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
7100,35,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
7100,36,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
7100,37,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
7100,38,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
7100,39,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
7100,40,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
7100,41,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
7100,42,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
7100,44,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
7100,45,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
7100,46,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
7100,47,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
7100,48,forward_softmax_layer_kernel,runs,"[('int', 'n'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
7105,0,encode,runs,"[('char *', 'encodedText'), ('char *', 'decodedText')]"
711,4,propose_kernel,runs,"[('int64_t *', 'out'), ('int64_t *', 'proposal'), ('const int64_t *', 'rowptr'), ('const int64_t *', 'col'), ('int64_t', 'numel')]"
711,6,respond_kernel,runs,"[('int64_t *', 'out'), ('const int64_t *', 'proposal'), ('const int64_t *', 'rowptr'), ('const int64_t *', 'col'), ('int64_t', 'numel')]"
7111,55,sync_conv_groups,runs,[]
7117,3,clear_best_distances,runs,"[('int *', 'best_distances'), ('int', 'rays_number')]"
7118,3,rho,runs,"[('float *', 'x'), ('int', 'size'), ('float', 'lambda')]"
7118,17,subpixel_enchancement,runs,"[('float *', 'd0'), ('float *', 'c2'), ('float *', 'out'), ('int', 'size'), ('int', 'dim23'), ('int', 'disp_max')]"
7118,19,Normalize_get_norm_,runs,"[('float *', 'input'), ('float *', 'norm'), ('int', 'size1'), ('int', 'size23'), ('int', 'size023')]"
7118,28,remove_nonvisible,runs,"[('float *', 'y'), ('int', 'size'), ('int', 'size3')]"
7118,29,remove_occluded,runs,"[('float *', 'y'), ('int', 'size'), ('int', 'size3')]"
7118,30,remove_white,runs,"[('float *', 'x'), ('float *', 'y'), ('int', 'size')]"
7118,31,copy_fill,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size'), ('int', 'in_size2'), ('int', 'in_size3'), ('int', 'out_size2'), ('int', 'out_size3')]"
7132,2,kernel,runs,"[('float *', 'data'), ('size_t', 'from'), ('size_t', 'to'), ('size_t', 'min'), ('size_t', 'max'), ('size_t', 'NX')]"
7135,0,apply_step_function,runs,"[('float *', 'input'), ('float *', 'output'), ('const int', 'N')]"
7135,1,makeError,runs,"[('float *', 'err'), ('float *', 'output'), ('unsigned int', 'Y'), ('const int', 'N')]"
7135,2,apply_grad,runs,"[('float *', 'output'), ('float *', 'grad'), ('const int', 'N')]"
7136,0,histogram,runs,"[('int *', 'hist_out'), ('unsigned char *', 'img_in'), ('int', 'img_w'), ('int', 'img_h'), ('int', 'nbr_bin')]"
7136,1,histogram_equalization,runs,"[('int *', 'lut'), ('unsigned char *', 'img_out'), ('unsigned char *', 'img_in'), ('int *', 'hist_in'), ('int', 'img_size'), ('int', 'nbr_bin')]"
7136,2,histogram,runs,"[('int *', 'hist_out'), ('unsigned char *', 'img_in'), ('int', 'img_w'), ('int', 'img_h'), ('int', 'nbr_bin')]"
7136,3,histogram_equalization,runs,"[('int *', 'lut'), ('unsigned char *', 'img_out'), ('unsigned char *', 'img_in'), ('int *', 'hist_in'), ('int', 'img_size'), ('int', 'nbr_bin')]"
7136,4,histogram,runs,"[('int *', 'hist_out'), ('unsigned char *', 'img_in'), ('int', 'img_w'), ('int', 'img_h'), ('int', 'nbr_bin')]"
7136,5,histogram_equalization,runs,"[('int *', 'lut'), ('unsigned char *', 'img_out'), ('unsigned char *', 'img_in'), ('int *', 'hist_in'), ('int', 'img_size'), ('int', 'nbr_bin')]"
7136,6,ConvolutionRowGPU,runs,"[('double *', 'd_Dst'), ('double *', 'd_Src'), ('double *', 'd_Filter'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'filterR')]"
7136,7,ConvolutionColGPU,runs,"[('double *', 'd_Dst'), ('double *', 'd_Src'), ('double *', 'd_Filter'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'filterR')]"
7136,8,convolutionRowGPU,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('float *', 'd_Filter'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'filterR')]"
7136,9,convolutionColumnGPU,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('float *', 'd_Filter'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'filterR')]"
7136,10,ConvolutionRowGPU,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('float *', 'd_Filter'), ('int', 'filterR')]"
7136,11,ConvolutionColGPU,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('float *', 'd_Filter'), ('int', 'filterR')]"
7136,12,ConvolutionRowGPU,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('float *', 'd_Filter'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'filterR')]"
7136,13,ConvolutionColGPU,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('float *', 'd_Filter'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'filterR')]"
7139,178,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7139,319,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
714,1,d_count_kernel,runs,"[('unsigned int *', 'd_pivots'), ('int *', 'r_buckets'), ('int', 'pivotsLength'), ('unsigned int *', 'r_indices'), ('unsigned int *', 'r_sublist'), ('unsigned int *', 'd_in'), ('int', 'itemCount')]"
714,2,d_bucketsort,runs,"[('unsigned int *', 'd_in'), ('unsigned int *', 'd_indices'), ('unsigned int *', 'd_sublist'), ('unsigned int *', 'r_outputlist'), ('unsigned int *', 'd_bucketoffsets'), ('int', 'itemCount')]"
7144,47,sync_conv_groups,runs,[]
7146,1,kMartixByMatrixElementwise,runs,"[('const int', 'nThreads'), ('const float *', 'm1'), ('const float *', 'm2'), ('float *', 'output')]"
7146,2,kMartixSubstractMatrix,runs,"[('const int', 'nThreads'), ('const float *', 'm1'), ('const float *', 'm2'), ('float *', 'output')]"
7146,3,kSigmoid,runs,"[('const int', 'nThreads'), ('float const *', 'input'), ('float *', 'output')]"
7146,4,kSigmoid_d,runs,"[('const int', 'nThreads'), ('float const *', 'input'), ('float *', 'output')]"
7146,5,kDot,runs,"[('const int', 'nThreads'), ('const float *', 'm1'), ('const float *', 'm2'), ('float *', 'output'), ('const int', 'm1_rows'), ('const int', 'm1_columns'), ('const int', 'm2_columns')]"
7146,6,kDot_m1_m2T,runs,"[('const int', 'nThreads'), ('const float *', 'm1'), ('const float *', 'm2'), ('float *', 'output'), ('const int', 'm1_columns'), ('const int', 'm2_rows')]"
7146,7,kDot_m1T_m2,runs,"[('const int', 'nThreads'), ('const float *', 'm1'), ('const float *', 'm2'), ('float *', 'output'), ('const int', 'm1_rows'), ('const int', 'm1_columns'), ('const int', 'm2_columns')]"
7146,9,VecAdd,runs,"[('const int *', 'A'), ('const int *', 'B'), ('int *', 'C'), ('int', 'N')]"
7146,10,VecAdd,runs,"[('const int *', 'A'), ('const int *', 'B'), ('int *', 'C'), ('int', 'N')]"
716,2,gpu_mergesort,runs,"[('long *', 'source'), ('long *', 'dest'), ('long', 'size'), ('long', 'width'), ('long', 'slices'), ('dim3 *', 'threads'), ('dim3 *', 'blocks')]"
716,3,count,runs,"[('int *', 'A'), ('int *', 'B'), ('int', 'n')]"
716,5,bitonic_sort_step,runs,"[('int *', 'dev_values'), ('int', 'j'), ('int', 'k')]"
7160,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
7160,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
7160,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
7160,3,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
7160,4,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
7160,5,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
7160,6,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
7160,7,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
7160,9,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
7160,10,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
7160,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
7160,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
7160,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
7160,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
7160,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
7160,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
7160,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
7160,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
7160,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
7160,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
7160,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
7160,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
7160,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7160,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7160,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7160,29,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7160,30,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7160,31,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7160,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
7160,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
7160,34,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
7160,37,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
7160,38,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
7160,39,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
7160,40,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
7160,41,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
7160,42,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
7160,43,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
7160,44,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
7160,45,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
7160,46,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
7160,47,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
7160,48,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
7160,49,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
7160,50,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
7160,51,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
7160,52,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
7160,53,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
7160,54,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
7160,55,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
7160,57,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
7160,58,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
7160,59,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
7160,60,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
7160,65,make_pillar_histo_kernel,runs,"[('const float *', 'dev_points'), ('float *', 'dev_pillar_x_in_coors'), ('float *', 'dev_pillar_y_in_coors'), ('float *', 'dev_pillar_z_in_coors'), ('float *', 'dev_pillar_i_in_coors'), ('int *', 'pillar_count_histo'), ('const int', 'num_points'), ('const int', 'max_points_per_pillar'), ('const int', 'GRID_X_SIZE'), ('const int', 'GRID_Y_SIZE'), ('const int', 'GRID_Z_SIZE'), ('const float', 'MIN_X_RANGE'), ('const float', 'MIN_Y_RANGE'), ('const float', 'MIN_Z_RANGE'), ('const float', 'PILLAR_X_SIZE'), ('const float', 'PILLAR_Y_SIZE'), ('const float', 'PILLAR_Z_SIZE'), ('const int', 'NUM_BOX_CORNERS')]"
7160,66,make_pillar_index_kernel,runs,"[('int *', 'dev_pillar_count_histo'), ('int *', 'dev_counter'), ('int *', 'dev_pillar_count'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('int *', 'dev_sparse_pillar_map'), ('const int', 'max_pillars'), ('const int', 'max_points_per_pillar'), ('const int', 'GRID_X_SIZE'), ('const float', 'PILLAR_X_SIZE'), ('const float', 'PILLAR_Y_SIZE'), ('const int', 'NUM_INDS_FOR_SCAN')]"
7160,67,make_pillar_feature_kernel,runs,"[('float *', 'dev_pillar_x_in_coors'), ('float *', 'dev_pillar_y_in_coors'), ('float *', 'dev_pillar_z_in_coors'), ('float *', 'dev_pillar_i_in_coors'), ('float *', 'dev_pillar_x'), ('float *', 'dev_pillar_y'), ('float *', 'dev_pillar_z'), ('float *', 'dev_pillar_i'), ('int *', 'dev_x_coors'), ('int *', 'dev_y_coors'), ('float *', 'dev_num_points_per_pillar'), ('const int', 'max_points'), ('const int', 'GRID_X_SIZE')]"
7160,68,make_extra_network_input_kernel,runs,"[('float *', 'dev_x_coors_for_sub'), ('float *', 'dev_y_coors_for_sub'), ('float *', 'dev_num_points_per_pillar'), ('float *', 'dev_x_coors_for_sub_shaped'), ('float *', 'dev_y_coors_for_sub_shaped'), ('float *', 'dev_pillar_feature_mask'), ('const int', 'MAX_NUM_POINTS_PER_PILLAR')]"
7160,69,filter_kernel,runs,"[('const float *', 'box_preds'), ('const float *', 'cls_preds'), ('const float *', 'dir_preds'), ('const int *', 'anchor_mask'), ('const float *', 'dev_anchors_px'), ('const float *', 'dev_anchors_py'), ('const float *', 'dev_anchors_pz'), ('const float *', 'dev_anchors_dx'), ('const float *', 'dev_anchors_dy'), ('const float *', 'dev_anchors_dz'), ('const float *', 'dev_anchors_ro'), ('float *', 'filtered_box'), ('float *', 'filtered_score'), ('int *', 'filtered_dir'), ('float *', 'box_for_nms'), ('int *', 'filter_count'), ('const float', 'FLOAT_MIN'), ('const float', 'FLOAT_MAX'), ('const float', 'score_threshold'), ('const int', 'NUM_BOX_CORNERS'), ('const int', 'NUM_OUTPUT_BOX_FEATURE')]"
7160,70,sort_boxes_by_indexes_kernel,runs,"[('float *', 'filtered_box'), ('int *', 'filtered_dir'), ('float *', 'box_for_nms'), ('int *', 'indexes'), ('int', 'filter_count'), ('float *', 'sorted_filtered_boxes'), ('int *', 'sorted_filtered_dir'), ('float *', 'sorted_box_for_nms'), ('const int', 'NUM_BOX_CORNERS'), ('const int', 'NUM_OUTPUT_BOX_FEATURE')]"
7160,71,nms_kernel,runs,"[('const int', 'n_boxes'), ('const float', 'nms_overlap_thresh'), ('const float *', 'dev_boxes'), ('unsigned long long *', 'dev_mask'), ('const int', 'NUM_BOX_CORNERS')]"
7160,72,scan_x,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
7160,73,scan_y,runs,"[('int *', 'g_odata'), ('int *', 'g_idata'), ('int', 'n')]"
7160,75,scatter_kernel,runs,"[('int *', 'x_coors'), ('int *', 'y_coors'), ('float *', 'pfe_output'), ('float *', 'scattered_feature'), ('const int', 'MAX_NUM_PILLARS_'), ('const int', 'GRID_X_SIZE'), ('const int', 'GRID_Y_SIZE')]"
7160,78,computePointGradients1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dj_ang'), ('double *', 'pg24'), ('double *', 'pg05'), ('double *', 'pg15'), ('double *', 'pg25')]"
7160,79,computePointHessian0,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph93'), ('double *', 'ph103'), ('double *', 'ph113'), ('double *', 'ph123'), ('double *', 'ph94'), ('double *', 'ph133'), ('double *', 'ph104'), ('double *', 'ph143'), ('double *', 'ph114'), ('double *', 'ph153'), ('double *', 'ph95'), ('double *', 'ph163'), ('double *', 'ph105'), ('double *', 'ph173'), ('double *', 'ph115')]"
7160,80,computePointHessian1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph124'), ('double *', 'ph134'), ('double *', 'ph144'), ('double *', 'ph154'), ('double *', 'ph125'), ('double *', 'ph164'), ('double *', 'ph135'), ('double *', 'ph174'), ('double *', 'ph145')]"
7160,81,computePointHessian2,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph155'), ('double *', 'ph165'), ('double *', 'ph175')]"
7160,82,computeScoreList,runs,"[('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'e_x_cov_x'), ('double', 'gauss_d1'), ('double *', 'score')]"
7160,83,computeScoreGradientList,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('int', 'voxel_num'), ('double *', 'e_x_cov_x'), ('double *', 'cov_dxd_pi'), ('double', 'gauss_d1'), ('int', 'valid_voxel_num'), ('double *', 'score_gradients')]"
7160,84,computeExCovX,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centr_x'), ('double *', 'centr_y'), ('double *', 'centr_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22')]"
7160,85,updateExCovX,runs,"[('double *', 'e_x_cov_x'), ('double', 'gauss_d2'), ('int', 'valid_voxel_num')]"
7160,86,computeCovDxdPi,runs,"[('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'inverse_covariance'), ('int', 'voxel_num'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'point_gradients'), ('double *', 'cov_dxd_pi'), ('int', 'valid_voxel_num')]"
7160,87,computeHessianListS0,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_gradients'), ('double *', 'tmp_hessian'), ('int', 'valid_voxel_num')]"
7160,88,computeHessianListS1,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'hessians'), ('double *', 'e_x_cov_x'), ('double *', 'tmp_hessian'), ('double *', 'cov_dxd_pi'), ('double *', 'point_gradients'), ('int', 'valid_voxel_num')]"
7160,89,computeHessianListS2,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_hessians'), ('double *', 'hessians'), ('int', 'valid_voxel_num')]"
7160,91,sumScore,runs,"[('double *', 'score'), ('int', 'full_size'), ('int', 'half_size')]"
7162,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
7162,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
7164,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7164,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7165,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
7171,35,sync_conv_groups,runs,[]
7173,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7173,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7173,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7173,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7173,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7173,349,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7173,354,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7184,0,distanceArrCalc,runs,"[('int', 'pointsCounter'), ('int', 'threads'), ('double *', 'distanceFromPointToCluster'), ('double *', 'pointsInGpu'), ('double *', 'clustersInGpu')]"
7184,1,minimumClusterDistance,runs,"[('int', 'threads'), ('double *', 'pointToClusterDistance'), ('int *', 'minimumPointToCluster'), ('int', 'pointsCounter'), ('int', 'clusterCounter')]"
7184,2,pointToThreadMove,runs,"[('int', 'pointsCounter'), ('int', 'threadsInsideBlock'), ('double', 'dt'), ('double *', 'pointsInGpu'), ('double *', 'speedArrayInGpu')]"
719,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
719,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
719,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
719,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
719,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
719,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
719,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
719,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
719,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
719,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
719,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
719,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
719,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
719,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
719,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
719,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
719,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
7194,165,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7194,224,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7194,225,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7194,226,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7194,231,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7194,347,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7194,352,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7199,26,sync_deconv_groups,runs,[]
7199,42,sync_conv_groups,runs,[]
720,3,rho,runs,"[('float *', 'x'), ('int', 'size'), ('float', 'lambda')]"
720,17,subpixel_enchancement,runs,"[('float *', 'd0'), ('float *', 'c2'), ('float *', 'out'), ('int', 'size'), ('int', 'dim23'), ('int', 'disp_max')]"
720,19,Normalize_get_norm_,runs,"[('float *', 'input'), ('float *', 'norm'), ('int', 'size1'), ('int', 'size23'), ('int', 'size023')]"
720,27,remove_nonvisible,runs,"[('float *', 'y'), ('int', 'size'), ('int', 'size3')]"
720,28,remove_occluded,runs,"[('float *', 'y'), ('int', 'size'), ('int', 'size3')]"
720,29,remove_white,runs,"[('float *', 'x'), ('float *', 'y'), ('int', 'size')]"
720,30,copy_fill,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size'), ('int', 'in_size2'), ('int', 'in_size3'), ('int', 'out_size2'), ('int', 'out_size3')]"
720,31,cunn_SpatialLogSoftMax_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('int', 'feature_size'), ('int', 'spatial_size'), ('int', 'data_size'), ('float', 'constant')]"
720,32,cunn_SpatialLogSoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'feature_size'), ('int', 'spatial_size'), ('int', 'data_size')]"
7206,2,Vector_Addition,runs,"[('const int *', 'dev_a'), ('const int *', 'dev_b'), ('int *', 'dev_c')]"
7206,4,cu_init,runs,"[('unsigned long long', 'seed'), ('curandState_t *', 'states_d'), ('size_t', 'size')]"
7206,5,cugen_curand_array,runs,"[('curandState_t *', 'states_d'), ('int *', 'array_d'), ('size_t', 'size')]"
7206,7,Vector_Addition,runs,"[('const int *', 'dev_a'), ('const int *', 'dev_b'), ('int *', 'dev_c')]"
7206,8,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
7206,9,Vector_Addition,runs,"[('const int *', 'dev_a'), ('const int *', 'dev_b'), ('int *', 'dev_c')]"
721,1,europeanOption,runs,"[('int', 'size'), ('int', 'iterations'), ('float *', 'd_price'), ('float', 'initialPrice'), ('float', 'strikePrice'), ('curandState_t *', 'd_state')]"
721,2,init,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'd_state')]"
721,3,addArray,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_c'), ('int', 'size')]"
721,4,addArray,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_c'), ('int', 'size')]"
721,5,kernel,runs,"[('float *', 'x'), ('int', 'n')]"
721,11,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
721,12,addVectors,runs,"[('float *', 'd_A'), ('float *', 'd_B'), ('float *', 'd_C'), ('int', 'size')]"
721,13,addVectors,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_c'), ('int', 'size')]"
721,14,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
721,16,init,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states'), ('unsigned int', 'size')]"
721,17,GeometricBrownianMotion,runs,"[('float *', 'd_a'), ('float', 'mu'), ('float', 'sigma'), ('float', 'dt'), ('curandState_t *', 'states'), ('unsigned int', 'size')]"
721,19,EFD_2dBM,runs,"[('int', 'width'), ('int', 'height'), ('int', 'pitch_n'), ('int', 'pitch_npo'), ('float *', 'd_val_n'), ('float *', 'd_val_npo'), ('float', 'alpha'), ('float', 'beta')]"
721,20,modify_i_j,runs,"[('int', 'width'), ('int', 'height'), ('int', 'pitch'), ('float *', 'd_array'), ('int', 'i'), ('int', 'j'), ('float', 'change_to')]"
721,21,EFD_1dBM,runs,"[('int', 'size'), ('float *', 'd_val_n'), ('float *', 'd_val_npo'), ('float', 'Pu'), ('float', 'Pm'), ('float', 'Pd')]"
721,22,EFD,runs,"[('int', 'size'), ('float *', 'd_val_n'), ('float *', 'd_val_npo'), ('float', 'Pu'), ('float', 'Pm'), ('float', 'Pd'), ('float', 'x0'), ('float', 'x')]"
721,23,curandINIT,runs,"[('int', 'size'), ('curandState_t *', 'd_states'), ('unsigned int', 'seed')]"
721,29,histo_kernel,runs,"[('unsigned char *', 'buffer1'), ('long', 'size1'), ('unsigned int *', 'histo1')]"
721,30,histo_kernel,runs,"[('unsigned char *', 'buffer1'), ('long', 'size1'), ('unsigned int *', 'histo1')]"
721,34,addVectors,runs,"[('int', 'size'), ('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_c')]"
721,37,europeanOption,runs,"[('int', 'size'), ('int', 'iterations'), ('float *', 'd_price'), ('float', 'initialPrice'), ('float', 'strikePrice'), ('curandState_t *', 'd_state')]"
721,38,init,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'd_state')]"
721,39,initialize,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states'), ('unsigned int', 'size')]"
721,40,uniDist,runs,"[('float *', 'd_a'), ('curandState_t *', 'states'), ('unsigned int', 'size')]"
721,42,addArray,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_c'), ('int', 'size')]"
721,43,addArray,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_c'), ('int', 'size')]"
721,44,kernel,runs,"[('float *', 'x'), ('int', 'n')]"
721,45,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
721,46,histo_kernel,runs,"[('unsigned char *', 'buffer1'), ('long', 'size1'), ('unsigned int *', 'histo1')]"
721,47,histo_kernel,runs,"[('unsigned char *', 'buffer1'), ('long', 'size1'), ('unsigned int *', 'histo1')]"
721,49,EFD_2dBM,runs,"[('int', 'width'), ('int', 'height'), ('int', 'pitch_n'), ('int', 'pitch_npo'), ('float *', 'd_val_n'), ('float *', 'd_val_npo'), ('float', 'alpha'), ('float', 'beta')]"
721,50,modify_i_j,runs,"[('int', 'width'), ('int', 'height'), ('int', 'pitch'), ('float *', 'd_array'), ('int', 'i'), ('int', 'j'), ('float', 'change_to')]"
721,51,EFD_1dBM,runs,"[('int', 'size'), ('float *', 'd_val_n'), ('float *', 'd_val_npo'), ('float', 'Pu'), ('float', 'Pm'), ('float', 'Pd')]"
721,52,EFD,runs,"[('int', 'size'), ('float *', 'd_val_n'), ('float *', 'd_val_npo'), ('float', 'Pu'), ('float', 'Pm'), ('float', 'Pd'), ('float', 'x0'), ('float', 'x')]"
721,53,IFD_boundary,runs,"[('int', 'size'), ('double *', 'd_Price'), ('double', 'lambda_U'), ('double', 'lambda_L')]"
721,54,explicitTimestepHeat,runs,"[('int', 'size'), ('float *', 'd_currentVal'), ('float *', 'd_nextVal'), ('float', 'r')]"
721,55,initilize,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states')]"
721,56,uniformRandom,runs,"[('curandState_t *', 'states'), ('float *', 'd_values')]"
721,57,initialize,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states'), ('unsigned int', 'size')]"
721,58,uniDist,runs,"[('float *', 'd_a'), ('curandState_t *', 'states'), ('unsigned int', 'size')]"
721,60,init,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'states'), ('unsigned int', 'size')]"
721,61,GeometricBrownianMotion,runs,"[('float *', 'd_a'), ('float', 'mu'), ('float', 'sigma'), ('float', 'dt'), ('curandState_t *', 'states'), ('unsigned int', 'size')]"
721,62,curandINIT,runs,"[('int', 'size'), ('curandState_t *', 'd_states'), ('unsigned int', 'seed')]"
722,4,MD_ED_D,runs,"[('float *', 'S'), ('float *', 'T'), ('int', 'trainSize'), ('int', 'window_size'), ('int', 'dimensions'), ('float *', 'data_out'), ('int', 'task'), ('int', 'gm')]"
722,5,MD_ED_I,runs,"[('float *', 'S'), ('float *', 'T'), ('int', 'trainSize'), ('int', 'window_size'), ('int', 'dimensions'), ('float *', 'data_out'), ('int', 'task'), ('int', 'gm')]"
722,6,rMD_ED_D,runs,"[('float *', 'S'), ('float *', 'T'), ('int', 'window_size'), ('int', 'dimensions'), ('float *', 'data_out'), ('int', 'trainSize'), ('int', 'gm')]"
7222,0,Test,runs,"[('double *', 'training_in_d'), ('double *', 'training_out_d'), ('double *', 'data_range_d'), ('double *', 'weights_in_d'), ('double *', 'weights_out_d'), ('double *', 'weights_h_d'), ('double *', 'h_out_d'), ('double *', 'outputs_d'), ('int', 'inputs'), ('int', 'samples'), ('int', 'height')]"
7222,8,back,runs,"[('double *', 'h_out_d'), ('double *', 'weights_out_d'), ('double *', 'weights_h_d'), ('double *', 'weights_in_d'), ('double *', 'outputs_d'), ('double *', 'deltas_h_d'), ('double *', 'deltas_h_new_d'), ('double *', 'deltas_o_d'), ('double *', 'weights_in_delta_d'), ('double *', 'weights_out_delta_d'), ('double *', 'weights_h_delta_d'), ('int', 'height'), ('int', 'inputs'), ('int', 'outputs'), ('int', 'layers'), ('double *', 'training_in_d'), ('double *', 'training_out_d'), ('int', 'sample')]"
7222,10,error_reduc,runs,"[('double *', 'error_d'), ('int', 'bit')]"
7222,12,update_wout,runs,"[('double *', 'weights_out_d'), ('double *', 'weights_out_delta_d'), ('int', 'bit')]"
7222,14,update,runs,"[('double *', 'weights_in_d'), ('double *', 'weights_h_d'), ('double *', 'weights_out_d'), ('double *', 'weights_in_delta_d'), ('double *', 'weights_h_delta_d'), ('double *', 'weights_out_delta_d'), ('double *', 'error_d')]"
7232,10,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7232,69,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7232,70,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7232,71,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7232,76,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7232,171,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7232,176,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7233,0,saxpy,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
7238,0,Passthru,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('uint32_t *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7238,1,NV12ToARGB,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('uint32_t *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7238,2,NV12ToRGBAf,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('float4 *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7238,6,RGBToRGBAf,runs,"[('uchar3 *', 'srcImage'), ('float4 *', 'dstImage'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7238,13,kernel_extract_roi,runs,"[('float *', 'input'), ('float *', 'output'), ('char *', 'mean'), ('const int', 'input_w'), ('const int', 'output_w'), ('const int', 'output_h'), ('const int', 'in_plane_r'), ('const int', 'in_plane_g'), ('const int', 'in_plane_b'), ('const int', 'out_plane_r'), ('const int', 'out_plane_g'), ('const int', 'out_plane_b'), ('const int', 'bbox_x'), ('const int', 'bbox_y'), ('const int', 'bbox_w'), ('const int', 'bbox_h')]"
7238,14,kernelSoftmax,runs,"[('float *', 'x'), ('int', 'channels'), ('float *', 'y')]"
724,1,blockReduction,runs,"[('double *', 'dN_pTdpTdphidy_d'), ('int', 'final_spectrum_size'), ('int', 'blocks_ker1')]"
7247,96,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
7247,97,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
7247,98,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
7247,99,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
7247,170,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
7248,224,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7248,225,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7248,226,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7248,231,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7248,338,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7248,346,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7264,31,init_i32,runs,"[('int *', 'vector'), ('int', 'value'), ('int', 'len')]"
7264,32,init_f32,runs,"[('float *', 'vector'), ('float', 'value'), ('int', 'len')]"
7264,33,addValue_i32,runs,"[('int *', 'vector'), ('int', 'value'), ('int *', 'output'), ('int', 'len')]"
7264,34,addValue_f32,runs,"[('float *', 'vector'), ('float', 'value'), ('float *', 'output'), ('int', 'len')]"
7264,35,scl_i32,runs,"[('int *', 'vector'), ('int', 'value'), ('int *', 'output'), ('int', 'len')]"
7264,36,scl_f32,runs,"[('float *', 'vector'), ('float', 'value'), ('float *', 'output'), ('int', 'len')]"
7264,37,add_i32,runs,"[('int *', 'left_op'), ('int *', 'right_op'), ('int *', 'output'), ('int', 'len')]"
7264,38,add_f32,runs,"[('float *', 'left_op'), ('float *', 'right_op'), ('float *', 'output'), ('int', 'len')]"
7264,39,sub_i32,runs,"[('int *', 'left_op'), ('int *', 'right_op'), ('int *', 'output'), ('int', 'len')]"
7264,40,sub_f32,runs,"[('float *', 'left_op'), ('float *', 'right_op'), ('float *', 'output'), ('int', 'len')]"
7264,41,mult_i32,runs,"[('int *', 'left_op'), ('int *', 'right_op'), ('int *', 'output'), ('int', 'len')]"
7264,42,mult_f32,runs,"[('float *', 'left_op'), ('float *', 'right_op'), ('float *', 'output'), ('int', 'len')]"
7264,43,square_i32,runs,"[('int *', 'vector'), ('int *', 'output'), ('int', 'len')]"
7264,44,square_f32,runs,"[('float *', 'vector'), ('float *', 'output'), ('int', 'len')]"
7264,45,binarize_i32,runs,"[('int *', 'vector'), ('int', 'threshold'), ('int *', 'output'), ('int', 'len')]"
7264,46,binarize_f32,runs,"[('float *', 'vector'), ('float', 'threshold'), ('float *', 'output'), ('int', 'len')]"
7264,47,aypb_i32,runs,"[('int', 'a'), ('int *', 'y'), ('int', 'b'), ('int', 'len')]"
7264,48,aypb_f32,runs,"[('float', 'a'), ('float *', 'y'), ('float', 'b'), ('int', 'len')]"
7264,49,axpb_y_i32,runs,"[('int', 'a'), ('int *', 'x'), ('int', 'b'), ('int *', 'y'), ('int', 'len')]"
7264,50,axpb_y_f32,runs,"[('float', 'a'), ('float *', 'x'), ('float', 'b'), ('float *', 'y'), ('int', 'len')]"
7264,51,xvpy_i32,runs,"[('int *', 'x'), ('int *', 'v'), ('int *', 'y'), ('int', 'len')]"
7264,52,xvpy_f32,runs,"[('float *', 'x'), ('float *', 'v'), ('float *', 'y'), ('int', 'len')]"
7264,53,x_avpb_py_i32,runs,"[('int *', 'x'), ('int', 'a'), ('int *', 'v'), ('int', 'b'), ('int *', 'y'), ('int', 'len')]"
7264,54,x_avpb_py_f32,runs,"[('float *', 'x'), ('float', 'a'), ('float *', 'v'), ('float', 'b'), ('float *', 'y'), ('int', 'len')]"
7264,55,sigmoid_f32,runs,"[('float *', 'vector'), ('float *', 'output'), ('int', 'len')]"
7264,56,sigmoidDeriv_f32,runs,"[('float *', 'vector'), ('float *', 'output'), ('int', 'len')]"
7264,57,tanh_f32,runs,"[('float *', 'vector'), ('float *', 'output'), ('int', 'len')]"
7264,58,tanhDeriv_f32,runs,"[('float *', 'vector'), ('float *', 'output'), ('int', 'len')]"
7264,59,relu_f32,runs,"[('float *', 'vector'), ('float *', 'output'), ('int', 'len')]"
7264,60,reluDeriv_f32,runs,"[('float *', 'vector'), ('float *', 'output'), ('int', 'len')]"
7264,61,customErrorCalc_f32,runs,"[('float *', 'vector'), ('float *', 'ideal_vector'), ('float', 'threshold'), ('float', 'scaleFoff'), ('float', 'scaleFon'), ('float *', 'output'), ('int', 'len')]"
7264,62,convolution,runs,"[('float *', 'input'), ('int', 'inputRows'), ('int', 'inputCols'), ('int', 'inputLd'), ('float *', 'kernel'), ('int', 'kernelRows'), ('int', 'kernelCols'), ('int', 'kernelLd'), ('int', 'rowStep'), ('int', 'colStep'), ('float *', 'output'), ('int', 'outputLd')]"
7265,21,sync_deconv_groups,runs,[]
7265,37,sync_conv_groups,runs,[]
727,2,weight_division_calc,runs,"[('float *', 'sum_squared_afferent_values'), ('float *', 'afferent_weight_change_updater'), ('float *', 'weight_divisor'), ('bool *', 'neuron_in_plasticity_set'), ('size_t', 'total_number_of_neurons')]"
727,3,weight_update,runs,"[('int *', 'postsyn_neuron'), ('bool *', 'neuron_in_plasticity_set'), ('float *', 'current_weight'), ('float *', 'weight_divisor'), ('int *', 'd_plastic_synapse_indices'), ('size_t', 'total_number_of_plastic_synapses')]"
727,5,masquelier_get_indices_to_apply_stdp,runs,"[('int *', 'd_postsyns'), ('float *', 'd_last_spike_time_of_each_neuron'), ('float *', 'd_time_of_last_spike_to_reach_synapse'), ('int *', 'd_index_of_last_afferent_synapse_to_spike'), ('bool *', 'd_isindexed_ltd_synapse_spike'), ('int *', 'd_index_of_first_synapse_spiked_after_postneuron'), ('float', 'currtime'), ('int *', 'd_plastic_synapse_indices'), ('size_t', 'total_number_of_plastic_synapses')]"
727,8,vanrossum_get_indices_to_apply_stdp,runs,"[('int *', 'd_postsyns'), ('float *', 'd_last_spike_time_of_each_neuron'), ('float *', 'd_time_of_last_spike_to_reach_synapse'), ('int *', 'd_index_of_last_afferent_synapse_to_spike'), ('bool *', 'd_isindexed_ltd_synapse_spike'), ('int *', 'd_index_of_first_synapse_spiked_after_postneuron'), ('float', 'currtime'), ('int *', 'd_plastic_synapse_indices'), ('size_t', 'total_number_of_plastic_synapses')]"
727,10,update_presynaptic_activities_C_kernel,runs,"[('float *', 'd_recent_presynaptic_activities_C'), ('float *', 'd_time_of_last_spike_to_reach_synapse'), ('float', 'timestep'), ('float', 'current_time_in_seconds'), ('float', 'synaptic_neurotransmitter_concentration_alpha_C'), ('float', 'decay_term_tau_C'), ('int *', 'd_plastic_synapse_indices'), ('size_t', 'total_number_of_plastic_synapses')]"
727,11,update_synaptic_efficacies_or_weights_kernel,runs,"[('float *', 'd_recent_presynaptic_activities_C'), ('float *', 'd_recent_postsynaptic_activities_D'), ('int *', 'd_postsynaptic_neuron_indices'), ('float *', 'd_synaptic_efficacies_or_weights'), ('float', 'current_time_in_seconds'), ('float *', 'd_time_of_last_spike_to_reach_synapse'), ('float *', 'd_last_spike_time_of_each_neuron'), ('float', 'learning_rate_rho'), ('int *', 'd_plastic_synapse_indices'), ('size_t', 'total_number_of_plastic_synapses')]"
727,16,conductance_calculate_postsynaptic_current_injection_kernel,runs,"[('float *', 'decay_term_values'), ('float *', 'reversal_values'), ('int', 'num_decay_terms'), ('int *', 'synapse_decay_values'), ('float *', 'neuron_wise_conductance_traces'), ('float *', 'd_neurons_current_injections'), ('float *', 'd_membrane_potentials_v'), ('float', 'timestep'), ('size_t', 'total_number_of_neurons')]"
727,17,conductance_move_spikes_towards_synapses_kernel,runs,"[('int *', 'd_spikes_travelling_to_synapse'), ('float', 'current_time_in_seconds'), ('int *', 'circular_spikenum_buffer'), ('int *', 'spikeid_buffer'), ('int', 'bufferloc'), ('int', 'buffersize'), ('int', 'total_number_of_synapses'), ('float *', 'd_time_of_last_spike_to_reach_synapse'), ('int *', 'postsynaptic_neuron_indices'), ('float *', 'neuron_wise_conductance_trace'), ('int *', 'synaptic_decay_id'), ('int', 'total_number_of_neurons'), ('float *', 'd_synaptic_efficacies_or_weights'), ('float *', 'd_biological_conductance_scaling_constants_lambda'), ('float', 'timestep')]"
727,25,izhikevich_update_membrane_potentials_kernel,runs,"[('float *', 'd_membrane_potentials_v'), ('float *', 'd_states_u'), ('float *', 'd_param_a'), ('float *', 'd_param_b'), ('float *', 'd_current_injections'), ('float *', 'thresholds_for_action_potentials'), ('float *', 'last_spike_time_of_each_neuron'), ('float *', 'resting_potentials'), ('float', 'current_time_in_seconds'), ('float', 'timestep'), ('size_t', 'total_number_of_neurons')]"
7277,0,cudaProcessUnsignedChar0,runs,"[('unsigned char *', 'dst'), ('unsigned char *', 'src'), ('int', 'imgW'), ('int', 'imgH')]"
728,0,testDrive,runs,[]
7289,161,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7289,220,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7289,221,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7289,222,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7289,227,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7289,333,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7289,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
729,0,checkIndex,runs,[]
729,1,helloFromGPU,runs,[]
729,2,sumArrayOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C')]"
7295,0,forces_and_step,runs,"[('double *', 'bodies_input'), ('double *', 'bodies_output'), ('unsigned int', 'count'), ('double', 'dt'), ('uint16_t', 'bods_per_thread')]"
730,0,testDrive,runs,[]
7305,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
7305,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
7305,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
7305,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
7305,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
7305,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
7305,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
7305,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
7305,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
7305,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
7305,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
7305,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
7305,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
7305,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
7305,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
7305,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
7305,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
7318,6,set_volume_to_constant,runs,"[('float *', 'out'), ('float', 'value')]"
7318,19,kernel_normalize_and_add_to_output,runs,"[('float *', 'dev_vol_in'), ('float *', 'dev_vol_out'), ('float *', 'dev_accumulate_weights'), ('float *', 'dev_accumulate_values')]"
7318,30,magnitude_threshold_kernel,runs,"[('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z'), ('float', 'gamma')]"
7318,31,gradient_and_subtract_kernel,runs,"[('float *', 'in'), ('float *', 'grad_x'), ('float *', 'grad_y'), ('float *', 'grad_z')]"
7318,32,multiply_by_beta_kernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'beta')]"
7318,33,subtract_kernel,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out')]"
7329,2,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
733,0,checkIndex,runs,[]
733,1,printThreadIndex,runs,"[('int *', 'A'), ('const int', 'nx'), ('const int', 'ny')]"
733,2,helloFromGPU,runs,[]
733,3,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
733,4,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
733,5,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
733,6,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
733,7,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
733,8,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
733,9,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
733,10,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
733,11,warmup,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
733,12,copyRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
733,13,copyCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
733,14,transposeNaiveRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
733,15,transposeNaiveCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
733,16,transposeUnroll4Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
733,17,transposeUnroll4Col,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
733,18,transposeDiagonalRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
733,19,transposeDiagonalCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
733,22,add,runs,"[('int *', 'c'), ('int *', 'd')]"
733,29,add,runs,"[('float *', 'd_A'), ('float *', 'd_B'), ('float *', 'd_C'), ('int', 'widthA'), ('int', 'widthB'), ('int', 'widthC')]"
7341,6,init_prng,runs,"[('curandState *', 'states'), ('const unsigned long int', 'seed')]"
7343,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7343,227,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7343,228,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7343,229,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7343,234,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7343,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7343,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7348,2,kernel,runs,[]
7348,6,kernel,runs,[]
735,2,getLoss,runs,"[('float *', 'dat'), ('float *', 'rst')]"
7355,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
7355,3,rgb2gray,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'height'), ('int', 'width')]"
7355,4,blur,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'height'), ('int', 'width')]"
7361,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7361,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7363,0,AddIntsCUDA,runs,"[('int *', 'a'), ('int *', 'b')]"
737,7,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
737,8,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
737,9,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
737,10,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
737,11,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
737,12,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
737,14,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
737,15,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
737,17,shmem_max_reduce_kernel,runs,"[('float *', 'd_max'), ('const float *', 'd_in')]"
7382,10,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7382,69,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7382,70,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7382,71,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7382,76,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7382,169,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7382,174,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7384,0,count_samples_GPU,runs,"[('float *', 'd_X'), ('float *', 'd_Y'), ('int *', 'd_countInBlocks'), ('int', 'num_block'), ('int', 'samples')]"
7393,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7393,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7393,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7393,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7393,330,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7393,335,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7394,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
7394,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
7394,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
7394,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
7394,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
740,4,hotspotOpt1,runs,"[('float *', 'p'), ('float *', 'tIn'), ('float *', 'tOut'), ('float', 'sdc'), ('int', 'nx'), ('int', 'ny'), ('int', 'nz'), ('float', 'ce'), ('float', 'cw'), ('float', 'cn'), ('float', 'cs'), ('float', 'ct'), ('float', 'cb'), ('float', 'cc')]"
740,54,readGlobalMemoryCoalesced,runs,"[('float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
740,55,readGlobalMemoryUnit,runs,"[('float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
740,56,readLocalMemory,runs,"[('const float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
740,57,writeGlobalMemoryCoalesced,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
740,58,writeGlobalMemoryUnit,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
740,59,writeLocalMemory,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
740,75,BFS_kernel_warp,runs,"[('unsigned int *', 'levels'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('int', 'W_SZ'), ('int', 'CHUNK_SZ'), ('unsigned int', 'numVertices'), ('int', 'curr'), ('int *', 'flag')]"
740,76,BFS_kernel_one_block,runs,"[('volatile unsigned int *', 'frontier'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('unsigned int', 'num_p_per_mp'), ('unsigned int', 'w_q_size')]"
740,77,BFS_kernel_SM_block,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('unsigned int', 'num_p_per_mp'), ('unsigned int', 'w_q_size')]"
740,80,Frontier_copy,runs,"[('unsigned int *', 'frontier'), ('unsigned int *', 'frontier2'), ('unsigned int *', 'frontier_length')]"
740,81,BFS_kernel_one_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_mem')]"
740,82,BFS_kernel_SM_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_mem')]"
740,84,kernelUpdateBiases,runs,"[('float *', 'nabla_b'), ('float *', 'biases'), ('float', 'eta'), ('float', 'mini_batch_size')]"
740,86,kernelUpdateNablaB,runs,"[('float *', 'nabla_b'), ('float *', 'delta_nabla_b')]"
740,90,kernelBackprop3a,runs,"[('float *', 'delta_nabla_b'), ('int', 'b_off'), ('int', 'bound'), ('int', 'b_off_old'), ('float *', 'weights'), ('int', 'w_off_old')]"
740,91,kernelBackprop3b,runs,"[('float *', 'delta_nabla_b'), ('int', 'b_off'), ('float *', 'zs')]"
740,92,kernelBackprop1,runs,"[('float *', 'delta_nabla_w'), ('int', 'w_off'), ('float *', 'activations'), ('float *', 'delta_nabla_b'), ('int', 'b_off')]"
740,94,kernelFeedForward1,runs,"[('float *', 'zs'), ('int', 'bound2'), ('float *', 'weights'), ('int', 'w_off'), ('float *', 'activations1')]"
740,95,kernelFeedForward1b,runs,"[('float *', 'zs'), ('int', 'bound'), ('float *', 'weights'), ('int', 'w_off'), ('float *', 'activations')]"
740,96,kernelFeedForward3,runs,"[('float *', 'zs'), ('float *', 'biases'), ('int', 'b_off'), ('float *', 'activations')]"
740,97,kernelFeedForward2,runs,"[('float *', 'zs'), ('float *', 'biases'), ('int', 'b_off'), ('float *', 'activations')]"
740,143,executeThirdLayer,runs,"[('float *', 'Layer3_Neurons_GPU'), ('float *', 'Layer3_Weights_GPU'), ('float *', 'Layer4_Neurons_GPU')]"
740,144,executeFourthLayer,runs,"[('float *', 'Layer4_Neurons_GPU'), ('float *', 'Layer4_Weights_GPU'), ('float *', 'Layer5_Neurons_GPU')]"
7402,6,findScaleSpaceExtrema_gpu,runs,"[('float *', 'd_point'), ('int', 'p_pitch'), ('int', 's'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('const int', 'threshold'), ('const int', 'nOctaveLayers'), ('const int', 'maxNum')]"
7402,16,differenceImg_gpu,runs,[]
7402,20,differenceImg,runs,"[('float *', 'd_Octave0'), ('float *', 'd_Octave1'), ('float *', 'd_diffOctave'), ('int', 'pitch'), ('int', 'height')]"
7402,28,ScaleDown,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'newpitch')]"
7402,29,test,runs,[]
741,0,setQuantities,runs,"[('unsigned int', 'numInputs'), ('unsigned int', 'value'), ('unsigned int *', 'd_quantity')]"
741,1,atomicInc_kernel,runs,"[('unsigned int', 'numIterations'), ('unsigned int', 'numInputs'), ('float *', 'd_probabilities'), ('unsigned int *', 'd_quantity'), ('unsigned int *', 'd_count')]"
741,2,atomicDec_kernel,runs,"[('unsigned int', 'numIterations'), ('unsigned int', 'numInputs'), ('float *', 'd_probabilities'), ('unsigned int *', 'd_quantity'), ('unsigned int *', 'd_count')]"
741,3,atomicIncNoWrap_kernel,runs,"[('unsigned int', 'numIterations'), ('unsigned int', 'numInputs'), ('float *', 'd_probabilities'), ('unsigned int *', 'd_quantity'), ('unsigned int *', 'd_count')]"
741,4,atomicDecNoWrap_kernel,runs,"[('unsigned int', 'numIterations'), ('unsigned int', 'numInputs'), ('float *', 'd_probabilities'), ('unsigned int *', 'd_quantity'), ('unsigned int *', 'd_count')]"
742,1,add,runs,"[('int *', 'a'), ('int *', 'r'), ('int *', 'g'), ('int *', 'b'), ('float *', 'gc')]"
742,2,add,runs,"[('int *', 'a'), ('int *', 'r'), ('int *', 'g'), ('int *', 'b'), ('float *', 'gc')]"
742,3,add2,runs,"[('int *', 'a'), ('int *', 'r'), ('int *', 'g'), ('int *', 'b'), ('float *', 'gc')]"
742,4,add,runs,"[('int *', 'a'), ('int *', 'r'), ('int *', 'g'), ('int *', 'b'), ('float *', 'gc')]"
742,5,add,runs,"[('int *', 'a'), ('int *', 'r'), ('int *', 'g'), ('int *', 'b'), ('float *', 'gc')]"
7421,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7421,225,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7421,226,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7421,227,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7421,232,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7421,348,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7421,353,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7425,26,sync_deconv_groups,runs,[]
7425,42,sync_conv_groups,runs,[]
7432,1,kernel_reconstruct,runs,"[('double *', 'Q'), ('double *', 'D1'), ('double *', 'U_'), ('double *', 'X'), ('double', 'omega')]"
7432,4,cuda_radiation_kernel,runs,[]
7433,37,sync_conv_groups,runs,[]
7438,1,dotProductCuda,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
7438,4,prefSumBinTreeCuda,runs,"[('float *', 'a'), ('int', 'n')]"
7438,5,prefSumBinTreeCudaMulti,runs,"[('float *', 'a'), ('int', 'n')]"
7438,6,prefSumBinTreeCudaMultiCollect,runs,"[('float *', 'a'), ('int', 'n'), ('int', 'numBlocks')]"
7438,12,calculateResidual_CUDA,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
7439,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7439,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
744,1,pre_post_order,runs,"[('int *', 'depth'), ('int *', 'zeta'), ('int *', 'zeta_tilde'), ('graph *', 'dataset_graph')]"
7444,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
7445,21,sync_deconv_groups,runs,[]
7445,37,sync_conv_groups,runs,[]
745,5,cuda_Shrink_CalU_Vector,runs,"[('float *', 'Y'), ('float *', 'U'), ('float *', 'X'), ('float', 'lambda'), ('float *', 'L1Weight'), ('int', 'nRows'), ('int', 'nCols'), ('int', 'nFilts')]"
745,13,cuda_Pad_Dict,runs,"[('float *', 'PadD'), ('float *', 'D'), ('int', 'nRows_D'), ('int', 'nCols_D'), ('int', 'nFilts'), ('int', 'nRows'), ('int', 'nCols')]"
745,25,cuda_Cal_X_minus_U_W,runs,"[('float *', 'Y'), ('float *', 'U'), ('float *', 'X'), ('int *', 'Weight'), ('int', 'nRows'), ('int', 'nCols')]"
745,26,cuda_Cal_Gfw,runs,"[('float *', 'GfW'), ('float2 *', 'Grf'), ('float2 *', 'Gcf'), ('int', 'nRows'), ('int', 'nCols')]"
7450,52,resetParticlesKernel,runs,"[('float3 *', 'pos'), ('float3 *', 'vel'), ('float *', 'age'), ('float *', 'life'), ('char *', 'opafix'), ('int', 'nParts')]"
7452,1,rgb2grayKernel,runs,"[('unsigned char *', 'imgr'), ('unsigned char *', 'imgg'), ('unsigned char *', 'imgb'), ('unsigned char *', 'img_gray'), ('int', 'n')]"
7452,3,calcSumTable,runs,"[('const float *', 'rowCumSum'), ('float *', 'SumTable'), ('int', 'rowNumberN'), ('int', 'colNumberM')]"
7452,4,calculateFeatureDifference,runs,"[('float *', 'templateFeatures'), ('int', 'colNumberM'), ('int', 'rowNumberN'), ('float *', 'l1SumTable'), ('float *', 'l2SumTable'), ('float *', 'lxSumTable'), ('float *', 'lySumTable'), ('int', 'Kx'), ('int', 'Ky'), ('float *', 'differences')]"
7452,11,rgb2yuvKernel,runs,"[('int *', 'imgr'), ('int *', 'imgg'), ('int *', 'imgb'), ('int *', 'imgy'), ('int *', 'imgcb'), ('int *', 'imgcr'), ('int', 'n')]"
7452,12,yuv2rgbKernel,runs,"[('int *', 'imgy'), ('int *', 'imgcb'), ('int *', 'imgcr'), ('int *', 'imgr'), ('int *', 'imgg'), ('int *', 'imgb'), ('int', 'n')]"
7452,13,rgb2binaryKernel,runs,"[('unsigned char *', 'imgr'), ('unsigned char *', 'imgg'), ('unsigned char *', 'imgb'), ('unsigned char *', 'img_binary'), ('int', 'n'), ('int', 'umbral')]"
7458,0,FormPNGData,runs,"[('float3 *', 'colors'), ('unsigned char *', 'pixelData'), ('unsigned int', 'simWidth'), ('unsigned int', 'simHeight')]"
7485,0,empty_kernel,runs,[]
7486,1,mandelKernel,runs,"[('double', 'planoFactorXd'), ('double', 'planoFactorYd'), ('double', 'planoVxd'), ('double', 'planoVyd'), ('int', 'maxIteracionesd'), ('unsigned int *', 'coloresd'), ('int', 'img_width'), ('int', 'img_height'), ('int', 'num_processes'), ('int', 'my_pid'), ('int', 'rw')]"
7486,3,mandelKernel,runs,"[('double', 'planoFactorXd'), ('double', 'planoFactorYd'), ('double', 'planoVxd'), ('double', 'planoVyd'), ('int', 'maxIteracionesd'), ('unsigned int *', 'coloresd'), ('int', 'img_width'), ('int', 'img_height'), ('int', 'num_processes'), ('int', 'my_pid')]"
7491,9,gJoin2,runs,"[('float *', 'out'), ('size_t', 'rowBatch'), ('size_t', 'cols'), ('const float *', 'in1'), ('size_t', 'inStride1'), ('const float *', 'in2'), ('size_t', 'inStride2')]"
7491,10,gAddRow,runs,"[('float *', 'out'), ('const float *', 'in'), ('int', 'length')]"
7491,15,gSoftmaxGrad,runs,"[('float *', 'grad'), ('const float *', 'adj'), ('const float *', 'val'), ('const int', 'rows'), ('const int', 'cols')]"
7491,16,gLogSoftmaxGrad,runs,"[('float *', 'grad'), ('const float *', 'adj'), ('const float *', 'val'), ('const int', 'rows'), ('const int', 'cols')]"
7491,17,gArgmax,runs,"[('float *', 'out'), ('const float *', 'data'), ('size_t', 'rows'), ('size_t', 'cols')]"
7491,18,gCopyRows,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'cols'), ('const size_t *', 'sourceRowIdx'), ('size_t', 'rows')]"
7491,19,gPasteRows,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'cols'), ('const size_t *', 'targetRowIdx'), ('size_t', 'rows')]"
7491,20,gCopyCols,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'rows'), ('size_t', 'colsIn'), ('const size_t *', 'sourceColIdx'), ('size_t', 'colsOut')]"
7491,21,gPasteCols,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'rows'), ('size_t', 'colsOut'), ('const size_t *', 'targetColIdx'), ('size_t', 'colsIn')]"
7491,24,gGRUFastForward,runs,"[('float *', 'out'), ('const float *', 'state'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('size_t', 'rows'), ('size_t', 'cols'), ('bool', 'final')]"
7491,25,gGRUFastBackward,runs,"[('float *', 'outState'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'state'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols'), ('bool', 'final')]"
7491,33,gSetSparse,runs,"[('float *', 'out'), ('const size_t *', 'indices'), ('const float *', 'values'), ('int', 'length')]"
7491,34,gLSTMCellForward,runs,"[('float *', 'out'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('size_t', 'rows'), ('size_t', 'cols')]"
7491,35,gLSTMOutputForward,runs,"[('float *', 'out'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('size_t', 'rows'), ('size_t', 'cols')]"
7491,36,gLSTMCellBackward,runs,"[('float *', 'outCell'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols')]"
7491,37,gLSTMOutputBackward,runs,"[('float *', 'outCell'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols')]"
7491,38,gHighwayForward,runs,"[('float *', 'out'), ('const float *', 'in1'), ('const float *', 'in2'), ('const float *', 't'), ('size_t', 'length')]"
7491,39,gHighwayBackward,runs,"[('float *', 'out1'), ('float *', 'out2'), ('float *', 'outt'), ('const float *', 'in1'), ('const float *', 'in2'), ('const float *', 't'), ('const float *', 'adj'), ('size_t', 'length')]"
7491,40,gMaxPoolingForward,runs,"[('float *', 'out'), ('int', 'outRows'), ('int', 'outCols'), ('float *', 'in'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
7491,41,gMaxPoolingBackward,runs,"[('float *', 'adj'), ('int', 'adjRows'), ('int', 'adjCols'), ('float *', 'in'), ('float *', 'adjIn'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
7491,44,gGetValueByKey,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('int *', 'indeces'), ('int', 'n')]"
7491,47,gScatterAdd,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
7491,48,gScatterUpdate,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
7491,49,gGather,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
7498,68,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
7507,17,mul_by_veff_real_real_gpu_kernel,runs,"[('int', 'nr__'), ('double *', 'buf__'), ('double const *', 'veff__')]"
7507,33,update_density_rg_1_real_gpu_kernel,runs,"[('int', 'size__'), ('double const *', 'psi_rg__'), ('double', 'wt__'), ('double *', 'density_rg__')]"
7508,4,absoluteDifferenceCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7508,5,bitwiseAndCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7508,6,bitwiseOrCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7508,7,bitwiseXorCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7508,10,copyCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7508,13,flipCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('bool', 'horizontal'), ('bool', 'vertical')]"
7508,14,histogramCuda,runs,"[('const uint8_t *', 'data'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'histogram')]"
7508,15,invertCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7508,16,isEqualCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'isEqual')]"
7508,17,lookupTableCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint8_t *', 'table')]"
7508,18,maximumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7508,19,minimumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7508,20,projectionProfileHorizontalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
7508,21,projectionProfileVerticalCuda,runs,"[('const uint8_t *', 'image'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'projection')]"
7508,22,rotateCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('float', 'inXStart'), ('float', 'inYStart'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('float', 'cosAngle'), ('float', 'sinAngle')]"
7508,24,setPixelCuda,runs,"[('uint8_t *', 'in'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'pointX'), ('uint32_t *', 'pointY'), ('uint32_t', 'pointSize'), ('uint32_t', 'value')]"
7508,25,subtractCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
7508,29,isAnyEqualCuda,runs,"[('const uint8_t *', 'image'), ('uint8_t *', 'value'), ('size_t', 'valueCount'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'differenceCount')]"
751,0,matrixTriUpper,runs,"[('float *', 'a'), ('int', 'm'), ('int', 'n')]"
751,1,matrixTriUpper,runs,"[('float *', 'a'), ('int', 'm'), ('int', 'n')]"
751,2,matrixMult,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
751,3,squareMatrixMult,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_result'), ('int', 'n')]"
7510,6,stochasticGradientDescentKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate')]"
7510,7,adagradKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate'), ('float *', 'history'), ('float', 'epsilon')]"
7510,8,adamKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate'), ('float', 'firstMomentDecay'), ('float', 'oneMinusFirstMomentDecay'), ('float', 'secondMomentDecay'), ('float', 'oneMinusSecondMomentDecay'), ('float', 'epsilon'), ('float', 'step'), ('float *', 'firstMomentEstimate'), ('float *', 'secondMomentEstimate')]"
7510,9,rmspropKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate'), ('float', 'decay'), ('float', 'oneMinusDecay'), ('float', 'epsilon'), ('float *', 'accumulation')]"
7510,10,adadeltaKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'decay'), ('float', 'oneMinusDecay'), ('float', 'epsilon'), ('float *', 'gradientAccumulation'), ('float *', 'updateAccumulation')]"
7510,11,nesterovKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate'), ('float', 'momentum'), ('float *', 'history'), ('float *', 'backup')]"
7510,12,momentumKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate'), ('float', 'momentum'), ('float *', 'history')]"
7510,13,multiClassTestingKernel,runs,"[('int', 'batchStart'), ('int', 'numberRows'), ('int', 'numberColumns'), ('int', 'numberEntriesPerInstance'), ('float *', 'predictions'), ('float *', 'targets'), ('int *', 'result')]"
7510,14,binaryTestingKernel,runs,"[('int', 'batchStart'), ('int', 'length'), ('float *', 'predictions'), ('float *', 'targets'), ('int *', 'result')]"
7510,15,addKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numberIterations'), ('int', 'size')]"
7510,16,replaceNaNKernel,runs,"[('int', 'numberEntriesPerInstance'), ('int', 'numberIterations'), ('float *', 'source'), ('float *', 'destination')]"
7510,17,sumKernel,runs,"[('float *', 'input'), ('float *', 'result'), ('int', 'batchSize'), ('int', 'numberEntries'), ('int', 'numberIterations')]"
7510,18,groupSumKernel,runs,"[('float *', 'input'), ('int *', 'firstOccurrences'), ('int *', 'otherOccurrences'), ('int *', 'otherOccurrencePositions'), ('int', 'dimensions'), ('int', 'numberIterations')]"
7510,22,expansionKernel,runs,"[('int', 'batchSize'), ('float *', 'input'), ('int *', 'inputLengths'), ('int', 'numberRows'), ('int', 'numberInputEntries'), ('int', 'numberFilterRowPositions'), ('int', 'filterHeight'), ('int', 'filterWidth'), ('int', 'filterLength'), ('int', 'numberResultEntries'), ('float *', 'result'), ('int *', 'resultLengths')]"
7510,38,backwardMaxPoolingKernel,runs,"[('int', 'batchSize'), ('int *', 'lengths'), ('int', 'numberEntriesPerInstance'), ('int', 'numberRows'), ('int *', 'maxIndices'), ('float *', 'chain'), ('float *', 'result')]"
7511,1,get_i_idx_se_a,runs,"[('const int', 'nloc'), ('const int *', 'ilist'), ('int *', 'i_idx')]"
7511,3,format_nlist_fill_b_se_a,runs,"[('int *', 'nlist'), ('const int', 'nlist_size'), ('const int', 'nloc'), ('const int *', 'jrange'), ('const int *', 'jlist'), ('int_64 *', 'key'), ('const int *', 'sec_a'), ('const int', 'sec_a_size'), ('int *', 'nei_iter_dev'), ('const int', 'MAGIC_NUMBER')]"
7511,9,get_i_idx_se_r,runs,"[('const int', 'nloc'), ('const int *', 'ilist'), ('int *', 'i_idx')]"
7525,0,readChannelKernel,runs,"[('unsigned char *', 'image'), ('unsigned char *', 'channel'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'channelToExtract'), ('int', 'numChannels')]"
7525,1,writeChannelKernel,runs,"[('unsigned char *', 'image'), ('unsigned char *', 'channel'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'channelToMerge'), ('int', 'numChannels')]"
7525,2,averageKernel,runs,"[('unsigned char *', 'inputChannel'), ('unsigned char *', 'outputChannel'), ('int', 'imageW'), ('int', 'imageH')]"
7527,0,hillisSteeleScanDevice,runs,"[('int *', 'd_array'), ('int', 'numberOfElements'), ('int *', 'd_tmpArray'), ('int', 'moveIndex')]"
7527,1,hillisSteeleScanDevice,runs,"[('int *', 'd_array'), ('int', 'numberOfElements'), ('int *', 'd_tmpArray'), ('int', 'moveIndex')]"
7527,2,serialReduction,runs,"[('int *', 'd_array'), ('int', 'numberOfElements')]"
7527,3,parallelReduction,runs,"[('int *', 'd_array'), ('int', 'numberOfElements'), ('int', 'elementsPerThread'), ('int', 'numberOfThreadsPerBlock'), ('int', 'numberOfBlocks'), ('int *', 'd_global')]"
7527,4,predicateDevice,runs,"[('int *', 'd_array'), ('int *', 'd_predicateArrry'), ('int', 'd_numberOfElements'), ('int', 'bit'), ('int', 'bitset')]"
7527,5,scatter,runs,"[('int *', 'd_array'), ('int *', 'd_scanArray'), ('int *', 'd_predicateArrry'), ('int *', 'd_scatteredArray'), ('int', 'd_numberOfElements'), ('int', 'offset')]"
7527,6,hillisSteeleScanDevice,runs,"[('int *', 'd_array'), ('int', 'numberOfElements'), ('int *', 'd_tmpArray'), ('int', 'moveIndex')]"
7527,7,getPos,runs,"[('int *', 'd_scanArray'), ('int', 'd_numberOfElements'), ('int *', 'd_lastPos')]"
7527,8,parallelReduction,runs,"[('int *', 'd_array'), ('int', 'numberOfElements'), ('int', 'elementsPerThread'), ('int', 'numberOfThreadsPerBlock'), ('int', 'numberOfBlocks'), ('int *', 'd_global')]"
7527,9,print,runs,[]
7527,10,scatter,runs,"[('int *', 'd_array'), ('int *', 'd_predicateArray'), ('int *', 'd_scanArray'), ('int *', 'd_compactedArray'), ('int', 'd_numberOfElements')]"
7527,11,predicate,runs,"[('int *', 'd_array'), ('int', 'd_numberOfElements'), ('int *', 'd_predicateArray')]"
7527,12,hillisSteeleScanDevice,runs,"[('int *', 'd_predicateArray'), ('int', 'd_numberOfElements'), ('int *', 'd_tmpArray'), ('int', 'd_offset')]"
7527,13,parallelReduction,runs,"[('int *', 'd_array'), ('int', 'numberOfElements'), ('int', 'elementsPerThread'), ('int', 'numberOfThreadsPerBlock'), ('int', 'numberOfBlocks'), ('int *', 'd_global')]"
7529,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7529,303,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7529,308,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7534,42,sync_conv_groups,runs,[]
7535,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
7535,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
7539,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7539,227,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7539,228,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7539,229,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7539,234,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7539,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7539,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
754,0,testDrive,runs,[]
7541,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7541,303,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7541,308,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7542,21,sync_deconv_groups,runs,[]
7542,37,sync_conv_groups,runs,[]
755,0,calc_histogram,runs,"[('char *', 'dbuff'), ('unsigned int *', 'dcount'), ('unsigned int', 'size'), ('float', 'stride')]"
7559,0,gpu_sort,runs,"[('int *', 'd_array'), ('int', 'size'), ('int', 'chunkSize')]"
7561,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
7561,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
7561,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
7561,3,set_zero_kernel,runs,"[('float *', 'src'), ('int', 'size')]"
7561,5,binarize_weights_mean_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary'), ('float *', 'mean_arr_gpu')]"
7561,8,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
7561,9,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
7561,10,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
7561,12,im2col_align_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col'), ('const int', 'bit_align')]"
7561,27,convolve_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad')]"
7561,28,convolve_bin_gpu_kernel,runs,"[('float *', 'input'), ('float *', 'weights'), ('float *', 'output'), ('int', 'in_w'), ('int', 'in_h'), ('int', 'in_c'), ('int', 'n'), ('int', 'size'), ('int', 'pad'), ('int', 'new_lda'), ('float *', 'mean_arr_gpu')]"
7561,30,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
7561,32,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
7561,34,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
7561,35,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
7561,36,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
7561,37,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
7561,38,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
7561,39,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
7561,42,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
7561,43,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
7561,44,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
7561,45,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
7561,46,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
7561,47,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
7561,48,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7561,49,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7561,50,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7561,51,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7561,52,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
7561,53,mask_kernel_new_api,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
7561,54,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
7561,55,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
7561,56,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
7561,59,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
7561,60,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
7561,61,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
7561,62,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
7561,63,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
7561,64,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
7561,65,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
7561,66,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
7561,67,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
7561,68,softmax_kernel_new_api,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
7561,69,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
7561,70,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
7561,71,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
7561,73,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
7561,74,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
7561,75,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
7561,76,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
7561,78,activate_array_leaky_kernel,runs,"[('float *', 'x'), ('int', 'n')]"
7567,36,sync_conv_groups,runs,[]
7579,0,histogram_atomic,runs,"[('float *', 'a'), ('int *', 'histo'), ('int', 'n')]"
7579,1,histogram_shared,runs,"[('float *', 'a'), ('int *', 'histo'), ('int', 'n')]"
7579,7,matMul,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'M'), ('int', 'N'), ('int', 'K')]"
7579,8,matAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
7579,9,matMul,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c')]"
7581,0,matMulKernel2,runs,"[('float *', 'P'), ('float *', 'M'), ('float *', 'N'), ('int', 'width')]"
7581,1,matMulKernel4,runs,"[('float *', 'P'), ('float *', 'M'), ('float *', 'N'), ('int', 'width')]"
7581,2,matMulKernel10,runs,"[('float *', 'P'), ('float *', 'M'), ('float *', 'N'), ('int', 'width')]"
7581,3,matMulKernel20,runs,"[('float *', 'P'), ('float *', 'M'), ('float *', 'N'), ('int', 'width')]"
7581,4,matMulKernel25,runs,"[('float *', 'P'), ('float *', 'M'), ('float *', 'N'), ('int', 'width')]"
7581,5,matrixAddKernel1,runs,"[('float *', 'ans'), ('float *', 'M'), ('float *', 'N'), ('int', 'size')]"
7581,6,matrixAddKernel2,runs,"[('float *', 'ans'), ('float *', 'M'), ('float *', 'N'), ('int', 'size')]"
7581,7,matrixAddKernel3,runs,"[('float *', 'ans'), ('float *', 'M'), ('float *', 'N'), ('int', 'size')]"
7581,8,matrixMulKernel,runs,"[('float *', 'ans'), ('float *', 'M'), ('float *', 'N'), ('int', 'size')]"
7607,4,matMultCuda,runs,"[('float *', 'cu_C'), ('float *', 'cu_A'), ('float *', 'cu_B'), ('unsigned int', 'n')]"
7610,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
7610,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
7612,0,sum_kernel,runs,"[('float *', 'g_odata'), ('float *', 'g_idata'), ('int', 'n')]"
7612,1,testKernel,runs,"[('float *', 'g_idata'), ('float *', 'g_odata')]"
7613,0,elementwiseMul,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'rows'), ('int', 'cols')]"
7613,1,matrixTransKernel,runs,"[('float *', 'A'), ('int', 'rows'), ('int', 'cols')]"
7613,2,relu,runs,"[('float *', 'inout'), ('float *', 'bias'), ('int', 'rows'), ('int', 'cols')]"
7613,3,relu_grad,runs,"[('float *', 'pre_grad'), ('float *', 'output'), ('int', 'rows'), ('int', 'cols')]"
7613,4,sigmoid,runs,"[('float *', 'inout'), ('float *', 'bias'), ('int', 'rows'), ('int', 'cols')]"
7613,5,sigmoid_grad,runs,"[('float *', 'pre_grad'), ('float *', 'output'), ('int', 'rows'), ('int', 'cols')]"
7613,6,tanh,runs,"[('float *', 'inout'), ('float *', 'bias'), ('int', 'rows'), ('int', 'cols')]"
7613,7,tanh_grad,runs,"[('float *', 'pre_grad'), ('float *', 'output'), ('int', 'rows'), ('int', 'cols')]"
7613,8,bias_grad,runs,"[('float *', 'pre_grad'), ('float *', 'output'), ('int', 'rows'), ('int', 'cols')]"
7613,9,attentionKernel,runs,"[('float *', 'x'), ('int', 'rows'), ('int', 'cols')]"
7620,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7620,301,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7620,306,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7622,9,gJoin2,runs,"[('float *', 'out'), ('size_t', 'rowBatch'), ('size_t', 'cols'), ('const float *', 'in1'), ('size_t', 'inStride1'), ('const float *', 'in2'), ('size_t', 'inStride2')]"
7622,13,gSoftmaxGrad,runs,"[('float *', 'grad'), ('const float *', 'adj'), ('const float *', 'val'), ('const int', 'rows'), ('const int', 'cols')]"
7622,14,gLogSoftmaxGrad,runs,"[('float *', 'grad'), ('const float *', 'adj'), ('const float *', 'val'), ('const int', 'rows'), ('const int', 'cols')]"
7622,15,gArgmax,runs,"[('float *', 'out'), ('const float *', 'data'), ('size_t', 'rows'), ('size_t', 'cols')]"
7622,16,gCopyRows,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'cols'), ('const size_t *', 'sourceRowIdx'), ('size_t', 'rows')]"
7622,17,gPasteRows,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'cols'), ('const size_t *', 'targetRowIdx'), ('size_t', 'rows')]"
7622,18,gCopyCols,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'rows'), ('size_t', 'colsIn'), ('const size_t *', 'sourceColIdx'), ('size_t', 'colsOut')]"
7622,19,gPasteCols,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'rows'), ('size_t', 'colsOut'), ('const size_t *', 'targetColIdx'), ('size_t', 'colsIn')]"
7622,22,gGRUFastForward,runs,"[('float *', 'out'), ('const float *', 'state'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('size_t', 'rows'), ('size_t', 'cols'), ('bool', 'final')]"
7622,23,gGRUFastBackward,runs,"[('float *', 'outState'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'state'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols'), ('bool', 'final')]"
7622,30,gShift,runs,"[('float *', 'out'), ('const float *', 'in'), ('int', 'length'), ('int', 'offset')]"
7622,31,gSetSparse,runs,"[('float *', 'out'), ('const size_t *', 'indices'), ('const float *', 'values'), ('int', 'length')]"
7622,32,gLSTMCellForward,runs,"[('float *', 'out'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('size_t', 'rows'), ('size_t', 'cols')]"
7622,33,gLSTMOutputForward,runs,"[('float *', 'out'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('size_t', 'rows'), ('size_t', 'cols')]"
7622,34,gLSTMCellBackward,runs,"[('float *', 'outCell'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols')]"
7622,35,gLSTMOutputBackward,runs,"[('float *', 'outCell'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols')]"
7622,36,gHighwayForward,runs,"[('float *', 'out'), ('const float *', 'in1'), ('const float *', 'in2'), ('const float *', 't'), ('size_t', 'length')]"
7622,37,gHighwayBackward,runs,"[('float *', 'out1'), ('float *', 'out2'), ('float *', 'outt'), ('const float *', 'in1'), ('const float *', 'in2'), ('const float *', 't'), ('const float *', 'adj'), ('size_t', 'length')]"
7622,38,gMaxPoolingForward,runs,"[('float *', 'out'), ('int', 'outRows'), ('int', 'outCols'), ('float *', 'in'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
7622,39,gMaxPoolingBackward,runs,"[('float *', 'adj'), ('int', 'adjRows'), ('int', 'adjCols'), ('float *', 'in'), ('float *', 'adjIn'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
7622,42,gGetValueByKey,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('int *', 'indeces'), ('int', 'n')]"
7622,45,gScatterAdd,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
7622,46,gScatterUpdate,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
7622,47,gGather,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
7626,3,fc_gpu_kernel,runs,"[('float *', 'y'), ('float *', 'x'), ('float *', 'weights'), ('const int', 'weightHeight'), ('const int', 'outSize'), ('const int', 'inSize')]"
7626,4,convdw_gpu_kernel,runs,"[('float *', 'dw'), ('float *', 'dy'), ('float *', 'x'), ('const int', 'S'), ('const int', 'outSize'), ('const int', 'inSize')]"
7626,5,convdx_gpu_kernel,runs,"[('float *', 'dx'), ('float *', 'dy'), ('float *', 'weights'), ('const int', 'S'), ('const int', 'outSize'), ('const int', 'inSize')]"
763,4,hotspotOpt1,runs,"[('float *', 'p'), ('float *', 'tIn'), ('float *', 'tOut'), ('float', 'sdc'), ('int', 'nx'), ('int', 'ny'), ('int', 'nz'), ('float', 'ce'), ('float', 'cw'), ('float', 'cn'), ('float', 'cs'), ('float', 'ct'), ('float', 'cb'), ('float', 'cc')]"
763,54,readGlobalMemoryCoalesced,runs,"[('float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
763,55,readGlobalMemoryUnit,runs,"[('float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
763,56,readLocalMemory,runs,"[('const float *', 'data'), ('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
763,57,writeGlobalMemoryCoalesced,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
763,58,writeGlobalMemoryUnit,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
763,59,writeLocalMemory,runs,"[('float *', 'output'), ('int', 'size'), ('int', 'repeat')]"
763,75,BFS_kernel_warp,runs,"[('unsigned int *', 'levels'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('int', 'W_SZ'), ('int', 'CHUNK_SZ'), ('unsigned int', 'numVertices'), ('int', 'curr'), ('int *', 'flag')]"
763,76,BFS_kernel_one_block,runs,"[('volatile unsigned int *', 'frontier'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('unsigned int', 'num_p_per_mp'), ('unsigned int', 'w_q_size')]"
763,77,BFS_kernel_SM_block,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('unsigned int', 'num_p_per_mp'), ('unsigned int', 'w_q_size')]"
763,80,Frontier_copy,runs,"[('unsigned int *', 'frontier'), ('unsigned int *', 'frontier2'), ('unsigned int *', 'frontier_length')]"
763,81,BFS_kernel_one_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_mem')]"
763,82,BFS_kernel_SM_block_spill,runs,"[('volatile unsigned int *', 'frontier'), ('volatile unsigned int *', 'frontier2'), ('unsigned int', 'frontier_len'), ('volatile unsigned int *', 'cost'), ('volatile int *', 'visited'), ('unsigned int *', 'edgeArray'), ('unsigned int *', 'edgeArrayAux'), ('unsigned int', 'numVertices'), ('unsigned int', 'numEdges'), ('volatile unsigned int *', 'frontier_length'), ('const unsigned int', 'max_mem')]"
763,84,kernelUpdateBiases,runs,"[('float *', 'nabla_b'), ('float *', 'biases'), ('float', 'eta'), ('float', 'mini_batch_size')]"
763,86,kernelUpdateNablaB,runs,"[('float *', 'nabla_b'), ('float *', 'delta_nabla_b')]"
763,90,kernelBackprop3a,runs,"[('float *', 'delta_nabla_b'), ('int', 'b_off'), ('int', 'bound'), ('int', 'b_off_old'), ('float *', 'weights'), ('int', 'w_off_old')]"
763,91,kernelBackprop3b,runs,"[('float *', 'delta_nabla_b'), ('int', 'b_off'), ('float *', 'zs')]"
763,92,kernelBackprop1,runs,"[('float *', 'delta_nabla_w'), ('int', 'w_off'), ('float *', 'activations'), ('float *', 'delta_nabla_b'), ('int', 'b_off')]"
763,94,kernelFeedForward1,runs,"[('float *', 'zs'), ('int', 'bound2'), ('float *', 'weights'), ('int', 'w_off'), ('float *', 'activations1')]"
763,95,kernelFeedForward1b,runs,"[('float *', 'zs'), ('int', 'bound'), ('float *', 'weights'), ('int', 'w_off'), ('float *', 'activations')]"
763,96,kernelFeedForward3,runs,"[('float *', 'zs'), ('float *', 'biases'), ('int', 'b_off'), ('float *', 'activations')]"
763,97,kernelFeedForward2,runs,"[('float *', 'zs'), ('float *', 'biases'), ('int', 'b_off'), ('float *', 'activations')]"
763,143,executeThirdLayer,runs,"[('float *', 'Layer3_Neurons_GPU'), ('float *', 'Layer3_Weights_GPU'), ('float *', 'Layer4_Neurons_GPU')]"
763,144,executeFourthLayer,runs,"[('float *', 'Layer4_Neurons_GPU'), ('float *', 'Layer4_Weights_GPU'), ('float *', 'Layer5_Neurons_GPU')]"
7633,161,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7633,220,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7633,221,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7633,222,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7633,227,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7633,337,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7633,342,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7636,0,initRandomizer,runs,"[('unsigned int', 'seed'), ('curandState *', 'state')]"
7649,0,detect_edges,runs,"[('unsigned char *', 'input'), ('unsigned char *', 'output')]"
7658,221,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7658,222,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7658,223,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7658,228,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7658,335,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7658,343,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7660,0,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
7668,0,checkIndex,runs,[]
7668,1,helloFromGPU,runs,[]
7676,1,getMeanImage,runs,"[('const double *', 'images'), ('double *', 'meanImage'), ('std::size_t', 'imageNum'), ('std::size_t', 'pixelNum')]"
7676,2,subtractMean,runs,"[('double *', 'images'), ('const double *', 'meanImage'), ('std::size_t', 'imageNum'), ('std::size_t', 'pixelNum')]"
7676,3,getLowerAAt,runs,"[('const double *', 'A'), ('double *', 'S'), ('std::size_t', 'imageNum'), ('std::size_t', 'pixelNum')]"
7676,4,getSufficientComponentNum,runs,"[('const double *', 'eigenvalues'), ('std::size_t *', 'componentNum'), ('std::size_t', 'eigenRows'), ('double', 'epsilon')]"
7676,5,restoreEigenvectors,runs,"[('const double *', 'meanSubtractedImages'), ('const double *', 'reducedEigenvectors'), ('double *', 'restoredEigenvectors'), ('std::size_t', 'imageNum'), ('std::size_t', 'pixelNum'), ('std::size_t', 'componentNum')]"
7676,7,getWeights,runs,"[('const double *', 'restoredEigenvectors'), ('const double *', 'meanSubtractedImages'), ('double *', 'weights'), ('std::size_t', 'imageNum'), ('std::size_t', 'pixelNum'), ('std::size_t', 'componentNum')]"
7676,8,getTestWeights,runs,"[('const double *', 'restoredEigenvectors'), ('const double *', 'meanImage'), ('const double *', 'testImages'), ('double *', 'testWeights'), ('std::size_t', 'testImageNum'), ('std::size_t', 'pixelNum'), ('std::size_t', 'componentNum')]"
7676,9,getDistances,runs,"[('const double *', 'trainingWeights'), ('const double *', 'testWeights'), ('double *', 'distances'), ('std::size_t', 'trainImageNum'), ('std::size_t', 'testImageNum'), ('std::size_t', 'componentNum')]"
7683,0,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
7685,89,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
7689,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7689,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
769,0,Evolve,runs,"[('bool *', 'field'), ('float *', 'scores'), ('double', 'b'), ('int', 'size'), ('bool *', 'next_field')]"
7690,0,blurKernel,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'width'), ('int', 'height')]"
7690,1,rgb2gray,runs,"[('float *', 'grayImage'), ('float *', 'rgbImage'), ('int', 'channels'), ('int', 'width'), ('int', 'height')]"
7690,2,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
7690,3,matrixMultiplyShared,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
7697,0,gcd_vector,runs,"[('int *', 'd_out'), ('int', 'integer_m')]"
7697,1,boxBlur,runs,"[('uchar4 *', 'd_img'), ('uchar4 *', 'd_blurred'), ('int', 'numRows'), ('int', 'numCols'), ('int', 'k')]"
7697,5,square,runs,"[('int *', 'd_num_steps'), ('unsigned long long *', 'd_fact'), ('double *', 'd_out')]"
7697,6,square,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
77,3,cunn_SoftMax_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'output'), ('float *', 'gradOutput'), ('int', 'nframe'), ('int', 'dim')]"
77,6,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
77,7,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
77,9,maxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
77,10,atomicmaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
77,14,cunn_ClassNLLCriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('int', 'sizeAverage'), ('int', 'ntarget')]"
77,15,cunn_ClassNLLCriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'target'), ('int', 'nframe'), ('int', 'ndim'), ('float', 'grad'), ('int', 'ntarget')]"
77,16,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'weight'), ('float *', 'bias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
77,17,subgradweight,runs,"[('float *', 'input'), ('float *', 'gradOutput'), ('float *', 'gradWeight'), ('float *', 'gradBias'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW'), ('float', 'scale')]"
77,18,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
77,19,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'weight'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
77,20,cunn_MSECriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'target'), ('int', 'nframe'), ('int', 'dim'), ('int', 'sizeAverage')]"
77,21,cunn_MSECriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'input'), ('float *', 'target'), ('float', 'norm'), ('int', 'nframe'), ('int', 'dim')]"
77,26,max_output,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
77,27,max_gradInput,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
77,28,subsample,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
77,29,subgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
77,30,subgradinputAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kH'), ('int', 'kW'), ('int', 'dH'), ('int', 'dW')]"
77,32,cunn_TemporalMaxPooling_updateGradInputKernel,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
77,33,cunn_TemporalMaxPooling_updateGradInputKernelAtomic,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices'), ('int', 'input_w'), ('int', 'input_n'), ('int', 'output_w'), ('int', 'kW'), ('int', 'dW')]"
77,35,adaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
77,36,atomicadaptivemaxgradinput,runs,"[('float *', 'gradInput'), ('float *', 'gradOutput'), ('float *', 'indices_x'), ('float *', 'indices_y'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'output_h'), ('int', 'output_w')]"
77,37,min_output,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
77,38,min_gradInput,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'indices'), ('long', 'nrows'), ('long', 'ncols')]"
7702,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7702,293,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7702,298,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7706,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
7706,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
7719,219,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7719,220,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7719,221,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7719,226,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7719,336,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7719,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7722,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7722,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7729,9,gJoin2,runs,"[('float *', 'out'), ('size_t', 'rowBatch'), ('size_t', 'cols'), ('const float *', 'in1'), ('size_t', 'inStride1'), ('const float *', 'in2'), ('size_t', 'inStride2')]"
7729,10,gAddRow,runs,"[('float *', 'out'), ('const float *', 'in'), ('int', 'length')]"
7729,15,gSoftmaxGrad,runs,"[('float *', 'grad'), ('const float *', 'adj'), ('const float *', 'val'), ('const int', 'rows'), ('const int', 'cols')]"
7729,16,gLogSoftmaxGrad,runs,"[('float *', 'grad'), ('const float *', 'adj'), ('const float *', 'val'), ('const int', 'rows'), ('const int', 'cols')]"
7729,17,gArgmax,runs,"[('float *', 'out'), ('const float *', 'data'), ('size_t', 'rows'), ('size_t', 'cols')]"
7729,18,gCopyRows,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'cols'), ('const size_t *', 'sourceRowIdx'), ('size_t', 'rows')]"
7729,19,gPasteRows,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'cols'), ('const size_t *', 'targetRowIdx'), ('size_t', 'rows')]"
7729,20,gCopyCols,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'rows'), ('size_t', 'colsIn'), ('const size_t *', 'sourceColIdx'), ('size_t', 'colsOut')]"
7729,21,gPasteCols,runs,"[('float *', 'out'), ('const float *', 'in'), ('size_t', 'rows'), ('size_t', 'colsOut'), ('const size_t *', 'targetColIdx'), ('size_t', 'colsIn')]"
7729,24,gGRUFastForward,runs,"[('float *', 'out'), ('const float *', 'state'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('size_t', 'rows'), ('size_t', 'cols'), ('bool', 'final')]"
7729,25,gGRUFastBackward,runs,"[('float *', 'outState'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'state'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols'), ('bool', 'final')]"
7729,33,gSetSparse,runs,"[('float *', 'out'), ('const size_t *', 'indices'), ('const float *', 'values'), ('int', 'length')]"
7729,34,gLSTMCellForward,runs,"[('float *', 'out'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('size_t', 'rows'), ('size_t', 'cols')]"
7729,35,gLSTMOutputForward,runs,"[('float *', 'out'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('size_t', 'rows'), ('size_t', 'cols')]"
7729,36,gLSTMCellBackward,runs,"[('float *', 'outCell'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'mask'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols')]"
7729,37,gLSTMOutputBackward,runs,"[('float *', 'outCell'), ('float *', 'outXW'), ('float *', 'outSU'), ('float *', 'outB'), ('const float *', 'cell'), ('const float *', 'xW'), ('const float *', 'sU'), ('const float *', 'b'), ('const float *', 'adj'), ('size_t', 'rows'), ('size_t', 'cols')]"
7729,38,gHighwayForward,runs,"[('float *', 'out'), ('const float *', 'in1'), ('const float *', 'in2'), ('const float *', 't'), ('size_t', 'length')]"
7729,39,gHighwayBackward,runs,"[('float *', 'out1'), ('float *', 'out2'), ('float *', 'outt'), ('const float *', 'in1'), ('const float *', 'in2'), ('const float *', 't'), ('const float *', 'adj'), ('size_t', 'length')]"
7729,40,gMaxPoolingForward,runs,"[('float *', 'out'), ('int', 'outRows'), ('int', 'outCols'), ('float *', 'in'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
7729,41,gMaxPoolingBackward,runs,"[('float *', 'adj'), ('int', 'adjRows'), ('int', 'adjCols'), ('float *', 'in'), ('float *', 'adjIn'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
7729,44,gGetValueByKey,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('int *', 'indeces'), ('int', 'n')]"
7729,47,gScatterAdd,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
7729,48,gScatterUpdate,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
7729,49,gGather,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
7733,1,NOVA,runs,"[('double *', 'Beta'), ('double *', 'Inverse'), ('int *', 'Vec'), ('int', 'p0'), ('double', 'Sigma2')]"
7733,2,matrixTrans,runs,"[('double *', 'M'), ('double *', 'MT'), ('int', 'rows'), ('int', 'cols')]"
7733,3,matrixMul,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'C'), ('int', 'cols'), ('int', 'rows'), ('int', 'cols2')]"
7733,4,nodiag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,5,diag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,6,gaussjordan,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,7,set_zero,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,8,matrixSum,runs,"[('const double *', 'M1'), ('const double *', 'M2'), ('double *', 'Msum'), ('double', 'alpha'), ('double', 'beta'), ('int', 'rows'), ('int', 'cols')]"
7733,10,matrixTrans,runs,"[('double *', 'M'), ('double *', 'MT'), ('int', 'rows'), ('int', 'cols')]"
7733,11,matrixMul,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'C'), ('int', 'cols'), ('int', 'rows'), ('int', 'cols2')]"
7733,12,nodiag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,13,diag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,14,gaussjordan,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,15,set_zero,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,16,matrixSum,runs,"[('const double *', 'M1'), ('const double *', 'M2'), ('double *', 'Msum'), ('double', 'alpha'), ('double', 'beta'), ('int', 'rows'), ('int', 'cols')]"
7733,18,matrixTrans,runs,"[('double *', 'M'), ('double *', 'MT'), ('int', 'rows'), ('int', 'cols')]"
7733,19,matrixMul,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'C'), ('int', 'cols'), ('int', 'rows'), ('int', 'cols2')]"
7733,20,nodiag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,21,diag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,22,gaussjordan,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,23,set_zero,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,24,matrixSum,runs,"[('const double *', 'M1'), ('const double *', 'M2'), ('double *', 'Msum'), ('double', 'alpha'), ('double', 'beta'), ('int', 'rows'), ('int', 'cols')]"
7733,26,matrixTrans,runs,"[('double *', 'M'), ('double *', 'MT'), ('int', 'rows'), ('int', 'cols')]"
7733,27,matrixMul,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'C'), ('int', 'cols'), ('int', 'rows'), ('int', 'cols2')]"
7733,28,nodiag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,29,diag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,30,gaussjordan,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,31,set_zero,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,32,matrixSum,runs,"[('const double *', 'M1'), ('const double *', 'M2'), ('double *', 'Msum'), ('double', 'alpha'), ('double', 'beta'), ('int', 'rows'), ('int', 'cols')]"
7733,34,matrixTrans,runs,"[('double *', 'M'), ('double *', 'MT'), ('int', 'rows'), ('int', 'cols')]"
7733,35,matrixMul,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'C'), ('int', 'cols'), ('int', 'rows'), ('int', 'cols2')]"
7733,36,nodiag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,37,diag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,38,gaussjordan,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,39,set_zero,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,40,matrixSum,runs,"[('const double *', 'M1'), ('const double *', 'M2'), ('double *', 'Msum'), ('double', 'alpha'), ('double', 'beta'), ('int', 'rows'), ('int', 'cols')]"
7733,42,matrixTrans,runs,"[('double *', 'M'), ('double *', 'MT'), ('int', 'rows'), ('int', 'cols')]"
7733,43,matrixMul,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'C'), ('int', 'cols'), ('int', 'rows'), ('int', 'cols2')]"
7733,44,nodiag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,45,diag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,46,gaussjordan,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,47,set_zero,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,48,matrixSum,runs,"[('const double *', 'M1'), ('const double *', 'M2'), ('double *', 'Msum'), ('double', 'alpha'), ('double', 'beta'), ('int', 'rows'), ('int', 'cols')]"
7733,50,matrixMul,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'C'), ('int', 'cols'), ('int', 'rows'), ('int', 'cols2')]"
7733,51,nodiag_normalize,runs,"[('float *', 'A'), ('float *', 'I'), ('int', 'n'), ('int', 'i')]"
7733,52,diag_normalize,runs,"[('float *', 'A'), ('float *', 'I'), ('int', 'n'), ('int', 'i')]"
7733,53,gaussjordan,runs,"[('float *', 'A'), ('float *', 'I'), ('int', 'n'), ('int', 'i')]"
7733,54,set_zero,runs,"[('float *', 'A'), ('float *', 'I'), ('int', 'n'), ('int', 'i')]"
7733,56,matrixTrans,runs,"[('float *', 'M'), ('float *', 'MT')]"
7733,64,nodiag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,65,diag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,66,gaussjordan,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7733,67,set_zero,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'nn'), ('int', 'i')]"
7739,0,ker_dense_to_sparse_assign,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
7739,1,ker_sparse_to_dense_assign,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
7739,2,ker_dense_to_sparse_subtract,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
7739,3,ker_sparse_to_dense_block_assign_and_multiply,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float', 'mult'), ('float *', 'src'), ('float *', 'trg')]"
7739,6,ker_dense_to_sparse_block_add,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float *', 'src'), ('float *', 'trg')]"
7743,165,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7743,224,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7743,225,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7743,226,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7743,231,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7743,347,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7743,352,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7745,0,calc_entropy_atomic,runs,"[('float *', 'float_image_in'), ('float *', 'entropy_out'), ('int', 'blk_size')]"
7745,1,calc_entropy_atomic,runs,"[('float *', 'float_image_in'), ('float *', 'entropy_out'), ('int', 'blk_size')]"
775,0,histogram_kernel,runs,"[('int *', 'PartialHist'), ('int *', 'DeviceData'), ('int', 'dataCount'), ('int *', 'timer')]"
775,1,histogram_kernel,runs,"[('int *', 'PartialHist'), ('int *', 'DeviceData'), ('int', 'DataCount'), ('int *', 'timer')]"
775,10,VecReduce,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('int', 'N')]"
775,11,VecReduce,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('int', 'N')]"
7754,0,invert,runs,"[('uchar4 *', 'data'), ('int', 'w'), ('int', 'h')]"
7756,0,Vector_Plus,runs,"[('int *', 'AG'), ('int *', 'BG'), ('int *', 'CG')]"
7756,1,Vector_Addition,runs,"[('int *', 'dev_a'), ('int *', 'dev_b'), ('int *', 'dev_c')]"
7756,2,MatrixAdd_CUDA,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
7756,4,Vector_Addition,runs,"[('const int *', 'dev_a'), ('const int *', 'dev_b'), ('int *', 'dev_c')]"
7761,36,sync_conv_groups,runs,[]
7761,55,sync_ndconv_groups,runs,[]
7762,3,atomicScatter,runs,"[('int', 'type1'), ('int', 'type2'), ('int', 'size_K'), ('double *', 'occ'), ('double *', 'beq'), ('double *', 'K'), ('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('double *', 'ffoobb')]"
7764,0,mult2_kernel,runs,"[('double *', 'g_out'), ('double *', 'a'), ('double *', 'b'), ('double *', 'ct'), ('int', 'n')]"
7764,6,apply_weights_kernel,runs,"[('double *', 'g_out'), ('int *', 'g_in'), ('double *', 'g_ttmp')]"
7764,7,mult3_kernel,runs,"[('double *', 'g_out'), ('double *', 'a'), ('double *', 'b'), ('double *', 'ct'), ('int', 'n')]"
7764,9,square1_kernel,runs,"[('int', 'n'), ('double *', 'b'), ('double *', 'a'), ('double *', 'ct')]"
7764,10,sub_mul_kernel,runs,"[('double *', 'g_out'), ('double *', 'a'), ('double *', 'b1'), ('double *', 'b2'), ('double *', 'ct'), ('int', 'n')]"
7764,11,copy_kernel,runs,"[('double *', 'save'), ('double *', 'y')]"
7764,12,pre_mul_kernel,runs,"[('int', 'n'), ('double *', 'a'), ('double *', 'ct')]"
7775,0,increment_kernel,runs,"[('int *', 'g_data'), ('int', 'inc_value')]"
7775,2,increment_kernel,runs,"[('int *', 'g_data'), ('int', 'inc_value')]"
7779,20,GetOutLod,runs,"[('const size_t *', 'num_erased'), ('const size_t *', 'in_lod'), ('const size_t', 'lod_len'), ('size_t *', 'out_lod0')]"
778,0,jacobiOnGpuNaive2D,runs,"[('double *', 'MatA'), ('double *', 'd_MatC'), ('int', 'dim_x'), ('int', 'dim_y'), ('int', 'iter_max')]"
7780,0,encode,runs,"[('char *', 'encodedText'), ('char *', 'decodedText')]"
780,9,elementwise_multiply_inplace,runs,"[('const cuDoubleComplex *', 'A'), ('cuDoubleComplex *', 'B'), ('const int', 'size')]"
780,10,normalized_aligned_dot_products,runs,"[('const double *', 'A'), ('const double', 'divisor'), ('const unsigned int', 'm'), ('const unsigned int', 'n'), ('double *', 'QT')]"
780,11,populate_reverse_pad,runs,"[('const double *', 'Q'), ('double *', 'Q_reverse_pad'), ('const double *', 'mean'), ('const int', 'window_size'), ('const int', 'size')]"
7801,0,vec_setf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float', 'value')]"
7801,1,vec_addf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,2,vec_subf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,3,vec_mulf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,4,vec_divf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,5,vec_negatef,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,6,vec_addScalarf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float', 'y')]"
7801,7,vec_subScalarf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float', 'y')]"
7801,8,vec_mulScalarf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float', 'y')]"
7801,9,vec_divScalarf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float', 'y')]"
7801,10,vec_scalarAddf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float', 'x'), ('float *', 'y')]"
7801,11,vec_scalarSubf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float', 'x'), ('float *', 'y')]"
7801,12,vec_scalarMulf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float', 'x'), ('float *', 'y')]"
7801,13,vec_scalarDivf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float', 'x'), ('float *', 'y')]"
7801,14,vec_ltf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,15,vec_ltef,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,16,vec_eqf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,17,vec_gtef,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,18,vec_gtf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,19,vec_nef,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,20,vec_ltScalarf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float', 'y')]"
7801,21,vec_lteScalarf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float', 'y')]"
7801,22,vec_eqScalarf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float', 'y')]"
7801,23,vec_gteScalarf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float', 'y')]"
7801,24,vec_gtScalarf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float', 'y')]"
7801,25,vec_neScalarf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float', 'y')]"
7801,26,vec_acosf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,27,vec_acoshf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,28,vec_asinf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,29,vec_asinhf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,30,vec_atanf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,31,vec_atanhf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,32,vec_cbrtf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,33,vec_ceilf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,34,vec_cosf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,35,vec_coshf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,36,vec_cospif,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,37,vec_erfcf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,38,vec_erfcinvf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'y')]"
7801,39,vec_erfcxf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,40,vec_erff,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,41,vec_erfinvf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'y')]"
7801,42,vec_exp10f,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,43,vec_exp2f,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,44,vec_expf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,45,vec_expm1f,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,46,vec_fabsf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,47,vec_floorf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,48,vec_j0f,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,49,vec_j1f,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,50,vec_lgammaf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,51,vec_log10f,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,52,vec_log1pf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,53,vec_log2f,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,54,vec_logbf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,55,vec_logf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,56,vec_normcdff,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'y')]"
7801,57,vec_normcdfinvf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'y')]"
7801,58,vec_rcbrtf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,59,vec_rintf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,60,vec_roundf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,61,vec_rsqrtf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,62,vec_sinf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,63,vec_sinhf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,64,vec_sinpif,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,65,vec_sqrtf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,66,vec_tanf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,67,vec_tanhf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,68,vec_tgammaf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,69,vec_truncf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,70,vec_y0f,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,71,vec_y1f,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x')]"
7801,72,vec_copysignf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,73,vec_fdimf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,74,vec_fdividef,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,75,vec_fmaxf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,76,vec_fminf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,77,vec_fmodf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,78,vec_hypotf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,79,vec_nextafterf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,80,vec_powf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,81,vec_remainderf,runs,"[('size_t', 'n'), ('float *', 'result'), ('float *', 'x'), ('float *', 'y')]"
7801,82,logistic,runs,"[('size_t', 'n'), ('double *', 'result'), ('double *', 'x')]"
7805,0,toOneChannel,runs,"[('unsigned char *', 'data'), ('int', 'width'), ('int', 'height'), ('int', 'components')]"
7805,1,toGrayScale,runs,"[('unsigned char *', 'output'), ('unsigned char *', 'input'), ('int', 'width'), ('int', 'height'), ('int', 'components')]"
7805,2,sobel,runs,"[('unsigned char *', 'output'), ('unsigned char *', 'input'), ('int', 'width'), ('int', 'height')]"
7805,3,toGrayScale,runs,"[('unsigned char *', 'output'), ('unsigned char *', 'input'), ('int', 'width'), ('int', 'height'), ('int', 'components')]"
7805,4,sobel,runs,"[('unsigned char *', 'output'), ('unsigned char *', 'input'), ('int', 'width'), ('int', 'height')]"
7805,5,histogramm,runs,"[('float *', 'hist'), ('unsigned char *', 'input'), ('int', 'width'), ('int', 'height'), ('int', 'stride')]"
7806,19,kernelFixVertArray,runs,"[('int *', 'ctriangles'), ('int', 'nTris'), ('int *', 'cvertarr')]"
7806,23,kernelCountRow,runs,"[('int *', 'voronoiPtr'), ('short2 *', 'patternPtr'), ('int *', 'count'), ('int', 'width'), ('int', 'min'), ('int', 'max'), ('int *', 'cboundary')]"
7806,24,kernelGenerateTriangles,runs,"[('int *', 'voronoiPtr'), ('short2 *', 'patternPtr'), ('int3 *', 'ctriangles'), ('int *', 'offset'), ('int', 'width'), ('int', 'min'), ('int', 'max')]"
7806,36,kernelFixVertArray1,runs,"[('int *', 'ctriangles'), ('int', 'nTris'), ('int *', 'cvertarr')]"
7806,38,kernelMarkDeadTriangles,runs,"[('int *', 'cmarker'), ('short *', 'cnewtri'), ('int', 'nTris')]"
7806,39,kernelCollectDeadTriangles,runs,"[('int *', 'cdeadTri'), ('short *', 'cnewtri'), ('int *', 'cmarker'), ('int', 'nTris')]"
7806,45,kernelFixVertArray_Missing,runs,"[('int *', 'ctriangles'), ('int', 'nTris'), ('int *', 'cvertarr')]"
7806,46,kernelMarkValidTriangles1,runs,"[('short *', 'cnewtri'), ('int *', 'cvalid'), ('int', 'nTris')]"
7806,47,kernelCollectEmptySlots1,runs,"[('short *', 'cnewtri'), ('int *', 'cprefix'), ('int *', 'cempty'), ('int', 'nTris')]"
7806,48,kernelFillEmptySlots1,runs,"[('short *', 'cnewtri'), ('int *', 'cprefix'), ('int *', 'cempty'), ('int *', 'ctriangles'), ('int', 'nTris'), ('int', 'newnTris'), ('int', 'offset')]"
7806,51,kernelMissingDetection,runs,"[('int', 'nVerts'), ('int *', 'cactive'), ('int *', 'cvertarr')]"
7806,62,kernelMarkValidTriangles,runs,"[('short *', 'cnewtri'), ('int *', 'cvalid'), ('int', 'nTris')]"
7806,63,kernelCollectEmptySlots,runs,"[('short *', 'cnewtri'), ('int *', 'cprefix'), ('int *', 'cempty'), ('int', 'nTris')]"
7806,64,kernelFillEmptySlots,runs,"[('short *', 'cnewtri'), ('int *', 'cprefix'), ('int *', 'cempty'), ('int *', 'ctriangles'), ('int', 'nTris'), ('int', 'newnTris'), ('int', 'offset')]"
7806,67,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
7806,68,uniformAdd1,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
7810,21,sync_deconv_groups,runs,[]
7810,37,sync_conv_groups,runs,[]
7810,61,sync_ndconv_groups,runs,[]
7811,7,TempReturn,runs,"[('float *', 'p_Input'), ('float *', 'p_Temp'), ('int', 'p_Width'), ('int', 'p_Height')]"
7811,14,SoftClipKernel,runs,"[('const float *', 'p_Input'), ('float *', 'p_Output'), ('int', 'p_Width'), ('int', 'p_Height'), ('float', 'p_SoftClipA'), ('float', 'p_SoftClipB'), ('float', 'p_SoftClipC'), ('float', 'p_SoftClipD'), ('float', 'p_SoftClipE'), ('float', 'p_SoftClipF'), ('int', 'p_SwitchA'), ('int', 'p_SwitchB'), ('int', 'p_Source')]"
7811,15,ReplaceKernelA,runs,"[('const float *', 'p_Input'), ('float *', 'p_Output'), ('int', 'p_Width'), ('int', 'p_Height'), ('float', 'hueRangeA'), ('float', 'hueRangeB'), ('float', 'hueRangeWithRollOffA'), ('float', 'hueRangeWithRollOffB'), ('float', 'satRangeA'), ('float', 'satRangeB'), ('float', 'satRolloff'), ('float', 'valRangeA'), ('float', 'valRangeB'), ('float', 'valRolloff'), ('int', 'OutputAlpha'), ('int', 'DisplayAlpha'), ('float', 'p_Black'), ('float', 'p_White')]"
7811,17,k_Simple,runs,"[('const float *', 'p_Input'), ('float *', 'p_Output'), ('int', 'p_Width'), ('int', 'p_Height')]"
7811,20,k_Exposure,runs,"[('float *', 'p_Input'), ('int', 'p_Width'), ('int', 'p_Height'), ('float', 'p_Exposure')]"
7811,27,Prepare,runs,"[('float *', 'p_Input'), ('float *', 'p_Output'), ('int', 'p_Width'), ('int', 'p_Height'), ('int', 'p_Display')]"
7811,28,FilmGradeKernelA,runs,"[('float *', 'p_Input'), ('int', 'p_Width'), ('int', 'p_Height'), ('float', 'p_Exp')]"
7811,30,FilmGradeKernelC,runs,"[('float *', 'p_Input'), ('int', 'p_Width'), ('int', 'p_Height'), ('float', 'p_ContR'), ('float', 'p_ContG'), ('float', 'p_ContB'), ('float', 'p_SatR'), ('float', 'p_SatG'), ('float', 'p_SatB'), ('float', 'p_ContP')]"
7811,31,FilmGradeKernelD,runs,"[('float *', 'p_Input'), ('float *', 'p_Output'), ('int', 'p_Width'), ('int', 'p_Height'), ('float', 'p_Pivot'), ('int', 'p_Display')]"
7811,33,ChannelBoxKernelB,runs,"[('const float *', 'p_Input'), ('float *', 'p_Output'), ('int', 'p_Width'), ('int', 'p_Height'), ('int', 'p_Display')]"
7812,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
782,1,setDiffVolumeKernel,runs,"[('float *', 'd_fv'), ('unsigned char *', 'd_picture1'), ('unsigned char *', 'd_picture2'), ('unsigned', 'picWidth'), ('unsigned', 'picHeight')]"
7832,3,GPUmemo,runs,"[('float *', 'data'), ('int', 'pts')]"
7837,0,cuda_cmp_kernel,runs,"[('std::size_t', 'n'), ('int *', 'aptr'), ('int *', 'bptr'), ('int *', 'rptr')]"
7854,0,double_value,runs,"[('double *', 'x'), ('double *', 'y')]"
7856,1,kernel_SUM,runs,"[('unsigned char *', 'voxelData'), ('int', 'pixelDepth')]"
7859,96,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
7859,97,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
7859,98,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
7859,99,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
7859,170,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
7861,26,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7861,30,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7862,0,dotProd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
7862,1,dotProd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
7862,2,mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
7862,3,shared_mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
7862,5,copy,runs,"[('int *', 'src'), ('int *', 'dest')]"
7862,7,traspose,runs,"[('int *', 'src'), ('int *', 'dest')]"
7862,9,matrixAddPitch,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'pitch')]"
7862,10,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
7862,11,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
7862,12,kernelVacio,runs,[]
787,0,histogram_kernel,runs,"[('float *', 'I'), ('float *', 'minI'), ('float *', 'maxI'), ('float *', 'mask'), ('int', 'nbins'), ('int', 'c'), ('int', 'h'), ('int', 'w'), ('float *', 'hist')]"
787,1,hist_remap2_kernel,runs,"[('float *', 'I'), ('int', 'nI'), ('float *', 'mI'), ('float *', 'histJ'), ('float *', 'cumJ'), ('float *', '_minJ'), ('float *', '_maxJ'), ('int', 'nbins'), ('float *', '_sortI'), ('int *', '_idxI'), ('float *', 'R'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
787,4,avg_vote_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('int *', 'corrAB'), ('int', 'patch'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
787,5,blend_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('float *', 'M'), ('float *', 'AP'), ('float', 'alpha'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
787,6,patchmatch2_conv_kernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'AP'), ('float *', 'BP'), ('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int', 'patch'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
787,7,patchmatch2_argmax_kernel,runs,"[('float *', 'conv'), ('int *', 'prev_corrAB_upsampled'), ('int *', 'corrAB'), ('int', 's_rad'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
787,8,upsample_corr_kernel,runs,"[('int *', 'curr_corr'), ('int *', 'next_corr'), ('int', 'curr_h'), ('int', 'curr_w'), ('int', 'next_h'), ('int', 'next_w')]"
787,10,Ring_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('float *', 'M'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
787,11,Ring2_kernel,runs,"[('float *', 'A'), ('float *', 'BP'), ('int *', 'corrAB'), ('int *', 'mask'), ('int *', 'm'), ('int', 'ring'), ('int', 'c'), ('int', 'h'), ('int', 'w')]"
787,12,patchmatch_r_conv_kernel,runs,"[('float *', 'input'), ('float *', 'target'), ('float *', 'conv'), ('int', 'patch'), ('int', 'stride'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
787,13,patchmatch_r_argmax_kernel,runs,"[('float *', 'conv'), ('float *', 'target'), ('float *', 'match'), ('int *', 'correspondence'), ('int', 'c1'), ('int', 'h1'), ('int', 'w1'), ('int', 'h2'), ('int', 'w2')]"
789,0,loss_kernel,runs,"[('int', 'factors'), ('int', 'user_count'), ('int', 'item_count'), ('const float *', 'P'), ('const float *', 'Q'), ('const int *', 'indptr'), ('const int *', 'indices'), ('const float *', 'data'), ('float *', 'error'), ('float *', 'user_bias'), ('float *', 'item_bias'), ('float', 'global_bias')]"
789,2,initCurand,runs,"[('curandState *', 'state'), ('unsigned long', 'seed'), ('int', 'n_rows')]"
7892,0,matrixMult,runs,"[('const double *', 'Md'), ('const double *', 'Nd'), ('double *', 'Pd'), ('int', 'size')]"
7898,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7898,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7898,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7898,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7898,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7898,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7898,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7907,0,picaod_kernel,runs,"[('unsigned int *', 'dev_v'), ('long', 'size'), ('unsigned int *', 'temp')]"
7913,0,adicionarKernel,runs,"[('double *', 'resultado'), ('const double *', 'n')]"
7920,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7920,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7926,0,sum_arrays_gpu,runs,"[('unsigned int *', 'a'), ('unsigned int *', 'b'), ('int', 'size')]"
7926,1,pod_racing,runs,"[('unsigned int *', 'd_rand'), ('unsigned int *', 'win'), ('unsigned int *', 'loss'), ('unsigned int', 'size'), ('int *', 'iter')]"
7928,0,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
7928,1,matrixMultiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
7928,2,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
7936,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
7940,167,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7940,302,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7940,307,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7944,35,sync_conv_groups,runs,[]
7946,36,sync_conv_groups,runs,[]
7947,6,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
7948,161,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7948,220,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7948,221,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7948,222,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7948,227,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7948,333,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7948,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
795,0,GPUKernel_VpVm_tiled,runs,"[('int', 'a'), ('int', 'bstart'), ('int', 'bsize'), ('int', 'v'), ('double *', 'in'), ('double *', 'outp'), ('double *', 'outm')]"
795,1,GPUKernel_VpVm_v2,runs,"[('int', 'a'), ('int', 'b'), ('int', 'v'), ('double *', 'in'), ('double *', 'outp'), ('double *', 'outm')]"
795,2,GPUKernel_VpVm,runs,"[('int', 'a'), ('int', 'v'), ('double *', 'in'), ('double *', 'outp'), ('double *', 'outm')]"
795,3,GPUKernel_Vm,runs,"[('int', 'a'), ('int', 'v'), ('double *', 'in'), ('double *', 'out')]"
795,4,GPUKernel_Vp,runs,"[('int', 'a'), ('int', 'v'), ('double *', 'in'), ('double *', 'out')]"
795,5,GPUKernel_Iqdb,runs,"[('int', 'a'), ('int', 'v'), ('int', 'nQ'), ('double *', 'in'), ('double *', 'out')]"
7951,0,init_render_buffer_wrapper,runs,"[('int64_t *', 'render_buffer'), ('const uint32_t', 'qw_count')]"
7951,8,set_valid_pos_flag,runs,"[('int32_t *', 'pos_buff'), ('const int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
7951,9,set_valid_pos,runs,"[('int32_t *', 'pos_buff'), ('int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
7951,12,init_group,runs,"[('int8_t *', 'groups'), ('const size_t', 'group_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t *', 'init_vals')]"
7951,14,columnarize_groups,runs,"[('int8_t *', 'columnar_buffer'), ('const int8_t *', 'rowwise_buffer'), ('const size_t', 'row_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t', 'row_size')]"
7952,161,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7952,220,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
7952,221,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
7952,222,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
7952,227,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
7952,337,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
7952,342,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7953,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
7953,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
7953,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
7953,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
7953,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
7956,1,helloFromGPU,runs,[]
7964,0,upscale,runs,"[('float *', 'input'), ('float *', 'output'), ('long', 'no_elements'), ('int', 'scale_factor_t'), ('int', 'scale_factor_y'), ('int', 'scale_factor_x'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3'), ('int', 'd4')]"
7964,1,downscale,runs,"[('float *', 'gradInput_data'), ('float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor_t'), ('int', 'scale_factor_y'), ('int', 'scale_factor_x'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3'), ('int', 'd4')]"
7967,0,kern_compute_string,runs,"[('char *', 'res'), ('char *', 'a'), ('char *', 'b'), ('char *', 'c'), ('int', 'length')]"
7974,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
7974,308,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
7981,2,sumMatrixOnGPU2D,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'nx'), ('const int', 'ny')]"
7981,3,warmingUp,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
7981,4,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
7981,5,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
7981,6,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
7981,7,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
7981,8,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
7981,9,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
7981,10,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
7981,11,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
7981,13,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
7983,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
7983,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
7983,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
7983,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
7983,164,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
799,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
799,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
799,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
799,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
799,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
799,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
799,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
799,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
799,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
799,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
799,24,hello,runs,[]
799,28,hello,runs,[]
7999,0,count_in,runs,"[('ULL *', 'dev_count'), ('long', 'dev_ntotal'), ('long', 'dev_ndim'), ('long', 'dev_halfb'), ('double', 'dev_rsquare'), ('long', 'dev_base')]"
80,0,convolutionX_63_Kernel,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD'), ('int', 'outofbounds'), ('float', 'outofboundsvalue')]"
80,1,convolutionY_63_Kernel,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD'), ('int', 'outofbounds'), ('float', 'outofboundsvalue')]"
80,2,convolutionZ_63_Kernel,runs,"[('float *', 'd_Dst'), ('float *', 'd_Src'), ('int', 'imageW'), ('int', 'imageH'), ('int', 'imageD'), ('int', 'outofbounds'), ('float', 'outofboundsvalue')]"
800,0,MergeRank,runs,"[('float *', 'd_input'), ('float *', 'd_output')]"
800,2,BitonicMergeSort,runs,"[('float *', 'd_output'), ('float *', 'd_input'), ('int', 'subarray_size')]"
8002,0,anyMethod,runs,"[('unsigned char *', 'buff'), ('unsigned char *', 'buffer_out'), ('int', 'w'), ('int', 'h')]"
8002,1,edgeDetect,runs,"[('unsigned char *', 'device_input_data'), ('unsigned char *', 'device_output_data'), ('int', 'height'), ('int', 'width')]"
8003,0,recipSummation,runs,"[('double *', 'data'), ('double *', 'recip'), ('int', 'len')]"
8006,1,kernel,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8006,2,block_sum,runs,"[('const float *', 'input'), ('float *', 'per_block_results'), ('const size_t', 'n')]"
8007,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
8007,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
8007,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
8007,5,smooth_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'size'), ('float', 'rate'), ('float *', 'delta')]"
8007,6,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
8007,7,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
8007,8,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
8007,9,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
8007,10,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
8007,11,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
8007,12,backward_bias_conn_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n')]"
8007,13,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
8007,14,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
8007,15,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
8007,16,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
8007,17,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
8007,18,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
8007,19,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
8007,20,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
8007,21,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
8007,22,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
8007,23,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
8007,24,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
8007,25,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
8007,26,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
8007,27,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
8007,28,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
8007,29,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
8007,30,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
8007,31,add_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
8007,32,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
8007,33,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
8007,34,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
8007,35,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
8007,36,l2norm_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'dx'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
8007,37,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
8007,38,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
8007,39,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
8007,40,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'val')]"
8007,41,scale_mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask'), ('float', 'scale')]"
8007,42,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float', 's1'), ('float', 's2'), ('float *', 'out')]"
8007,43,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
8007,44,softmax_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
8007,45,logistic_x_ent_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
8007,46,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
8007,47,l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
8007,48,wgan_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
8007,49,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
8007,50,deinter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
8007,51,inter_kernel,runs,"[('int', 'NX'), ('float *', 'X'), ('int', 'NY'), ('float *', 'Y'), ('int', 'B'), ('float *', 'OUT')]"
8007,52,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
8007,53,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
8007,54,softmax_tree_kernel,runs,"[('float *', 'input'), ('int', 'spatial'), ('int', 'batch'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output'), ('int', 'groups'), ('int *', 'group_size'), ('int *', 'group_offset')]"
8007,55,softmax_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'batch'), ('int', 'batch_offset'), ('int', 'groups'), ('int', 'group_offset'), ('int', 'stride'), ('float', 'temp'), ('float *', 'output')]"
8007,56,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
8007,57,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
8007,59,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
8007,60,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
8007,61,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
8007,62,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
8008,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8008,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8008,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8008,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8008,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8008,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8008,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8008,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
8008,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8008,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
8008,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
8008,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
8008,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
8008,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
8008,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8008,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8008,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
8012,0,multiplyMatrix,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
8022,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
8022,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
8025,21,sync_deconv_groups,runs,[]
8025,37,sync_conv_groups,runs,[]
8031,196,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8031,337,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8036,1,rearrangePopulation,runs,"[('float *', 'gene'), ('float *', 'fit'), ('int *', 'metaData')]"
8036,2,rearrangePopulationWithRange,runs,"[('float *', 'gene'), ('float *', 'fit'), ('int *', 'range')]"
8036,7,rearrangePopulation,runs,"[('float *', 'gene'), ('float *', 'fit'), ('int *', 'metaData')]"
8036,10,shuffleGene,runs,"[('float *', 'gene'), ('float *', 'fit'), ('float *', 'rSeed'), ('int *', 'metaData')]"
804,4,MD_ED_D,runs,"[('float *', 'S'), ('float *', 'T'), ('int', 'trainSize'), ('int', 'window_size'), ('int', 'dimensions'), ('float *', 'data_out'), ('int', 'task'), ('int', 'gm')]"
804,5,MD_ED_I,runs,"[('float *', 'S'), ('float *', 'T'), ('int', 'trainSize'), ('int', 'window_size'), ('int', 'dimensions'), ('float *', 'data_out'), ('int', 'task'), ('int', 'gm')]"
804,6,rMD_ED_D,runs,"[('float *', 'S'), ('float *', 'T'), ('int', 'window_size'), ('int', 'dimensions'), ('float *', 'data_out'), ('int', 'trainSize'), ('int', 'gm')]"
8041,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8041,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8043,4,absoluteDifferenceCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8043,5,bitwiseAndCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8043,6,bitwiseOrCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8043,7,bitwiseXorCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8043,10,copyCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8043,13,flipCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('bool', 'horizontal'), ('bool', 'vertical')]"
8043,14,histogramCuda,runs,"[('const uint8_t *', 'data'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'histogram')]"
8043,15,invertCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8043,16,lookupTableCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint8_t *', 'table')]"
8043,17,maximumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8043,18,minimumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8043,19,subtractCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8043,23,isAnyEqualCuda,runs,"[('const uint8_t *', 'image'), ('uint8_t *', 'value'), ('size_t', 'valueCount'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'differenceCount')]"
8044,161,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8044,220,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8044,221,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8044,222,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8044,227,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8044,333,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8044,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8046,0,CodeParallele,runs,"[('double', 'td'), ('double', 'h'), ('float', 'matDest')]"
805,0,BlockPrefix,runs,"[('int *', 'a'), ('int', 'k'), ('int', 'n')]"
805,1,Compute,runs,"[('int *', 'a'), ('int', 'k'), ('int', 'n')]"
805,2,VecAdd,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
807,1,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
807,2,kernel,runs,"[('int', 'p'), ('bool *', 'prime'), ('curandState *', 'globalState')]"
8070,229,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8070,230,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8070,231,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8070,236,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8070,342,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8070,350,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8085,17,kernel_for_z_planes,runs,"[('unsigned char *', 'd_vol'), ('int', 'L'), ('int', 'M'), ('int', 'N')]"
8085,18,kernel_for_y_planes,runs,"[('unsigned char *', 'd_vol'), ('int', 'L'), ('int', 'M'), ('int', 'N')]"
8085,19,kernel_for_x_planes,runs,"[('unsigned char *', 'd_vol'), ('int', 'L'), ('int', 'M'), ('int', 'N')]"
8089,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8089,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8089,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8089,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8089,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8089,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8089,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8089,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
8089,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8089,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
8089,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
8089,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
8089,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
8089,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
8089,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8089,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8089,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
8098,0,initialize,runs,"[('float *', 'a_d'), ('float *', 'b_d'), ('float *', 'c_d'), ('int', 'arraySize')]"
8098,1,compute,runs,"[('float *', 'a_d'), ('float *', 'b_d'), ('float *', 'c_d'), ('int', 'arraySize')]"
810,0,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,1,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,9,simple_reduction,runs,"[('int *', 'shared_var'), ('int *', 'input_values'), ('int', 'N'), ('int', 'iters')]"
810,11,helloFromGPU,runs,[]
810,12,lots_of_float_compute,runs,"[('float *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('float *', 'outputs')]"
810,13,lots_of_double_compute,runs,"[('double *', 'inputs'), ('int', 'N'), ('size_t', 'niters'), ('double *', 'outputs')]"
810,14,fmad_kernel,runs,"[('double', 'x'), ('double', 'y'), ('double *', 'out')]"
810,15,kernel,runs,"[('float *', 'F'), ('double *', 'D')]"
810,18,standard_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
810,19,intrinsic_kernel,runs,"[('float', 'a'), ('float *', 'out'), ('int', 'iters')]"
810,20,atomics,runs,"[('int *', 'shared_var'), ('int *', 'values_read'), ('int', 'N'), ('int', 'iters')]"
810,21,unsafe,runs,"[('int *', 'shared_var'), ('int *', 'values_read'), ('int', 'N'), ('int', 'iters')]"
810,23,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,24,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,25,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,26,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,27,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,28,printThreadIndex,runs,"[('int *', 'A'), ('const int', 'nx'), ('const int', 'ny')]"
810,29,checkIndex,runs,[]
810,30,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,31,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,32,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,33,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,37,sumMatrixOnGPU2D,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'NX'), ('int', 'NY')]"
810,44,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,45,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,46,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,47,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,48,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,49,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,50,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,51,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,53,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,54,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,56,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,59,host_api_kernel,runs,"[('float *', 'randomValues'), ('float *', 'out'), ('int', 'N')]"
810,60,device_api_kernel,runs,"[('curandState *', 'states'), ('float *', 'out'), ('int', 'N')]"
810,62,refill_randoms,runs,"[('float *', 'dRand'), ('int', 'N'), ('curandState *', 'states')]"
810,64,refill_randoms,runs,"[('float *', 'dRand'), ('int', 'N'), ('curandState *', 'states')]"
810,65,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,66,sumArraysZeroCopy,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,69,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,70,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,71,warmup,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,72,copyRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,73,copyCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,74,transposeNaiveRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,75,transposeNaiveCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,76,transposeUnroll4Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,77,transposeUnroll4Col,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,78,transposeDiagonalRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,79,transposeDiagonalCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,81,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,84,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,85,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,86,readOffsetUnroll2,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,87,readOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,88,writeOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,89,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,90,writeOffsetUnroll2,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,91,writeOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,92,sumMatrixGPU,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,93,iKernel,runs,"[('float *', 'src'), ('float *', 'dst')]"
810,94,iKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,95,kernel_add_wavelet,runs,"[('float *', 'g_u2'), ('float', 'wavelets'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'ngpus')]"
810,96,kernel_2dfd_last,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
810,97,kernel_2dfd,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
810,105,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out')]"
810,113,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'N')]"
810,114,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,117,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,133,reduceGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,134,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,135,reduceSmemDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,136,reduceGmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,137,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,138,reduceSmemUnrollDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,139,reduceNeighboredGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,140,reduceNeighboredSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,141,copyGmem,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,142,naiveGmem,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,143,naiveGmemUnroll,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,144,transposeSmemUnroll,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,145,transposeSmemUnrollPad,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,146,transposeSmemUnrollPadDyn,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,147,transposeSmem,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
810,148,transposeSmemPad,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
810,149,transposeSmemDyn,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
810,150,transposeSmemPadDyn,runs,"[('float *', 'out'), ('float *', 'in'), ('int', 'nx'), ('int', 'ny')]"
810,155,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,160,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,173,kernel,runs,"[('float *', 'g_data'), ('float', 'value')]"
810,178,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,179,sumMatrixOnGPU2D,runs,"[('int *', 'MatA'), ('int *', 'MatB'), ('int *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
810,182,warmup,runs,"[('int *', 'out'), ('int', 'N')]"
810,183,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,184,reduceCompleteUnrollWarps8Sync,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,185,reduceCompleteUnrollWarps8SyncVolatile,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,186,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,187,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,188,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,189,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,190,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,191,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,192,reduceUnrolling16,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,193,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,194,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,196,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,197,reduceNeighbored,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,198,reduceNeighboredLess,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,199,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,200,reduceUnrolling2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,201,reduceUnrolling4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,202,reduceUnrolling8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,203,reduceUnrolling8New,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,204,reduceUnrolling16,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,205,reduceUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,206,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,208,reduceUnrollWarps,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,209,reduceInterleaved,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,210,reduceInterleavedFloat,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
810,211,reduceCompleteUnrollWarps8,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,212,reduceCompleteUnrollWarps8Float,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
810,213,warmup,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,214,copyRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,215,copyCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,216,transposeNaiveRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,217,transposeNaiveCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,218,transposeUnroll4Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,219,transposeRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,220,transposeUnroll8Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,221,transposeUnroll4Col,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,222,transposeDiagonalRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,223,transposeDiagonalCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,224,transposeDiagonalColUnroll4,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
810,225,sumArrays,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,226,sumArraysZeroCopy,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,227,sumArraysZeroCopyWithUVA,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,230,readWriteOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,231,readWriteOffsetUnroll4,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,232,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,235,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,236,sumArraysZeroCopyOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N'), ('int', 'offset')]"
810,237,readOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,238,writeOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,239,readWriteOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,240,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'n'), ('int', 'offset')]"
810,243,warmup,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,244,sumArraysZeroCopyWithUVAOffset,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N'), ('int', 'offset')]"
810,245,kernel_add_wavelet,runs,"[('float *', 'g_u2'), ('float', 'wavelets'), ('const int', 'nx'), ('const int', 'ny'), ('const int', 'ngpus')]"
810,246,kernel_2dfd_last,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
810,247,kernel_2dfd,runs,"[('float *', 'g_u1'), ('float *', 'g_u2'), ('const int', 'nx'), ('const int', 'iStart'), ('const int', 'iEnd')]"
810,248,iKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,249,iKernel,runs,"[('float *', 'src'), ('float *', 'dst')]"
810,250,iKernel,runs,"[('float *', 'src'), ('float *', 'dst')]"
810,251,iKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
810,270,stencil_1d,runs,"[('float *', 'in'), ('float *', 'out')]"
810,272,stencil_1d_global,runs,"[('float *', 'in'), ('float *', 'out'), ('float *', 'dcoef')]"
810,289,reduceGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,290,reduceSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,291,reduceSmemDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,292,reduceGmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,293,reduceSmemUnroll,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,294,reduceSmemUnrollDyn,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,295,reduceNeighboredGmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
810,296,reduceNeighboredSmem,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('unsigned int', 'n')]"
8117,0,gpu_sqrt,runs,"[('float *', 'a'), ('long', 'N')]"
8121,0,addAry,runs,"[('int *', 'ary1'), ('int *', 'ary2')]"
8124,0,kernel5,runs,"[('dtype *', 'g_idata'), ('dtype *', 'g_odata'), ('unsigned int', 'n')]"
8128,1,ker_sparse_to_dense_assign,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
8128,2,ker_dense_to_sparse_subtract,runs,"[('int', 'n'), ('const unsigned int *', 'idx'), ('float *', 'src'), ('float *', 'trg')]"
8128,3,ker_sparse_to_dense_block_assign_and_multiply,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float', 'mult'), ('float *', 'src'), ('float *', 'trg')]"
8128,6,ker_dense_to_sparse_block_add,runs,"[('int', 'n'), ('const unsigned *', 'idx'), ('int', 'bsize'), ('float *', 'src'), ('float *', 'trg')]"
813,0,addition,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
8132,0,matrix_multiply_kernel,runs,"[('unsigned char *', 'temp'), ('unsigned char *', 'matrix'), ('float *', 'kernal'), ('int', 'order'), ('int', 'middle'), ('int', 'windowSizeX'), ('int', 'windowSizeY')]"
8136,2,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
8136,3,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
8136,4,addMatrix,runs,"[('int *', 'c'), ('int *', 'a'), ('int *', 'b')]"
8137,0,stdp_kernel,runs,"[('float *', 'weight'), ('int', 'weight_size_0'), ('int', 'weight_size_1'), ('int', 'weight_size_2'), ('int', 'weight_size_3'), ('float *', 'output_spike'), ('int', 'output_spike_size_0'), ('int', 'output_spike_size_1'), ('int', 'output_spike_size_2'), ('int', 'output_spike_size_3'), ('float *', 'history'), ('float *', 'weight_update')]"
8137,1,stdp_kernel,runs,"[('float *', 'weight'), ('int', 'weight_size_0'), ('int', 'weight_size_1'), ('int', 'weight_size_2'), ('int', 'weight_size_3'), ('float *', 'output_spike'), ('int', 'output_spike_size_0'), ('int', 'output_spike_size_1'), ('int', 'output_spike_size_2'), ('int', 'output_spike_size_3'), ('float *', 'history'), ('float *', 'weight_update')]"
815,5,matSum,runs,"[('float *', 'S'), ('float *', 'A'), ('float *', 'B'), ('int', 'N')]"
815,6,matSum,runs,"[('float *', 'S'), ('float *', 'A'), ('float *', 'B'), ('int', 'N')]"
815,8,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
8154,86,kernel,runs,"[('float *', 'a'), ('size_t', 'N')]"
8154,89,update_inverse_cuda,runs,"[('float *', 'Ainv'), ('float *', 'u'), ('int', 'N'), ('int', 'rowstride'), ('int', 'k')]"
817,0,init_random_seed,runs,"[('unsigned int', 'seed'), ('curandState_t *', 'd_curand_state')]"
817,9,printNeurons,runs,"[('int *', 'd_neuron_outputs'), ('float *', 'd_weighted_sums')]"
8173,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8173,299,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8173,304,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8177,0,reduce0,runs,"[('float *', 'g_odata'), ('float *', 'g_idata1'), ('float *', 'g_idata2')]"
8177,1,dotCuda3,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
8177,2,dotCuda,runs,"[('float *', 'tmp'), ('float *', 't1'), ('float *', 't2'), ('int', 'size')]"
8177,3,init_vec,runs,"[('float *', 'vec'), ('float', 'value')]"
8179,219,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8179,220,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8179,221,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8179,226,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8179,334,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8179,342,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
818,5,gpu_matrix_mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
818,8,ch1,runs,"[('unsigned char *', 'Pout'), ('unsigned char *', 'Pin'), ('int', 'width'), ('int', 'height')]"
818,9,gpu_blur,runs,"[('unsigned char *', 'Pout'), ('unsigned char *', 'Pin'), ('int', 'width'), ('int', 'height')]"
818,10,gpu_grey_and_blur,runs,"[('unsigned char *', 'Pout'), ('unsigned char *', 'Pin'), ('int', 'width'), ('int', 'height')]"
818,11,gpu_grey_and_thresh,runs,"[('unsigned char *', 'Pout'), ('unsigned char *', 'Pin'), ('int', 'width'), ('int', 'height')]"
818,13,gpu_blur,runs,"[('unsigned char *', 'Pout'), ('unsigned char *', 'Pin'), ('int', 'width'), ('int', 'height')]"
818,14,gpu_test,runs,"[('unsigned char *', 'Pout'), ('unsigned char *', 'Pin'), ('int', 'width'), ('int', 'height')]"
818,15,big_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('unsigned int', 'N')]"
818,16,big_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('unsigned int', 'N')]"
818,17,ch1,runs,"[('unsigned char *', 'Pout'), ('unsigned char *', 'Pin'), ('int', 'width'), ('int', 'height')]"
818,18,gpu_blur,runs,"[('unsigned char *', 'Pout'), ('unsigned char *', 'Pin'), ('int', 'width'), ('int', 'height')]"
818,19,gpu_grey_and_blur,runs,"[('unsigned char *', 'Pout'), ('unsigned char *', 'Pin'), ('int', 'width'), ('int', 'height')]"
818,20,gpu_grey_and_thresh,runs,"[('unsigned char *', 'Pout'), ('unsigned char *', 'Pin'), ('int', 'width'), ('int', 'height')]"
818,21,big_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('unsigned int', 'N')]"
818,22,gpu_matrix_mult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
818,23,gpu_matrix_mult_one,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
818,24,gpu_matrix_mult_two,runs,"[('int *', 'd_M'), ('int *', 'd_N'), ('int *', 'd_P'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
818,25,reduce,runs,"[('int *', 'a'), ('int *', 'res')]"
818,27,big_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('unsigned int', 'N')]"
8180,0,predicateDevice,runs,"[('int *', 'd_array'), ('int *', 'd_predicateArrry'), ('int', 'd_numberOfElements'), ('int', 'bit'), ('int', 'bitset')]"
8180,1,scatter,runs,"[('int *', 'd_array'), ('int *', 'd_scanArray'), ('int *', 'd_predicateArrry'), ('int *', 'd_scatteredArray'), ('int', 'd_numberOfElements'), ('int', 'offset')]"
8180,2,hillisSteeleScanDevice,runs,"[('int *', 'd_array'), ('int', 'numberOfElements'), ('int *', 'd_tmpArray'), ('int', 'moveIndex')]"
8180,3,print,runs,"[('int *', 'd_predicateArrry'), ('int', 'numberOfElements')]"
8183,0,gray_scale_flip,runs,"[('RGB_8 *', 'img'), ('int', 'height'), ('int', 'width')]"
8184,2,rinit,runs,"[('float *', 'init'), ('const unsigned int *', 'fsum'), ('const float *', 'ncrs')]"
8184,3,rdiv,runs,"[('float *', 'res'), ('const unsigned int *', 'fsum'), ('const float *', 'csum')]"
8184,4,radd,runs,"[('float *', 'resp'), ('const float *', 'res'), ('float', 'alpha')]"
8184,8,sino_uncmprss,runs,"[('unsigned int *', 'dsino'), ('unsigned char *', 'p1sino'), ('unsigned char *', 'd1sino'), ('int', 'ifrm'), ('int', 'nele')]"
8184,10,d_sct_axinterp,runs,"[('float *', 'sct3d'), ('const float *', 'scts1'), ('const int4 *', 'sctaxR'), ('const float4 *', 'sctaxW'), ('const short *', 'sn1_sn11'), ('int', 'NBIN'), ('int', 'NSN1'), ('int', 'SPN'), ('int', 'offtof')]"
8184,11,var,runs,"[('float *', 'M1'), ('float *', 'M2'), ('float *', 'X'), ('int', 'b'), ('size_t', 'nele')]"
8184,13,d_putgaps,runs,"[('float *', 'sne7'), ('float *', 'snaw'), ('int *', 'aw2ali'), ('const int', 'snno')]"
8184,17,elmult,runs,"[('float *', 'inA'), ('float *', 'inB'), ('int', 'length')]"
8184,18,eldiv0,runs,"[('float *', 'inA'), ('float *', 'inB'), ('int', 'length')]"
8184,19,sneldiv,runs,"[('unsigned short *', 'inA'), ('float *', 'inB'), ('int *', 'sub'), ('int', 'Nprj'), ('int', 'snno')]"
8184,20,sneladd,runs,"[('float *', 'inA'), ('float *', 'inB'), ('int *', 'sub'), ('int', 'Nprj'), ('int', 'snno')]"
8184,21,eladd,runs,"[('float *', 'inA'), ('float *', 'inB'), ('int', 'length')]"
8184,22,elmsk,runs,"[('float *', 'inA'), ('float *', 'inB'), ('bool *', 'msk'), ('int', 'length')]"
8187,21,sync_deconv_groups,runs,[]
8187,37,sync_conv_groups,runs,[]
8192,1,ShuffleRGB,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
8192,6,EncodeValues,runs,"[('float *', 'values'), ('int', 'numOfValues'), ('float *', 'output'), ('int', 'symbolSize'), ('int', 'squaredMode'), ('float *', 'dirX'), ('float *', 'dirY'), ('float *', 'negDirX'), ('float *', 'negDirY'), ('float *', 'originX'), ('float *', 'originY')]"
8192,7,DecodeValues,runs,"[('float *', 'superposition'), ('int', 'symbolSize'), ('float *', 'output'), ('float *', 'reliability'), ('int', 'numOfValues'), ('int', 'squaredMode'), ('float *', 'dirX'), ('float *', 'dirY'), ('float *', 'negDirX'), ('float *', 'negDirY'), ('float *', 'originX'), ('float *', 'originY')]"
8192,8,NormalizePositionKernel,runs,"[('float *', 'input'), ('float *', 'normalized'), ('float', 'xMax'), ('float', 'yMax')]"
8192,9,InterpolateSymbolsKernel,runs,"[('float *', 'symbolVectors'), ('int', 'symbolOneId'), ('int', 'symbolTwoId'), ('float', 'weightOne'), ('float', 'weightTwo'), ('float *', 'resultSymbol'), ('int', 'symbolSize')]"
8192,10,SumSymbolsKernel,runs,"[('float *', 'symbolOne'), ('float *', 'symbolTwo'), ('float *', 'result'), ('int', 'symbolSize')]"
8192,11,SumBasicSymbolsKernel,runs,"[('float *', 'symbolVectors'), ('int', 'symbolOneId'), ('int', 'symbolTwoId'), ('float *', 'result'), ('int', 'symbolSize')]"
8192,12,ComputeDistanceKernel,runs,"[('float *', 'symbolVectors'), ('float *', 'inputVector'), ('float *', 'distance'), ('int', 'symbolSize'), ('int', 'symbols')]"
8192,13,findMaxIndMultipleDetector,runs,"[('float *', 'input'), ('int *', 'maxInd'), ('int', 'size')]"
8192,14,oneOfNSelection,runs,"[('float *', 'buffer'), ('int *', 'index'), ('int', 'size'), ('float', 'value')]"
8192,15,dummyKernel,runs,[]
8192,16,copyKernel,runs,"[('float *', 'from'), ('float *', 'to'), ('int', 'size')]"
8192,17,detectChanges,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'result'), ('int', 'size'), ('float', 'value')]"
8192,19,crate3Dplot,runs,"[('float *', 'plotValues'), ('float', 'patchSize'), ('int', 'itemsX'), ('int', 'itemsY'), ('float', 'maxValue'), ('float *', 'vertexData')]"
8192,20,ApplyEyeMovement,runs,"[('float *', 'currentEye'), ('float *', 'stats'), ('float', 'moveFactor'), ('float', 'scaleFactor'), ('float', 'scaleBase')]"
8192,22,InputWeightsRTRLDerivativesKernel,runs,"[('float *', 'input'), ('float *', 'hiddenActivationDerivatives'), ('float *', 'recurrentWeights'), ('float *', 'inputWeightRTRLDerivatives'), ('float *', 'previousInputWeightRTRLDerivatives')]"
8192,23,RecurrentWeightsRTRLDerivativesKernel,runs,"[('float *', 'previousHiddenActivations'), ('float *', 'hiddenActivationDerivatives'), ('float *', 'recurrentWeights'), ('float *', 'recurrentWeightRTRLDerivatives'), ('float *', 'previousRecurrentWeightRTRLDerivatives')]"
8192,24,OutputDeltaKernel,runs,"[('float *', 'outputDeltas'), ('float *', 'target'), ('float *', 'outputActivations'), ('float *', 'outputActivationDerivatives')]"
8192,25,PIDControllerKernel,runs,"[('float *', 'input'), ('float *', 'goal'), ('float *', 'output'), ('float *', 'previousError'), ('float *', 'integral')]"
8192,26,CompareVectorsKernel,runs,"[('float *', 'inputOne'), ('float *', 'inputTwo'), ('float *', 'output')]"
8192,29,ChangeInputWeightsKernel,runs,"[('float *', 'inputWeights'), ('float *', 'inputWeightDeltas'), ('float *', 'outputWeights'), ('float *', 'outputDeltas'), ('float *', 'inputWeightRTRLDerivatives'), ('float', 'trainingRate'), ('float', 'momentum')]"
8192,30,ChangeRecurrentWeightsKernel,runs,"[('float *', 'recurrentWeights'), ('float *', 'recurrentWeightDeltas'), ('float *', 'outputWeights'), ('float *', 'outputDeltas'), ('float *', 'recurrentWeightRTRLDerivatives'), ('float', 'trainingRate'), ('float', 'momentum')]"
8192,31,ChangeOutputWeightsKernel,runs,"[('float *', 'outputWeights'), ('float *', 'outputWeightDeltas'), ('float *', 'outputDeltas'), ('float *', 'hiddenActivations'), ('float', 'trainingRate'), ('float', 'momentum')]"
8192,32,InitCentroidsKernel,runs,"[('float *', 'centroidCoordinates'), ('float *', 'randomNumbers'), ('float', 'minX'), ('float', 'maxX'), ('float', 'minY'), ('float', 'maxY'), ('int', 'centroids')]"
8192,33,ComputeEuklidianDistancesKernel,runs,"[('float *', 'inputImg'), ('int', 'imgWidth'), ('int', 'imgHeight'), ('float *', 'centroidCoordinates'), ('float *', 'distanceMatrix'), ('int', 'centroids'), ('int', 'inputSize')]"
8192,35,SumNewCentroidCoordinatesKernel,runs,"[('float *', 'input'), ('int', 'imgWidth'), ('int', 'imgHeight'), ('float *', 'centroidCoordinates'), ('int *', 'nearestCentroid'), ('float *', 'pointsWeight'), ('int', 'inputSize')]"
8192,36,AvgCentroidCoordinatesKernel,runs,"[('float *', 'centroidCoordinates'), ('float *', 'pointsWeight'), ('int', 'inputSize'), ('int', 'centroids')]"
8192,37,CopyInputToVisFieldKernel,runs,"[('float *', 'input'), ('float *', 'visField'), ('int', 'inputSize')]"
8192,38,MarkCentroidsKernel,runs,"[('float *', 'centroidCoordinates'), ('float *', 'visField'), ('int', 'imgWidth'), ('int', 'imgHeight'), ('int', 'centroids')]"
8192,43,LSTMDeltaKernelBPTT,runs,"[('float *', 'deltas'), ('float *', 'cellStates'), ('float *', 'previousCellStates'), ('float *', 'cellStateErrors'), ('float *', 'nextCellStateErrors'), ('float *', 'outputGateDeltas'), ('float *', 'forgetGateDeltas'), ('float *', 'nextForgetGateDeltas'), ('float *', 'inputGateDeltas'), ('float *', 'nextInputGateDeltas'), ('float *', 'cellInputDeltas'), ('float *', 'cellInputActivations'), ('float *', 'cellStateActivations'), ('float *', 'outputGateActivations'), ('float *', 'nextForgetGateActivations'), ('float *', 'inputGateActivations'), ('float *', 'cellInputActivationDerivatives'), ('float *', 'cellStateActivationDerivatives'), ('float *', 'outputGateActivationDerivatives'), ('float *', 'forgetGateActivationDerivatives'), ('float *', 'inputGateActivationDerivatives'), ('float *', 'cellInputWeights'), ('float *', 'outputGateWeights'), ('float *', 'forgetGateWeights'), ('float *', 'inputGateWeights'), ('int', 'inputCount'), ('int', 'cellCount'), ('int', 'cellsPerBlock')]"
8192,44,LSTMGateGradientKernelBPTT,runs,"[('float *', 'input'), ('float *', 'previousOutput'), ('float *', 'cellStates'), ('float *', 'inputGateDeltas'), ('float *', 'forgetGateDeltas'), ('float *', 'outputGateDeltas'), ('float *', 'outputGateWeightGradient'), ('float *', 'inputGateWeightGradient'), ('float *', 'forgetGateWeightGradient'), ('int', 'inputCount'), ('int', 'previousOutputCount'), ('int', 'cellsPerBlock')]"
8192,45,LSTMCellInputGradientKernelBPTT,runs,"[('float *', 'input'), ('float *', 'previousOutput'), ('float *', 'cellInputDeltas'), ('float *', 'cellInputWeightGradient'), ('int', 'inputCount'), ('int', 'previousOutputCount'), ('int', 'cellsPerBlock')]"
8192,47,LSTMDeltaKernel,runs,"[('float *', 'cellStateErrors'), ('float *', 'outputGateDeltas'), ('float *', 'cellStates'), ('float *', 'outputGateActivations'), ('float *', 'outputGateActivationDerivatives'), ('float *', 'deltas'), ('int', 'cellCount'), ('int', 'cellsPerBlock')]"
8192,55,OutputDeltaKernel,runs,"[('float *', 'outputDeltas'), ('float *', 'target'), ('float *', 'outputActivations'), ('float *', 'outputActivationDerivatives')]"
8192,58,ChangeInputWeightsKernel,runs,"[('float *', 'inputWeights'), ('float *', 'inputWeightDeltas'), ('float *', 'outputWeights'), ('float *', 'outputDeltas'), ('float *', 'inputWeightRTRLDerivatives'), ('float', 'trainingRate'), ('float', 'momentum')]"
8192,59,ChangeRecurrentWeightsKernel,runs,"[('float *', 'recurrentWeights'), ('float *', 'recurrentWeightDeltas'), ('float *', 'outputWeights'), ('float *', 'outputDeltas'), ('float *', 'recurrentWeightRTRLDerivatives'), ('float', 'trainingRate'), ('float', 'momentum')]"
8192,60,ChangeOutputWeightsKernel,runs,"[('float *', 'outputWeights'), ('float *', 'outputWeightDeltas'), ('float *', 'outputDeltas'), ('float *', 'hiddenActivations'), ('float', 'trainingRate'), ('float', 'momentum')]"
8192,61,InputWeightsRTRLDerivativesKernel,runs,"[('float *', 'input'), ('float *', 'hiddenActivationDerivatives'), ('float *', 'recurrentWeights'), ('float *', 'inputWeightRTRLDerivatives'), ('float *', 'previousInputWeightRTRLDerivatives')]"
8192,62,RecurrentWeightsRTRLDerivativesKernel,runs,"[('float *', 'previousHiddenActivations'), ('float *', 'hiddenActivationDerivatives'), ('float *', 'recurrentWeights'), ('float *', 'recurrentWeightRTRLDerivatives'), ('float *', 'previousRecurrentWeightRTRLDerivatives')]"
8192,63,ResetLayerKernel,runs,"[('float *', 'layer'), ('float', 'value'), ('int', 'count')]"
8192,64,CopyRectangleKernel,runs,"[('float *', 'src'), ('int', 'srcOffset'), ('int', 'srcWidth'), ('int', 'srcRectX'), ('int', 'srcRectY'), ('int', 'rectWidth'), ('int', 'rectHeight'), ('float *', 'dest'), ('int', 'destOffset'), ('int', 'destWidth'), ('int', 'destRectX'), ('int', 'destRectY')]"
8192,65,CopyRectangleCheckBoundsKernel,runs,"[('float *', 'src'), ('int', 'srcOffset'), ('int', 'srcWidth'), ('int', 'srcHeight'), ('int', 'srcRectX'), ('int', 'srcRectY'), ('int', 'rectWidth'), ('int', 'rectHeight'), ('float *', 'dest'), ('int', 'destOffset'), ('int', 'destWidth'), ('int', 'destRectX'), ('int', 'destRectY'), ('float', 'defaultValue')]"
8192,66,PrepareMeanStdDev,runs,"[('float *', 'input'), ('float *', 'delta'), ('int', 'imageWidth'), ('int', 'imageHeight')]"
8192,69,SumCentroids,runs,"[('float *', 'delta'), ('float *', 'sumDelta'), ('int', 'numOfCentroids'), ('int', 'numOfElements')]"
8192,72,Prepare_1_MeansForJoin,runs,"[('float *', 'input'), ('int', 'c_src1'), ('int', 'c_src2'), ('int', 'c_n'), ('float *', 'delta'), ('int', 'imageWidth'), ('int', 'imageHeight')]"
8192,77,LengthFromElements,runs,"[('float *', 'element1'), ('float *', 'element2'), ('float *', 'output'), ('int', 'count')]"
8192,79,InvolveVector,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputSize')]"
8192,80,Interpolate,runs,"[('float *', 'input1'), ('float *', 'input2'), ('float *', 'output'), ('float', 'weight'), ('int', 'inputSize')]"
8192,81,SetAllButOneKernel,runs,"[('float *', 'buffer'), ('float', 'value'), ('int', 'index'), ('int', 'count')]"
8192,82,SetKernel,runs,"[('float *', 'buffer'), ('int', 'offset'), ('float', 'value'), ('int', 'count')]"
8192,83,Convolution3x3Single,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'width'), ('int', 'height')]"
8192,91,LengthFromElements,runs,"[('float *', 'element1'), ('float *', 'element2'), ('float *', 'output'), ('int', 'count')]"
8192,93,InvolveVector,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputSize')]"
8192,94,Interpolate,runs,"[('float *', 'input1'), ('float *', 'input2'), ('float *', 'output'), ('float', 'weight'), ('int', 'inputSize')]"
8192,95,InterpolateFromMemBlock,runs,"[('float *', 'input1'), ('float *', 'input2'), ('float *', 'output'), ('float *', 'weightMemBlock'), ('int', 'inputSize')]"
8192,96,MatMultipl_naive,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'nColsA'), ('int', 'nColsB'), ('int', 'sizeC')]"
8192,99,RBMInputForwardKernel,runs,"[('float *', 'inputPtr'), ('float *', 'outputPtr'), ('float *', 'biasPtr'), ('bool', 'applyBias'), ('int', 'thisLayerSize')]"
8192,100,RBMInputForwardAndStoreKernel,runs,"[('float *', 'inputPtr'), ('float *', 'outputPtr'), ('float *', 'biasPtr'), ('float *', 'storePtr'), ('bool', 'applyBias'), ('int', 'thisLayerSize')]"
8192,102,RBMRandomActivationKernel,runs,"[('float *', 'outputPtr'), ('float *', 'randomPtr'), ('int', 'size')]"
8192,103,RBMForwardKernel,runs,"[('float *', 'inputPtr'), ('float *', 'outputPtr'), ('float *', 'weightPtr'), ('float *', 'biasPtr'), ('float', 'sigma'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize'), ('bool', 'useDropoutMask'), ('bool', 'useDropout'), ('float', 'dropoutRate'), ('float *', 'dropoutMask')]"
8192,104,RBMForwardAndStoreKernel,runs,"[('float *', 'inputPtr'), ('float *', 'outputPtr'), ('float *', 'weightPtr'), ('float *', 'biasPtr'), ('float *', 'storedOutputPtr'), ('float', 'sigma'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize'), ('bool', 'useDropout'), ('float *', 'dropoutMask')]"
8192,108,RBMCopyFilterKernel,runs,"[('float *', 'weightPtr'), ('float *', 'filterPtr'), ('int', 'weightCount'), ('int', 'i'), ('int', 'thisLayerSize')]"
8192,110,RBMDropoutMaskKernel,runs,"[('float *', 'maskPtr'), ('float', 'dropout'), ('int', 'thisLayerSize')]"
8192,111,implantCoeffs,runs,"[('float *', 'matrices'), ('float *', 'coeffArray'), ('int', 'savedCoeffs'), ('int', 'dimsize')]"
8192,112,createCosineMatrix,runs,"[('float *', 'matrix'), ('int', 'xsize')]"
8192,113,extractCoeffs,runs,"[('const float *', 'matrices'), ('float *', 'coeffArray'), ('int', 'savedCoeffs'), ('int', 'dimsize')]"
8192,114,generateCoefficients,runs,"[('float *', 'chromosomes'), ('const int', 'chromSize'), ('const float *', 'noise'), ('const int', 'population'), ('const int', 'alpha')]"
8192,115,grow,runs,"[('float *', 'matrices'), ('const int', 'dimension'), ('const int', 'coefficients'), ('const int', 'population'), ('float *', 'chromosomes'), ('const float *', 'noise'), ('const float', 'mutationRate'), ('const int', 'kept'), ('const float *', 'fitnesses'), ('int *', 'mark'), ('const int', 'alpha')]"
8192,116,CumulateThroughTimeKernel,runs,"[('float *', 'memoryBlocks'), ('int', 'count'), ('int', 'sequenceLength')]"
8192,123,SoftmaxKernel,runs,"[('float *', 'outputPtr'), ('float', 'expSum'), ('int', 'layerSize')]"
8192,128,GaussianMinMaxField,runs,"[('float *', 'input'), ('int', 'inputCount'), ('float *', 'mins'), ('float *', 'maxes')]"
8192,130,GaussianSamplePrior,runs,"[('float *', 'input'), ('int', 'inputCount'), ('float *', 'mins'), ('float *', 'maxes'), ('float *', 'randomUniform')]"
8192,131,NegativeCorrelationForwardResetKernel,runs,"[('float *', 'outputPtr'), ('int', 'thisLayerSize')]"
8192,132,NegativeCorrelationForwardSumKernel,runs,"[('float *', 'inputPtr'), ('float *', 'outputPtr'), ('int', 'thisLayerSize')]"
8192,133,NegativeCorrelationForwardDivideKernel,runs,"[('float *', 'outputPtr'), ('int', 'thisLayerSize'), ('int', 'inputModelCount')]"
8192,148,DropoutMaskKernel,runs,"[('float *', 'dropoutMaskPtr'), ('float', 'dropout'), ('int', 'inputSize')]"
8192,149,FullyConnectedCurvatureKernel,runs,"[('float *', 'weightsGradPtr'), ('float *', 'biasGradPtr'), ('float *', 'shiftedWeightsPtr'), ('float *', 'shiftedBiasPtr'), ('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'weightGradCurvePtr'), ('float *', 'biasGradCurvePtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
8192,150,FullyConnectedEstimateLearningRateKernel,runs,"[('float *', 'weightLearningRatePtr'), ('float *', 'biasLearningRatePtr'), ('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'avgWeightGradVarPtr'), ('float *', 'avgBiasGradVarPtr'), ('float *', 'avgWeightGradCurvePtr'), ('float *', 'avgBiasGradCurvePtr'), ('float *', 'avgWeightGradCurveVarPtr'), ('float *', 'avgBiasGradCurveVarPtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
8192,152,FullyConnectedAdjustMemoryKernel,runs,"[('float *', 'weightsGradPtr'), ('float *', 'biasGradPtr'), ('float *', 'weightGradCurvePtr'), ('float *', 'biasGradCurvePtr'), ('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'avgWeightGradVarPtr'), ('float *', 'avgBiasGradVarPtr'), ('float *', 'avgWeightGradCurvePtr'), ('float *', 'avgBiasGradCurvePtr'), ('float *', 'avgWeightGradCurveVarPtr'), ('float *', 'avgBiasGradCurveVarPtr'), ('float *', 'weightMemorySizePtr'), ('float *', 'biasMemorySizePtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
8192,153,FullyConnectedUpdateMemoryKernel,runs,"[('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'avgWeightGradVarPtr'), ('float *', 'avgBiasGradVarPtr'), ('float *', 'weightMemorySizePtr'), ('float *', 'biasMemorySizePtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
8192,155,FullyConnectedShiftKernel,runs,"[('float *', 'weightPtr'), ('float *', 'biasPtr'), ('float *', 'shiftedWeightsPtr'), ('float *', 'shiftedBiasPtr'), ('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
8192,156,FullyConnectedUpdateMovingAveragesKernel,runs,"[('float *', 'weightsGradPtr'), ('float *', 'biasGradPtr'), ('float *', 'weightsGradCurvePtr'), ('float *', 'biasGradCurvePtr'), ('float *', 'avgWeightGradPtr'), ('float *', 'avgBiasGradPtr'), ('float *', 'avgWeightGradVarPtr'), ('float *', 'avgBiasGradVarPtr'), ('float *', 'avgWeightGradCurvePtr'), ('float *', 'avgBiasGradCurvePtr'), ('float *', 'avgWeightGradCurveVarPtr'), ('float *', 'avgBiasGradCurveVarPtr'), ('float *', 'weightMemorySizePtr'), ('float *', 'biasMemorySizePtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
8192,157,FullyConnectedUpdateParametersKernel,runs,"[('float *', 'weightPtr'), ('float *', 'biasPtr'), ('float *', 'weightLearningRatePtr'), ('float *', 'biasLearningRatePtr'), ('float *', 'weightGradientPtr'), ('float *', 'biasGradientPtr'), ('float *', 'dropoutMaskPtr'), ('int', 'prevLayerSize'), ('int', 'thisLayerSize')]"
8192,176,ComputeHistogramKernel,runs,"[('float *', 'globalMemData'), ('int *', 'globalHist')]"
8192,190,PlotObserverScaleDownScaleKernel,runs,"[('float *', 'history'), ('int', 'nbCurves'), ('int', 'size')]"
8192,193,VectorInputDiffKernel,runs,"[('float *', 'input'), ('int', 'inputSize'), ('float *', 'referenceVector'), ('int', 'maxCells'), ('float *', 'difference')]"
8192,194,ComputeDistanceKernel,runs,"[('int', 'inputSize'), ('float *', 'distance'), ('float *', 'dimensionWeight'), ('int', 'maxCells'), ('float *', 'difference')]"
8192,195,AddLocalErrorKernel,runs,"[('int', 's1'), ('float *', 'distance'), ('float *', 'localError')]"
8192,196,AddUtilityKernel,runs,"[('int', 's1'), ('int', 's2'), ('float *', 'distance'), ('float *', 'utility')]"
8192,197,AdaptWinningFractionKernel,runs,"[('int', 's1'), ('float *', 'winningFraction'), ('int *', 'winningCount'), ('float', 'bParam'), ('int', 'maxCells')]"
8192,198,ComputeBiasTermKernel,runs,"[('float *', 'biasTerm'), ('float', 'cFactor'), ('float *', 'winningFraction'), ('int', 'activeCells'), ('int', 'maxCells')]"
8192,199,ComputeBiasedDistanceKernel,runs,"[('float *', 'distance'), ('float *', 'biasedDistance'), ('float *', 'biasTerm'), ('int', 'maxCells')]"
8192,200,CreateAndRefreshConnectionKernel,runs,"[('int', 's1'), ('int', 's2'), ('int *', 'connection'), ('int *', 'age'), ('int', 'maxCells')]"
8192,201,AdaptRefVectorKernel,runs,"[('int', 'cell'), ('float *', 'referenceVector'), ('float', 'oldErrorFraction'), ('float', 'youngErrorFraction'), ('float', 'decayFactor'), ('int *', 'winningCount'), ('float *', 'difference'), ('int', 'inputSize')]"
8192,202,IncrementConnectionAgeKernel,runs,"[('int', 'cell'), ('int *', 'connection'), ('int *', 'age'), ('int', 'maxCells')]"
8192,203,RemoveEdgesKernel,runs,"[('int *', 'connection'), ('int *', 'age'), ('int', 'maxAge'), ('int *', 'activityFlag'), ('float *', 'winningFraction'), ('int *', 'winningCount'), ('float *', 'utility'), ('float *', 'localError'), ('int *', 'neuronAge'), ('int', 'maxCells')]"
8192,204,RemoveNodeByUtilityKernel,runs,"[('int *', 'connectionMatrix'), ('int *', 'connectionAge'), ('int *', 'activityFlag'), ('float *', 'utility'), ('float', 'utilityConstant'), ('float *', 'localError'), ('int *', 'neuronAge'), ('float *', 'winningFraction'), ('int *', 'winningCount'), ('float', 'maxError'), ('int', 'maxCells')]"
8192,205,InterpolateVectorKernel,runs,"[('int', 'r'), ('int', 'q'), ('int', 'f'), ('int', 'inputSize'), ('float *', 'referenceVector')]"
8192,206,NewNodeConnectionKernel,runs,"[('int', 'f'), ('int', 'q'), ('int', 'r'), ('int *', 'activityFlag'), ('int *', 'connection'), ('int *', 'age'), ('float *', 'localError'), ('float', 'alfa'), ('int', 'maxCells'), ('float', 'errorFraction')]"
8192,207,AddAndRefreshConnectionKernel,runs,"[('int', 'node1'), ('int', 'node2'), ('int *', 'activityFlag'), ('int *', 'connection'), ('int *', 'age'), ('int', 'maxCells')]"
8192,208,TwoNodesDifferenceKernel,runs,"[('int', 'nodeOne'), ('int', 'nodeTwo'), ('int', 'vectorLength'), ('float *', 'referenceVector'), ('float *', 'twoNodesDifference')]"
8192,209,TwoNodesDistanceKernel,runs,"[('float *', 'twoNodesDifference'), ('float *', 'twoNodesDistance'), ('int', 'vectorLength')]"
8192,210,CopyVectorKernel,runs,"[('float *', 'from'), ('int', 'fromOffset'), ('float *', 'to'), ('int', 'toOffset'), ('int', 'vectorSize')]"
8192,211,DecreaseErrorAndUtilityKernel,runs,"[('float *', 'localError'), ('float *', 'utility'), ('int *', 'activityFlag'), ('int', 'maxCells'), ('float', 'beta')]"
8192,212,ComputeErrorPerWinningKernel,runs,"[('float *', 'localError'), ('int *', 'winningCount'), ('float *', 'errorPerWinning'), ('int *', 'activityFlag'), ('int', 'maxCells')]"
8192,213,SetForcesToZeroKernel,runs,"[('float *', 'force'), ('int', 'maxCells')]"
8192,216,UseForceKernel,runs,"[('float *', 'force'), ('float', 'forceFactor'), ('float *', 'pointsCoordinates'), ('int', 'maxCells')]"
8192,217,CenterOfGravityKernel,runs,"[('float *', 'pointsCoordinates'), ('float *', 'centerOfGravity'), ('int *', 'activityFlag'), ('int', 'maxCells')]"
8192,219,CopyPointsCoordinatesKernel,runs,"[('float *', 'pointsCoordinates'), ('int *', 'activityFlag'), ('float', 'xNonValid'), ('float', 'yNonValid'), ('float', 'zNonValid'), ('float *', 'dataVertex'), ('int', 'dataVertexOffset'), ('int', 'maxCells')]"
8192,220,CopyConnectionsCoordinatesKernel,runs,"[('int *', 'connectionMatrix'), ('float *', 'pointsCoordinates'), ('float *', 'vertexData'), ('int *', 'connectionCount'), ('int', 'maxCells')]"
8192,221,ComputeQuadsKernel,runs,"[('float *', 'pointsCoordinates'), ('float *', 'vertexData'), ('int', 'quadOffset'), ('float', 'textureSide'), ('int *', 'activityFlag'), ('int', 'textureWidth'), ('int', 'maxCells')]"
8192,224,WinnersKernel,runs,"[('float *', 'winner'), ('float *', 'vertexData'), ('int', 'vertexOffset'), ('float *', 'pointsCoordinates'), ('float', 'cubeSize'), ('int', 'maxCells')]"
8192,225,ComputeCubes2Kernel,runs,"[('float *', 'pointsCoordinates'), ('float *', 'vertexData'), ('int', 'quadOffset'), ('float', 'cubeSide'), ('float *', 'cubeOperation'), ('float *', 'cubeTexCoordinates'), ('int *', 'activityFlag'), ('float', 'textureWidth'), ('int', 'maxCells')]"
8192,226,ComputeCubesKernel,runs,"[('float *', 'pointsCoordinates'), ('float *', 'vertexData'), ('int', 'quadOffset'), ('float', 'cubeSide'), ('int *', 'activityFlag'), ('int', 'textureWidth'), ('int', 'maxCells')]"
8192,231,MatrixCopy_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
8192,232,Matrix_getRow_FloatId_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols'), ('const float', 'row_id')]"
8192,233,Matrix_getRow_FloatPointer_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('const float *', 'rowId'), ('int', 'empty_par1'), ('int', 'empty_par2'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols')]"
8192,234,Matrix_getCol_FloatId_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols'), ('float', 'col_id')]"
8192,235,Matrix_getCol_FloatPointer_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('const float *', 'colId'), ('int', 'empty_par1'), ('int', 'empty_par2'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols')]"
8192,236,Matrix_cos_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
8192,237,Matrix_sin_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
8192,238,Matrix_transposeFromSVDnodeCOPY,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0')]"
8192,239,Matrix_MultiplElementWise_naiveOLD,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('const float *', 'B'), ('int', 'Bcount'), ('int', 'Bcols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols')]"
8192,244,AbsKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
8192,245,RoundKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
8192,246,ExpKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
8192,247,LogKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
8192,248,FloorKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
8192,249,CeilKernel_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count')]"
8192,250,Matrix_PermuteRows,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('const float *', 'B'), ('int', 'Bcount'), ('int', 'Bcols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols')]"
8192,258,ResetImage,runs,"[('float *', 'im'), ('int', 'size')]"
8192,259,SetValue,runs,"[('float *', 'im'), ('float', 'val'), ('int', 'size')]"
8192,260,Multiply,runs,"[('float *', 'im'), ('float', 'val'), ('int', 'size')]"
8192,261,SetVauleInIdxMinMax,runs,"[('float *', 'vector'), ('int', 'id_min'), ('int', 'id_max'), ('float', 'value')]"
8192,262,SetMatrixVauleMinMaxX,runs,"[('float *', 'matrix'), ('int', 'cols'), ('int', 'size'), ('int', 'id_min'), ('int', 'id_max'), ('float', 'value')]"
8192,263,SetMatrixVauleMinMaxY,runs,"[('float *', 'matrix'), ('int', 'cols'), ('int', 'size'), ('int', 'id_min'), ('int', 'id_max'), ('float', 'value')]"
8192,264,MatrixCopy,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8192,265,Dist_between_two_vec_naive,runs,"[('float *', 'v0'), ('float *', 'v1'), ('int', 'size'), ('float *', 'dst')]"
8192,266,Sum,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'size')]"
8192,267,Round,runs,"[('float *', 'A'), ('float *', 'out'), ('int', 'size')]"
8192,268,ElementwiseNorm,runs,"[('float *', 'A'), ('float *', 'B'), ('int', 'size')]"
8192,271,getRow_naive,runs,"[('const float *', 'A'), ('float *', 'row_id'), ('float *', 'out'), ('int', 'Acols')]"
8192,272,getRow_IntId_naive,runs,"[('const float *', 'A'), ('int', 'row_id'), ('float *', 'out'), ('int', 'Acols')]"
8192,273,Matrix_getCol_FloatId_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols'), ('float', 'col_id')]"
8192,274,Matrix_getRow_FloatId_naive,runs,"[('const float *', 'A'), ('int', 'Acount'), ('int', 'Acols'), ('float *', 'out0'), ('int', 'out0count'), ('int', 'out0cols'), ('float', 'row_id')]"
8192,275,NN_naive,runs,"[('float *', 'A'), ('int', 'colsA'), ('int', 'sizeA'), ('float *', 'B'), ('int', 'colsB'), ('int', 'numsB'), ('int', 'dim'), ('float *', 'idx'), ('float *', 'dist')]"
8192,276,MaskInput,runs,"[('float *', 'image'), ('float *', 'mask'), ('float *', 'maskedValues'), ('float *', 'output'), ('int', 'count')]"
8192,277,MaskByNaN,runs,"[('float *', 'inputImage'), ('float *', 'mask'), ('float *', 'outputImage'), ('int', 'count')]"
8192,278,ApplyThreshold,runs,"[('float *', 'probabilitiesInputs'), ('float *', 'binaryOutput'), ('float *', 'probability'), ('int', 'count')]"
8192,280,UpdateCC_XY,runs,"[('float *', 'CCXY'), ('int', 'id_CC'), ('float *', 'XY_tofill'), ('int', 'dim_XY')]"
8192,282,ApplyBrainsMovement,runs,"[('float *', 'CCXY'), ('int', 'dim_XY'), ('float *', 'movement'), ('int', 'dim_movement'), ('int', 'max_clusters')]"
8192,283,Copy_A_to_B,runs,"[('float *', 'A'), ('float *', 'B'), ('int', 'size')]"
8192,284,Copy_matA_to_matB_withShuffleIdx,runs,"[('float *', 'A'), ('float *', 'B'), ('int', 'size'), ('int', 'cols'), ('float *', 'new_idxs'), ('int', 'max_rows')]"
8192,297,FillAdjacencyMatrix,runs,"[('float *', 'adj_mat'), ('float *', 'maskBuffer'), ('int', 'size'), ('int', 'cols'), ('int', 'rows'), ('int', 'Nsegs')]"
8192,298,CumulatePositionOfNewObjects,runs,"[('float *', 'mask'), ('float *', 'maskNewIds'), ('float *', 'maskOut'), ('int', 'mask_size'), ('int', 'mask_cols'), ('float *', 'centers'), ('int', 'centers_size'), ('int', 'centers_columns')]"
8192,303,OFConvert2AngleSize,runs,"[('float *', 'of'), ('int', 'imageSize')]"
8192,305,UdpateEnergyTerm_movement,runs,"[('float *', 'energy'), ('int', 'energy_dim'), ('int', 'nPatches'), ('float *', 'desc'), ('int', 'desc_dim'), ('int', 'id_desc_move')]"
8192,306,UdpateEnergyTerm_time,runs,"[('float *', 'energy'), ('int', 'energy_dim'), ('int', 'nPatches'), ('float *', 'idFocuser_focused'), ('float', 'par_time_increase_energy_on_focus'), ('float', 'par_time_decrease_energy_in_time')]"
8192,313,DrawRgbBackgroundKernel,runs,"[('float *', 'target'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('float', 'r'), ('float', 'g'), ('float', 'b')]"
8192,315,DrawRgbaColorKernel,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('int', 'areaWidth'), ('int', 'areaHeight'), ('float', 'r'), ('float', 'g'), ('float', 'b')]"
8192,316,DrawRgbaTextureKernel,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'texture'), ('int', 'textureWidth'), ('int', 'textureHeight')]"
8192,317,DrawRgbaTextureKernelNearestNeighbor,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'texture'), ('int', 'textureWidth'), ('int', 'textureHeight'), ('int', 'objectWidth'), ('int', 'objectHeight')]"
8192,318,DrawMaskedColorKernelNearestNeighbor,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'texture'), ('int', 'textureWidth'), ('int', 'textureHeight'), ('int', 'objectWidth'), ('int', 'objectHeight'), ('float', 'r'), ('float', 'g'), ('float', 'b')]"
8192,319,DrawRgbaTextureKernel2DBlock,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'texture'), ('int', 'textureWidth'), ('int', 'textureHeight')]"
8192,320,DrawMaskedColorKernel,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'textureMask'), ('int', 'textureWidth'), ('int', 'textureHeight'), ('float', 'r'), ('float', 'g'), ('float', 'b')]"
8192,321,DrawMaskedColorKernel2DBlock,runs,"[('float *', 'target'), ('int', 'targetWidth'), ('int', 'targetHeight'), ('int', 'inputX'), ('int', 'inputY'), ('float *', 'textureMask'), ('int', 'textureWidth'), ('int', 'textureHeight'), ('float', 'r'), ('float', 'g'), ('float', 'b')]"
8192,326,InvertValuesKernel,runs,"[('float *', 'input'), ('float *', 'outputs'), ('int', 'size')]"
8192,328,InvertPermutationKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
8192,329,IntervalToBinaryVector,runs,"[('float', 'input'), ('float *', 'outputs'), ('int', 'steps')]"
8192,331,AbsoluteValueKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
8192,332,ModuloKernel,runs,"[('float *', 'input'), ('int', 'divisor'), ('float *', 'output'), ('int', 'size')]"
8192,333,RoundKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
8192,334,FloorKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
8192,335,CeilKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
8192,336,CropKernel,runs,"[('float', 'min'), ('float', 'max'), ('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
8192,337,ThresholdKernel,runs,"[('float', 'min'), ('float', 'max'), ('int', 'mode'), ('float *', 'input'), ('float *', 'output'), ('int', 'size'), ('int', 'count')]"
8192,338,PolynomialFunctionKernel,runs,"[('float', 'a3'), ('float', 'a2'), ('float', 'a1'), ('float', 'a0'), ('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
8192,339,PolynomialFunctionKernel_Double,runs,"[('float', 'a3'), ('float', 'a2'), ('float', 'a1'), ('float', 'a0'), ('double *', 'input'), ('double *', 'output'), ('int', 'size')]"
8192,340,LinearFunctionKernelDouble,runs,"[('double', 'a1'), ('double', 'a0'), ('double *', 'input'), ('double *', 'output'), ('int', 'size')]"
8192,341,LinearValuesKernel,runs,"[('const float', 'min'), ('const float', 'max'), ('float *', 'output'), ('const int', 'size'), ('const int', 'shift')]"
8192,342,GoniometricFunctionKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('const int', 'size'), ('const int', 'type')]"
8192,343,ExponentialFunctionKernel,runs,"[('float', 'exponent'), ('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
8192,344,LogarithmicFunctionKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size'), ('const int', 'type')]"
8192,346,LinearCombinationKernel,runs,"[('float *', 'input1'), ('float', 'input1_coeff'), ('int', 'input1_start_index'), ('float *', 'input2'), ('float', 'input2_coeff'), ('int', 'input2_start_index'), ('float *', 'output'), ('int', 'output_start_index'), ('int', 'size')]"
8192,348,UniformNormalDistribution,runs,"[('float *', 'from'), ('float *', 'to'), ('int', 'size')]"
8192,350,PrepareDerivativesKernel,runs,"[('float *', 'input'), ('float *', 'lastInput'), ('float *', 'derivatives'), ('int', 'inputWidth'), ('int', 'inputHeight')]"
8192,352,FinalizeVelocityKernel,runs,"[('float *', 'velocities'), ('float *', 'globalFlow'), ('int', 'inputWidth'), ('int', 'inputHeight')]"
8192,374,BilinearResampleKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
8192,375,ExactResampleKernel_1toN,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
8192,376,ExactResampleKernel_Nto1,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
8192,377,NNResampleKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
8192,378,CutSubImageKernel_SingleParams,runs,"[('float *', 'input'), ('float *', 'output'), ('float', 'subImageX'), ('float', 'subImageY'), ('float', 'subImageDiameter'), ('bool', 'safeBounds'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
8192,379,BilinearResampleSubImageKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'subImageDefs'), ('bool', 'safeBounds'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight')]"
8192,380,BilinearResampleSubImageKernel_ForManyProposals,runs,"[('const float *', 'input'), ('float *', 'output'), ('const float *', 'subImageDefs'), ('bool', 'safeBounds'), ('int', 'subImageDefsDim'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'outputHeight'), ('int', 'numberSubImages'), ('int', 'outputSize')]"
8192,381,BilinearAddSubImageKernel,runs,"[('float *', 'input'), ('float *', 'opImage'), ('float *', 'subImageDefs'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'opImageWidth'), ('int', 'opImageHeight')]"
8192,383,Crop2DKernel,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('int', 'outputWidth'), ('int', 'size'), ('int', 'leftMargin'), ('int', 'topMargin'), ('float', 'fillValue')]"
8192,384,RetinaTransform_HaveAtLeastOneValueThere,runs,"[('float *', 'subImageDefs'), ('float *', 'input'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('float *', 'output'), ('int', 'outputDataSize'), ('float *', 'retinaMask'), ('int', 'retinaDataSize'), ('int', 'retinaMaskColHint'), ('float *', 'retinaDataInserted')]"
8192,385,RetinaTransform_FillRetinaAtomic,runs,"[('float *', 'subImageDefs'), ('float *', 'input'), ('int', 'inputWidth'), ('int', 'inputHeight'), ('float *', 'output'), ('int', 'outputDataSize'), ('float *', 'retinaMask'), ('int', 'retinaDataSize'), ('int', 'retinaMaskColHint'), ('float *', 'retinaDataInserted')]"
820,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
820,1,prime_generator,runs,"[('int *', 'd_input_list'), ('uint64_cu *', 'd_prime_list'), ('uint64_cu *', 'd_startInputlist'), ('uint64_cu *', 'd_total_inputsize'), ('uint64_cu *', 'd_number_of_primes')]"
820,2,prime_generator,runs,"[('int *', 'd_input_list'), ('uint64_cu *', 'd_prime_list'), ('uint64_cu *', 'd_startPrimelist'), ('uint64_cu *', 'd_total_inputsize'), ('uint64_cu *', 'd_number_of_primes')]"
820,3,prime,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
820,4,prime_generator,runs,"[('int *', 'input'), ('int *', 'prime_list'), ('int *', 'total_input'), ('int *', 'seed')]"
820,6,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
820,7,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
820,16,calculation,runs,"[('char *', 'a'), ('char *', 'b'), ('int *', 'c'), ('int', 'constant'), ('int', 'vector_size')]"
820,17,calculation,runs,"[('char *', 'dev_a'), ('char *', 'dev_b'), ('char *', 'dev_c'), ('int', 'num_matrices'), ('int', 'matrix_size')]"
820,18,second_calculation,runs,"[('char *', 'dev_a'), ('char *', 'dev_b'), ('char *', 'dev_c'), ('int', 'k'), ('int', 'num_matrices'), ('int', 'matrix_size')]"
820,20,add_calculation,runs,"[('char *', 'dev_a'), ('char *', 'dev_b'), ('char *', 'dev_c'), ('int', 'k'), ('int', 'j'), ('int', 'num_matrices'), ('int', 'matrix_size')]"
820,21,sub_calculation,runs,"[('char *', 'dev_a'), ('char *', 'dev_b'), ('char *', 'dev_c'), ('int', 'k'), ('int', 'j'), ('int', 'num_matrices'), ('int', 'matrix_size')]"
820,24,calculation,runs,"[('char *', 'a'), ('char *', 'b'), ('int *', 'c'), ('int', 'constant'), ('int', 'vector_size')]"
820,25,calculation,runs,"[('char *', 'a'), ('char *', 'b'), ('int *', 'c'), ('int', 'constant'), ('int', 'vector_size')]"
820,27,calculation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'constant'), ('int', 'vector_size')]"
820,28,calculation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'constant'), ('int', 'vector_size')]"
820,29,calculation,runs,"[('char *', 'a'), ('char *', 'b'), ('int *', 'c'), ('int', 'constant'), ('int', 'vector_size')]"
820,30,calculation,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'constant'), ('int', 'vector_size')]"
820,31,calculation,runs,"[('char *', 'a'), ('char *', 'b'), ('int *', 'c'), ('int', 'constant'), ('int', 'vector_size')]"
820,32,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
820,33,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
820,34,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
820,36,calcPrimes,runs,"[('int *', 'd_IL'), ('int *', 'd_PL'), ('int', 'numOfPrimes'), ('int', 'lenInputList')]"
820,37,prime_generator,runs,"[('int *', 'd_input_list'), ('uint64_cu *', 'd_prime_list'), ('uint64_cu *', 'd_startPrimelist'), ('uint64_cu *', 'd_total_inputsize'), ('uint64_cu *', 'd_number_of_primes')]"
820,39,matMult,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'res'), ('unsigned int', 'rows'), ('unsigned int', 'k'), ('unsigned int', 'cols')]"
8201,2,computePointHessian0,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph93'), ('double *', 'ph103'), ('double *', 'ph113'), ('double *', 'ph123'), ('double *', 'ph94'), ('double *', 'ph133'), ('double *', 'ph104'), ('double *', 'ph143'), ('double *', 'ph114'), ('double *', 'ph153'), ('double *', 'ph95'), ('double *', 'ph163'), ('double *', 'ph105'), ('double *', 'ph173'), ('double *', 'ph115')]"
8201,3,computePointHessian1,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph124'), ('double *', 'ph134'), ('double *', 'ph144'), ('double *', 'ph154'), ('double *', 'ph125'), ('double *', 'ph164'), ('double *', 'ph135'), ('double *', 'ph174'), ('double *', 'ph145')]"
8201,4,computePointHessian2,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'points_num'), ('int *', 'valid_points'), ('int', 'valid_points_num'), ('double *', 'dh_ang'), ('double *', 'ph155'), ('double *', 'ph165'), ('double *', 'ph175')]"
8201,5,computeScoreList,runs,"[('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'e_x_cov_x'), ('double', 'gauss_d1'), ('double *', 'score')]"
8201,6,computeScoreGradientList,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('int', 'voxel_num'), ('double *', 'e_x_cov_x'), ('double *', 'cov_dxd_pi'), ('double', 'gauss_d1'), ('int', 'valid_voxel_num'), ('double *', 'score_gradients')]"
8201,7,computeExCovX,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centr_x'), ('double *', 'centr_y'), ('double *', 'centr_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22')]"
8201,8,updateExCovX,runs,"[('double *', 'e_x_cov_x'), ('double', 'gauss_d2'), ('int', 'valid_voxel_num')]"
8201,9,computeCovDxdPi,runs,"[('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'inverse_covariance'), ('int', 'voxel_num'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'point_gradients'), ('double *', 'cov_dxd_pi'), ('int', 'valid_voxel_num')]"
8201,10,computeHessianListS0,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_gradients0'), ('double *', 'point_gradients1'), ('double *', 'point_gradients2'), ('double *', 'tmp_hessian'), ('int', 'valid_voxel_num')]"
8201,11,computeHessianListS1,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double', 'gauss_d2'), ('double *', 'hessians'), ('double *', 'e_x_cov_x'), ('double *', 'tmp_hessian'), ('double *', 'cov_dxd_pi'), ('double *', 'point_gradients'), ('int', 'valid_voxel_num')]"
8201,12,computeHessianListS2,runs,"[('float *', 'trans_x'), ('float *', 'trans_y'), ('float *', 'trans_z'), ('int *', 'valid_points'), ('int *', 'starting_voxel_id'), ('int *', 'voxel_id'), ('int', 'valid_points_num'), ('double *', 'centroid_x'), ('double *', 'centroid_y'), ('double *', 'centroid_z'), ('double', 'gauss_d1'), ('double *', 'e_x_cov_x'), ('double *', 'icov00'), ('double *', 'icov01'), ('double *', 'icov02'), ('double *', 'icov10'), ('double *', 'icov11'), ('double *', 'icov12'), ('double *', 'icov20'), ('double *', 'icov21'), ('double *', 'icov22'), ('double *', 'point_hessians'), ('double *', 'hessians'), ('int', 'valid_voxel_num')]"
8201,14,sumScore,runs,"[('double *', 'score'), ('int', 'full_size'), ('int', 'half_size')]"
8202,1,kernelA,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
8202,2,kernelB,runs,"[('float *', 'r'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'size')]"
8205,2,kernel_looping,runs,"[('float *', 'point'), ('unsigned int', 'num')]"
8205,5,init,runs,"[('uint32_t *', 'v'), ('uint32_t', 'val'), ('uint32_t', 'n')]"
8205,21,analyze,runs,"[('const float *', 'input'), ('float *', 'sum'), ('int', 'numElements')]"
8205,22,sum,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
8208,0,matrixMultiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
8208,1,histogram,runs,"[('unsigned int *', 'input'), ('unsigned int *', 'bins'), ('unsigned int', 'num_elements'), ('unsigned int', 'num_bins')]"
8208,2,saturate,runs,"[('unsigned int *', 'bins'), ('unsigned int', 'num_bins')]"
8208,5,scan,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'aux'), ('int', 'len')]"
8208,6,addScannedBlockSums,runs,"[('float *', 'input'), ('float *', 'aux'), ('int', 'len')]"
8208,7,vecAdd,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'len')]"
8209,0,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
8221,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8221,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8221,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8221,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8221,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8221,349,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8221,354,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8223,219,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8223,220,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8223,221,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8223,226,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8223,336,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8223,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8230,1,img2gray,runs,"[('unsigned char *', 'imageInput'), ('int', 'width'), ('int', 'height'), ('unsigned char *', 'imageOutput')]"
824,33,downSanple422_gpu,runs,"[('cudaTextureObject_t', 'ch1'), ('cudaTextureObject_t', 'ch2'), ('uint8_t *', 'downCh1'), ('uint8_t *', 'downCh2'), ('size_t', 'width'), ('size_t', 'height')]"
824,34,downSanple420_gpu,runs,"[('cudaTextureObject_t', 'ch1'), ('cudaTextureObject_t', 'ch2'), ('uint8_t *', 'downCh1'), ('uint8_t *', 'downCh2'), ('size_t', 'width'), ('size_t', 'height')]"
824,37,shiftRightPixels,runs,"[('int16_t *', 'bayImg'), ('size_t', 'width'), ('size_t', 'height'), ('int', 'bppMult')]"
824,38,shiftLeftPixels,runs,"[('int16_t *', 'bayImg'), ('size_t', 'width'), ('size_t', 'height'), ('int', 'bppMult')]"
824,47,downSanple422_gpu,runs,"[('cudaTextureObject_t', 'ch1'), ('cudaTextureObject_t', 'ch2'), ('int16_t *', 'downCh1'), ('int16_t *', 'downCh2'), ('size_t', 'width'), ('size_t', 'height')]"
824,48,downSanple420_gpu,runs,"[('cudaTextureObject_t', 'ch1'), ('cudaTextureObject_t', 'ch2'), ('int16_t *', 'downCh1'), ('int16_t *', 'downCh2'), ('size_t', 'width'), ('size_t', 'height')]"
8240,165,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8240,224,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8240,225,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8240,226,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8240,231,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8240,347,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8240,352,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8244,50,addOne,runs,"[('int *', 'array'), ('int', 'size')]"
8252,0,Update,runs,"[('int *', 'GrayScale_'), ('int *', 'd_changing1'), ('int', 'linhas'), ('int', 'colunas')]"
8252,1,Condition,runs,"[('int *', 'GrayScale_'), ('int *', 'd_changing1'), ('int *', 'cont'), ('int', 'linhas'), ('int', 'colunas'), ('int', 'flag')]"
8270,0,FormPNGData,runs,"[('float3 *', 'colors'), ('unsigned char *', 'pixelData'), ('unsigned int', 'simWidth'), ('unsigned int', 'simHeight')]"
8271,0,set_dynamic_positions,runs,"[('float *', 'arr'), ('float', 't')]"
8271,1,set_dynamic_indices,runs,"[('unsigned int *', 'd_all_ib'), ('unsigned int *', 'd_ib'), ('int', 'flip')]"
8271,2,set_dynamic_position,runs,"[('float *', 'arr'), ('float', 't')]"
8273,81,createLookupKernel,runs,"[('const int *', 'inds'), ('int', 'total'), ('int *', 'output')]"
8273,101,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
8273,102,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
8273,103,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
829,1,DragRealGrad,runs,"[('float2 *', 'ORIGIN'), ('float *', 'DEST'), ('float *', 'VEC')]"
829,4,LoadVec,runs,"[('float *', 'vector'), ('float2 *', 'FFT')]"
829,6,LoadAddVecSecond,runs,"[('float *', 'vector'), ('float2 *', 'FFT')]"
829,12,Replace,runs,"[('float *', 'WHAT'), ('float *', 'WHERE')]"
829,14,Update,runs,"[('float *', 'WHAT'), ('float *', 'WITH'), ('float', 'AMOUNT')]"
829,15,UpdateScalars,runs,"[('float *', 'WHAT'), ('float *', 'WITH'), ('float', 'AMOUNT'), ('float *', 'MASS')]"
829,16,UpdateSecond,runs,"[('float *', 'WHAT'), ('float *', 'WITH'), ('float', 'AMOUNT'), ('float *', 'MULT')]"
829,17,SetElement,runs,"[('float *', 'vector'), ('int', 'position'), ('float', 'what')]"
829,18,CrossVector,runs,"[('float *', 'first'), ('float *', 'second')]"
829,25,Print,runs,"[('float *', 'beta'), ('float *', 'sigma'), ('float *', 'rho'), ('int', 'iter')]"
8292,6,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
8292,7,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
8292,8,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('const float *', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
8292,9,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
8292,10,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
8292,11,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('const float *', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
8292,12,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
8292,13,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
8292,14,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
8292,15,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('const float *', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
8292,16,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
8292,17,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
8292,18,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
8292,19,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('const float *', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
8292,20,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
8292,21,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
8292,22,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('float *', 'dist'), ('int *', 'idx'), ('float *', 'val')]"
8296,167,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8296,226,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8296,227,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8296,228,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8296,233,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8296,338,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8296,343,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8298,21,sync_deconv_groups,runs,[]
8298,37,sync_conv_groups,runs,[]
830,0,vector_max_kernel,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'N')]"
831,0,kernel_prefix_sum_inefficient,runs,"[('double *', 'g_idata'), ('double *', 'g_odata'), ('int', 'l')]"
831,1,kernel_prefix_sum_efficient,runs,"[('double *', 'g_idata'), ('double *', 'g_odata'), ('int', 'l')]"
831,5,gray,runs,"[('unsigned char *', 'In'), ('unsigned char *', 'Out'), ('int', 'Row'), ('int', 'Col')]"
831,8,sobelFilterShared,runs,"[('unsigned char *', 'data'), ('unsigned char *', 'result'), ('int', 'width'), ('int', 'height')]"
831,9,sobelFilterShared2,runs,"[('unsigned char *', 'data'), ('unsigned char *', 'result'), ('int', 'width'), ('int', 'height')]"
831,10,sobelFilterShared3,runs,"[('unsigned char *', 'g_DataIn'), ('unsigned char *', 'g_DataOut'), ('unsigned int', 'width'), ('unsigned int', 'height')]"
831,12,gray,runs,"[('unsigned char *', 'In'), ('unsigned char *', 'Out'), ('int', 'Row'), ('int', 'Col')]"
831,13,KernelNormalMul,runs,"[('int *', 'Mat1'), ('int *', 'Mat2'), ('int *', 'Mat3'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
831,14,KernelTilesMul,runs,"[('int *', 'Mat1'), ('int *', 'Mat2'), ('int *', 'Mat3'), ('int', 'rowM1'), ('int', 'colM1'), ('int', 'colM2')]"
831,15,KernelNormalMul,runs,"[('float *', 'Mat1'), ('float *', 'Mat2'), ('float *', 'Mat3'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
831,16,KernelTilesMul,runs,"[('float *', 'Mat1'), ('float *', 'Mat2'), ('float *', 'Mat3'), ('int', 'rowM1'), ('int', 'colM1'), ('int', 'colM2')]"
831,17,convolution1d_tiles_constant_kernel,runs,"[('int *', 'In'), ('int *', 'Out')]"
831,18,convolution1d_notile_noconstant_kernel,runs,"[('int *', 'In'), ('int *', 'Out')]"
831,19,convolution1d_constant_simple_kernel,runs,"[('int *', 'In'), ('int *', 'Out')]"
831,20,KernelNormalVec,runs,"[('double *', 'g_idata'), ('double *', 'g_odata'), ('int', 'l')]"
8331,0,kernelHelloWorld,runs,[]
8347,0,add,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'sum')]"
8358,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8358,225,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8358,226,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8358,227,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8358,232,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8358,348,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8358,353,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8367,0,knapsackKernel,runs,"[('int *', 'wt'), ('int *', 'val'), ('int *', 'output'), ('int', 'i')]"
8371,21,sync_deconv_groups,runs,[]
8371,37,sync_conv_groups,runs,[]
8376,0,kernelMontecarlo,runs,"[('float *', 'x'), ('float *', 'y'), ('int *', 'contador')]"
8376,1,kernelMultMatrices,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'm'), ('int', 'n')]"
8377,0,oddeven,runs,"[('int *', 'x'), ('int', 'I'), ('int', 'n')]"
8386,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8386,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
839,0,vectorAddKernel,runs,"[('float *', 'deviceA'), ('float *', 'deviceB'), ('float *', 'deviceResult')]"
839,1,histogramKernel,runs,"[('unsigned char *', 'image'), ('long', 'img_size'), ('unsigned int *', 'histogram'), ('int', 'hist_size')]"
839,2,histogramKernel,runs,"[('unsigned char *', 'image'), ('long', 'img_size'), ('unsigned int *', 'histogram'), ('int', 'hist_size')]"
839,3,convolution_kernel_naive,runs,"[('float *', 'output'), ('float *', 'input'), ('float *', 'filter')]"
8390,0,gqsort1,runs,"[('block *', 'blocks'), ('int *', 'd'), ('int *', 'LT'), ('int *', 'GT')]"
8390,2,gqsort3,runs,"[('block *', 'blocks'), ('int *', 'd'), ('int *', '_d')]"
8390,4,reduce,runs,"[('int *', 'vector'), ('int', 'size'), ('int', 'pot')]"
8390,5,multiplication,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'N')]"
8390,6,multiplication,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'N'), ('int', 'M'), ('int', 'K')]"
8392,3,MapSplit1,runs,"[('const int *', 'one'), ('int *', 'result'), ('unsigned int', 'mx'), ('unsigned int', 'width')]"
8392,4,MapSplit32,runs,"[('const int *', 'one'), ('int *', 'result'), ('unsigned int', 'mx'), ('unsigned int', 'width')]"
8392,5,MapAdd1,runs,"[('int *', 'one'), ('const int *', 'result'), ('unsigned int', 'mx'), ('unsigned int', 'width')]"
8392,6,MapAdd32,runs,"[('int *', 'one'), ('const int *', 'result'), ('unsigned int', 'mx'), ('unsigned int', 'width')]"
8395,1,kernel_reset_draw_counters,runs,[]
8395,4,kernel_reset_draw_counters,runs,[]
8395,7,initialize_cells,runs,"[('CellT *', 'dev_cells'), ('CellT *', 'dev_next_cells'), ('int', 'size_x'), ('int', 'size_y')]"
84,2,setGroupsPointersDead,runs,"[('multipassConfig_t *', 'mbk'), ('unsigned', 'numBuckets')]"
84,4,setGroupsPointersDead,runs,"[('multipassConfig_t *', 'mbk'), ('unsigned', 'numBuckets')]"
84,6,setGroupsPointersDead,runs,"[('multipassConfig_t *', 'mbk'), ('unsigned', 'numBuckets')]"
84,15,setGroupsPointersDead,runs,"[('multipassConfig_t *', 'mbk'), ('unsigned', 'numBuckets')]"
8411,0,matrixMulGPU,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
8411,1,initializeElementsTo,runs,"[('int', 'initialValue'), ('int *', 'a'), ('int', 'N')]"
8411,2,loop,runs,[]
8411,3,loop,runs,[]
8411,4,printSuccessForCorrectExecutionConfiguration,runs,[]
8411,5,firstParallel,runs,[]
8411,6,deviceKernel,runs,"[('int *', 'a'), ('int', 'N')]"
8411,7,helloGPU,runs,[]
8411,8,addVectorsInto,runs,"[('float *', 'result'), ('float *', 'a'), ('float *', 'b'), ('int', 'N')]"
8411,9,helloGPU,runs,[]
8414,0,calculate_tensors,runs,"[('double *', 'SR'), ('const double *', 'fields'), ('const double *', 'norms'), ('const int', 'num_modes'), ('const int', 'Nx')]"
8414,1,calculate_tensors,runs,"[('float *', 'SR'), ('const float *', 'fields'), ('const float *', 'norms'), ('const int', 'num_modes'), ('const int', 'Nx')]"
8414,2,calculate_sumterm_part,runs,"[('float2 *', 'Up'), ('float2 *', 'Vpl'), ('const float2 *', 'A_t'), ('const float *', 'SR'), ('const unsigned char *', 'nonzero_midx1234s'), ('const unsigned int', 'N'), ('const unsigned int', 'M'), ('const float', 'SK_factor'), ('const unsigned int', 'NUM_NONZERO'), ('const unsigned int', 'NUM_MODES')]"
8414,3,calculate_sumterm_part,runs,"[('double2 *', 'Up'), ('double2 *', 'Vpl'), ('const double2 *', 'A_t'), ('const double *', 'SR'), ('const unsigned char *', 'nonzero_midx1234s'), ('const unsigned int', 'N'), ('const unsigned int', 'M'), ('const double', 'SK_factor'), ('const unsigned int', 'NUM_NONZERO'), ('const unsigned int', 'NUM_MODES')]"
8428,21,sync_deconv_groups,runs,[]
8428,37,sync_conv_groups,runs,[]
8429,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8429,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8429,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8429,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8429,341,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8429,349,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
843,36,assignColIds,runs,"[('int *', 'colIds'), ('const int *', 'colOffsets')]"
8431,1,bgr_to_gray_kernel,runs,"[('unsigned char *', 'input'), ('unsigned char *', 'output'), ('int', 'width'), ('int', 'height'), ('int', 'colorWidthStep'), ('int', 'grayWidthStep')]"
8438,1,arrayFill_greg,runs,"[('float *', 'data'), ('float', 'value'), ('int', 'size')]"
8438,2,hardTanh,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size')]"
8438,3,hardTanh_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_d'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size'), ('bool', 'inplace')]"
8438,4,nllLoss,runs,"[('float *', 'x'), ('int', 'x_stride'), ('float *', 'y'), ('int *', 'target')]"
8438,5,nllLoss_grad,runs,"[('int', 'x_stride'), ('float *', 'yGrad'), ('int *', 'target'), ('float *', 'xGrad')]"
8438,6,sum_grad,runs,"[('float *', 'in'), ('int', 'inSize0'), ('int', 'inSize1'), ('int', 'inSize2'), ('int', 'inSize3'), ('int', 'nElement'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outStride2'), ('int', 'dim')]"
8438,9,repeat0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outScalarCount')]"
8438,10,shift0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'inDim0'), ('int', 'inStride0'), ('int', 'inStride1'), ('int', 'inScalarCount')]"
8438,11,adagrad_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'clip'), ('float', 'lr'), ('int', 'size')]"
8438,12,momentum_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'learning_rate'), ('float', 'momentum'), ('float', 'gradClip'), ('bool', 'nesterov'), ('int', 'size')]"
8438,13,elementwise_1D_1D_mul,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,14,elementwise_1D_1D_mul_mutate,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,15,elementwise_1D_1D_add,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,16,elementwise_1D_1D_minus,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,17,elementwise_1D_1D_div,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,18,elementwise_1D_1D_exp,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,19,elementwise_1D_1D_log,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,20,elementwise_1D_1D_sqrt,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,21,elementwise_1D_1D_square,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,22,elementwise_1D_1D_exp_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,23,elementwise_1D_1D_log_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,24,elementwise_1D_1D_sqrt_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,25,elementwise_1D_1D_square_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,26,mask4D,runs,"[('float *', 'in'), ('int *', 'mask'), ('int', 'xstrides0'), ('int', 'xstrides1'), ('int', 'xstrides2'), ('int', 'xstrides3'), ('int', 'scalarCount')]"
8438,27,mul_sub,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
8438,28,mul_sub_grad,runs,"[('float *', 'in1_x'), ('float *', 'in1_d'), ('float *', 'in2_x'), ('float *', 'in2_d'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
8438,31,arrayFill_greg,runs,"[('float *', 'data'), ('float', 'value'), ('int', 'size')]"
8438,32,hardTanh,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size')]"
8438,33,hardTanh_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_d'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size'), ('bool', 'inplace')]"
8438,34,nllLoss,runs,"[('float *', 'x'), ('int', 'x_stride'), ('float *', 'y'), ('int *', 'target')]"
8438,35,nllLoss_grad,runs,"[('int', 'x_stride'), ('float *', 'yGrad'), ('int *', 'target'), ('float *', 'xGrad')]"
8438,36,sum_grad,runs,"[('float *', 'in'), ('int', 'inSize0'), ('int', 'inSize1'), ('int', 'inSize2'), ('int', 'inSize3'), ('int', 'nElement'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outStride2'), ('int', 'dim')]"
8438,39,repeat0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outScalarCount')]"
8438,40,shift0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'inDim0'), ('int', 'inStride0'), ('int', 'inStride1'), ('int', 'inScalarCount')]"
8438,41,adagrad_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'clip'), ('float', 'lr'), ('int', 'size')]"
8438,42,momentum_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'learning_rate'), ('float', 'momentum'), ('float', 'gradClip'), ('bool', 'nesterov'), ('int', 'size')]"
8438,43,elementwise_1D_1D_mul,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,44,elementwise_1D_1D_mul_mutate,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,45,elementwise_1D_1D_add,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,46,elementwise_1D_1D_minus,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,47,elementwise_1D_1D_div,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,48,elementwise_1D_1D_exp,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,49,elementwise_1D_1D_log,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,50,elementwise_1D_1D_sqrt,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,51,elementwise_1D_1D_square,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,52,elementwise_1D_1D_exp_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,53,elementwise_1D_1D_log_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,54,elementwise_1D_1D_sqrt_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,55,elementwise_1D_1D_square_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,56,mask4D,runs,"[('float *', 'in'), ('int *', 'mask'), ('int', 'xstrides0'), ('int', 'xstrides1'), ('int', 'xstrides2'), ('int', 'xstrides3'), ('int', 'scalarCount')]"
8438,57,mul_sub,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
8438,58,mul_sub_grad,runs,"[('float *', 'in1_x'), ('float *', 'in1_d'), ('float *', 'in2_x'), ('float *', 'in2_d'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
8438,61,arrayFill_greg,runs,"[('float *', 'data'), ('float', 'value'), ('int', 'size')]"
8438,62,hardTanh,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size')]"
8438,63,hardTanh_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_d'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size'), ('bool', 'inplace')]"
8438,64,nllLoss,runs,"[('float *', 'x'), ('int', 'x_stride'), ('float *', 'y'), ('int *', 'target')]"
8438,65,nllLoss_grad,runs,"[('int', 'x_stride'), ('float *', 'yGrad'), ('int *', 'target'), ('float *', 'xGrad')]"
8438,66,sum_grad,runs,"[('float *', 'in'), ('int', 'inSize0'), ('int', 'inSize1'), ('int', 'inSize2'), ('int', 'inSize3'), ('int', 'nElement'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outStride2'), ('int', 'dim')]"
8438,69,repeat0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outScalarCount')]"
8438,70,shift0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'inDim0'), ('int', 'inStride0'), ('int', 'inStride1'), ('int', 'inScalarCount')]"
8438,71,adagrad_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'clip'), ('float', 'lr'), ('int', 'size')]"
8438,72,momentum_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'learning_rate'), ('float', 'momentum'), ('float', 'gradClip'), ('bool', 'nesterov'), ('int', 'size')]"
8438,73,elementwise_1D_1D_mul,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,74,elementwise_1D_1D_mul_mutate,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,75,elementwise_1D_1D_add,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,76,elementwise_1D_1D_minus,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,77,elementwise_1D_1D_div,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,78,elementwise_1D_1D_exp,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,79,elementwise_1D_1D_log,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,80,elementwise_1D_1D_sqrt,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,81,elementwise_1D_1D_square,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,82,elementwise_1D_1D_exp_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,83,elementwise_1D_1D_log_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,84,elementwise_1D_1D_sqrt_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,85,elementwise_1D_1D_square_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,86,mask4D,runs,"[('float *', 'in'), ('int *', 'mask'), ('int', 'xstrides0'), ('int', 'xstrides1'), ('int', 'xstrides2'), ('int', 'xstrides3'), ('int', 'scalarCount')]"
8438,87,mul_sub,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
8438,88,mul_sub_grad,runs,"[('float *', 'in1_x'), ('float *', 'in1_d'), ('float *', 'in2_x'), ('float *', 'in2_d'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
8438,91,arrayFill,runs,"[('float *', 'data'), ('float', 'value'), ('int', 'size')]"
8438,92,hardTanh,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size')]"
8438,93,hardTanh_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_d'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size'), ('bool', 'inplace')]"
8438,94,nllLoss,runs,"[('float *', 'x'), ('int', 'x_stride'), ('float *', 'y'), ('int *', 'target')]"
8438,95,nllLoss_grad,runs,"[('int', 'x_stride'), ('float *', 'yGrad'), ('int *', 'target'), ('float *', 'xGrad')]"
8438,96,sum_grad,runs,"[('float *', 'in'), ('int', 'inSize0'), ('int', 'inSize1'), ('int', 'inSize2'), ('int', 'inSize3'), ('int', 'nElement'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outStride2'), ('int', 'dim')]"
8438,99,repeat0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outScalarCount')]"
8438,100,shift0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'inDim0'), ('int', 'inStride0'), ('int', 'inStride1'), ('int', 'inScalarCount')]"
8438,101,adagrad_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'clip'), ('float', 'lr'), ('int', 'size')]"
8438,102,momentum_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'learning_rate'), ('float', 'momentum'), ('float', 'gradClip'), ('bool', 'nesterov'), ('int', 'size')]"
8438,103,elementwise_1D_1D_mul,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,104,elementwise_1D_1D_mul_mutate,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,105,elementwise_1D_1D_add,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,106,elementwise_1D_1D_minus,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,107,elementwise_1D_1D_div,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,108,elementwise_1D_1D_exp,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,109,elementwise_1D_1D_log,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,110,elementwise_1D_1D_sqrt,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,111,elementwise_1D_1D_square,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,112,elementwise_1D_1D_exp_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,113,elementwise_1D_1D_log_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,114,elementwise_1D_1D_sqrt_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,115,elementwise_1D_1D_square_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,116,clipAt,runs,"[('float *', 'in'), ('float', 'bound'), ('int', 'size')]"
8438,117,mask4D,runs,"[('float *', 'in'), ('int *', 'mask'), ('int', 'xstrides0'), ('int', 'xstrides1'), ('int', 'xstrides2'), ('int', 'xstrides3'), ('int', 'scalarCount')]"
8438,118,mul_sub,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
8438,119,mul_sub_grad,runs,"[('float *', 'in1_x'), ('float *', 'in1_d'), ('float *', 'in2_x'), ('float *', 'in2_d'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
8438,122,arrayFill,runs,"[('float *', 'data'), ('float', 'value'), ('int', 'size')]"
8438,123,hardTanh,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size')]"
8438,124,hardTanh_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_d'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size'), ('bool', 'inplace')]"
8438,125,nllLoss,runs,"[('float *', 'x'), ('int', 'x_stride'), ('float *', 'y'), ('int *', 'target')]"
8438,126,nllLoss_grad,runs,"[('int', 'x_stride'), ('float *', 'yGrad'), ('int *', 'target'), ('float *', 'xGrad')]"
8438,127,sum_grad,runs,"[('float *', 'in'), ('int', 'inSize0'), ('int', 'inSize1'), ('int', 'inSize2'), ('int', 'inSize3'), ('int', 'nElement'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outStride2'), ('int', 'dim')]"
8438,130,repeat0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outScalarCount')]"
8438,131,shift0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'inDim0'), ('int', 'inStride0'), ('int', 'inStride1'), ('int', 'inScalarCount')]"
8438,132,adagrad_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'clip'), ('float', 'lr'), ('int', 'size')]"
8438,133,momentum_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'learning_rate'), ('float', 'momentum'), ('float', 'gradClip'), ('bool', 'nesterov'), ('int', 'size')]"
8438,134,elementwise_1D_1D_mul,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,135,elementwise_1D_1D_mul_mutate,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,136,elementwise_1D_1D_add,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,137,elementwise_1D_1D_minus,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,138,elementwise_1D_1D_div,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
8438,139,elementwise_1D_1D_exp,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,140,elementwise_1D_1D_log,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,141,elementwise_1D_1D_sqrt,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,142,elementwise_1D_1D_square,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8438,143,elementwise_1D_1D_exp_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,144,elementwise_1D_1D_log_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,145,elementwise_1D_1D_sqrt_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,146,elementwise_1D_1D_square_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
8438,147,clipAt,runs,"[('float *', 'in'), ('float', 'bound'), ('int', 'size')]"
8438,148,mask4D,runs,"[('float *', 'in'), ('int *', 'mask'), ('int', 'xstrides0'), ('int', 'xstrides1'), ('int', 'xstrides2'), ('int', 'xstrides3'), ('int', 'scalarCount')]"
8438,149,mul_sub,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
8438,150,mul_sub_grad,runs,"[('float *', 'in1_x'), ('float *', 'in1_d'), ('float *', 'in2_x'), ('float *', 'in2_d'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
8440,96,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
8440,97,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
8440,98,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
8440,99,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
8440,170,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
8447,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8447,301,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8447,306,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8448,2,sum,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
8448,3,tiled_matrix_multiplication,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
8448,4,add,runs,"[('float *', 'cudaA'), ('float *', 'kernel'), ('float *', 'cudaResult')]"
8448,5,histogram_creation,runs,"[('int *', 'A'), ('int *', 'hist'), ('int', 'no_of_threads')]"
8448,8,sum,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
8454,0,multiply,runs,"[('float *', 'dest'), ('float *', 'a'), ('float *', 'b')]"
8455,2,g_countCellOcc,runs,"[('uint *', '_hash'), ('uint *', '_cellOcc'), ('uint', '_pixCount'), ('uint', '_hashCellCount')]"
8459,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8459,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8459,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8459,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8459,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8459,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8459,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
8459,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
8459,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8459,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
8459,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
8459,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
8459,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
8459,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
8459,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8459,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
8459,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
846,3,ReductionMin,runs,"[('unsigned int *', 'sdata'), ('unsigned int *', 'results'), ('int', 'n')]"
8464,2,kernelVersionShim,runs,[]
8465,180,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8465,320,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
848,0,add_matrices,runs,"[('float *', 'ad'), ('float *', 'bd'), ('float *', 'cd'), ('int', 'N')]"
848,1,add_number,runs,"[('float *', 'ad'), ('float *', 'bd')]"
848,2,matrix_mul,runs,"[('float *', 'ad'), ('float *', 'bd'), ('float *', 'cd'), ('int', 'N')]"
848,3,matrix_mul_shared,runs,"[('float *', 'ad'), ('float *', 'bd'), ('float *', 'cd'), ('int', 'N')]"
848,4,square_array,runs,"[('float *', 'ad'), ('int', 'N')]"
848,5,add_vectors,runs,"[('float *', 'ad'), ('float *', 'bd'), ('int', 'N')]"
8480,0,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
8482,4,absoluteDifferenceCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8482,5,bitwiseAndCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8482,6,bitwiseOrCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8482,7,bitwiseXorCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8482,10,copyCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8482,13,flipCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('bool', 'horizontal'), ('bool', 'vertical')]"
8482,14,histogramCuda,runs,"[('const uint8_t *', 'data'), ('uint32_t', 'rowSize'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'histogram')]"
8482,15,invertCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8482,16,isEqualCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'isEqual')]"
8482,17,lookupTableCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint8_t *', 'table')]"
8482,18,maximumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8482,19,minimumCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8482,20,rotateCuda,runs,"[('const uint8_t *', 'in'), ('uint32_t', 'rowSizeIn'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('float', 'inXStart'), ('float', 'inYStart'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('float', 'cosAngle'), ('float', 'sinAngle')]"
8482,21,subtractCuda,runs,"[('const uint8_t *', 'in1'), ('uint32_t', 'rowSizeIn1'), ('const uint8_t *', 'in2'), ('uint32_t', 'rowSizeIn2'), ('uint8_t *', 'out'), ('uint32_t', 'rowSizeOut'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8482,25,isAnyEqualCuda,runs,"[('const uint8_t *', 'image'), ('uint8_t *', 'value'), ('size_t', 'valueCount'), ('uint32_t', 'width'), ('uint32_t', 'height'), ('uint32_t *', 'differenceCount')]"
8484,48,sync_conv_groups,runs,[]
8488,86,kernel,runs,"[('float *', 'a'), ('size_t', 'N')]"
8490,10,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8490,69,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8490,70,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8490,71,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8490,76,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8490,171,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8490,176,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8494,5,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
8494,6,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
8494,7,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
8494,8,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
8497,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8497,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8497,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8497,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8497,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8497,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8497,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
850,0,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
8501,81,createLookupKernel,runs,"[('const int *', 'inds'), ('int', 'total'), ('int *', 'output')]"
8501,101,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
8501,102,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
8501,103,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
8504,0,kSigmoid,runs,"[('const int', 'nThreads'), ('float const *', 'input'), ('float *', 'output')]"
8504,1,kTanh,runs,"[('const int', 'nThreads'), ('float const *', 'input'), ('float *', 'output')]"
8504,2,kTanhDerivative,runs,"[('const int', 'nThreads'), ('float const *', 'input'), ('float *', 'output')]"
8504,3,kSigmoid_d,runs,"[('const int', 'nThreads'), ('float const *', 'input'), ('float *', 'output')]"
8504,4,kDot,runs,"[('const int', 'nThreads'), ('const float *', 'm1'), ('const float *', 'm2'), ('float *', 'output'), ('const int', 'm1_rows'), ('const int', 'm1_columns'), ('const int', 'm2_columns')]"
8504,9,gpu_add,runs,"[('float *', 'first'), ('float *', 'second'), ('size_t', 'sizeFirst')]"
8504,10,gpu_multiply,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'ARows'), ('int', 'ACols'), ('int', 'BRows'), ('int', 'BCols'), ('int', 'CRows'), ('int', 'CCols')]"
8504,11,gpu_mull2,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n'), ('int', 'm'), ('int', 'p')]"
8504,12,gpu_transpose,runs,"[('const float *', 'src'), ('float *', 'dst'), ('int', 'colssrc'), ('int', 'colsdst'), ('int', 'n')]"
851,0,matrixMultiplyShared,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numARows'), ('int', 'numAColumns'), ('int', 'numBRows'), ('int', 'numBColumns'), ('int', 'numCRows'), ('int', 'numCColumns')]"
8510,10,add,runs,"[('int', 'n'), ('long *', 'a'), ('long *', 'b'), ('long *', 'sum')]"
8510,11,mul,runs,"[('int', 'n'), ('long *', 'a'), ('long *', 'b'), ('long *', 'sum')]"
8510,12,arrayTest,runs,"[('int', 'n'), ('long *', 'factor'), ('long *', 'arr'), ('long *', 'result'), ('int *', 'const_arr1'), ('long *', 'const_arr2')]"
8510,13,multiplyBy2_self,runs,"[('int', 'size'), ('long *', 'inout')]"
8510,14,multiplyBy2,runs,"[('int', 'size'), ('const long *', 'in'), ('long *', 'out')]"
8510,15,multiplyBy2o,runs,"[('int *', 'size'), ('const long *', 'in'), ('long *', 'out')]"
8510,16,load,runs,"[('int', 'size'), ('const long *', 'in')]"
8510,19,calculateIntermediates,runs,"[('int', 'n'), ('double *', 'xs'), ('int *', 'cluster_index'), ('int *', 'intermediates0'), ('double *', 'intermediates1'), ('double *', 'intermediates2'), ('int', 'k'), ('int', 'd')]"
8510,20,calculateFinal,runs,"[('int', 'n'), ('int *', 'intermediates0'), ('double *', 'intermediates1'), ('double *', 'intermediates2'), ('int *', 's0'), ('double *', 's1'), ('double *', 's2'), ('int', 'k'), ('int', 'd')]"
8510,21,identity,runs,"[('int *', 'size'), ('const int *', 'input'), ('int *', 'output')]"
8510,22,intArrayIdentity,runs,"[('int *', 'size'), ('const int *', 'input'), ('int *', 'output'), ('int *', 'length')]"
8510,23,IntDataPointIdentity,runs,"[('int *', 'size'), ('const int *', 'inputX'), ('const int *', 'inputY'), ('int *', 'outputX'), ('int *', 'outputY'), ('int *', 'length')]"
8510,24,intArrayAdd,runs,"[('int *', 'size'), ('const int *', 'input'), ('int *', 'output'), ('const int *', 'inFreeArray'), ('int *', 'length')]"
8510,25,vectorLength,runs,"[('int *', 'size'), ('const double *', 'x'), ('const double *', 'y'), ('double *', 'len')]"
8510,26,plusMinus,runs,"[('int *', 'size'), ('const double *', 'base'), ('const float *', 'deviation'), ('double *', 'a'), ('float *', 'b')]"
8510,27,applyLinearFunction,runs,"[('int *', 'size'), ('const short *', 'x'), ('short *', 'y'), ('short *', 'a'), ('short *', 'b')]"
8510,28,blockXOR,runs,"[('int *', 'size'), ('const char *', 'input'), ('char *', 'output'), ('long *', 'key')]"
8510,29,multiplyBy2,runs,"[('int *', 'size'), ('int *', 'in'), ('int *', 'out')]"
8510,30,multiplyBy2_l,runs,"[('int *', 'size'), ('long *', 'in'), ('long *', 'out')]"
8510,31,multiplyBy2_self,runs,"[('int *', 'size'), ('int *', 'in'), ('int *', 'out')]"
8510,35,DataPointMap,runs,"[('int *', 'size'), ('const double *', 'inputX'), ('const double *', 'inputY'), ('double *', 'output'), ('const double *', 'inFreeArray'), ('int *', 'length')]"
8510,38,identity,runs,"[('int', 'size'), ('long *', 'in'), ('long *', 'out')]"
8510,39,intArrayIdentity,runs,"[('int', 'size'), ('int *', 'input'), ('int *', 'output'), ('int', 'length')]"
8510,40,IntDataPointIdentity,runs,"[('int', 'size'), ('const int *', 'inputX'), ('const int *', 'inputY'), ('int *', 'outputX'), ('int *', 'outputY'), ('int', 'length')]"
8510,41,intArrayAdd,runs,"[('int', 'size'), ('const int *', 'input'), ('int *', 'output'), ('const int *', 'inFreeArray'), ('int', 'length')]"
8510,42,vectorLength,runs,"[('int', 'size'), ('const double *', 'x'), ('const double *', 'y'), ('double *', 'len')]"
8510,43,plusMinus,runs,"[('int', 'size'), ('const double *', 'base'), ('const float *', 'deviation'), ('double *', 'a'), ('float *', 'b')]"
8510,44,applyLinearFunction,runs,"[('int', 'size'), ('const short *', 'x'), ('short *', 'y'), ('short', 'a'), ('short', 'b')]"
8510,45,blockXOR,runs,"[('int', 'size'), ('const char *', 'input'), ('char *', 'output'), ('long', 'key')]"
8510,46,multiplyBy2,runs,"[('int', 'size'), ('long *', 'in'), ('long *', 'out')]"
8510,47,multiplyBy2_self,runs,"[('int', 'size'), ('long *', 'inout')]"
8510,51,DataPointMap,runs,"[('int', 'size'), ('const double *', 'inputX'), ('const double *', 'inputY'), ('double *', 'output'), ('const double *', 'inFreeArray'), ('int', 'length')]"
8510,54,MNKernel,runs,"[('int', 'count'), ('long *', 'Md'), ('long *', 'Nd'), ('long *', 'Pd'), ('int', 'width')]"
8511,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8511,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8517,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
8519,21,sync_deconv_groups,runs,[]
8519,37,sync_conv_groups,runs,[]
8523,0,RgbToGray_Kernel,runs,"[('unsigned char *', 'RGB_Image'), ('unsigned char *', 'Gray_Image'), ('int', 'Width'), ('int', 'Height')]"
8523,2,Census_Kernel,runs,"[('unsigned char *', 'MemSrc'), ('unsigned int *', 'MemDst'), ('int', 'eps'), ('int', 'Width'), ('int', 'Height')]"
8533,3,set_valid_pos_flag,runs,"[('int32_t *', 'pos_buff'), ('const int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
8533,4,set_valid_pos,runs,"[('int32_t *', 'pos_buff'), ('int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
8533,7,init_render_buffer_wrapper,runs,"[('int64_t *', 'render_buffer'), ('const uint32_t', 'qw_count')]"
8533,10,init_group,runs,"[('int8_t *', 'groups'), ('const size_t', 'group_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t *', 'init_vals')]"
8533,12,columnarize_groups,runs,"[('int8_t *', 'columnar_buffer'), ('const int8_t *', 'rowwise_buffer'), ('const size_t', 'row_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t', 'row_size')]"
8535,0,gray,runs,"[('unsigned char *', 'src'), ('unsigned char *', 'dest'), ('int', 'width'), ('int', 'heigth'), ('int', 'step'), ('int', 'channels')]"
8535,1,sobel,runs,"[('unsigned char *', 'src'), ('unsigned char *', 'dest'), ('int', 'width'), ('int', 'heigth'), ('int', 'step'), ('int', 'channels')]"
8548,0,initData,runs,"[('int', 'nbLines'), ('int', 'M'), ('double *', 'h'), ('double *', 'g')]"
8548,1,gpuWork,runs,"[('double *', 'g'), ('double *', 'h'), ('double *', 'error'), ('int', 'M'), ('int', 'nbLines')]"
855,1,set_bin,runs,"[('int *', 'd_row_nz'), ('int *', 'd_bin_size'), ('int *', 'd_max'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
855,2,init_row_perm,runs,"[('int *', 'd_permutation'), ('int', 'M')]"
855,3,set_row_perm,runs,"[('int *', 'd_bin_size'), ('int *', 'd_bin_offset'), ('int *', 'd_max_row_nz'), ('int *', 'd_row_perm'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
855,5,init_check,runs,"[('int *', 'd_check'), ('int', 'nz')]"
855,17,set_bin,runs,"[('int *', 'd_row_nz'), ('int *', 'd_bin_size'), ('int *', 'd_max'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
855,18,init_row_perm,runs,"[('int *', 'd_permutation'), ('int', 'M')]"
855,19,set_row_perm,runs,"[('int *', 'd_bin_size'), ('int *', 'd_bin_offset'), ('int *', 'd_max_row_nz'), ('int *', 'd_row_perm'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
855,21,init_check,runs,"[('int *', 'd_check'), ('int', 'nz')]"
855,32,set_bin,runs,"[('int *', 'd_row_nz'), ('int *', 'd_bin_size'), ('int *', 'd_max'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
855,33,init_row_perm,runs,"[('int *', 'd_permutation'), ('int', 'M')]"
855,34,set_row_perm,runs,"[('int *', 'd_bin_size'), ('int *', 'd_bin_offset'), ('int *', 'd_max_row_nz'), ('int *', 'd_row_perm'), ('int', 'M'), ('int', 'min'), ('int', 'mmin')]"
855,36,init_check,runs,"[('int *', 'd_check'), ('int', 'nz')]"
855,48,zero_fill_int,runs,"[('int *', 'd_array'), ('int', 'size')]"
855,49,set_permutation,runs,"[('int *', 'd_permutation'), ('int', 'M')]"
855,50,set_cl,runs,"[('int *', 'nnz_num'), ('int *', 'cl'), ('int', 'chunk'), ('int', 'pad_M')]"
855,51,init_cs,runs,"[('int *', 'd_cl'), ('int *', 'd_cs'), ('int', 'c_size'), ('int', 'chunk')]"
855,53,set_segmented_nnz_num,runs,"[('int *', 'd_rpt'), ('int *', 'd_col'), ('int *', 'd_nnz_num'), ('int *', 'd_group_seg'), ('int *', 'd_offset'), ('size_t', 'seg_size'), ('size_t', 'seg_num'), ('int', 'M'), ('int', 'pad_M'), ('int', 'group_num_col')]"
855,54,init_segmented_rpt,runs,"[('int *', 'd_nnz_num'), ('int *', 'd_seg_rpt'), ('int', 'total_pad_row_num')]"
855,56,update_write_permutation,runs,"[('int *', 'write_permutation'), ('int *', 'nnz_num'), ('int', 'total_pad_row_num'), ('int', 'pad_M')]"
855,57,compress_write_permutation,runs,"[('int *', 'd_write_permutation'), ('int *', 'd_full_write_permutation'), ('int *', 'd_gcs'), ('int', 'total_pad_row_num'), ('int', 'chunk')]"
855,58,compress_s_write_permutation,runs,"[('unsigned short *', 'd_s_write_permutation'), ('unsigned short *', 'd_s_write_permutation_offset'), ('int *', 'd_write_permutation'), ('int', 'c_size'), ('int', 'chunk')]"
855,59,get_c_size,runs,"[('int *', 'd_c_size'), ('int *', 'd_full_cl'), ('int', 'size')]"
855,62,set_packed_cl_cs,runs,"[('int *', 'd_packed_cl'), ('int *', 'd_packed_cs'), ('int *', 'd_cl'), ('int *', 'd_cs'), ('int *', 'd_gcs'), ('int', 'chunk_num')]"
855,66,set_d_check_nnz,runs,"[('int *', 'd_check_nnz'), ('int *', 'd_nnz_num'), ('int', 'pad_M'), ('int', 'SIGMA'), ('int', 'sigma_block_row')]"
8552,21,sync_deconv_groups,runs,[]
8552,37,sync_conv_groups,runs,[]
856,0,sort,runs,"[('int *', 'd_arr'), ('int', 'n'), ('bool', 'isEven')]"
8562,2,diffKernel,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
8562,4,diffKernel,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
8562,5,kernel,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,6,kernel2,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,7,kernel3,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,8,kernel4,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,9,kernel5,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,10,kernel6,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,11,kernel,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,12,kernel2,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,13,kernel3,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,14,kernel4,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,15,kernel5,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,16,kernel6,runs,"[('int *', 'a'), ('int', 'dimx'), ('int', 'dimy')]"
8562,20,reduce2,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'n')]"
8562,21,reduce3,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
8562,22,matrix_multiply_simple,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'ab'), ('size_t', 'width')]"
8562,23,k1,runs,"[('float *', 'g_dataA'), ('float *', 'g_dataB'), ('int', 'floatpitch'), ('int', 'width')]"
8562,24,k0,runs,"[('float *', 'g_dataA'), ('float *', 'g_dataB'), ('int', 'pitch'), ('int', 'width')]"
8562,27,global_max,runs,"[('int *', 'values'), ('int *', 'max'), ('int *', 'reg_maxes'), ('int', 'num_regions'), ('int', 'n')]"
8562,28,normalize,runs,"[('int *', 'values'), ('int *', 'max'), ('float *', 'output'), ('int', 'n')]"
8568,0,elementwiseMul,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('int', 'rows'), ('int', 'cols')]"
8568,1,matrixTransKernel,runs,"[('float *', 'A'), ('int', 'rows'), ('int', 'cols')]"
8568,2,relu,runs,"[('float *', 'inout'), ('float *', 'bias'), ('int', 'rows'), ('int', 'cols')]"
8568,3,relu_grad,runs,"[('float *', 'pre_grad'), ('float *', 'output'), ('int', 'rows'), ('int', 'cols')]"
8568,4,sigmoid,runs,"[('float *', 'inout'), ('float *', 'bias'), ('int', 'rows'), ('int', 'cols')]"
8568,5,sigmoid_grad,runs,"[('float *', 'pre_grad'), ('float *', 'output'), ('int', 'rows'), ('int', 'cols')]"
8568,6,tanh,runs,"[('float *', 'inout'), ('float *', 'bias'), ('int', 'rows'), ('int', 'cols')]"
8568,7,tanh_grad,runs,"[('float *', 'pre_grad'), ('float *', 'output'), ('int', 'rows'), ('int', 'cols')]"
8568,8,bias_grad,runs,"[('float *', 'pre_grad'), ('float *', 'output'), ('int', 'rows'), ('int', 'cols')]"
8568,9,attentionKernel,runs,"[('float *', 'x'), ('int', 'rows'), ('int', 'cols')]"
8577,0,kernel_A,runs,"[('float *', 'g_data'), ('int', 'dimx'), ('int', 'dimy')]"
8577,1,kernel_B,runs,"[('float *', 'g_data'), ('int', 'dimx'), ('int', 'dimy')]"
8577,2,kernel_C,runs,"[('float *', '_g_data'), ('int', 'dimx'), ('int', 'dimy')]"
8577,3,kernel_D,runs,"[('float *', '_g_data'), ('int', 'dimx'), ('int', 'dimy')]"
8581,5,updateWeightBiasMat,runs,"[('DATA *', 'delta_weightbias'), ('DATA *', 'weight'), ('int', 'rows'), ('int', 'cols')]"
8588,1,totalSequential,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
8588,2,totalSequentialSharedMem,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
8588,3,totalWithThreadSyncInterleaved,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
8588,4,totalWithThreadSyncAndSharedMemInterleaved,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
8588,5,totalWithThreadSync,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
8588,6,totalWithThreadSyncAndSharedMem,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'len')]"
8588,7,sobelEdgeDetection,runs,"[('int *', 'input'), ('int *', 'output'), ('int', 'width'), ('int', 'height'), ('int', 'thresh')]"
8588,8,sobelEdgeDetectionWithRegisters,runs,"[('int *', 'input'), ('int *', 'output'), ('int', 'width'), ('int', 'height'), ('int', 'thresh')]"
8588,9,sobelEdgeDetectionSharedMem,runs,"[('int *', 'input'), ('int *', 'output'), ('int', 'width'), ('int', 'height'), ('int', 'thresh')]"
8588,10,sobelEdgeDetectionSharedMem2,runs,"[('int *', 'input'), ('int *', 'output'), ('int', 'width'), ('int', 'height'), ('int', 'thresh')]"
8588,11,sobelEdgeDetectionSharedMemUnrollControlFlow,runs,"[('int *', 'input'), ('int *', 'output'), ('int', 'width'), ('int', 'height'), ('int', 'thresh')]"
8588,12,sobelEdgeDetectionSharedMemUnroll,runs,"[('int *', 'input'), ('int *', 'output'), ('int', 'width'), ('int', 'height'), ('int', 'thresh')]"
8588,13,sobelEdgeDetectionSharedMemOverlap,runs,"[('int *', 'input'), ('int *', 'output'), ('int', 'width'), ('int', 'height'), ('int', 'thresh')]"
8588,14,sobelEdgeDetectionSharedMemUnrollCoalsed,runs,"[('int *', 'input'), ('int *', 'output'), ('int', 'width'), ('int', 'height'), ('int', 'thresh')]"
8593,40,sync_conv_groups,runs,[]
8608,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
8609,0,reduce1,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'g_size')]"
8609,1,reduce2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'g_size')]"
8609,2,reduce3,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'g_size')]"
8609,3,reduce4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'g_size')]"
8609,4,reduce5,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'g_size')]"
861,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
861,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
861,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
861,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
861,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
861,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
861,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
861,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
861,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
861,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
861,24,hello,runs,[]
861,28,hello,runs,[]
8612,50,addOne,runs,"[('int *', 'array'), ('int', 'size')]"
8615,9,assignColIds,runs,"[('int *', 'colIds'), ('const int *', 'colOffsets')]"
864,14,loadOP,runs,[]
864,20,use_ptr3,runs,[]
864,23,regOperation2,runs,[]
8656,172,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8656,303,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8656,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8658,0,loop,runs,[]
8658,1,loop,runs,[]
866,1,arrayFill,runs,"[('float *', 'data'), ('float', 'value'), ('int', 'size')]"
866,2,hardTanh,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size')]"
866,3,hardTanh_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_d'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size'), ('bool', 'inplace')]"
866,4,nllLoss,runs,"[('float *', 'x'), ('int', 'x_stride'), ('float *', 'y'), ('int *', 'target')]"
866,5,nllLoss_grad,runs,"[('int', 'x_stride'), ('float *', 'yGrad'), ('int *', 'target'), ('float *', 'xGrad')]"
866,6,sum_grad,runs,"[('float *', 'in'), ('int', 'inSize0'), ('int', 'inSize1'), ('int', 'inSize2'), ('int', 'inSize3'), ('int', 'nElement'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outStride2'), ('int', 'dim')]"
866,9,repeat0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outScalarCount')]"
866,10,shift0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'inDim0'), ('int', 'inStride0'), ('int', 'inStride1'), ('int', 'inScalarCount')]"
866,11,adagrad_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'clip'), ('float', 'lr'), ('int', 'size')]"
866,12,momentum_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'learning_rate'), ('float', 'momentum'), ('float', 'gradClip'), ('bool', 'nesterov'), ('int', 'size')]"
866,13,addScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'add'), ('int', 'size')]"
866,14,minusScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'minus'), ('int', 'size')]"
866,15,multScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'mult'), ('int', 'size')]"
866,16,divScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'div'), ('int', 'size')]"
866,17,elementwise_1D_1D_mul,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,18,elementwise_1D_1D_mul_mutate,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,19,elementwise_1D_1D_add,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,20,elementwise_1D_1D_minus,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,21,elementwise_1D_1D_div,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,22,elementwise_1D_1D_exp,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,23,elementwise_1D_1D_log,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,24,elementwise_1D_1D_sqrt,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,25,elementwise_1D_1D_square,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,26,elementwise_1D_1D_exp_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,27,elementwise_1D_1D_log_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,28,elementwise_1D_1D_sqrt_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,29,elementwise_1D_1D_square_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,30,clipAt,runs,"[('float *', 'in'), ('float', 'bound'), ('int', 'size')]"
866,31,mask4D,runs,"[('float *', 'in'), ('int *', 'mask'), ('int', 'xstrides0'), ('int', 'xstrides1'), ('int', 'xstrides2'), ('int', 'xstrides3'), ('int', 'scalarCount')]"
866,32,mul_sub,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
866,33,mul_sub_grad,runs,"[('float *', 'in1_x'), ('float *', 'in1_d'), ('float *', 'in2_x'), ('float *', 'in2_d'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
866,36,arrayFill,runs,"[('float *', 'data'), ('float', 'value'), ('int', 'size')]"
866,37,hardTanh,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size')]"
866,38,hardTanh_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_d'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size'), ('bool', 'inplace')]"
866,39,nllLoss,runs,"[('float *', 'x'), ('int', 'x_stride'), ('float *', 'y'), ('int *', 'target')]"
866,40,nllLoss_grad,runs,"[('int', 'x_stride'), ('float *', 'yGrad'), ('int *', 'target'), ('float *', 'xGrad')]"
866,41,sum_grad,runs,"[('float *', 'in'), ('int', 'inSize0'), ('int', 'inSize1'), ('int', 'inSize2'), ('int', 'inSize3'), ('int', 'nElement'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outStride2'), ('int', 'dim')]"
866,44,repeat0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outScalarCount')]"
866,45,shift0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'inDim0'), ('int', 'inStride0'), ('int', 'inStride1'), ('int', 'inScalarCount')]"
866,46,adagrad_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'clip'), ('float', 'lr'), ('int', 'size')]"
866,47,momentum_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'learning_rate'), ('float', 'momentum'), ('float', 'gradClip'), ('bool', 'nesterov'), ('int', 'size')]"
866,48,addScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'add'), ('int', 'size')]"
866,49,minusScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'minus'), ('int', 'size')]"
866,50,multScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'mult'), ('int', 'size')]"
866,51,divScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'div'), ('int', 'size')]"
866,52,elementwise_1D_1D_mul,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,53,elementwise_1D_1D_mul_mutate,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,54,elementwise_1D_1D_add,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,55,elementwise_1D_1D_minus,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,56,elementwise_1D_1D_div,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,57,elementwise_1D_1D_exp,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,58,elementwise_1D_1D_log,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,59,elementwise_1D_1D_sqrt,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,60,elementwise_1D_1D_square,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,61,elementwise_1D_1D_exp_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,62,elementwise_1D_1D_log_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,63,elementwise_1D_1D_sqrt_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,64,elementwise_1D_1D_square_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,65,clipAt,runs,"[('float *', 'in'), ('float', 'bound'), ('int', 'size')]"
866,66,mask4D,runs,"[('float *', 'in'), ('int *', 'mask'), ('int', 'xstrides0'), ('int', 'xstrides1'), ('int', 'xstrides2'), ('int', 'xstrides3'), ('int', 'scalarCount')]"
866,67,mul_sub,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
866,68,mul_sub_grad,runs,"[('float *', 'in1_x'), ('float *', 'in1_d'), ('float *', 'in2_x'), ('float *', 'in2_d'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
866,71,arrayFill,runs,"[('float *', 'data'), ('float', 'value'), ('int', 'size')]"
866,72,hardTanh,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size')]"
866,73,hardTanh_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_d'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size'), ('bool', 'inplace')]"
866,74,nllLoss,runs,"[('float *', 'x'), ('int', 'x_stride'), ('float *', 'y'), ('int *', 'target')]"
866,75,nllLoss_grad,runs,"[('int', 'x_stride'), ('float *', 'yGrad'), ('int *', 'target'), ('float *', 'xGrad')]"
866,76,sum_optimization,runs,"[('float *', 'in'), ('int', 'inStr0'), ('int', 'inStr1'), ('int', 'inStr2'), ('int', 'inStr3'), ('float *', 'out'), ('int', 'outStr0'), ('int', 'outStr1'), ('int', 'outStr2'), ('int', 'dim'), ('int', 'nElementOut'), ('int', 'dimSize')]"
866,77,sum_grad,runs,"[('float *', 'in'), ('int', 'inSize0'), ('int', 'inSize1'), ('int', 'inSize2'), ('int', 'inSize3'), ('int', 'nElement'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outStride2'), ('int', 'dim')]"
866,80,repeat0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outScalarCount')]"
866,81,shift0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'inDim0'), ('int', 'inStride0'), ('int', 'inStride1'), ('int', 'inScalarCount')]"
866,82,adagrad_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'clip'), ('float', 'lr'), ('int', 'size')]"
866,83,momentum_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'learning_rate'), ('float', 'momentum'), ('float', 'gradClip'), ('bool', 'nesterov'), ('int', 'size')]"
866,84,addScalarInArrayInPlace,runs,"[('float *', 'in'), ('float *', 'add'), ('float', 'scale'), ('int', 'size')]"
866,85,addScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'add'), ('int', 'size')]"
866,86,minusScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'minus'), ('int', 'size')]"
866,87,multScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'mult'), ('int', 'size')]"
866,88,divScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'div'), ('int', 'size')]"
866,89,elementwise_1D_1D_mul,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,90,elementwise_1D_1D_mul_mutate,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,91,elementwise_1D_1D_add,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,92,elementwise_1D_1D_minus,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,93,elementwise_1D_1D_div,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,94,elementwise_1D_1D_exp,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,95,elementwise_1D_1D_log,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,96,elementwise_1D_1D_sqrt,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,97,elementwise_1D_1D_square,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,98,elementwise_1D_1D_exp_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,99,elementwise_1D_1D_log_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,100,elementwise_1D_1D_sqrt_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,101,elementwise_1D_1D_square_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,102,clipAt,runs,"[('float *', 'in'), ('float', 'bound'), ('int', 'size')]"
866,103,mask4D,runs,"[('float *', 'in'), ('int *', 'mask'), ('int', 'xstrides0'), ('int', 'xstrides1'), ('int', 'xstrides2'), ('int', 'xstrides3'), ('int', 'scalarCount')]"
866,104,mul_sub,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
866,105,mul_sub_grad,runs,"[('float *', 'in1_x'), ('float *', 'in1_d'), ('float *', 'in2_x'), ('float *', 'in2_d'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
866,107,arrayFill,runs,"[('float *', 'data'), ('float', 'value'), ('int', 'size')]"
866,108,hardTanh,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size')]"
866,109,hardTanh_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_d'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size'), ('bool', 'inplace')]"
866,110,nllLoss,runs,"[('float *', 'x'), ('int', 'x_stride'), ('float *', 'y'), ('int *', 'target')]"
866,111,nllLoss_grad,runs,"[('int', 'x_stride'), ('float *', 'yGrad'), ('int *', 'target'), ('float *', 'xGrad')]"
866,112,sum_optimization,runs,"[('float *', 'in'), ('int', 'inStr0'), ('int', 'inStr1'), ('int', 'inStr2'), ('int', 'inStr3'), ('float *', 'out'), ('int', 'outStr0'), ('int', 'outStr1'), ('int', 'outStr2'), ('int', 'dim'), ('int', 'nElementOut'), ('int', 'dimSize')]"
866,113,sum_grad,runs,"[('float *', 'in'), ('int', 'inSize0'), ('int', 'inSize1'), ('int', 'inSize2'), ('int', 'inSize3'), ('int', 'nElement'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outStride2'), ('int', 'dim')]"
866,116,repeat0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outScalarCount')]"
866,117,shift0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'inDim0'), ('int', 'inStride0'), ('int', 'inStride1'), ('int', 'inScalarCount')]"
866,118,adagrad_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'clip'), ('float', 'lr'), ('int', 'size')]"
866,119,momentum_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'learning_rate'), ('float', 'momentum'), ('float', 'gradClip'), ('bool', 'nesterov'), ('int', 'size')]"
866,120,addScalarInArrayInPlace,runs,"[('float *', 'in'), ('float *', 'add'), ('float', 'scale'), ('int', 'size')]"
866,121,addScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'add'), ('int', 'size')]"
866,122,minusScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'minus'), ('int', 'size')]"
866,123,multScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'mult'), ('int', 'size')]"
866,124,divScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'div'), ('int', 'size')]"
866,125,elementwise_1D_1D_mul,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,126,elementwise_1D_1D_mul_mutate,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,127,elementwise_1D_1D_add,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,128,elementwise_1D_1D_minus,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,129,elementwise_1D_1D_div,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,130,elementwise_1D_1D_exp,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,131,elementwise_1D_1D_log,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,132,elementwise_1D_1D_sqrt,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,133,elementwise_1D_1D_square,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,134,elementwise_1D_1D_exp_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,135,elementwise_1D_1D_log_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,136,elementwise_1D_1D_sqrt_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,137,elementwise_1D_1D_square_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,138,clipAt,runs,"[('float *', 'in'), ('float', 'bound'), ('int', 'size')]"
866,139,mask4D,runs,"[('float *', 'in'), ('int *', 'mask'), ('int', 'xstrides0'), ('int', 'xstrides1'), ('int', 'xstrides2'), ('int', 'xstrides3'), ('int', 'scalarCount')]"
866,140,mul_sub,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
866,141,mul_sub_grad,runs,"[('float *', 'in1_x'), ('float *', 'in1_d'), ('float *', 'in2_x'), ('float *', 'in2_d'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
866,143,arrayFill,runs,"[('float *', 'data'), ('float', 'value'), ('int', 'size')]"
866,144,hardTanh,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size')]"
866,145,hardTanh_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_d'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size'), ('bool', 'inplace')]"
866,146,nllLoss,runs,"[('float *', 'x'), ('int', 'x_stride'), ('float *', 'y'), ('int *', 'target')]"
866,147,nllLoss_grad,runs,"[('int', 'x_stride'), ('float *', 'yGrad'), ('int *', 'target'), ('float *', 'xGrad')]"
866,148,sum_grad,runs,"[('float *', 'in'), ('int', 'inSize0'), ('int', 'inSize1'), ('int', 'inSize2'), ('int', 'inSize3'), ('int', 'nElement'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outStride2'), ('int', 'dim')]"
866,151,repeat0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outScalarCount')]"
866,152,shift0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'inDim0'), ('int', 'inStride0'), ('int', 'inStride1'), ('int', 'inScalarCount')]"
866,153,adagrad_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'clip'), ('float', 'lr'), ('int', 'size')]"
866,154,momentum_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'learning_rate'), ('float', 'momentum'), ('float', 'gradClip'), ('bool', 'nesterov'), ('int', 'size')]"
866,155,addScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'add'), ('int', 'size')]"
866,156,minusScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'minus'), ('int', 'size')]"
866,157,multScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'mult'), ('int', 'size')]"
866,158,divScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'div'), ('int', 'size')]"
866,159,elementwise_1D_1D_mul,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,160,elementwise_1D_1D_mul_mutate,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,161,elementwise_1D_1D_add,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,162,elementwise_1D_1D_minus,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,163,elementwise_1D_1D_div,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,164,elementwise_1D_1D_exp,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,165,elementwise_1D_1D_log,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,166,elementwise_1D_1D_sqrt,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,167,elementwise_1D_1D_square,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,168,elementwise_1D_1D_exp_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,169,elementwise_1D_1D_log_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,170,elementwise_1D_1D_sqrt_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,171,elementwise_1D_1D_square_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,172,clipAt,runs,"[('float *', 'in'), ('float', 'bound'), ('int', 'size')]"
866,173,mask4D,runs,"[('float *', 'in'), ('int *', 'mask'), ('int', 'xstrides0'), ('int', 'xstrides1'), ('int', 'xstrides2'), ('int', 'xstrides3'), ('int', 'scalarCount')]"
866,174,mul_sub,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
866,175,mul_sub_grad,runs,"[('float *', 'in1_x'), ('float *', 'in1_d'), ('float *', 'in2_x'), ('float *', 'in2_d'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
866,178,arrayFill,runs,"[('float *', 'data'), ('float', 'value'), ('int', 'size')]"
866,179,hardTanh,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size')]"
866,180,hardTanh_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_d'), ('float', 'min_val'), ('float', 'max_val'), ('int', 'size'), ('bool', 'inplace')]"
866,181,nllLoss,runs,"[('float *', 'x'), ('int', 'x_stride'), ('float *', 'y'), ('int *', 'target')]"
866,182,nllLoss_grad,runs,"[('int', 'x_stride'), ('float *', 'yGrad'), ('int *', 'target'), ('float *', 'xGrad')]"
866,183,sum_grad,runs,"[('float *', 'in'), ('int', 'inSize0'), ('int', 'inSize1'), ('int', 'inSize2'), ('int', 'inSize3'), ('int', 'nElement'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outStride2'), ('int', 'dim')]"
866,186,repeat0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'outStride0'), ('int', 'outStride1'), ('int', 'outScalarCount')]"
866,187,shift0,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'inDim0'), ('int', 'inStride0'), ('int', 'inStride1'), ('int', 'inScalarCount')]"
866,188,adagrad_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'clip'), ('float', 'lr'), ('int', 'size')]"
866,189,momentum_update_1D_1D,runs,"[('float *', 'x'), ('float *', 'd'), ('float *', 'm'), ('float', 'learning_rate'), ('float', 'momentum'), ('float', 'gradClip'), ('bool', 'nesterov'), ('int', 'size')]"
866,190,addScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'add'), ('int', 'size')]"
866,191,minusScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'minus'), ('int', 'size')]"
866,192,multScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'mult'), ('int', 'size')]"
866,193,divScalar,runs,"[('float *', 'in'), ('float *', 'out'), ('float', 'div'), ('int', 'size')]"
866,194,elementwise_1D_1D_mul,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,195,elementwise_1D_1D_mul_mutate,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,196,elementwise_1D_1D_add,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,197,elementwise_1D_1D_minus,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,198,elementwise_1D_1D_div,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'size')]"
866,199,elementwise_1D_1D_exp,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,200,elementwise_1D_1D_log,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,201,elementwise_1D_1D_sqrt,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,202,elementwise_1D_1D_square,runs,"[('float *', 'in'), ('float *', 'out'), ('int', 'size')]"
866,203,elementwise_1D_1D_exp_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,204,elementwise_1D_1D_log_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,205,elementwise_1D_1D_sqrt_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,206,elementwise_1D_1D_square_grad,runs,"[('float *', 'in_x'), ('float *', 'in_d'), ('float *', 'out_x'), ('float *', 'out_d'), ('int', 'size')]"
866,207,clipAt,runs,"[('float *', 'in'), ('float', 'bound'), ('int', 'size')]"
866,208,mask4D,runs,"[('float *', 'in'), ('int *', 'mask'), ('int', 'xstrides0'), ('int', 'xstrides1'), ('int', 'xstrides2'), ('int', 'xstrides3'), ('int', 'scalarCount')]"
866,209,mul_sub,runs,"[('float *', 'in1'), ('float *', 'in2'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
866,210,mul_sub_grad,runs,"[('float *', 'in1_x'), ('float *', 'in1_d'), ('float *', 'in2_x'), ('float *', 'in2_d'), ('float *', 'out'), ('int', 'in1ScalarCount'), ('int', 'in2ScalarCount')]"
8660,1,vecAddKernel,runs,"[('double *', 'A'), ('double *', 'B'), ('double *', 'C'), ('int', 'n')]"
8660,3,pictureKernel,runs,"[('float *', 'd_pix'), ('int', 'X'), ('int', 'Y')]"
8660,5,matmulKernel,runs,"[('float *', 'mat1'), ('float *', 'mat2'), ('float *', 'matP'), ('int', 'dim')]"
8660,6,shift_cypher,runs,"[('unsigned int *', 'input_array'), ('unsigned int *', 'output_array'), ('unsigned int', 'shift_amount'), ('unsigned int', 'alphabet_max'), ('unsigned int', 'array_length')]"
8660,7,force_eval,runs,"[('float4 *', 'set_A'), ('float4 *', 'set_B'), ('int *', 'indices'), ('float4 *', 'force_vectors'), ('int', 'array_length')]"
8660,23,adjacent_difference_simple,runs,"[('int *', 'result'), ('int *', 'input')]"
8660,25,inclusive_scan,runs,"[('const unsigned int *', 'input'), ('unsigned int *', 'result')]"
8661,2,childKernel,runs,[]
8661,5,vecAdd,runs,"[('int *', 'xd'), ('float *', 'Ag'), ('float *', 'Bg'), ('float *', 'Cg')]"
8661,6,matAdd,runs,"[('int *', 'yd'), ('float *', 'Ag'), ('float *', 'Bg'), ('float *', 'Cg')]"
8661,8,ptrBp,runs,"[('int *', 'daG'), ('int *', 'dbG'), ('double *', 'ABg'), ('double *', 'Ag')]"
8664,167,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8664,294,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8664,299,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8666,51,sync_deconv_groups,runs,[]
8666,75,sync_conv_groups,runs,[]
8667,0,bilinearSamplingFromGrid,runs,"[('float *', 'inputImages_data'), ('int', 'inputImages_strideBatch'), ('int', 'inputImages_strideChannels'), ('int', 'inputImages_strideHeight'), ('int', 'inputImages_strideWidth'), ('float *', 'grids_data'), ('int', 'grids_strideBatch'), ('int', 'grids_strideYX'), ('int', 'grids_strideHeight'), ('int', 'grids_strideWidth'), ('float *', 'output_data'), ('int', 'output_strideBatch'), ('int', 'output_strideChannels'), ('int', 'output_strideHeight'), ('int', 'output_strideWidth'), ('int', 'inputImages_channels'), ('int', 'inputImages_height'), ('int', 'inputImages_width'), ('int', 'output_width')]"
8669,0,matrix_mul,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'a_ncolumns'), ('int', 'c_nlines'), ('int', 'c_ncolumns')]"
867,1,smoothcell,runs,"[('float *', 'in'), ('float *', 'out')]"
867,2,smooth,runs,"[('float *', 'in'), ('float *', 'out')]"
867,3,countblock,runs,"[('float *', 'in'), ('float *', 'out')]"
867,4,normalizeL2Hys,runs,"[('float *', 'in'), ('float *', 'out')]"
867,5,myhistKernel,runs,"[('unsigned char *', 'buffer'), ('unsigned int *', 'histo')]"
8678,0,countQueens,runs,"[('int *', 'frontQueensPos'), ('int *', 'data'), ('int *', 'numFQP')]"
8678,1,countQueens,runs,"[('int *', 'frontQueensPos'), ('int *', 'data'), ('int *', 'numFQP')]"
8678,2,countQueens,runs,"[('int *', 'frontQueensPos'), ('int *', 'data'), ('int *', 'numFQP')]"
8681,21,sync_deconv_groups,runs,[]
8681,37,sync_conv_groups,runs,[]
8685,0,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('double', 'drift'), ('int', 'numSims'), ('double', 'lowerThreshold'), ('double', 'upperThreshold'), ('double', 'deviceID')]"
8685,1,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('double', 'drift'), ('int', 'numSims'), ('double', 'lowerThreshold'), ('double', 'upperThreshold'), ('int', 'deviceID')]"
8685,2,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('int', 'numSims'), ('double', 'lowerThreshold'), ('double', 'upperThreshold'), ('int *', 'dev_failCross'), ('double', 'seconds')]"
8685,4,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('int', 'numSims')]"
8685,5,getCrossingTimes,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'N'), ('int', 'numSims'), ('int', 'lowerThreshold'), ('int', 'upperThreshold')]"
8685,6,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('double', 'T'), ('int', 'N'), ('int', 'numSims'), ('double', 'lowerThreshold'), ('double', 'upperThreshold'), ('int *', 'dev_failCross'), ('double', 'seconds')]"
8685,7,randomWalk,runs,"[('double *', 'results'), ('int', 'T'), ('int', 'N')]"
8685,8,randomWalk,runs,"[('double *', 'results'), ('int', 'T'), ('int', 'N')]"
8685,9,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('int', 'numSims'), ('double', 'upperThreshold'), ('double', 'deviceID')]"
8685,10,randomWalk,runs,"[('double *', 'results'), ('int *', 'crossTimes'), ('int', 'T'), ('int', 'N'), ('int', 'numSims'), ('double', 'upperThreshold'), ('double', 'deviceID')]"
8685,11,changeValues,runs,"[('float *', 'matrix'), ('int', 'size')]"
8685,12,updateState,runs,"[('float *', 'B'), ('float *', 'external'), ('int', 'dim'), ('float', 'timestep'), ('int', 'length'), ('float', 'L'), ('float', 'M')]"
8685,13,changeValues,runs,"[('float *', 'matrix'), ('int', 'size')]"
8685,14,updateState,runs,"[('float *', 'B'), ('float *', 'external'), ('int', 'dim'), ('float', 'timestep'), ('float', 'noise'), ('int', 'length'), ('int', 'totalIterations'), ('int', 'iterationNum'), ('float', 'L'), ('float', 'M')]"
8685,15,changeValues,runs,"[('double *', 'matrix'), ('int', 'size')]"
8685,16,updateState,runs,"[('double *', 'B'), ('double *', 'external'), ('double *', 'lamBeta'), ('int', 'dim'), ('float', 'timestep'), ('double', 'noise'), ('int', 'length'), ('int', 'totalIterations'), ('int', 'iterationNum')]"
8685,17,squeeze,runs,"[('float *', 'B'), ('int', 'dim'), ('int', 'length'), ('float', 'L'), ('float', 'M')]"
8685,18,changeValues,runs,"[('float *', 'matrix'), ('int', 'size')]"
8685,19,squeeze,runs,"[('float *', 'B'), ('int', 'dim'), ('int', 'length'), ('float', 'L'), ('float', 'M')]"
8685,20,changeValues,runs,"[('float *', 'matrix'), ('int', 'size')]"
8685,21,squeeze,runs,"[('float *', 'B'), ('int', 'dim'), ('int', 'length'), ('float', 'L'), ('float', 'M')]"
869,0,checkIndex,runs,[]
869,1,printThreadIndex,runs,"[('int *', 'A'), ('const int', 'nx'), ('const int', 'ny')]"
869,2,helloFromGPU,runs,[]
869,3,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
869,4,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
869,5,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
869,6,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
869,7,sumMatrixOnGPU2D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
869,8,sumMatrixOnGPU1D,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
869,9,sumArraysOnGPU,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('const int', 'N')]"
869,10,sumMatrixOnGPUMix,runs,"[('float *', 'MatA'), ('float *', 'MatB'), ('float *', 'MatC'), ('int', 'nx'), ('int', 'ny')]"
869,11,warmup,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
869,12,copyRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
869,13,copyCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
869,14,transposeNaiveRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
869,15,transposeNaiveCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
869,16,transposeUnroll4Row,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
869,17,transposeUnroll4Col,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
869,18,transposeDiagonalRow,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
869,19,transposeDiagonalCol,runs,"[('float *', 'out'), ('float *', 'in'), ('const int', 'nx'), ('const int', 'ny')]"
869,22,add,runs,"[('int *', 'c'), ('int *', 'd')]"
869,29,add,runs,"[('float *', 'd_A'), ('float *', 'd_B'), ('float *', 'd_C'), ('int', 'widthA'), ('int', 'widthB'), ('int', 'widthC')]"
8697,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8697,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8699,52,resetParticlesKernel,runs,"[('float3 *', 'pos'), ('float3 *', 'vel'), ('float *', 'age'), ('float *', 'life'), ('char *', 'opafix'), ('int', 'nParts')]"
87,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
87,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
87,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
87,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
87,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
87,15,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
87,26,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
87,27,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
87,28,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
87,29,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
87,30,hello,runs,[]
87,34,hello,runs,[]
870,0,custom_kernel,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('float *', 'd'), ('int', 'N')]"
8708,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
8708,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
8708,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
8708,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
8708,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
8708,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
8708,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
8710,204,cuda_debug_kernel,runs,[]
8711,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
8711,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
8718,60,sync_deconv_groups,runs,[]
8718,61,sync_conv_groups,runs,[]
8719,0,pw_copy_rc_cu_z,runs,"[('const double *', 'din'), ('double *', 'zout'), ('const int', 'n')]"
8719,1,pw_copy_cr_cu_z,runs,"[('const double *', 'zin'), ('double *', 'dout'), ('const int', 'n')]"
8719,2,pw_gather_cu_z,runs,"[('double *', 'pwcc'), ('const double *', 'c'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int *', 'ghatmap')]"
8719,3,pw_scatter_cu_z,runs,"[('double *', 'c'), ('const double *', 'pwcc'), ('const double', 'scale'), ('const int', 'ngpts'), ('const int', 'nmaps'), ('const int *', 'ghatmap')]"
8726,0,kernel_compute_gen_singleblock_1,runs,"[('uint8_t *', 'matrix_src'), ('uint8_t *', 'matrix_dst'), ('uint32_t', 'dim_m1'), ('uint32_t', 'cols'), ('uint32_t', 'iterations')]"
8726,1,kernel_compute_gen_singleblock,runs,"[('uint8_t *', 'matrix_src'), ('uint8_t *', 'matrix_dst'), ('uint32_t', 'dim_m1'), ('uint32_t', 'cols'), ('uint32_t', 'iterations'), ('uint32_t', 'cellPerThreads')]"
8726,2,kernel_compute_gen_multiblocks,runs,"[('uint8_t *', 'matrix_src'), ('uint8_t *', 'matrix_dst'), ('uint32_t', 'dim_m1'), ('uint32_t', 'cols')]"
8726,4,kernel_compute_gen_shared,runs,"[('uint8_t *', 'matrix_src'), ('uint8_t *', 'matrix_dst'), ('uint32_t', 'dim_m1'), ('uint32_t', 'cols')]"
8726,5,kernel_compute_gen_last_shared,runs,"[('uint8_t *', 'matrix_src'), ('uint8_t *', 'matrix_dst'), ('uint32_t', 'rows'), ('uint32_t', 'cols')]"
873,1,blockReduction,runs,"[('double *', 'dN_pTdpTdphidy_d'), ('int', 'final_spectrum_size'), ('int', 'blocks_ker1')]"
8731,1,VecAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'N')]"
8731,4,square,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
8731,5,addForces_k,runs,"[('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('int', 'spx'), ('int', 'spy'), ('float', 'fx'), ('float', 'fy'), ('int', 'r'), ('size_t', 'pitch')]"
8731,7,diffuseProject_k,runs,"[('float2 *', 'vx'), ('float2 *', 'vy'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('float', 'visc'), ('int', 'lb')]"
8731,8,updateVelocity_k,runs,"[('float2 *', 'v'), ('float *', 'vx'), ('float *', 'vy'), ('int', 'dx'), ('int', 'pdx'), ('int', 'dy'), ('int', 'lb'), ('size_t', 'pitch')]"
8731,10,advectParticles_OGL,runs,"[('float2 *', 'part'), ('float2 *', 'v'), ('int', 'dx'), ('int', 'dy'), ('float', 'dt'), ('int', 'lb'), ('size_t', 'pitch')]"
8731,11,init_array,runs,"[('int *', 'g_data'), ('int *', 'factor'), ('int', 'num_iterations')]"
8735,0,MC_test,runs,"[('unsigned int', 'seed'), ('curandState *', 'states'), ('unsigned int', 'numsim'), ('unsigned int *', 'results')]"
8737,31,sync_conv_groups,runs,[]
8741,1,calcPixelVal,runs,"[('float *', 'g_idata'), ('float *', 'constant'), ('float *', 'min')]"
8742,0,kernel_compute_gen_singleblock_1,runs,"[('uint8_t *', 'matrix_src'), ('uint8_t *', 'matrix_dst'), ('uint32_t', 'dim_m1'), ('uint32_t', 'cols'), ('uint32_t', 'iterations')]"
8742,1,kernel_compute_gen_singleblock,runs,"[('uint8_t *', 'matrix_src'), ('uint8_t *', 'matrix_dst'), ('uint32_t', 'dim_m1'), ('uint32_t', 'cols'), ('uint32_t', 'iterations'), ('uint32_t', 'cellPerThreads')]"
8742,2,kernel_compute_gen_multiblocks,runs,"[('uint8_t *', 'matrix_src'), ('uint8_t *', 'matrix_dst'), ('uint32_t', 'dim_m1'), ('uint32_t', 'cols')]"
8742,4,kernel_compute_gen_shared,runs,"[('uint8_t *', 'matrix_src'), ('uint8_t *', 'matrix_dst'), ('uint32_t', 'dim_m1'), ('uint32_t', 'cols')]"
8742,5,kernel_compute_gen_last_shared,runs,"[('uint8_t *', 'matrix_src'), ('uint8_t *', 'matrix_dst'), ('uint32_t', 'rows'), ('uint32_t', 'cols')]"
8745,10,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8745,69,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8745,70,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8745,71,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8745,76,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8745,171,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8745,176,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8747,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
8747,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
8747,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
8747,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
8747,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
8756,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
877,1,SimpleClone,runs,"[('const float *', 'background'), ('const float *', 'target'), ('const float *', 'mask'), ('float *', 'output'), ('const int', 'wb'), ('const int', 'hb'), ('const int', 'wt'), ('const int', 'ht'), ('const int', 'oy'), ('const int', 'ox')]"
8774,21,sync_deconv_groups,runs,[]
8774,37,sync_conv_groups,runs,[]
8783,0,bilateralNaiveGpuKernel,runs,"[('float *', 'inputImage'), ('float *', 'outputImage'), ('int', 'rows'), ('int', 'cols'), ('uint32_t', 'window'), ('float', 'sigmaD'), ('float', 'sigmaR')]"
8783,1,bilateralOptimizedGpuColsKernel,runs,"[('float *', 'inputImage'), ('float *', 'outputImage'), ('int', 'rows'), ('int', 'cols'), ('uint32_t', 'window'), ('float', 'sigmaD'), ('float', 'sigmaR')]"
8783,2,bilateralOptimizedGpuRowsKernel,runs,"[('float *', 'inputImage'), ('float *', 'outputImage'), ('int', 'rows'), ('int', 'cols'), ('uint32_t', 'window'), ('float', 'sigmaD'), ('float', 'sigmaR')]"
8789,0,binarize_filters_kernel,runs,"[('float *', 'filters'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
8789,1,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
8789,2,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
8789,3,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
8789,4,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
8789,5,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
8789,6,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
8789,7,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
8789,8,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
8789,9,im2col_pad_kernel,runs,"[('float *', 'im'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'ksize'), ('int', 'stride'), ('float *', 'data_col')]"
8789,10,im2col_nopad_kernel,runs,"[('float *', 'im'), ('int', 'channels'), ('int', 'height'), ('int', 'width'), ('int', 'ksize'), ('int', 'stride'), ('float *', 'data_col')]"
8789,11,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
8789,12,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
8789,13,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
8789,14,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
8789,15,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
8789,16,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
8789,17,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
8789,18,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
8789,19,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
8789,20,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
8789,21,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
8789,22,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
8789,23,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
8789,24,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
8789,25,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
8789,26,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
8789,27,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
8789,28,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
8789,29,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
8789,30,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
8789,31,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
8789,32,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
8789,33,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
8789,35,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
8789,36,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
8789,37,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
8789,38,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
8789,39,forward_softmax_layer_kernel,runs,"[('int', 'n'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
879,0,calculate,runs,"[('int *', 'arr_in'), ('int *', 'arr_out'), ('int', 'sz'), ('int', 'option')]"
879,1,multMatrix,runs,"[('int *', 'd1_in'), ('int *', 'd2_in'), ('int *', 'd_out'), ('int', 'n'), ('int', 'm'), ('int', 'k')]"
879,2,multVector,runs,"[('int *', 'd1_in'), ('int *', 'd2_in'), ('int *', 'd_out'), ('int', 'n'), ('int', 'm')]"
879,3,addVector,runs,"[('int *', 'd1_in'), ('int *', 'd2_in'), ('int *', 'd_out'), ('int', 'n')]"
8798,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8798,227,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8798,228,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8798,229,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8798,234,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8798,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8798,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
88,11,out_of_bounds_kernel,runs,[]
88,14,func,runs,"[('char *', 'stringInput'), ('int', 'stringSize'), ('int *', 'integerInput'), ('char *', 'dummySpace')]"
880,9,prefix_sum_reduce,runs,"[('uint *', 'dev_main_array'), ('uint *', 'dev_auxiliary_array'), ('const uint', 'array_size')]"
880,13,prefix_sum_scan,runs,"[('uint *', 'dev_main_array'), ('uint *', 'dev_auxiliary_array'), ('const uint', 'array_size')]"
8809,16,kAdd_contiguous,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'dest'), ('unsigned int', 'numEls')]"
8818,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b'), ('int', 'size')]"
8818,1,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
8831,6,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
8839,1,sqr_norm_kernel,runs,"[('int', 'n'), ('float *', 'out'), ('float *', 'data'), ('float', 'rows'), ('float', 'cols')]"
8839,2,sqr_mag_kernel,runs,"[('float *', 'data'), ('float *', 'result')]"
8839,3,conj_kernel,runs,"[('float *', 'data'), ('float *', 'result')]"
8839,4,same_num_channels_mul_kernel,runs,"[('float *', 'data_l'), ('float *', 'data_r'), ('float *', 'result')]"
8839,5,same_num_channels_div_kernel,runs,"[('float *', 'data_l'), ('float *', 'data_r'), ('float *', 'result')]"
8839,6,same_num_channels_add_kernel,runs,"[('float *', 'data_l'), ('float *', 'data_r'), ('float *', 'result')]"
8839,7,constant_mul_kernel,runs,"[('float *', 'data_l'), ('float', 'constant'), ('float *', 'result')]"
8839,8,constant_add_kernel,runs,"[('float *', 'data_l'), ('float', 'constant'), ('float *', 'result')]"
8839,9,one_channel_mul_kernel,runs,"[('float *', 'data_l'), ('float *', 'data_r'), ('float *', 'result')]"
8839,10,scales_channel_mul_kernel,runs,"[('float *', 'data_l'), ('float *', 'data_r'), ('float *', 'result')]"
8841,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8841,227,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8841,228,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8841,229,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8841,234,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8841,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8841,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8847,219,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8847,220,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8847,221,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8847,226,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8847,336,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8847,344,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8850,20,sd_t_s1_1_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x'), ('double *', 't3d')]"
8850,21,sd_t_s1_2_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x'), ('double *', 't3d')]"
8850,22,sd_t_s1_4_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8850,23,sd_t_s1_5_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8850,24,sd_t_s1_6_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8850,25,sd_t_s1_7_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8850,26,sd_t_s1_8_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8850,28,sd_t_s1_1_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x'), ('double *', 't3d')]"
8850,29,sd_t_s1_2_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x'), ('double *', 't3d')]"
8850,30,sd_t_s1_4_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8850,31,sd_t_s1_5_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8850,32,sd_t_s1_6_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8850,33,sd_t_s1_7_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8850,34,sd_t_s1_8_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8851,10,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8851,112,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8851,116,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8852,36,sync_conv_groups,runs,[]
8852,37,Conadd,runs,[]
8853,0,gpu_matrix_mul,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
8855,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
8862,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8862,293,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8862,298,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8866,0,nodiag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'n'), ('int', 'i')]"
8866,1,diag_normalize,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'n'), ('int', 'i')]"
8866,2,gaussjordan,runs,"[('double *', 'A'), ('double *', 'I'), ('int', 'n'), ('int', 'i')]"
8866,3,set_zero,runs,"[('double *', 'A'), ('int', 'n'), ('int', 'i')]"
8869,4,gpuIt,runs,"[('float *', 'tNew'), ('float *', 'tOld'), ('float *', 'tOrig'), ('int', 'x'), ('int', 'y'), ('int', 'z'), ('float', 'k'), ('float', 'st')]"
8869,5,gpuIt3,runs,"[('float *', 'tNew'), ('float *', 'tOld'), ('float *', 'tOrig'), ('int', 'x'), ('int', 'y'), ('int', 'z'), ('float', 'k'), ('float', 'st')]"
8873,0,cacheMatmul,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
8873,1,sharedMatmul,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
8873,2,optimalTransposeKernel,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'n')]"
8874,5,Passthru,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('uint32_t *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8874,6,NV12ToARGB,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('uint32_t *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8874,7,NV12ToRGBAf,runs,"[('uint32_t *', 'srcImage'), ('size_t', 'nSourcePitch'), ('float4 *', 'dstImage'), ('size_t', 'nDestPitch'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8874,11,RGBToRGBAf,runs,"[('uchar3 *', 'srcImage'), ('float4 *', 'dstImage'), ('uint32_t', 'width'), ('uint32_t', 'height')]"
8886,86,kernel,runs,"[('float *', 'a'), ('size_t', 'N')]"
8886,89,update_inverse_cuda,runs,"[('float *', 'Ainv'), ('float *', 'u'), ('int', 'N'), ('int', 'rowstride'), ('int', 'k')]"
889,0,gpu_grayscale,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'image'), ('float *', 'image_out')]"
889,1,gpu_gaussian,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'image'), ('float *', 'image_out')]"
889,2,gpu_sobel,runs,"[('int', 'width'), ('int', 'height'), ('float *', 'image'), ('float *', 'image_out')]"
889,3,gpu_helloworld,runs,[]
8897,20,sd_t_s1_1_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x'), ('double *', 't3d')]"
8897,21,sd_t_s1_2_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x'), ('double *', 't3d')]"
8897,22,sd_t_s1_4_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p5d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'p5ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p5ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x')]"
8897,23,sd_t_s1_5_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p5d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'p5ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p5ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x')]"
8897,24,sd_t_s1_6_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p5d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'p5ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p5ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x')]"
8897,25,sd_t_s1_7_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x')]"
8897,26,sd_t_s1_8_kernel,runs,"[('size_t', 'h1d'), ('size_t', 'h2d'), ('size_t', 'h3d'), ('size_t', 'p4d'), ('size_t', 'p6d'), ('size_t', 'p4ld_t2'), ('size_t', 'h1ld_t2'), ('size_t', 'h3ld_v2'), ('size_t', 'h2ld_v2'), ('size_t', 'p6ld_v2'), ('size_t', 'h3ld_t3'), ('size_t', 'h2ld_t3'), ('size_t', 'h1ld_t3'), ('size_t', 'p6ld_t3'), ('size_t', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('size_t', 'p4'), ('size_t', 'total_x')]"
8897,28,sd_t_s1_1_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x'), ('double *', 't3d')]"
8897,29,sd_t_s1_2_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x'), ('double *', 't3d')]"
8897,30,sd_t_s1_4_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8897,31,sd_t_s1_5_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8897,32,sd_t_s1_6_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p5d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'p5ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p5ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8897,33,sd_t_s1_7_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8897,34,sd_t_s1_8_kernel,runs,"[('int', 'h1d'), ('int', 'h2d'), ('int', 'h3d'), ('int', 'p4d'), ('int', 'p6d'), ('int', 'p4ld_t2'), ('int', 'h1ld_t2'), ('int', 'h3ld_v2'), ('int', 'h2ld_v2'), ('int', 'p6ld_v2'), ('int', 'h3ld_t3'), ('int', 'h2ld_t3'), ('int', 'h1ld_t3'), ('int', 'p6ld_t3'), ('int', 'p4ld_t3'), ('double *', 't3d'), ('double *', 't2_d'), ('double *', 'v2_d'), ('int', 'p4'), ('int', 'total_x')]"
8898,0,Vector_Addition,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
89,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
890,20,fillArray,runs,"[('int8_t *', 'dest'), ('int', 'loop')]"
890,21,PowerInterleaved,runs,"[('float4 *', 'src'), ('float4 *', 'dest')]"
890,23,Accumulate,runs,"[('float4 *', 'src'), ('float4 *', 'dest'), ('int', 'loop')]"
890,25,unpack8bits_kernel,runs,"[('float *', 'rcp'), ('float *', 'lcp'), ('const int8_t *', 'src')]"
890,26,warmup,runs,"[('float *', 'input'), ('float *', 'output')]"
890,27,pfbFilter,runs,"[('float *', 'filtered'), ('float *', 'unfiltered'), ('float *', 'taps'), ('const int', 'ntaps')]"
890,28,pfbFilter4,runs,"[('float *', 'filtered'), ('float *', 'unfiltered'), ('float *', 'taps'), ('const int', 'ntaps')]"
890,31,pfbFilterShared,runs,"[('float *', 'filtered'), ('float *', 'unfiltered'), ('float *', 'taps'), ('const int', 'ntaps')]"
890,33,calculateDelaysAndPhases,runs,"[('double *', 'gpuDelays'), ('double', 'lo'), ('double', 'sampletime'), ('int', 'fftsamples'), ('int', 'fftchannels'), ('int', 'samplegranularity'), ('float *', 'rotationPhaseInfo'), ('int *', 'sampleShifts'), ('float *', 'fractionalSampleDelays')]"
8906,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
8906,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
8907,0,reciprocalKernel,runs,"[('float *', 'data'), ('unsigned', 'vectorSize')]"
8919,0,reduceKernel,runs,"[('int *', 'g_inData'), ('int *', 'g_outData'), ('int', 'inSize'), ('int', 'outSize')]"
8919,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
8919,2,matrixMulCUDA,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'n')]"
8919,3,matrixMulCUDA2,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'n')]"
8919,4,matrixMulCUDA3,runs,"[('float *', 'C'), ('float *', 'B'), ('float *', 'A'), ('int', 'n')]"
8919,5,matrixMulCUDA4,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('unsigned int', 'n')]"
8919,6,matrixMulCUDA5,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('unsigned int', 'n')]"
8919,7,matrixMulCUDA,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'n')]"
8919,8,matrixMulCUDA,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'n')]"
8919,9,matrixMulCUDA2,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'n')]"
8919,10,matrixMulCUDA3,runs,"[('float *', 'C'), ('float *', 'B'), ('float *', 'A'), ('int', 'n')]"
8919,11,matrixMulCUDA2,runs,"[('float *', 'C'), ('float *', 'A'), ('float *', 'B'), ('int', 'n')]"
892,0,kernel_add,runs,"[('const float *', 'x'), ('const float *', 'y'), ('const int', 'N'), ('float *', 'out')]"
8925,0,runConvolutionGPU,runs,"[('double *', 'image'), ('double *', 'result'), ('int', 'height'), ('int', 'width'), ('int', 'step')]"
8925,4,meanMatrix,runs,"[('double *', 'dMatrix'), ('double *', 'dMean'), ('int', 'dSize'), ('int *', 'd_mutex')]"
8925,5,find_maximum,runs,"[('double *', 'array'), ('double *', 'max'), ('int', 'dSize'), ('int *', 'd_mutex')]"
8925,6,applyNormSum,runs,"[('double *', 'dMap'), ('double *', 'dSupFeature'), ('double *', 'dMaxSupFeature'), ('double *', 'dMeanSupFeature'), ('double *', 'dInfFeature'), ('double *', 'dMaxInfFeature'), ('double *', 'dMeanInfFeature'), ('int', 'dSize')]"
8925,7,absDifference,runs,"[('double *', 'dDifference'), ('double *', 'dSup'), ('double *', 'dLow'), ('int', 'dSize')]"
8925,8,sum3,runs,"[('double *', 'd_result'), ('double *', 'd_a'), ('double *', 'd_b'), ('double *', 'd_c'), ('int', 'dSize')]"
8925,9,divScalarMatrix,runs,"[('double *', 'dMatrix'), ('double *', 'dScalar'), ('int', 'dSize')]"
8925,10,kernelInterpolationRow,runs,"[('double *', 'original'), ('double *', 'result'), ('int', 'rows'), ('int', 'cols'), ('int', 'factor')]"
8925,11,kernelInterpolationCol,runs,"[('double *', 'result'), ('int', 'rows'), ('int', 'cols'), ('int', 'factor')]"
8929,0,initTempNodeArray,runs,"[('const int', 'hitNum'), ('const int', 'allowableGap'), ('int *', 'tempNodeArray_score'), ('int *', 'tempNodeArray_vertical'), ('int *', 'tempNodeArray_horizontal'), ('int *', 'tempNodeArray_matchNum')]"
8929,5,writeSeedList,runs,"[('const int', 'idxLimit'), ('const int *', 'gatewayIndexArray'), ('const int *', 'indexArray'), ('const int *', 'seedWriteIndexArray'), ('const int *', 'cellSizeArray'), ('const int *', 'tIDArray'), ('const int *', 'tIndexArray'), ('const int *', 'qIDArray'), ('const int *', 'qIndexArray'), ('int *', 'target_IDArray'), ('int *', 'target_indexArray'), ('int *', 'query_IDArray'), ('int *', 'query_indexArray')]"
8929,6,calculateEvalue,runs,"[('const int', 'q_begin'), ('const int', 'matchSize'), ('const double', 'totalDatabaseSize'), ('const double', 'K'), ('const double', 'lambda'), ('const int *', 'queryLengthArray'), ('const int *', 'queryIDArray'), ('const int *', 'scoreArray'), ('double *', 'evalueArray')]"
8929,7,binarySearch,runs,"[('const int', 'limit'), ('const int', 'databaseSize'), ('const long *', 'databaseArray'), ('const long *', 'inputArray'), ('int *', 'outputArray')]"
893,0,mykernel,runs,[]
893,1,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c'), ('int', 'n')]"
8946,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
8946,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
8946,3,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
8946,4,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
8946,5,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
8946,6,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
8952,26,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
8952,29,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
8952,30,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
8952,31,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
8957,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8957,225,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8957,226,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8957,227,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8957,232,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8957,348,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8957,353,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
8958,21,sync_deconv_groups,runs,[]
8958,37,sync_conv_groups,runs,[]
8965,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a')]"
8965,1,vector_add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
8966,0,mathKernel,runs,"[('float *', 'output'), ('float *', 'input1'), ('float *', 'input2'), ('int', 'n'), ('int', 'oper')]"
8975,0,bilinearSamplingFromGrid,runs,"[('float *', 'inputImages_data'), ('int', 'inputImages_strideBatch'), ('int', 'inputImages_strideChannels'), ('int', 'inputImages_strideHeight'), ('int', 'inputImages_strideWidth'), ('float *', 'grids_data'), ('int', 'grids_strideBatch'), ('int', 'grids_strideYX'), ('int', 'grids_strideHeight'), ('int', 'grids_strideWidth'), ('float *', 'output_data'), ('int', 'output_strideBatch'), ('int', 'output_strideChannels'), ('int', 'output_strideHeight'), ('int', 'output_strideWidth'), ('int', 'inputImages_channels'), ('int', 'inputImages_height'), ('int', 'inputImages_width'), ('int', 'output_width')]"
8977,1,calc2points,runs,"[('float *', 'point_coordinate_1'), ('float *', 'point_coordinate_2'), ('float *', 'coordinates_arr')]"
8984,229,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8984,230,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8984,231,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8984,236,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8984,342,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8984,350,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
899,0,gpu_calculate_potential_difference,runs,"[('const int', 'size'), ('const int', 'number_of_rounds'), ('const double *', 'potential_per_atom'), ('const double *', 'potential_per_atom_temp'), ('double *', 'potential_difference')]"
899,1,gpu_calculate_force_square_max,runs,"[('const int', 'size'), ('const int', 'number_of_rounds'), ('const double *', 'force_per_atom'), ('double *', 'force_square_max')]"
899,2,update_positions,runs,"[('const int', 'size'), ('const double', 'position_step'), ('const double *', 'force_per_atom'), ('const double *', 'position_per_atom'), ('double *', 'position_per_atom_temp')]"
899,4,gpu_copy_velocity,runs,"[('const int', 'num_atoms'), ('const int', 'offset'), ('const int *', 'g_group_contents'), ('const double *', 'g_vx_i'), ('const double *', 'g_vy_i'), ('const double *', 'g_vz_i'), ('double *', 'g_vx_o'), ('double *', 'g_vy_o'), ('double *', 'g_vz_o')]"
899,5,gpu_copy_velocity,runs,"[('const int', 'num_atoms'), ('const double *', 'g_vx_i'), ('const double *', 'g_vy_i'), ('const double *', 'g_vz_i'), ('double *', 'g_vx_o'), ('double *', 'g_vy_o'), ('double *', 'g_vz_o')]"
899,6,gpu_find_vac,runs,"[('const int', 'num_atoms'), ('const int', 'correlation_step'), ('const double *', 'g_vx'), ('const double *', 'g_vy'), ('const double *', 'g_vz'), ('const double *', 'g_vx_all'), ('const double *', 'g_vy_all'), ('const double *', 'g_vz_all'), ('double *', 'g_vac_x'), ('double *', 'g_vac_y'), ('double *', 'g_vac_z')]"
899,7,gpu_copy_velocity,runs,"[('const int', 'num_atoms'), ('const int', 'offset'), ('const int *', 'g_group_contents'), ('const double *', 'g_vx_i'), ('const double *', 'g_vy_i'), ('const double *', 'g_vz_i'), ('float *', 'g_vx_o'), ('float *', 'g_vy_o'), ('float *', 'g_vz_o')]"
899,8,gpu_copy_velocity,runs,"[('const int', 'num_atoms'), ('const double *', 'g_vx_i'), ('const double *', 'g_vy_i'), ('const double *', 'g_vz_i'), ('float *', 'g_vx_o'), ('float *', 'g_vy_o'), ('float *', 'g_vz_o')]"
899,9,gpu_find_vac,runs,"[('const int', 'num_atoms'), ('const int', 'correlation_step'), ('const int', 'num_correlation_steps'), ('const float *', 'g_vx'), ('const float *', 'g_vy'), ('const float *', 'g_vz'), ('const float *', 'g_vx_all'), ('const float *', 'g_vy_all'), ('const float *', 'g_vz_all'), ('float *', 'g_vac_x'), ('float *', 'g_vac_y'), ('float *', 'g_vac_z')]"
899,10,gpu_find_hac,runs,"[('const int', 'Nc'), ('const int', 'Nd'), ('const double *', 'g_heat'), ('double *', 'g_hac')]"
899,11,gpu_copy_mass,runs,"[('const int', 'num_atoms'), ('const int *', 'g_group_contents'), ('const double *', 'g_mass_i'), ('double *', 'g_mass_o')]"
899,12,gpu_copy_velocity,runs,"[('const int', 'num_atoms'), ('const int *', 'g_group_contents'), ('const double *', 'g_vx_i'), ('const double *', 'g_vy_i'), ('const double *', 'g_vz_i'), ('double *', 'g_vx_o'), ('double *', 'g_vy_o'), ('double *', 'g_vz_o')]"
899,13,gpu_copy_velocity,runs,"[('const int', 'num_atoms'), ('const double *', 'g_vx_i'), ('const double *', 'g_vy_i'), ('const double *', 'g_vz_i'), ('double *', 'g_vx_o'), ('double *', 'g_vy_o'), ('double *', 'g_vz_o')]"
899,14,gpu_find_vac,runs,"[('const int', 'num_atoms'), ('const int', 'correlation_step'), ('const double *', 'g_mass'), ('const double *', 'g_vx'), ('const double *', 'g_vy'), ('const double *', 'g_vz'), ('const double *', 'g_vx_all'), ('const double *', 'g_vy_all'), ('const double *', 'g_vz_all'), ('double *', 'g_vac_x'), ('double *', 'g_vac_y'), ('double *', 'g_vac_z')]"
8990,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
8990,227,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
8990,228,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
8990,229,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
8990,234,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
8990,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
8990,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
90,0,convolution_forward_kernel,runs,"[('float *', 'input'), ('float *', 'filters'), ('float *', 'feature_map'), ('float *', 'hbias'), ('int', 'input_size'), ('int', 'channel_num'), ('int', 'feature_map_size'), ('int', 'filter_size'), ('int', 'filter_num'), ('int', 'lu_padding'), ('float', 'sigma')]"
90,1,max_pooling_kernel,runs,"[('float *', 'feature_map'), ('float *', 'probs'), ('float *', 'target'), ('int', 'feature_map_size'), ('int', 'feature_map_num'), ('int', 'pooling_rate'), ('float *', 'rnd_array'), ('int', 'rnd_num')]"
90,2,convolution_backward_kernel,runs,"[('float *', 'y_h'), ('float *', 'filters'), ('float *', 'vbias'), ('float *', 'target'), ('float *', 'y_v'), ('int', 'input_size'), ('int', 'lu_padding'), ('int', 'channel_num'), ('int', 'feature_map_size'), ('int', 'filter_num'), ('int', 'filter_size'), ('float *', 'rnd_array'), ('int', 'rnd_num')]"
90,3,compute_d_w_kernel,runs,"[('float *', 'v'), ('float *', 'h'), ('float *', 'dw'), ('bool', 'is_init'), ('int', 'input_size'), ('int', 'lu_padding'), ('int', 'channel_num'), ('int', 'filter_num'), ('int', 'filter_size'), ('int', 'feature_map_size')]"
90,4,_init_mat,runs,"[('float *', 'm'), ('float', 'val'), ('int', 'len')]"
90,5,_copy_mat,runs,"[('float *', 'm'), ('float *', 'target'), ('int', 'len')]"
90,6,_ele_scale,runs,"[('float *', 'm'), ('float *', 'target'), ('float', 'scaler'), ('int', 'len')]"
90,7,_ele_add,runs,"[('float *', 'm'), ('float *', 'target'), ('float', 'val'), ('int', 'len')]"
90,8,_mat_add,runs,"[('float *', 'ma'), ('float *', 'mb'), ('float *', 'target'), ('float', 'sa'), ('float', 'sb'), ('int', 'len')]"
90,9,_mat_mul,runs,"[('float *', 'ma'), ('float *', 'mb'), ('float *', 'target'), ('int', 'len')]"
90,10,_mat_sum_row_fast,runs,"[('float *', 'm'), ('float *', 'target'), ('int', 'nrow'), ('int', 'ncol'), ('int', 'agg_col')]"
90,11,_mat_sum_row,runs,"[('float *', 'm'), ('float *', 'target'), ('int', 'nrow'), ('int', 'ncol')]"
90,12,_mat_sum_col,runs,"[('float *', 'm'), ('float *', 'target'), ('int', 'nrow'), ('int', 'ncol')]"
90,13,setup_curand_kernel,runs,"[('curandState *', 'state'), ('int', 'count')]"
9000,11,dev_get_gravity_at_point,runs,"[('float', 'eps2'), ('float *', 'eps'), ('float *', 'xh'), ('float *', 'yh'), ('float *', 'zh'), ('float *', 'xt'), ('float *', 'yt'), ('float *', 'zt'), ('float *', 'ax'), ('float *', 'ay'), ('float *', 'az'), ('int', 'n'), ('float *', 'field_m'), ('float *', 'fxh'), ('float *', 'fyh'), ('float *', 'fzh'), ('float *', 'fxt'), ('float *', 'fyt'), ('float *', 'fzt'), ('int', 'n_field')]"
9000,12,dev_get_potential_at_point,runs,"[('float', 'eps2'), ('float *', 'eps'), ('float *', 'xh'), ('float *', 'yh'), ('float *', 'zh'), ('float *', 'xt'), ('float *', 'yt'), ('float *', 'zt'), ('float *', 'phi'), ('int', 'n'), ('float *', 'field_m'), ('float *', 'fxh'), ('float *', 'fyh'), ('float *', 'fzh'), ('float *', 'fxt'), ('float *', 'fyt'), ('float *', 'fzt'), ('int', 'n_field')]"
9000,13,dev_get_potential_energy,runs,"[('float *', 'partial_results'), ('float', 'eps2'), ('float *', 'field_m'), ('float *', 'fxh'), ('float *', 'fyh'), ('float *', 'fzh'), ('float *', 'fxt'), ('float *', 'fyt'), ('float *', 'fzt'), ('int', 'n_field')]"
9000,18,update_local_time,runs,"[('int *', 'next'), ('double *', 'local_time'), ('double', 'GTIME')]"
9000,19,sum_partial,runs,"[('double4 *', 'a'), ('double4 *', 'b'), ('unsigned int', 'nextsize')]"
9000,20,Corrector_gpu,runs,"[('double', 'GTIME'), ('double *', 'local_time'), ('double *', 'step'), ('int *', 'next'), ('unsigned long', 'nextsize'), ('double4 *', 'pos_CH'), ('double4 *', 'vel_CH'), ('double4 *', 'a_tot_D'), ('double4 *', 'a1_tot_D'), ('double4 *', 'a2_tot_D'), ('double4 *', 'a_H0'), ('double4 *', 'a3_H'), ('double', 'ETA6'), ('double', 'ETA4'), ('double', 'DTMAX'), ('double', 'DTMIN'), ('unsigned int', 'N')]"
9000,21,Reconstruct,runs,"[('int *', 'nex'), ('unsigned long', 'nextsize'), ('double4 *', 'pc'), ('double4 *', 'vc'), ('double4 *', 'a3'), ('double4 *', 'a'), ('double4 *', 'a1'), ('double4 *', 'a2'), ('double4 *', 'pva3'), ('double4 *', 'aaa')]"
9000,22,initvectors,runs,"[('double4 *', 'acc3'), ('float4 *', 'apred')]"
9000,23,Predictor,runs,"[('const double', 'TIME'), ('double4 *', 'p_pred'), ('float4 *', 'v_pred'), ('float4 *', 'a_pred'), ('double4 *', 'p_corr'), ('double4 *', 'v_corr'), ('double *', 'loc_time'), ('double4 *', 'acc'), ('double4 *', 'acc1'), ('double4 *', 'acc2'), ('double4 *', 'acc3'), ('int', 'istart'), ('int *', 'nvec'), ('int', 'ppgpus'), ('unsigned int', 'N')]"
9000,24,reduce,runs,"[('double4 *', 'ac'), ('double4 *', 'ac1'), ('double4 *', 'ac2'), ('unsigned int', 'bf_real'), ('unsigned int', 'dimension')]"
9000,25,reposition,runs,"[('double4 *', 'ac'), ('double4 *', 'ac1'), ('double4 *', 'ac2'), ('double4 *', 'af'), ('unsigned long', 'nextsize')]"
9000,34,compute_potential_gpu,runs,"[('float *', 'm'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('float *', 'phi'), ('int', 'N'), ('int', 'N1')]"
9004,1,cuda_mul,runs,"[('MAT_TYPE *', 'A'), ('MAT_TYPE *', 'B'), ('MAT_TYPE *', 'C'), ('int', 'w')]"
9004,6,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
9004,10,cuda_mul,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'w')]"
9004,11,convert,runs,"[('double *', 'A'), ('double *', 'C')]"
9004,19,manymanyGlobal,runs,"[('int *', 'a'), ('int *', 'b')]"
9019,96,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
9019,97,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
9019,98,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
9019,99,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
9019,170,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
9020,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
9020,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
9034,21,sync_deconv_groups,runs,[]
9034,37,sync_conv_groups,runs,[]
9035,0,calcpi,runs,"[('int', 'threads'), ('long', 'n'), ('double *', 'results')]"
9044,0,cuda_cmp_kernel,runs,"[('std::size_t', 'n'), ('int *', 'aptr'), ('int *', 'bptr'), ('int *', 'rptr')]"
9056,0,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
9056,1,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
9056,2,multi,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'width')]"
9058,2,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
9068,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
9068,2,squareMatrixMulKernel,runs,"[('int *', 'c'), ('int *', 'a'), ('int *', 'b'), ('int', 'arrayWidth')]"
9068,4,squareMatrixMulKernel,runs,"[('int *', 'c'), ('int *', 'a'), ('int *', 'b'), ('int', 'arrayWidth')]"
9078,4,NmDistanceKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz'), ('int', 'm'), ('const float *', 'xyz2'), ('float *', 'result'), ('int *', 'result_i')]"
9078,5,NmDistanceGradKernel,runs,"[('int', 'b'), ('int', 'n'), ('const float *', 'xyz1'), ('int', 'm'), ('const float *', 'xyz2'), ('const float *', 'grad_dist1'), ('const int *', 'idx1'), ('float *', 'grad_xyz1'), ('float *', 'grad_xyz2')]"
9085,0,vec_sum,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
9085,1,kernel,runs,[]
9085,2,add,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
9088,1,cunn_ClassNLLCriterion_updateOutput_kernel,runs,"[('float *', 'output'), ('float *', 'total_weight'), ('float *', 'input'), ('float *', 'target'), ('float *', 'weights'), ('int', 'size_average'), ('int', 'nframe'), ('int', 'ndim'), ('int', 'n_classes')]"
9088,2,cunn_ClassNLLCriterion_updateGradInput_kernel1,runs,"[('float *', 'gradInput'), ('float *', 'weights'), ('float *', 'target'), ('float *', 'total_weight'), ('int', 'size_average'), ('int', 'n_classes')]"
9088,3,cunn_ClassNLLCriterion_updateGradInput_kernel,runs,"[('float *', 'gradInput'), ('float *', 'target'), ('float *', 'weights'), ('float *', 'total_weight'), ('int', 'size_average'), ('int', 'nframe'), ('int', 'ndim'), ('int', 'n_classes')]"
9090,2,kernelHelloWorld,runs,[]
9090,9,reduction,runs,"[('const int', 'N'), ('float *', 'a'), ('float *', 'result')]"
9096,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9096,311,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9100,4,_bcnn_cuda_fill_f32_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
9100,5,_bcnn_vadd_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'y')]"
9100,6,_bcnn_vsub_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'y')]"
9100,7,_bcnn_vmul_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'y')]"
9100,8,_bcnn_vdiv_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'y')]"
9100,9,_bcnn_pow_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'a'), ('float *', 'y')]"
9100,10,_bcnn_add_scalar_kernel,runs,"[('int', 'n'), ('float', 'a'), ('float *', 'y')]"
9100,11,_bcnn_vsum_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'sum')]"
9100,12,_mean_variance_forward_kernel,runs,"[('float *', 'x'), ('int', 'b'), ('int', 'c'), ('int', 'wxh'), ('float *', 'mean'), ('float *', 'var')]"
9100,13,_norm_forward_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'b'), ('int', 'c'), ('int', 'wxh')]"
9100,14,_norm_backward_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('float *', 'var'), ('float *', 'mean_diff'), ('float *', 'var_diff'), ('int', 'b'), ('int', 'c'), ('int', 'wxh'), ('float *', 'grad')]"
9100,15,_mean_variance_backward_kernel,runs,"[('float *', 'x'), ('float *', 'grad'), ('float *', 'mean'), ('float *', 'var'), ('int', 'b'), ('int', 'c'), ('int', 'wxh'), ('float *', 'mean_diff'), ('float *', 'var_diff')]"
9100,16,bcnn_op_cuda_tanh_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
9100,17,bcnn_op_cuda_tanh_grad_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'dx')]"
9100,18,bcnn_op_cuda_relu_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
9100,19,bcnn_op_cuda_relu_grad_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'dx')]"
9100,20,bcnn_op_cuda_ramp_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
9100,21,bcnn_op_cuda_ramp_grad_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'dx')]"
9100,23,bcnn_op_cuda_clamp_grad_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'dx')]"
9100,24,bcnn_cuda_add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'bias'), ('int', 'num_channels'), ('int', 'spatial_size')]"
9100,25,bcnn_cuda_grad_bias_kernel,runs,"[('float *', 'grad_bias'), ('float *', 'grad_data'), ('int', 'num_channels'), ('int', 'spatial_size')]"
9100,26,bcnn_cuda_im2col_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
9100,28,_bcnn_dropout_layer_kernel,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
9100,29,_bcnn_forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
9100,30,_bcnn_backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('float *', 'diff'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
9100,31,_bcnn_forward_softmax_layer_kernel,runs,"[('int', 'n'), ('int', 'batch'), ('float *', 'input'), ('float *', 'output')]"
9100,34,_bcnn_forward_depthwise_sep_conv_weight_kernel,runs,"[('int', 'nthreads'), ('float *', 'src_data'), ('float *', 'weight_data'), ('int', 'channels'), ('int', 'dst_h'), ('int', 'dst_w'), ('int', 'src_h'), ('int', 'src_w'), ('int', 'kernel_sz'), ('int', 'stride'), ('int', 'pad'), ('float *', 'dst_data')]"
9100,36,_bcnn_backward_depthwise_sep_conv_data_kernel,runs,"[('int', 'nthreads'), ('float *', 'dst_grad'), ('float *', 'weight_data'), ('int', 'batch_size'), ('const int', 'channels'), ('int', 'dst_h'), ('int', 'dst_w'), ('const int', 'src_h'), ('const int', 'src_w'), ('int', 'kernel_sz'), ('int', 'stride'), ('int', 'pad'), ('float *', 'src_grad')]"
9103,0,sqr_norm_kernel,runs,"[('const float *', 'in'), ('float *', 'block_res'), ('int', 'total')]"
9103,1,sqr_mag_kernel,runs,"[('const float *', 'data'), ('float *', 'result'), ('int', 'total')]"
9103,2,conj_kernel,runs,"[('const float *', 'data'), ('float *', 'result'), ('int', 'total')]"
9103,3,sum_channels,runs,"[('float *', 'dest'), ('const float *', 'src'), ('uint', 'channels'), ('uint', 'num_channel_elem')]"
9103,4,same_num_channels_mul_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('int', 'total')]"
9103,5,same_num_channels_div_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('unsigned', 'total')]"
9103,6,same_num_channels_add_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('int', 'total')]"
9103,7,constant_mul_kernel,runs,"[('const float *', 'data_l'), ('float', 'constant'), ('float *', 'result'), ('int', 'total')]"
9103,8,constant_add_kernel,runs,"[('const float *', 'data_l'), ('float', 'constant'), ('float *', 'result'), ('int', 'total')]"
9103,9,one_channel_mul_kernel,runs,"[('const float *', 'data_l'), ('const float *', 'data_r'), ('float *', 'result'), ('int', 'channel_total'), ('int', 'total')]"
9109,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9109,227,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
9109,228,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
9109,229,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
9109,234,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
9109,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9109,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
911,0,iota,runs,"[('int const', 'size'), ('int *', 'data'), ('int const', 'value')]"
9112,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9112,301,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9112,306,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9113,0,init,runs,"[('int *', 'arr'), ('int', 'sqroot'), ('int', 'limit')]"
9113,1,init,runs,"[('int *', 'arr'), ('int', 'sqroot'), ('int', 'limit')]"
9113,2,init,runs,"[('int *', 'arr'), ('int', 'sqroot'), ('int', 'limit')]"
9117,0,scale,runs,"[('float *', 'a'), ('int', 'b'), ('int', 'c')]"
9117,2,reduce,runs,"[('float *', 'a'), ('int', 'size'), ('int', 'c')]"
9117,3,scale,runs,"[('float *', 'a'), ('int', 'size'), ('int', 'c')]"
9117,4,reduce,runs,"[('float *', 'a'), ('int', 'size'), ('int', 'c')]"
912,2,imgBlur,runs,"[('float *', 'imgIn'), ('float *', 'imgOut'), ('int', 'imageWidth'), ('int', 'imageHeight')]"
912,3,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'n')]"
912,4,matrixAdd,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'n')]"
912,9,matrix_multiply,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'num'), ('size_t', 'width')]"
912,10,matrixMul,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C'), ('int', 'n')]"
912,11,vecSum,runs,"[('double *', 'devIn'), ('int', 'pow_step'), ('int', 'n')]"
9130,173,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9130,233,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
9130,234,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
9130,235,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
9130,240,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
9130,351,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9130,356,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9133,0,normCalc,runs,"[('float *', 'd_A'), ('float *', 'd_B'), ('int', 'n')]"
9133,1,normCalc,runs,"[('float *', 'd_A'), ('float *', 'd_B'), ('int', 'n')]"
9137,0,BFSLevels,runs,"[('int *', 'vertices'), ('int *', 'edges'), ('int *', 'distances'), ('int *', 'predecessors'), ('int *', 'vertIndices'), ('int *', 'edgeSize'), ('bool *', 'levels'), ('bool *', 'visitedVertices'), ('bool *', 'foundDest'), ('int', 'numVert'), ('int', 'destination')]"
9139,0,vecAdd,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'n')]"
9139,1,vecAdd,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
9139,2,matmul,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
9139,3,matmul,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n')]"
9142,0,rgb2yuv_kernel,runs,"[('int', 'img_size'), ('unsigned char *', 'img_r'), ('unsigned char *', 'img_g'), ('unsigned char *', 'img_b'), ('unsigned char *', 'img_y'), ('unsigned char *', 'img_u'), ('unsigned char *', 'img_v')]"
9142,1,yuv2rgb_kernel,runs,"[('int', 'img_size'), ('unsigned char *', 'img_r'), ('unsigned char *', 'img_g'), ('unsigned char *', 'img_b'), ('unsigned char *', 'img_y'), ('unsigned char *', 'img_u'), ('unsigned char *', 'img_v')]"
9142,2,rgb2hsl_kernel,runs,"[('int', 'img_size'), ('unsigned char *', 'img_r'), ('unsigned char *', 'img_g'), ('unsigned char *', 'img_b'), ('float *', 'img_h'), ('float *', 'img_s'), ('unsigned char *', 'img_l')]"
915,20,prefix_sum_reduce,runs,"[('uint *', 'dev_main_array'), ('uint *', 'dev_auxiliary_array'), ('const uint', 'array_size')]"
915,26,prefix_sum_scan,runs,"[('uint *', 'dev_main_array'), ('uint *', 'dev_auxiliary_array'), ('const uint', 'array_size')]"
9151,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
9151,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
9151,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
9151,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
9151,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
9167,2,getGaussian,runs,"[('double *', 'output'), ('double', 'sigma')]"
9167,8,conv2,runs,[]
9167,10,getDoG,runs,"[('double *', 'output'), ('double', 'sigma'), ('double', 'sigmaratio')]"
9193,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
9193,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
9201,197,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9201,338,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9206,0,process_kernel1,runs,"[('const float *', 'input1'), ('const float *', 'input2'), ('float *', 'output'), ('int', 'numElements')]"
9206,1,process_kernel2,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
9206,2,process_kernel3,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
9206,3,process_kernel1,runs,"[('const float *', 'input1'), ('const float *', 'input2'), ('float *', 'output'), ('int', 'numElements')]"
9206,4,process_kernel2,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
9206,5,process_kernel3,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
9206,6,process_kernel1,runs,"[('const float *', 'input1'), ('const float *', 'input2'), ('float *', 'output'), ('int', 'numElements')]"
9206,7,process_kernel2,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
9206,8,process_kernel3,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
9206,9,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
9206,10,convolution1D,runs,"[('const int *', 'd_arr'), ('const int *', 'd_conv'), ('int *', 'd_result'), ('int', 'N'), ('int', 'M')]"
9206,11,convolution1D,runs,"[('const int *', 'd_arr'), ('const int *', 'd_conv'), ('int *', 'd_result'), ('int', 'N'), ('int', 'M')]"
9206,12,convolution2D,runs,"[('const float *', 'd_arr'), ('const float *', 'd_mask'), ('float *', 'd_result'), ('int', 'N')]"
9206,13,convolution1D,runs,"[('const int *', 'd_arr'), ('const int *', 'd_conv'), ('int *', 'd_result'), ('int', 'N'), ('int', 'M')]"
9206,14,convolution2D,runs,"[('const float *', 'd_arr'), ('const float *', 'd_mask'), ('float *', 'd_result'), ('int', 'N')]"
9206,15,convolution1D,runs,"[('const int *', 'd_arr'), ('const int *', 'd_conv'), ('int *', 'd_result'), ('int', 'N'), ('int', 'M')]"
9206,16,convolution2D,runs,"[('const float *', 'd_arr'), ('const float *', 'd_mask'), ('float *', 'd_result'), ('int', 'N')]"
9206,17,MatrixOp,runs,"[('int *', 'arr'), ('int', 'N')]"
9206,20,process_kernel3,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'numElements')]"
9206,22,convolution1D,runs,"[('const int *', 'd_arr'), ('const int *', 'd_conv'), ('int *', 'd_result'), ('int', 'N'), ('int', 'M')]"
9206,23,convolution2D,runs,"[('const float *', 'd_arr'), ('const float *', 'd_mask'), ('float *', 'd_result'), ('int', 'N')]"
9206,24,ReduceRowMajor,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'size')]"
9206,25,ReduceRowMajor,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'size')]"
9206,26,ReduceRowMajor2,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'size')]"
9206,27,ReduceRowMajor3,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'size')]"
9206,28,ReduceRowMajor5,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'size')]"
9206,29,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
9206,30,arradd,runs,"[('const int *', 'md'), ('const int *', 'nd'), ('int *', 'pd'), ('int', 'size')]"
9209,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
9209,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
9209,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
9209,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
9209,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
9211,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9211,225,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
9211,226,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
9211,227,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
9211,232,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
9211,348,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9211,353,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
922,0,initialize_parent,runs,"[('int *', 'parent'), ('int', 'n')]"
922,1,initialize_active_edges,runs,"[('bool *', 'active_edges'), ('int', 'e')]"
922,2,accumulate,runs,"[('Edge *', 'edge_list'), ('bool *', 'cross_edges'), ('int *', 'indices'), ('int', 'e')]"
922,3,update_states,runs,"[('int *', 'parent'), ('int *', 'vertex_state'), ('int', 'n')]"
922,4,hook_init,runs,"[('int *', 'parent'), ('Edge *', 'edge_list'), ('int', 'e')]"
922,5,hook_even,runs,"[('int *', 'parent'), ('Edge *', 'edge_list'), ('int', 'e'), ('bool *', 'flag'), ('bool *', 'active_edges')]"
922,6,hook_odd,runs,"[('int *', 'parent'), ('Edge *', 'edge_list'), ('int', 'e'), ('bool *', 'flag'), ('bool *', 'active_edges')]"
922,7,pointer_jumping,runs,"[('int *', 'parent'), ('int', 'n'), ('bool *', 'flag')]"
922,8,root_pointer_jumping,runs,"[('int *', 'parent'), ('int *', 'vertex_state'), ('int', 'n'), ('bool *', 'flag')]"
922,9,leaf_pointer_jumping,runs,"[('int *', 'parent'), ('int *', 'vertex_state'), ('int', 'n')]"
922,10,process_cross_edges,runs,"[('int *', 'parent'), ('Edge *', 'edge_list'), ('int', 'e'), ('bool *', 'flag'), ('bool *', 'cross_edges')]"
9220,1,replace_image_by_distance_kernel,runs,"[('const unsigned char *', 'pImage'), ('const float *', 'pDepth'), ('const unsigned char *', 'pBackground'), ('unsigned char *', 'result'), ('const float', 'max_value'), ('const unsigned int', 'width'), ('const unsigned int', 'height'), ('const unsigned int', 'image_channels')]"
9229,0,gemm,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
9229,1,concatenate_rows_kernel,runs,"[('float *', 'a'), ('unsigned int *', 'b'), ('int', 'size')]"
9229,2,concatenate_cols_kernel,runs,"[('float *', 'a'), ('unsigned int *', 'b'), ('int', 'm'), ('int', 'n')]"
9229,3,deconcatenate_rows_kernel,runs,"[('unsigned int *', 'a'), ('float *', 'b'), ('int', 'size')]"
9229,4,xnor_gemm,runs,"[('unsigned int *', 'A'), ('unsigned int *', 'B'), ('float *', 'C'), ('int', 'm'), ('int', 'n'), ('int', 'k')]"
9237,3,findMax,runs,"[('int *', 'm'), ('int *', 'cs'), ('int', 'n')]"
9242,41,sync_conv_groups,runs,[]
925,0,derive,runs,"[('double *', 'data'), ('double *', 'out'), ('int', 'stride'), ('int', 'gsize'), ('double', 'dx')]"
925,1,derive,runs,"[('double2 *', 'data'), ('double2 *', 'out'), ('int', 'stride'), ('int', 'gsize'), ('double', 'dx')]"
925,2,is_eq,runs,"[('bool *', 'a'), ('bool *', 'b'), ('bool *', 'ans')]"
925,3,make_cufftDoubleComplex,runs,"[('double *', 'in'), ('double2 *', 'out')]"
925,4,copy,runs,"[('double2 *', 'in'), ('double2 *', 'out')]"
925,5,energy_sum,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double *', 'out')]"
925,6,energy_lsum,runs,"[('double *', 'in1'), ('double2 *', 'in2'), ('double *', 'out')]"
925,7,sum,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double2 *', 'out')]"
925,8,complexAbsSum,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double *', 'out')]"
925,9,complexAbsSum,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double2 *', 'in3'), ('double *', 'out')]"
925,10,complexMagnitude,runs,"[('double2 *', 'in'), ('double *', 'out')]"
925,11,complexMagnitudeSquared,runs,"[('double2 *', 'in'), ('double *', 'out')]"
925,12,complexMagnitudeSquared,runs,"[('double2 *', 'in'), ('double2 *', 'out')]"
925,14,cMult,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double2 *', 'out')]"
925,15,cMultPhi,runs,"[('double2 *', 'in1'), ('double *', 'in2'), ('double2 *', 'out')]"
925,16,vecMult,runs,"[('double2 *', 'in'), ('double *', 'factor'), ('double2 *', 'out')]"
925,17,vecMult,runs,"[('double *', 'in'), ('double *', 'factor'), ('double *', 'out')]"
925,18,vecSum,runs,"[('double2 *', 'in'), ('double *', 'factor'), ('double2 *', 'out')]"
925,19,vecSum,runs,"[('double *', 'in'), ('double *', 'factor'), ('double *', 'out')]"
925,20,l2_norm,runs,"[('double *', 'in1'), ('double *', 'in2'), ('double *', 'in3'), ('double *', 'out')]"
925,21,l2_norm,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double2 *', 'in3'), ('double *', 'out')]"
925,22,l2_norm,runs,"[('double *', 'in1'), ('double *', 'in2'), ('double *', 'out')]"
925,23,l2_norm,runs,"[('double2 *', 'in1'), ('double2 *', 'in2'), ('double *', 'out')]"
925,26,scalarDiv,runs,"[('double2 *', 'in'), ('double', 'factor'), ('double2 *', 'out')]"
925,27,scalarDiv,runs,"[('double *', 'in'), ('double', 'factor'), ('double *', 'out')]"
925,28,scalarMult,runs,"[('double2 *', 'in'), ('double', 'factor'), ('double2 *', 'out')]"
925,29,scalarMult,runs,"[('double *', 'in'), ('double', 'factor'), ('double *', 'out')]"
925,31,scalarDiv_wfcNorm,runs,"[('double2 *', 'in'), ('double', 'dr'), ('double *', 'pSum'), ('double2 *', 'out')]"
925,32,scalarPow,runs,"[('double2 *', 'in'), ('double', 'param'), ('double2 *', 'out')]"
925,33,vecConjugate,runs,"[('double2 *', 'in'), ('double2 *', 'out')]"
925,34,angularOp,runs,"[('double', 'omega'), ('double', 'dt'), ('double2 *', 'wfc'), ('double *', 'xpyypx'), ('double2 *', 'out')]"
925,35,thread_test,runs,"[('double *', 'in'), ('double *', 'out')]"
925,36,multipass,runs,"[('double2 *', 'input'), ('double2 *', 'output'), ('int', 'pass')]"
925,37,multipass,runs,"[('double *', 'input'), ('double *', 'output')]"
925,45,set_eq,runs,"[('double *', 'in1'), ('double *', 'in2')]"
925,46,pSum,runs,"[('double *', 'in1'), ('double *', 'output'), ('int', 'pass')]"
925,48,zeros,runs,"[('double *', 'field'), ('int', 'n')]"
925,49,simple_K,runs,"[('double *', 'xp'), ('double *', 'yp'), ('double *', 'zp'), ('double', 'mass'), ('double *', 'K')]"
925,50,kconstant_A,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
925,51,krotation_Ax,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
925,52,krotation_Ay,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
925,53,kring_rotation_Ax,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
925,54,kring_rotation_Ay,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
925,55,kring_rotation_Az,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
925,56,kring_Az,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
925,57,ktest_Ax,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
925,58,ktest_Ay,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double', 'xMax'), ('double', 'yMax'), ('double', 'zMax'), ('double', 'omegaX'), ('double', 'omegaY'), ('double', 'omegaZ'), ('double', 'omega'), ('double', 'fudge'), ('double *', 'A')]"
925,59,kharmonic_V,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'items'), ('double *', 'Ax'), ('double *', 'Ay'), ('double *', 'Az'), ('double *', 'V')]"
925,60,ktorus_V,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'items'), ('double *', 'Ax'), ('double *', 'Ay'), ('double *', 'Az'), ('double *', 'V')]"
925,61,kstd_wfc,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'items'), ('double', 'winding'), ('double *', 'phi'), ('double2 *', 'wfc')]"
925,62,ktorus_wfc,runs,"[('double *', 'x'), ('double *', 'y'), ('double *', 'z'), ('double *', 'items'), ('double', 'winding'), ('double *', 'phi'), ('double2 *', 'wfc')]"
925,63,aux_fields,runs,"[('double *', 'V'), ('double *', 'K'), ('double', 'gdt'), ('double', 'dt'), ('double *', 'Ax'), ('double *', 'Ay'), ('double *', 'Az'), ('double *', 'px'), ('double *', 'py'), ('double *', 'pz'), ('double *', 'pAx'), ('double *', 'pAy'), ('double *', 'pAz'), ('double2 *', 'GV'), ('double2 *', 'EV'), ('double2 *', 'GK'), ('double2 *', 'EK'), ('double2 *', 'GpAx'), ('double2 *', 'GpAy'), ('double2 *', 'GpAz'), ('double2 *', 'EpAx'), ('double2 *', 'EpAy'), ('double2 *', 'EpAz')]"
925,65,add_test,runs,"[('double2 *', 'a'), ('double2 *', 'b'), ('double2 *', 'c')]"
925,66,subtract_test,runs,"[('double2 *', 'a'), ('double2 *', 'b'), ('double2 *', 'c')]"
925,67,pow_test,runs,"[('double2 *', 'a'), ('int', 'b'), ('double2 *', 'c')]"
925,68,mult_test,runs,"[('double2 *', 'a'), ('double2 *', 'b'), ('double2 *', 'c')]"
925,69,mult_test,runs,"[('double2 *', 'a'), ('double', 'b'), ('double2 *', 'c')]"
925,70,complexMag_test,runs,"[('double2 *', 'in'), ('double *', 'out')]"
925,73,make_complex_kernel,runs,"[('double *', 'in'), ('int *', 'evolution_type'), ('double2 *', 'out')]"
9255,17,kernel_histo_one_thread_one_vertex,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo')]"
9255,18,kernel_histo_stride,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo')]"
9255,19,kernel_histo_iterated,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo'), ('unsigned int', 'offset')]"
9255,20,kernel_histo_stride_2d,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo')]"
9255,21,kernel_histo_per_vertex,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo')]"
9255,22,kernel_histo_per_vertex_shared,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo')]"
9255,29,kernel_histo_one_thread_one_vertex,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo')]"
9255,30,kernel_histo_stride,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo')]"
9255,31,kernel_histo_iterated,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo'), ('unsigned int', 'offset')]"
9255,32,kernel_histo_stride_2d,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo')]"
9255,33,kernel_histo_per_vertex,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo')]"
9255,34,kernel_histo_per_vertex_shared,runs,"[('unsigned int *', 'ct'), ('unsigned int *', 'histo')]"
9256,6,stochasticGradientDescentKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate')]"
9256,7,adagradKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate'), ('float *', 'history'), ('float', 'epsilon')]"
9256,8,adamKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate'), ('float', 'firstMomentDecay'), ('float', 'oneMinusFirstMomentDecay'), ('float', 'secondMomentDecay'), ('float', 'oneMinusSecondMomentDecay'), ('float', 'epsilon'), ('float', 'step'), ('float *', 'firstMomentEstimate'), ('float *', 'secondMomentEstimate')]"
9256,9,rmspropKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate'), ('float', 'decay'), ('float', 'oneMinusDecay'), ('float', 'epsilon'), ('float *', 'accumulation')]"
9256,10,adadeltaKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'decay'), ('float', 'oneMinusDecay'), ('float', 'epsilon'), ('float *', 'gradientAccumulation'), ('float *', 'updateAccumulation')]"
9256,11,nesterovKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate'), ('float', 'momentum'), ('float *', 'history'), ('float *', 'backup')]"
9256,12,momentumKernel,runs,"[('int', 'numberIterations'), ('int *', 'parameterIndices'), ('int *', 'counts'), ('int', 'dimension'), ('float *', 'parameters'), ('float *', 'gradient'), ('float', 'learningRate'), ('float', 'momentum'), ('float *', 'history')]"
9256,13,multiClassTestingKernel,runs,"[('int', 'batchStart'), ('int', 'numberRows'), ('int', 'numberColumns'), ('int', 'numberEntriesPerInstance'), ('float *', 'predictions'), ('float *', 'targets'), ('int *', 'result')]"
9256,14,binaryTestingKernel,runs,"[('int', 'batchStart'), ('int', 'length'), ('float *', 'predictions'), ('float *', 'targets'), ('int *', 'result')]"
9256,15,addKernel,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'numberIterations'), ('int', 'size')]"
9256,16,replaceNaNKernel,runs,"[('int', 'numberEntriesPerInstance'), ('int', 'numberIterations'), ('float *', 'source'), ('float *', 'destination')]"
9256,17,sumKernel,runs,"[('float *', 'input'), ('float *', 'result'), ('int', 'batchSize'), ('int', 'numberEntries'), ('int', 'numberIterations')]"
9256,18,groupSumKernel,runs,"[('float *', 'input'), ('int *', 'firstOccurrences'), ('int *', 'otherOccurrences'), ('int *', 'otherOccurrencePositions'), ('int', 'dimensions'), ('int', 'numberIterations')]"
9256,22,expansionKernel,runs,"[('int', 'batchSize'), ('float *', 'input'), ('int *', 'inputLengths'), ('int', 'numberRows'), ('int', 'numberInputEntries'), ('int', 'numberFilterRowPositions'), ('int', 'filterHeight'), ('int', 'filterWidth'), ('int', 'filterLength'), ('int', 'numberResultEntries'), ('float *', 'result'), ('int *', 'resultLengths')]"
9256,38,backwardMaxPoolingKernel,runs,"[('int', 'batchSize'), ('int *', 'lengths'), ('int', 'numberEntriesPerInstance'), ('int', 'numberRows'), ('int *', 'maxIndices'), ('float *', 'chain'), ('float *', 'result')]"
9264,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
9264,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
9264,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
9264,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
9264,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
9266,167,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9266,294,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9266,299,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9275,2,d_updateTransforms,runs,"[('float *', 'd_currentTransform'), ('float3 *', 'd_cameraPosition')]"
9275,3,d_addToCurrentTransform,runs,"[('float *', 'd_currentTransform'), ('float *', 'd_invViewMatrix')]"
9283,0,transposeCoalesced,runs,"[('int *', 'result'), ('const int *', 'in')]"
9283,1,multiplyMatrixVector,runs,"[('int *', 'result'), ('int *', 'matrix'), ('int *', 'vector'), ('int', 'cols')]"
9287,0,setup_kernel,runs,"[('curandState *', 'state'), ('unsigned long', 'seed')]"
9294,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9294,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
9294,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
9294,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
9294,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
9294,349,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9294,354,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
93,0,r_calculation,runs,"[('float *', 'a'), ('int *', 'indeces'), ('float *', 'b'), ('float *', 'x'), ('float *', 'r'), ('int', 'size')]"
93,1,r_initial_sum,runs,"[('float *', 'a'), ('int *', 'indeces'), ('float *', 'x'), ('float *', 'r'), ('float *', 'r_squared'), ('float *', 'p_sum'), ('int', 'size')]"
93,2,r_final_sum_and_alpha_calculation,runs,"[('float *', 'r_squared'), ('float *', 'p_sum'), ('int', 'size')]"
93,3,x_calculation,runs,"[('float *', 'x'), ('float *', 'r'), ('float *', 'r_squared'), ('int', 'size')]"
93,4,cg_zero_start,runs,"[('float *', 'a'), ('float *', 'x'), ('float *', 'b'), ('int', 'size')]"
93,5,repeat_x_for_clusters,runs,"[('float *', 'x'), ('int', 'size')]"
93,6,ap_multiplication,runs,"[('float *', 'values'), ('int *', 'indeces'), ('float *', 'r'), ('float *', 'p_sum'), ('int', 'size')]"
93,7,alpha_calculation,runs,"[('float *', 'r_squared'), ('float *', 'p_sum'), ('float *', 'alpha')]"
93,8,x_calculation,runs,"[('float *', 'x'), ('float *', 'r'), ('float *', 'r_squared'), ('int', 'size')]"
93,10,jacobiFirstLocal,runs,"[('float *', 'x'), ('const float *', 'diagonal_values'), ('const float *', 'non_diagonal_values'), ('const int *', 'indeces'), ('const float *', 'y'), ('const int', 'size')]"
93,11,jacobiCsr,runs,"[('float *', 'x'), ('const float *', 'diagonal_values'), ('const float *', 'values'), ('const int *', 'rowPtr'), ('const int *', 'colIdx'), ('const float *', 'y'), ('const int', 'size')]"
93,12,divide,runs,"[('float *', 'x'), ('float *', 'y'), ('float *', 'out'), ('const int', 'size')]"
93,13,GaussianEliminationGlobal,runs,"[('const int', 'clusterSize'), ('float *', 'x'), ('const float *', 'diagonal_values'), ('const float *', 'non_diagonal_values'), ('float *', 'y'), ('const int', 'size')]"
93,14,GaussianEliminationShared,runs,"[('const int', 'clusterSize'), ('float *', 'x'), ('const float *', 'diagonal_values'), ('const float *', 'non_diagonal_values'), ('float *', 'y')]"
930,0,blob_rearrange_kernel2_1d,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'num'), ('int', 'channels'), ('int', 'width'), ('int', 'height'), ('int', 'widthheight'), ('int', 'padding'), ('int', 'pwidthheight')]"
930,1,CorrelateData_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'topcount'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'kernel_size'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'bottomchannels'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'top')]"
930,2,CorrelateDataSubtract_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'item'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'topcount'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'bottomchannels'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'top')]"
930,3,CorrelateDataBackward0_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'item'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'pbottomwidth'), ('int', 'pbottomheight'), ('int', 'bottomchannels'), ('int', 'bottomcount'), ('int', 'pad_size'), ('float *', 'bottom0diff'), ('const float *', 'bottom1'), ('const float *', 'topdiff')]"
930,4,CorrelateDataBackward1_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'item'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'pbottomwidth'), ('int', 'pbottomheight'), ('int', 'bottomchannels'), ('int', 'bottomcount'), ('int', 'pad_size'), ('const float *', 'bottom0'), ('float *', 'bottom1diff'), ('const float *', 'topdiff')]"
930,5,CorrelateDataBackward0Subtract_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'item'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'pbottomwidth'), ('int', 'pbottomheight'), ('int', 'bottomchannels'), ('int', 'bottomcount'), ('int', 'pad_size'), ('float *', 'bottom0diff'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('const float *', 'topdiff')]"
930,6,CorrelateDataBackward1Subtract_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'item'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'pbottomwidth'), ('int', 'pbottomheight'), ('int', 'bottomchannels'), ('int', 'bottomcount'), ('int', 'pad_size'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'bottom1diff'), ('const float *', 'topdiff')]"
930,7,blob_rearrange_kernel2,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'num'), ('int', 'channels'), ('int', 'width'), ('int', 'height'), ('int', 'widthheight'), ('int', 'padding'), ('int', 'pwidthheight')]"
930,8,CorrelateData,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'topcount'), ('int', 'max_displacement'), ('int', 'neighborhood_grid_radius'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'kernel_size'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'bottomchannels'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'top')]"
930,16,blob_rearrange_kernel2_1d,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'num'), ('int', 'channels'), ('int', 'width'), ('int', 'height'), ('int', 'widthheight'), ('int', 'padding'), ('int', 'pwidthheight')]"
930,17,CorrelateData_1d,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'topcount'), ('int', 'max_displacement'), ('int', 'x_shift'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'kernel_size'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'bottomchannels'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'top')]"
930,23,blob_rearrange_kernel2,runs,"[('const float *', 'in'), ('float *', 'out'), ('int', 'num'), ('int', 'channels'), ('int', 'width'), ('int', 'height'), ('int', 'widthheight'), ('int', 'padding'), ('int', 'pwidthheight')]"
930,24,CorrelateData,runs,"[('const int', 'nthreads'), ('int', 'num'), ('int', 'topwidth'), ('int', 'topheight'), ('int', 'topchannels'), ('int', 'topcount'), ('int', 'max_displacement'), ('int', 'neighborhood_grid_radius'), ('int', 'neighborhood_grid_width'), ('int', 'kernel_radius'), ('int', 'kernel_size'), ('int', 'stride1'), ('int', 'stride2'), ('int', 'bottomwidth'), ('int', 'bottomheight'), ('int', 'bottomchannels'), ('const float *', 'bottom0'), ('const float *', 'bottom1'), ('float *', 'top')]"
9307,33,sync_conv_groups,runs,[]
9308,85,scaleVector,runs,"[('float *', 'd_res'), ('const float *', 'd_src'), ('float', 'scale'), ('const int', 'len')]"
9308,98,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
9308,99,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
9308,100,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
9308,101,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
9310,12,kernelCalcSum_AtomicOnly,runs,"[('const int *', 'dataArray'), ('int', 'arraySize'), ('int *', 'sum')]"
9310,13,kernelCalcSum_ShareMem,runs,"[('const int *', 'dataArray'), ('int', 'arraySize'), ('int *', 'sum')]"
9310,14,kernelCalcSum_EffectiveShareAccess,runs,"[('const int *', 'dataArray'), ('int', 'arraySize'), ('int *', 'sum')]"
9310,15,kernelCalcSum_EffectiveShareAccess_DoubleGlobalAccess,runs,"[('const int *', 'dataArray'), ('int', 'arraySize'), ('int *', 'sum')]"
9310,16,kernelCalcSum_EffectiveShareAccess_UnrolWarp,runs,"[('const int *', 'dataArray'), ('int', 'arraySize'), ('int *', 'sum')]"
9310,21,kernelFindMax1,runs,"[('const int *', 'dataArray'), ('int', 'arraySize'), ('int *', 'maxVal')]"
9310,22,kernelFindMax2,runs,"[('const int *', 'dataArray'), ('int', 'arraySize'), ('int *', 'maxVal')]"
9310,23,kernelFindMax3,runs,"[('const int *', 'dataArray'), ('int', 'arraySize'), ('int *', 'maxVal')]"
9310,24,kernelFindMax4,runs,"[('const int *', 'dataArray'), ('int', 'arraySize'), ('int *', 'maxVal')]"
9310,25,kernelFindMax5,runs,"[('const int *', 'dataArray'), ('int', 'arraySize'), ('int *', 'maxVal')]"
9312,1,variance,runs,"[('int *', 'n'), ('double *', 'x'), ('double *', 'mean')]"
9312,4,mini1,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n')]"
9312,5,maxi,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n')]"
9312,6,var,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n'), ('float', 'mean')]"
9312,7,sum,runs,"[('int *', 'a'), ('int *', 'b'), ('int', 'n')]"
9321,204,cuda_debug_kernel,runs,[]
9329,0,binarize_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('float *', 'binary')]"
9329,1,binarize_input_kernel,runs,"[('float *', 'input'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
9329,2,binarize_weights_kernel,runs,"[('float *', 'weights'), ('int', 'n'), ('int', 'size'), ('float *', 'binary')]"
9329,5,forward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'input'), ('float *', 'output')]"
9329,6,backward_avgpool_layer_kernel,runs,"[('int', 'n'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('float *', 'in_delta'), ('float *', 'out_delta')]"
9329,7,im2col_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_im'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_col')]"
9329,8,scale_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
9329,9,backward_scale_kernel,runs,"[('float *', 'x_norm'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'scale_updates')]"
9329,10,add_bias_kernel,runs,"[('float *', 'output'), ('float *', 'biases'), ('int', 'n'), ('int', 'size')]"
9329,11,backward_bias_kernel,runs,"[('float *', 'bias_updates'), ('float *', 'delta'), ('int', 'batch'), ('int', 'n'), ('int', 'size')]"
9329,12,dot_kernel,runs,"[('float *', 'output'), ('float', 'scale'), ('int', 'batch'), ('int', 'n'), ('int', 'size'), ('float *', 'delta')]"
9329,13,adam_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'm'), ('float *', 'v'), ('float', 'B1'), ('float', 'B2'), ('float', 'rate'), ('float', 'eps'), ('int', 't')]"
9329,14,normalize_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial')]"
9329,15,normalize_delta_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('float *', 'mean'), ('float *', 'variance'), ('float *', 'mean_delta'), ('float *', 'variance_delta'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'delta')]"
9329,16,variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
9329,17,accumulate_kernel,runs,"[('float *', 'x'), ('int', 'n'), ('int', 'groups'), ('float *', 'sum')]"
9329,18,fast_mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
9329,19,fast_variance_delta_kernel,runs,"[('float *', 'x'), ('float *', 'delta'), ('float *', 'mean'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance_delta')]"
9329,20,mean_delta_kernel,runs,"[('float *', 'delta'), ('float *', 'variance'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean_delta')]"
9329,21,mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
9329,22,variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
9329,23,reorg_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float *', 'out')]"
9329,24,axpy_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
9329,25,pow_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
9329,26,const_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
9329,27,constrain_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
9329,28,supp_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
9329,29,scal_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
9329,30,fill_kernel,runs,"[('int', 'N'), ('float', 'ALPHA'), ('float *', 'X'), ('int', 'INCX')]"
9329,31,mask_kernel,runs,"[('int', 'n'), ('float *', 'x'), ('float', 'mask_num'), ('float *', 'mask')]"
9329,32,copy_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'OFFX'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'OFFY'), ('int', 'INCY')]"
9329,33,mul_kernel,runs,"[('int', 'N'), ('float *', 'X'), ('int', 'INCX'), ('float *', 'Y'), ('int', 'INCY')]"
9329,34,fast_mean_kernel,runs,"[('float *', 'x'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'mean')]"
9329,35,fast_variance_kernel,runs,"[('float *', 'x'), ('float *', 'mean'), ('int', 'batch'), ('int', 'filters'), ('int', 'spatial'), ('float *', 'variance')]"
9329,36,flatten_kernel,runs,"[('int', 'N'), ('float *', 'x'), ('int', 'spatial'), ('int', 'layers'), ('int', 'batch'), ('int', 'forward'), ('float *', 'out')]"
9329,37,shortcut_kernel,runs,"[('int', 'size'), ('int', 'minw'), ('int', 'minh'), ('int', 'minc'), ('int', 'stride'), ('int', 'sample'), ('int', 'batch'), ('int', 'w1'), ('int', 'h1'), ('int', 'c1'), ('float *', 'add'), ('int', 'w2'), ('int', 'h2'), ('int', 'c2'), ('float *', 'out')]"
9329,38,smooth_l1_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
9329,39,l2_kernel,runs,"[('int', 'n'), ('float *', 'pred'), ('float *', 'truth'), ('float *', 'delta'), ('float *', 'error')]"
9329,40,weighted_sum_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'c')]"
9329,41,weighted_delta_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 's'), ('float *', 'da'), ('float *', 'db'), ('float *', 'ds'), ('float *', 'dc')]"
9329,42,mult_add_into_kernel,runs,"[('int', 'n'), ('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
9329,43,softmax_kernel,runs,"[('int', 'n'), ('int', 'offset'), ('int', 'batch'), ('float *', 'input'), ('float', 'temp'), ('float *', 'output')]"
9329,44,upsample_kernel,runs,"[('size_t', 'N'), ('float *', 'x'), ('int', 'w'), ('int', 'h'), ('int', 'c'), ('int', 'batch'), ('int', 'stride'), ('int', 'forward'), ('float', 'scale'), ('float *', 'out')]"
9329,45,levels_image_kernel,runs,"[('float *', 'image'), ('float *', 'rand'), ('int', 'batch'), ('int', 'w'), ('int', 'h'), ('int', 'train'), ('float', 'saturation'), ('float', 'exposure'), ('float', 'translate'), ('float', 'scale'), ('float', 'shift')]"
9329,47,col2im_gpu_kernel,runs,"[('const int', 'n'), ('const float *', 'data_col'), ('const int', 'height'), ('const int', 'width'), ('const int', 'ksize'), ('const int', 'pad'), ('const int', 'stride'), ('const int', 'height_col'), ('const int', 'width_col'), ('float *', 'data_im')]"
9329,48,yoloswag420blazeit360noscope,runs,"[('float *', 'input'), ('int', 'size'), ('float *', 'rand'), ('float', 'prob'), ('float', 'scale')]"
9329,49,forward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'input'), ('float *', 'output'), ('int *', 'indexes')]"
9329,50,backward_maxpool_layer_kernel,runs,"[('int', 'n'), ('int', 'in_h'), ('int', 'in_w'), ('int', 'in_c'), ('int', 'stride'), ('int', 'size'), ('int', 'pad'), ('float *', 'delta'), ('float *', 'prev_delta'), ('int *', 'indexes')]"
933,0,MC_Integratev1,runs,"[('float *', 'degrees'), ('int', 'dimension'), ('int', 'n_terms'), ('float *', 'I_val'), ('curandState *', 'states'), ('long int', 'seed'), ('int', 'thread_max_iterations')]"
933,1,MC_Integratev2,runs,"[('float *', 'degrees_g'), ('int', 'dimension'), ('int', 'n_terms'), ('float *', 'I_val'), ('long int', 'seed'), ('int', 'thread_max_iterations')]"
9332,0,PopulateBins,runs,"[('int *', 'rawBinSums'), ('float2 *', 'rawRingPoints'), ('float', 'xRange'), ('float', 'yRange'), ('int', 'mode'), ('int', 'numPoints'), ('unsigned int', 'simHeight'), ('unsigned int', 'simWidth')]"
9332,1,Zero_Histogram,runs,"[('int *', 'rawBinSums'), ('unsigned int', 'simHeight'), ('unsigned int', 'simWidth')]"
9332,2,FormPNGData,runs,"[('float3 *', 'colors'), ('unsigned char *', 'pixelData'), ('unsigned int', 'simWidth'), ('unsigned int', 'simHeight')]"
9332,5,Color,runs,"[('float3 *', 'colors'), ('float3 *', 'rawColorMap'), ('int *', 'rawBinSums'), ('int', 'mapMin'), ('int', 'mapMax'), ('unsigned int', 'simWidth'), ('unsigned int', 'simHeight')]"
9334,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9334,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
9334,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
9334,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
9334,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
9334,347,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9334,352,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9345,2,kernelVacio,runs,[]
9345,3,__add__,runs,"[('int *', 'array'), ('int *', 'size')]"
9345,4,__add__,runs,"[('int *', 'array'), ('int *', 'size')]"
935,2,end_coloring_mark,runs,[]
935,50,permute_colors_kernel,runs,"[('int', 'num_rows'), ('int *', 'row_colors'), ('int *', 'color_permutation')]"
935,51,reverse_colors_kernel,runs,"[('int', 'num_rows'), ('int', 'max_color'), ('int *', 'row_colors')]"
935,81,profileLevelUp_kernel,runs,[]
935,82,profileLevelDown_kernel,runs,[]
935,83,profileLevelZero_kernel,runs,[]
935,84,profilePhaseSetup_kernel,runs,[]
935,85,profilePhaseSolve_kernel,runs,[]
935,86,profilePhaseNone_kernel,runs,[]
935,87,profileSubphaseMatrixColoring_kernel,runs,[]
935,88,profileSubphaseSmootherSetup_kernel,runs,[]
935,89,profileSubphaseFindAggregates_kernel,runs,[]
935,90,profileSubphaseComputeRestriction_kernel,runs,[]
935,91,profileSubphaseComputeCoarseA_kernel,runs,[]
935,92,profileSubphaseNone_kernel,runs,[]
935,93,profileSubphaseTruncateP_kernel,runs,[]
9351,31,square_matrix_kernel,runs,"[('int32_t', 'num_rows'), ('int32_t', 'num_cols'), ('const float *', 'feats'), ('int32_t', 'ldf'), ('float *', 'feats_sq'), ('int32_t', 'lds')]"
9351,34,update_linear_and_quadratic_terms_kernel,runs,"[('int32_t', 'n'), ('float', 'old_num_frames'), ('float', 'prior_offset'), ('float *', 'cur_tot_weight'), ('int32_t', 'max_count'), ('float *', 'quadratic'), ('float *', 'linear')]"
9351,46,apply_lifter_and_floor_energy,runs,"[('int', 'num_frames'), ('int', 'num_cols'), ('float', 'cepstral_lifter'), ('bool', 'use_energy'), ('float', 'energy_floor'), ('float *', 'log_energy'), ('float *', 'lifter_coeffs'), ('float *', 'features'), ('int32_t', 'ldf')]"
9351,47,power_spectrum_kernel,runs,"[('int', 'row_length'), ('float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
9351,58,power_spectrum_kernel,runs,"[('int', 'row_length'), ('const float *', 'A_in'), ('int32_t', 'ldi'), ('float *', 'A_out'), ('int32_t', 'ldo'), ('bool', 'use_power')]"
9354,0,addKernel,runs,"[('double *', 'c'), ('const double *', 'a'), ('const double *', 'b')]"
9354,1,MatrixMulKernel,runs,"[('double *', 'OutMat'), ('double *', 'Mat1'), ('double *', 'Mat2'), ('int', 'Arows'), ('int', 'Acols'), ('int', 'Bcols')]"
9365,174,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9365,234,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
9365,235,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
9365,236,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
9365,241,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
9365,352,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9365,357,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9369,1,fillarray_kernel,runs,"[('float *', 'x'), ('float', 'v'), ('int', 'np')]"
9369,2,initancestors_noresample,runs,"[('int *', 'ancestor'), ('int', 'np')]"
937,0,hsl2rgb_gpu_son,runs,"[('float *', 'd_h'), ('float *', 'd_s'), ('unsigned char *', 'd_l'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_b'), ('int', 'size')]"
937,1,yuv2rgb_gpu_son,runs,"[('unsigned char *', 'd_y'), ('unsigned char *', 'd_u'), ('unsigned char *', 'd_v'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_b'), ('int', 'size')]"
937,2,rgb2hsl_gpu_son,runs,"[('unsigned char *', 'd_r'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_b'), ('float *', 'd_h'), ('float *', 'd_s'), ('unsigned char *', 'd_l'), ('int', 'size')]"
937,3,rgb2yuv_gpu_son,runs,"[('unsigned char *', 'd_r'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_y'), ('unsigned char *', 'd_u'), ('unsigned char *', 'd_v'), ('int', 'size')]"
937,4,clean,runs,"[('unsigned int *', 'e'), ('int', 'n')]"
937,5,histogram_gpu_son,runs,"[('unsigned char *', 'd_img'), ('unsigned int *', 'd_hist'), ('int', 'img_size'), ('int', 'serialNum')]"
937,6,histogram_equalization_gpu_son,runs,"[('unsigned char *', 'd_in'), ('unsigned char *', 'd_out'), ('int *', 'd_lut'), ('int', 'img_size'), ('int', 'serialNum')]"
9371,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9371,301,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9371,306,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9378,166,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9378,225,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
9378,226,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
9378,227,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
9378,232,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
9378,348,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9378,353,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
938,18,stencil_ld,runs,"[('unsigned *', 'X'), ('unsigned *', 'out'), ('int', 'width'), ('int', 'height')]"
938,20,mykernel,runs,[]
938,22,add,runs,"[('int *', 'result'), ('int *', 'num1'), ('int *', 'num2')]"
938,34,stencil_ld,runs,"[('unsigned *', 'in'), ('unsigned *', 'out')]"
938,38,testKernel,runs,[]
938,39,stencil_ld,runs,"[('unsigned *', 'in'), ('unsigned *', 'out')]"
938,40,gaussian_filter,runs,"[('unsigned *', 'in'), ('unsigned *', 'out'), ('int', 'width'), ('int', 'height')]"
9383,0,kernel,runs,[]
9391,0,matrix_softmax_cross_entropy_kernel,runs,"[('int', 'nrow'), ('int', 'ncol'), ('const float *', 'input_a'), ('const float *', 'input_b'), ('float *', 'output')]"
9391,1,array_set_kernel,runs,"[('float *', 'array'), ('float', 'value'), ('int', 'n')]"
9391,3,reduced_sum_axis_zero,runs,"[('const float *', 'input_data'), ('float *', 'output_data'), ('int', 'input_n'), ('int', 'output_n')]"
9391,4,matrix_elementwise_add,runs,"[('const float *', 'a'), ('const float *', 'b'), ('float *', 'c'), ('int', 'n')]"
9391,5,matrix_elementwise_add_by_const_kernal,runs,"[('const float *', 'd_in'), ('float *', 'd_out'), ('float', 'val'), ('int', 'n')]"
9391,6,matrix_elementwise_div_by_const_kernal,runs,"[('const float *', 'd_in'), ('float *', 'd_out'), ('float', 'val'), ('int', 'n')]"
9391,7,elementwise_mul_kernel,runs,"[('const float *', 'data_a'), ('const float *', 'data_b'), ('float *', 'output'), ('int', 'n')]"
9391,8,marix_multiply_by_const,runs,"[('const float *', 'd_input'), ('float *', 'd_output'), ('float', 'val'), ('int', 'n')]"
9391,9,relu_kernel,runs,"[('const float *', 'input'), ('float *', 'output'), ('int', 'n')]"
9391,10,relu_gradient_kernel,runs,"[('const float *', 'input'), ('float *', 'output'), ('const float *', 'in_grad'), ('int', 'n')]"
9391,11,softmax_kernel,runs,"[('int64_t', 'nrow'), ('int64_t', 'ncol'), ('const float *', 'input_data'), ('float *', 'output_data')]"
9396,0,vecAdd,runs,"[('double *', 'a'), ('double *', 'b'), ('double *', 'c'), ('int', 'n'), ('int', 'k')]"
940,0,kernel,runs,[]
9403,5,set_valid_pos_flag,runs,"[('int32_t *', 'pos_buff'), ('const int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
9403,6,set_valid_pos,runs,"[('int32_t *', 'pos_buff'), ('int32_t *', 'count_buff'), ('const int32_t', 'entry_count')]"
9403,9,init_render_buffer_wrapper,runs,"[('int64_t *', 'render_buffer'), ('const uint32_t', 'qw_count')]"
9403,12,init_group,runs,"[('int8_t *', 'groups'), ('const size_t', 'group_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t *', 'init_vals')]"
9403,14,columnarize_groups,runs,"[('int8_t *', 'columnar_buffer'), ('const int8_t *', 'rowwise_buffer'), ('const size_t', 'row_count'), ('const size_t', 'col_count'), ('const size_t *', 'col_widths'), ('const size_t', 'row_size')]"
9408,0,cuda_cmp_kernel,runs,"[('std::size_t', 'n'), ('int *', 'aptr'), ('int *', 'bptr'), ('int *', 'rptr')]"
9409,2,render_init_kernel,runs,"[('int', 'max_x'), ('int', 'max_y'), ('curandState *', 'rand_state')]"
9423,0,task2Kernel,runs,"[('unsigned const *', 'a'), ('unsigned const *', 'b'), ('unsigned *', 'result'), ('size_t', 'size')]"
9423,1,task1_Coalescing,runs,"[('unsigned const *', 'a'), ('unsigned const *', 'b'), ('unsigned *', 'result'), ('size_t', 'size')]"
9423,2,task1_NoCoalescing,runs,"[('unsigned const *', 'a'), ('unsigned const *', 'b'), ('unsigned *', 'result'), ('size_t', 'size')]"
9423,5,multiplyGlobal,runs,"[('unsigned const *', 'left'), ('unsigned const *', 'right'), ('unsigned *', 'result'), ('size_t', 'size')]"
9429,0,bilinearSamplingFromGrid,runs,"[('float *', 'inputImages_data'), ('int', 'inputImages_strideBatch'), ('int', 'inputImages_strideChannels'), ('int', 'inputImages_strideHeight'), ('int', 'inputImages_strideWidth'), ('float *', 'grids_data'), ('int', 'grids_strideBatch'), ('int', 'grids_strideYX'), ('int', 'grids_strideHeight'), ('int', 'grids_strideWidth'), ('float *', 'output_data'), ('int', 'output_strideBatch'), ('int', 'output_strideChannels'), ('int', 'output_strideHeight'), ('int', 'output_strideWidth'), ('int', 'inputImages_channels'), ('int', 'inputImages_height'), ('int', 'inputImages_width'), ('int', 'output_width')]"
943,8,add,runs,"[('float *', 'loc'), ('float *', 'temp'), ('const int', 'num')]"
943,14,test_shfl_broadcast,runs,"[('float *', 'd_out'), ('float *', 'd_in'), ('const int', 'srcLane')]"
943,15,test_shfl_up,runs,"[('float *', 'd_out'), ('float *', 'd_in'), ('const int', 'delta')]"
943,16,test_shfl_down,runs,"[('float *', 'd_out'), ('float *', 'd_in'), ('const int', 'delta')]"
943,17,test_shfl_xor,runs,"[('float *', 'd_out'), ('float *', 'd_in'), ('const int', 'mask')]"
9430,8,kernel_image2D1C_ConvolveRow,runs,"[('float *', 'img'), ('int', 'n_x'), ('int', 'n_y'), ('short', 'k'), ('float *', 'kernel'), ('float *', 'out')]"
9430,9,kernel_image2D1C_ConvolveColumn,runs,"[('float *', 'img'), ('int', 'n_x'), ('int', 'n_y'), ('short', 'k'), ('float *', 'kernel'), ('float *', 'out')]"
9433,5,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx'), ('int *', 'pts_cnt')]"
9433,6,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
9433,7,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
9433,8,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
9433,9,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
9433,10,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
9433,11,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
9433,12,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
9433,13,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
9433,14,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
9433,15,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('const float *', 'dist'), ('int *', 'outi'), ('float *', 'out')]"
9433,16,query_ball_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('float', 'radius'), ('int', 'nsample'), ('const float *', 'xyz1'), ('const float *', 'xyz2'), ('int *', 'idx')]"
9433,17,group_point_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'points'), ('const int *', 'idx'), ('float *', 'out')]"
9433,18,group_point_grad_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'c'), ('int', 'm'), ('int', 'nsample'), ('const float *', 'grad_out'), ('const int *', 'idx'), ('float *', 'grad_points')]"
9433,19,selection_sort_gpu,runs,"[('int', 'b'), ('int', 'n'), ('int', 'm'), ('int', 'k'), ('float *', 'dist'), ('int *', 'idx'), ('float *', 'val')]"
9437,228,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
9437,229,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
9437,230,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
9437,235,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
9437,338,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9437,346,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9438,0,muestraIndice,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c')]"
9438,1,reduceVector,runs,"[('float *', 'v1'), ('float *', 'v2'), ('float *', 'res')]"
9438,2,sumaVectores,runs,"[('float *', 'd_a'), ('float *', 'd_b'), ('float *', 'd_c')]"
9438,3,ecuaciones,runs,"[('int', 'a'), ('int', 'b'), ('int', 'c'), ('float *', 'sol')]"
9438,4,sumaVector,runs,"[('float *', 'v1'), ('float *', 'v2'), ('float *', 'res')]"
9438,5,sumaGPU,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'sol')]"
9438,6,testKernel,runs,"[('float *', 'g_idata'), ('float *', 'g_odata')]"
9438,7,numMayor,runs,"[('float *', 'd_v'), ('float *', 'd_pos')]"
9440,0,cuda_cmp_kernel,runs,"[('std::size_t', 'n'), ('int *', 'aptr'), ('int *', 'bptr'), ('int *', 'rptr')]"
9444,4,kern_PropogateUp,runs,"[('float *', 'working'), ('int', 'span'), ('int', 'imageSize')]"
9444,5,kern_PropogateDown,runs,"[('float *', 'working'), ('int', 'span'), ('int', 'imageSize')]"
9444,13,CUDAkernel_multiply,runs,"[('float *', 'sourceA'), ('float *', 'sourceB'), ('float *', 'destination'), ('int', 'size')]"
9444,14,CUDAkernel_accumulate,runs,"[('float *', 'buffer'), ('int', 'addSize'), ('int', 'size')]"
9444,16,kern_FindSinkPotentialAndStore,runs,"[('float *', 'workingBuffer'), ('float *', 'incBuffer'), ('float *', 'divBuffer'), ('float *', 'labelBuffer'), ('float', 'iCC'), ('int', 'size')]"
9444,17,kern_FindSourcePotentialAndStore,runs,"[('float *', 'workingBuffer'), ('float *', 'sinkBuffer'), ('float *', 'divBuffer'), ('float *', 'labelBuffer'), ('float', 'iCC'), ('int', 'size')]"
9444,18,kern_FindLeafSinkPotential,runs,"[('float *', 'sinkBuffer'), ('float *', 'incBuffer'), ('float *', 'divBuffer'), ('float *', 'labelBuffer'), ('float', 'iCC'), ('int', 'size')]"
9444,19,kern_ApplyCapacity,runs,"[('float *', 'sinkBuffer'), ('float *', 'capBuffer'), ('int', 'size')]"
9444,20,kern_UpdateLabel,runs,"[('float *', 'sinkBuffer'), ('float *', 'incBuffer'), ('float *', 'divBuffer'), ('float *', 'labelBuffer'), ('float', 'CC'), ('int', 'size')]"
9444,21,kern_CalcGradStep,runs,"[('float *', 'sinkBuffer'), ('float *', 'incBuffer'), ('float *', 'divBuffer'), ('float *', 'labelBuffer'), ('float', 'stepSize'), ('float', 'iCC'), ('int', 'size')]"
9444,27,kern_MinBuffers,runs,"[('float *', 'b1'), ('float *', 'b2'), ('int', 'size')]"
9444,28,kern_Lbl,runs,"[('float *', 'lbl'), ('float *', 'flo'), ('float *', 'cap'), ('const int', 'size')]"
9444,29,kern_DivideBuffers,runs,"[('float *', 'dst'), ('float *', 'src'), ('const int', 'size')]"
9444,30,kern_ResetSinkBuffer,runs,"[('float *', 'sink'), ('float *', 'source'), ('float *', 'div'), ('float *', 'label'), ('float', 'ik'), ('float', 'iCC'), ('int', 'size')]"
9444,31,kern_PushUpSourceFlows,runs,"[('float *', 'psink'), ('float *', 'sink'), ('float *', 'source'), ('float *', 'div'), ('float *', 'label'), ('float', 'w'), ('float', 'iCC'), ('int', 'size')]"
9444,32,kern_Copy2Buffers,runs,"[('float *', 'fIn'), ('float *', 'fOut1'), ('float *', 'fOut2'), ('int', 'size')]"
9444,33,kern_ConvertBuffer,runs,"[('short *', 'agreement'), ('float *', 'output'), ('int', 'size')]"
9444,34,kern_LogBuffer,runs,"[('float *', 'agreement'), ('float *', 'output'), ('float', 'maxOut'), ('int', 'size'), ('short', 'max')]"
9444,35,kern_NormLogBuffer,runs,"[('float *', 'agreement'), ('float *', 'output'), ('float', 'maxOut'), ('int', 'size'), ('short', 'max')]"
9444,36,kern_ProbBuffer,runs,"[('float *', 'agreement'), ('float *', 'output'), ('int', 'size'), ('short', 'max')]"
9444,37,kern_BlurBuffer,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size'), ('int', 'spread'), ('int', 'dim')]"
9444,45,FindMinSample,runs,"[('float *', 'DistanceBuffer'), ('short2 *', 'IndexBuffer'), ('int', 'spread'), ('int', 'mapSizeX'), ('int', 'mapSizeY')]"
9444,55,ReplaceNANs,runs,"[('float *', 'buffer'), ('float', 'value'), ('int', 'size')]"
9444,61,SetBufferToRandom,runs,"[('float *', 'buffer'), ('float', 'min'), ('float', 'max'), ('int', 'size')]"
9444,72,SumOverLargeBuffer,runs,"[('float *', 'buffer'), ('int', 'spread'), ('int', 'size')]"
9449,13,jackpot_compactTest_gpu_ADD,runs,"[('uint32_t *', 'data'), ('uint32_t *', 'partial_sums'), ('int', 'len')]"
9452,0,hello,runs,[]
9452,1,hello,runs,[]
9452,2,cube,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
9452,6,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
9452,7,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
9452,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
9452,11,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
9452,12,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
9452,14,find_min_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
9454,36,sync_conv_groups,runs,[]
9457,34,sync_conv_groups,runs,[]
9485,0,generate_encrypted,runs,"[('int *', 'pDataPointer'), ('int *', 'pRandomData'), ('int *', 'pEncryptedData'), ('long long int', 'pSize')]"
9485,1,generate_decrypted,runs,"[('int *', 'pDataPointer'), ('int *', 'pRandomData'), ('int *', 'pEncryptedData'), ('long long int', 'pSize')]"
9487,0,kernel_vecDouble,runs,"[('int *', 'in'), ('int *', 'out'), ('const int', 'n')]"
9487,1,kernel_vecDouble,runs,"[('int *', 'in'), ('int *', 'out'), ('const int', 'n')]"
9489,170,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9489,312,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
950,4,ResetHeap_kernel,runs,"[('int *', 'mplHeap'), ('int *', 'mplHeapPtr'), ('int', 'numBlock')]"
9504,0,mul,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
9504,1,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
9504,2,add,runs,"[('int *', 'a'), ('int *', 'b'), ('int *', 'c')]"
9504,3,mul,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
952,1,gpu_poisson,runs,"[('double *', 'c'), ('double *', 'fi'), ('double *', 'R')]"
952,2,gpu_efield,runs,"[('double *', 'fi'), ('double *', 'ex'), ('double *', 'ey')]"
952,8,gpu_initialization,runs,"[('double *', 'r'), ('double *', 'c'), ('double *', 'fi'), ('double *', 'u'), ('double *', 'v'), ('double *', 'ex'), ('double *', 'ey')]"
952,13,gpu_stream,runs,"[('double *', 'f0'), ('double *', 'f1'), ('double *', 'f2'), ('double *', 'h0'), ('double *', 'h1'), ('double *', 'h2')]"
952,14,gpu_bc_charge,runs,"[('double *', 'h0'), ('double *', 'h1'), ('double *', 'h2')]"
9520,10,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9520,69,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
9520,70,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
9520,71,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
9520,76,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
9520,169,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9520,174,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9521,0,add,runs,"[('int', 'num1'), ('int', 'num2'), ('int *', 'ans')]"
9526,53,saxpy_baseline,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
9526,54,saxpy_float4s,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
9526,55,saxpy_shmem,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
9526,56,saxpy_shmem_doublebuffer,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
9526,57,saxpy_float4s_shmem,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
9526,58,saxpy_float4s_shmem_doublebuffer,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
9526,62,saxpy_float4s,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
9526,65,saxpy_float4s_shmem,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
9526,66,saxpy_float4s_shmem_doublebuffer,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
9526,69,saxpy_baseline,runs,"[('float *', 'y'), ('float *', 'x'), ('float', 'a'), ('clock_t *', 'timer_vals')]"
9526,79,sgemvn_kernel1_fermi,runs,"[('int', 'n'), ('int', 'm'), ('int', 'n1'), ('float', 'alpha'), ('float *', 'A'), ('int', 'lda'), ('float *', 'x'), ('float *', 'y')]"
9526,80,sgemvn_kernel2_fermi,runs,"[('int', 'n'), ('int', 'm'), ('int', 'n1'), ('float', 'alpha'), ('float *', 'A'), ('int', 'lda'), ('float *', 'x'), ('float *', 'y')]"
9533,10,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9533,69,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
9533,70,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
9533,71,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
9533,76,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
9533,171,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9533,176,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9543,0,computeDistances,runs,"[('int', 'numInstances'), ('int', 'numAttributes'), ('float *', 'dataset'), ('float *', 'distances')]"
955,0,Kernel,runs,"[('double *', 'device'), ('const uint', 'size')]"
9551,0,convert_to_hsv,runs,"[('unsigned char *', 'src'), ('float *', 'hsv'), ('int', 'width'), ('int', 'heigth'), ('int', 'step'), ('int', 'channels')]"
9551,1,convert_to_rgb,runs,"[('float *', 'hsv'), ('unsigned char *', 'dest'), ('int', 'width'), ('int', 'heigth'), ('int', 'step'), ('int', 'channels')]"
9556,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
9558,1,forwardPropagation,runs,"[('float *', 'a_d'), ('float *', 'b_d'), ('int', 'size')]"
956,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
9561,53,sync_conv_groups,runs,[]
9561,65,sync_streams,runs,[]
9576,16,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
9576,19,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
9576,21,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
9576,23,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
9576,25,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
9576,27,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
9576,28,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
9576,30,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
9576,33,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
9576,36,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
9584,0,bit_to_pauli_basis,runs,"[('double *', 'complex_dm'), ('unsigned int', 'mask'), ('unsigned int', 'no_qubits')]"
9584,1,pauli_reshuffle,runs,"[('double *', 'complex_dm'), ('double *', 'real_dm'), ('unsigned int', 'no_qubits'), ('unsigned int', 'direction')]"
9584,3,single_qubit_ptm,runs,"[('double *', 'dm'), ('double *', 'ptm_g'), ('unsigned int', 'bit'), ('unsigned int', 'no_qubits')]"
9584,4,two_qubit_ptm,runs,"[('double *', 'dm'), ('double *', 'ptm_g'), ('unsigned int', 'bit0'), ('unsigned int', 'bit1'), ('unsigned int', 'no_qubits')]"
9584,5,dm_reduce,runs,"[('double *', 'dm'), ('unsigned int', 'bit'), ('double *', 'dm0'), ('unsigned int', 'state'), ('unsigned int', 'no_qubits')]"
9584,6,get_diag,runs,"[('double *', 'dm9'), ('double *', 'out'), ('unsigned int', 'no_qubits')]"
9584,7,trace,runs,"[('double *', 'diag'), ('int', 'bit')]"
9584,8,swap,runs,"[('double *', 'dm'), ('unsigned int', 'bit1'), ('unsigned int', 'bit2'), ('unsigned int', 'no_qubits')]"
959,0,inverse_dft_with_w_correction,runs,"[('double2 *', 'grid'), ('size_t', 'grid_pitch'), ('const double3 *', 'visibilities'), ('const double2 *', 'vis_intensity'), ('int', 'vis_count'), ('int', 'batch_count'), ('int', 'x_offset'), ('int', 'y_offset'), ('int', 'render_size'), ('double', 'cell_size')]"
9592,0,AddIntsCUDA,runs,"[('int *', 'a'), ('int *', 'b')]"
9593,3,uniformAdd,runs,"[('int *', 'g_data'), ('int *', 'uniforms'), ('int', 'n'), ('int', 'blockOffset'), ('int', 'baseIndex')]"
9607,89,relu_gpu_forward,runs,"[('float *', 'out'), ('float *', 'in'), ('int64_t', 'N')]"
9607,90,relu_gpu_backward,runs,"[('float *', 'ingrad'), ('float *', 'outgrad'), ('float *', 'indata'), ('int64_t', 'N')]"
9618,0,analyze_id,runs,"[('Person *', 'people'), ('int *', 'statResults')]"
9618,1,analyze_age,runs,"[('Person *', 'people'), ('int *', 'statResults')]"
9618,2,analyze_height,runs,"[('Person *', 'people'), ('int *', 'statResults')]"
9618,6,AplusB,runs,"[('int *', 'ret'), ('int', 'a'), ('int', 'b')]"
9627,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
963,0,vecAdd,runs,"[('int *', 'A'), ('int *', 'B'), ('int *', 'C')]"
9633,0,func,runs,[]
9633,1,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
9633,2,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
9633,3,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
9633,4,func,runs,[]
9633,5,func,runs,[]
9634,0,extrapolate,runs,"[('float *', 'xbar'), ('float *', 'xcur'), ('float *', 'xn'), ('float', 'theta'), ('int', 'w'), ('int', 'h'), ('int', 'nc')]"
9634,1,solution,runs,"[('float *', 'img'), ('float *', 'xbar'), ('int', 'w'), ('int', 'h'), ('int', 'nc')]"
9634,2,dual,runs,"[('float *', 'xn'), ('float *', 'xcur'), ('float *', 'y1'), ('float *', 'y2'), ('float *', 'img'), ('float', 'tau'), ('float', 'lambda'), ('int', 'w'), ('int', 'h'), ('int', 'nc')]"
9634,3,primal,runs,"[('float *', 'u'), ('float *', 'u_'), ('const float *', 'f'), ('const float *', 'p1'), ('const float *', 'p2'), ('const double', 'tau'), ('const int', 'X'), ('const int', 'Y')]"
9634,4,init,runs,"[('float *', 'xbar'), ('float *', 'xcur'), ('float *', 'xn'), ('float *', 'y1'), ('float *', 'y2'), ('float *', 'img'), ('int', 'w'), ('int', 'h'), ('int', 'nc')]"
9634,5,dual,runs,"[('float *', 'p1'), ('float *', 'p2'), ('const float *', 'u_'), ('const double', 'lambda'), ('const double', 'sigma'), ('const int', 'X'), ('const int', 'Y')]"
9634,6,primal,runs,"[('float *', 'y1'), ('float *', 'y2'), ('float *', 'xbar'), ('float', 'sigma'), ('int', 'w'), ('int', 'h'), ('int', 'nc')]"
9634,7,init,runs,"[('float *', 'xbar'), ('float *', 'xcur'), ('float *', 'xn'), ('float *', 'y1'), ('float *', 'y2'), ('float *', 'img'), ('int', 'w'), ('int', 'h'), ('int', 'nc')]"
9634,8,dual,runs,"[('float *', 'xn'), ('float *', 'xcur'), ('float *', 'y1'), ('float *', 'y2'), ('float *', 'img'), ('float', 'tau'), ('float', 'lambda'), ('int', 'w'), ('int', 'h'), ('int', 'nc')]"
9634,9,solution,runs,"[('float *', 'img'), ('float *', 'xbar'), ('int', 'w'), ('int', 'h'), ('int', 'nc')]"
9634,10,primal,runs,"[('float *', 'y1'), ('float *', 'y2'), ('float *', 'xbar'), ('float', 'sigma'), ('int', 'w'), ('int', 'h'), ('int', 'nc')]"
9634,11,extrapolate,runs,"[('float *', 'xbar'), ('float *', 'xcur'), ('float *', 'xn'), ('float', 'theta'), ('int', 'w'), ('int', 'h'), ('int', 'nc')]"
9640,0,matmul,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'ARows'), ('int', 'ACols'), ('int', 'BRows'), ('int', 'BCols'), ('int', 'CRows'), ('int', 'CCols')]"
9640,1,matmul,runs,"[('float *', 'A'), ('float *', 'B'), ('float *', 'C'), ('int', 'ARows'), ('int', 'ACols'), ('int', 'BRows'), ('int', 'BCols'), ('int', 'CRows'), ('int', 'CCols')]"
9648,0,matricesMul,runs,"[('double *', 'm1'), ('double *', 'm2'), ('double *', 'm3')]"
9648,1,matMul,runs,"[('unsigned char *', 'image'), ('unsigned char *', 'resImage'), ('int', 'rows'), ('int', 'cols')]"
9649,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9649,303,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9649,308,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
965,2,relu_h,runs,"[('float *', 'X'), ('float *', 'Y'), ('int', 'size_in')]"
965,3,backward_relu_h,runs,"[('float *', 'X'), ('float *', 'Y'), ('int', 'size_in')]"
965,4,reduce_to_first_index_h,runs,"[('float *', 'X'), ('int', 'height'), ('int', 'width')]"
965,5,forward_bias,runs,"[('float *', 'X'), ('float *', 'b'), ('int', 'N'), ('int', 'ch_in'), ('int', 'h_in'), ('int', 'w_in')]"
965,9,grad_descent,runs,"[('float *', 'odata'), ('const float *', 'idata'), ('int', 'size')]"
965,10,conv_layer_forward_gpu,runs,"[('float *', 'x'), ('float *', 'w'), ('float *', 'y'), ('int', 'h_in'), ('int', 'w_in'), ('int', 'w_out'), ('int', 'k'), ('int', 'm')]"
965,11,unroll_kernel,runs,"[('int', 'h_in'), ('int', 'w_in'), ('int', 'k'), ('float *', 'x'), ('float *', 'x_unroll')]"
9651,0,prescan,runs,"[('float *', 'g_odata'), ('float *', 'g_idata'), ('int', 'n')]"
9651,1,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
9654,168,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9654,227,kTile,runs,"[('const float *', 'src'), ('float *', 'tgt'), ('const uint', 'srcWidth'), ('const uint', 'srcHeight'), ('const uint', 'tgtWidth'), ('const uint', 'tgtHeight')]"
9654,228,kDotProduct_r,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'target'), ('const uint', 'numElements')]"
9654,229,kSetupCurand,runs,"[('curandState *', 'state'), ('unsigned long long', 'seed')]"
9654,234,kLogregCost,runs,"[('float *', 'probs'), ('float *', 'labels'), ('float *', 'maxProbs'), ('float *', 'labelLogProbs'), ('float *', 'correctProbs'), ('const int', 'numCases'), ('const int', 'numOut')]"
9654,350,softmax_gradient_kernel,runs,"[('const int', 'dim'), ('const float *', 'Y'), ('const float *', 'dY'), ('float *', 'dX')]"
9654,355,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9664,11,dev_get_gravity_at_point,runs,"[('float', 'eps2'), ('float *', 'eps'), ('float *', 'xh'), ('float *', 'yh'), ('float *', 'zh'), ('float *', 'xt'), ('float *', 'yt'), ('float *', 'zt'), ('float *', 'ax'), ('float *', 'ay'), ('float *', 'az'), ('int', 'n'), ('float *', 'field_m'), ('float *', 'fxh'), ('float *', 'fyh'), ('float *', 'fzh'), ('float *', 'fxt'), ('float *', 'fyt'), ('float *', 'fzt'), ('int', 'n_field')]"
9664,12,dev_get_potential_at_point,runs,"[('float', 'eps2'), ('float *', 'eps'), ('float *', 'xh'), ('float *', 'yh'), ('float *', 'zh'), ('float *', 'xt'), ('float *', 'yt'), ('float *', 'zt'), ('float *', 'phi'), ('int', 'n'), ('float *', 'field_m'), ('float *', 'fxh'), ('float *', 'fyh'), ('float *', 'fzh'), ('float *', 'fxt'), ('float *', 'fyt'), ('float *', 'fzt'), ('int', 'n_field')]"
9664,13,dev_get_potential_energy,runs,"[('float *', 'partial_results'), ('float', 'eps2'), ('float *', 'field_m'), ('float *', 'fxh'), ('float *', 'fyh'), ('float *', 'fzh'), ('float *', 'fxt'), ('float *', 'fyt'), ('float *', 'fzt'), ('int', 'n_field')]"
9664,18,update_local_time,runs,"[('int *', 'next'), ('double *', 'local_time'), ('double', 'GTIME')]"
9664,19,sum_partial,runs,"[('double4 *', 'a'), ('double4 *', 'b'), ('unsigned int', 'nextsize')]"
9664,20,Corrector_gpu,runs,"[('double', 'GTIME'), ('double *', 'local_time'), ('double *', 'step'), ('int *', 'next'), ('unsigned long', 'nextsize'), ('double4 *', 'pos_CH'), ('double4 *', 'vel_CH'), ('double4 *', 'a_tot_D'), ('double4 *', 'a1_tot_D'), ('double4 *', 'a2_tot_D'), ('double4 *', 'a_H0'), ('double4 *', 'a3_H'), ('double', 'ETA6'), ('double', 'ETA4'), ('double', 'DTMAX'), ('double', 'DTMIN'), ('unsigned int', 'N')]"
9664,21,Reconstruct,runs,"[('int *', 'nex'), ('unsigned long', 'nextsize'), ('double4 *', 'pc'), ('double4 *', 'vc'), ('double4 *', 'a3'), ('double4 *', 'a'), ('double4 *', 'a1'), ('double4 *', 'a2'), ('double4 *', 'pva3'), ('double4 *', 'aaa')]"
9664,22,initvectors,runs,"[('double4 *', 'acc3'), ('float4 *', 'apred')]"
9664,23,Predictor,runs,"[('const double', 'TIME'), ('double4 *', 'p_pred'), ('float4 *', 'v_pred'), ('float4 *', 'a_pred'), ('double4 *', 'p_corr'), ('double4 *', 'v_corr'), ('double *', 'loc_time'), ('double4 *', 'acc'), ('double4 *', 'acc1'), ('double4 *', 'acc2'), ('double4 *', 'acc3'), ('int', 'istart'), ('int *', 'nvec'), ('int', 'ppgpus'), ('unsigned int', 'N')]"
9664,24,reduce,runs,"[('double4 *', 'ac'), ('double4 *', 'ac1'), ('double4 *', 'ac2'), ('unsigned int', 'bf_real'), ('unsigned int', 'dimension')]"
9664,25,reposition,runs,"[('double4 *', 'ac'), ('double4 *', 'ac1'), ('double4 *', 'ac2'), ('double4 *', 'af'), ('unsigned long', 'nextsize')]"
9664,34,compute_potential_gpu,runs,"[('float *', 'm'), ('float *', 'x'), ('float *', 'y'), ('float *', 'z'), ('float *', 'phi'), ('int', 'N'), ('int', 'N1')]"
9674,3,vectorMul,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
9674,4,vectorAdd,runs,"[('const float *', 'A'), ('const float *', 'B'), ('float *', 'C'), ('int', 'numElements')]"
9674,5,vectorReduce,runs,"[('const float *', 'global_input_data'), ('float *', 'global_output_data'), ('const int', 'numElements')]"
9674,6,VectorMultiplicationKernel,runs,"[('int *', 'array'), ('int', 'arrayCount')]"
968,0,addKernel,runs,"[('int *', 'c'), ('const int *', 'a'), ('const int *', 'b')]"
9685,3,THCudaTensor_kernel_renorm,runs,"[('float *', 'data'), ('const float', 'value'), ('const ptrdiff_t', 'size'), ('const float', 'maxnorm')]"
9685,5,conv2genericrev,runs,"[('float *', 'input'), ('float *', 'kernel'), ('float *', 'output'), ('int', 'input_n'), ('int', 'input_h'), ('int', 'input_w'), ('int', 'kernel_n'), ('int', 'kernel_h'), ('int', 'kernel_w'), ('float', 'alpha'), ('int', 'stride_h'), ('int', 'stride_w')]"
9688,0,bitonic_sort_step,runs,"[('int *', 'd_pr'), ('int *', 'd_bt'), ('int', 'j'), ('int', 'k')]"
9688,1,work_efficient_scan_kernel,runs,"[('int *', 'X'), ('int *', 'Y'), ('int', 'InputSize')]"
9688,2,bitonic_sort_step,runs,"[('float *', 'dev_values'), ('int', 'j'), ('int', 'k')]"
9688,3,inclusive_scan,runs,"[('const unsigned int *', 'X'), ('unsigned int *', 'Y'), ('int', 'N')]"
9690,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9690,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
9690,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9690,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9690,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9690,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9690,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9690,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
9690,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
9690,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
9690,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
9690,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
9690,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
9690,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
9690,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
9690,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
9690,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
9694,0,applyGaussianFilter,runs,"[('unsigned char *', 'input'), ('unsigned char *', 'output'), ('float *', 'kernel'), ('int', 'iHeight'), ('int', 'iWidth'), ('int', 'kWidth')]"
9694,1,applySobelFilter,runs,"[('unsigned char *', 'in'), ('unsigned char *', 'intensity'), ('float *', 'direction'), ('int', 'ih'), ('int', 'iw')]"
9695,0,jacobiMethod,runs,"[('float *', 'grid'), ('float *', 'potential'), ('int', 'sizeX'), ('int', 'sizeY'), ('float', 'scale'), ('int', 'noIters'), ('float', 'tolerance')]"
97,4,mapPrefixSumToPrisms,runs,"[('const unsigned', 'numberOfPrisms'), ('const unsigned', 'raysPerSample'), ('const unsigned', 'reflectionSlices'), ('const unsigned *', 'raysPerPrism'), ('const unsigned *', 'prefixSum'), ('unsigned *', 'indicesOfPrisms'), ('unsigned *', 'numberOfReflections')]"
9705,0,square_array,runs,"[('float *', 'a'), ('int', 'N')]"
971,0,test,runs,[]
971,3,ReferenceGemm_kernel,runs,"[('int', 'M'), ('int', 'N'), ('int', 'K'), ('float', 'alpha'), ('float const *', 'A'), ('int', 'lda'), ('float const *', 'B'), ('int', 'ldb'), ('float', 'beta'), ('float *', 'C'), ('int', 'ldc')]"
9722,0,copyUpperToLowerTriangleDense,runs,"[('double *', 'ret'), ('int', 'dim'), ('int', 'N')]"
9722,1,dense_matrix_set,runs,"[('double *', 'A'), ('double', 'scalar'), ('int', 'rlen'), ('int', 'clen')]"
9722,2,dense_matrix_copy,runs,"[('double *', 'A'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen')]"
9722,3,relu,runs,"[('double *', 'A'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen')]"
9722,4,reluBackward,runs,"[('double *', 'X'), ('double *', 'dout'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen')]"
9722,5,biasAdd,runs,"[('double *', 'input'), ('double *', 'bias'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen'), ('int', 'PQ')]"
9722,6,compareAndSet,runs,"[('double *', 'A'), ('double *', 'ret'), ('int', 'rlen'), ('int', 'clen'), ('double', 'compareVal'), ('double', 'tol'), ('double', 'ifEqualsVal'), ('double', 'ifLessThanVal'), ('double', 'ifGreaterThanVal')]"
9722,9,fill,runs,"[('double *', 'A'), ('double', 'scalar'), ('int', 'lenA')]"
9736,0,threadedHistKernel,runs,"[('int *', 'threadedHist'), ('int *', 'arr'), ('const int', 'blockSize'), ('const int', 'valRange'), ('const int', 'threadBlockSize')]"
9736,1,sumThreadedResultsKernel,runs,"[('long *', 'dev_hist'), ('int *', 'dev_threadedHist'), ('const int', 'valRange'), ('const int', 'Blocks')]"
974,6,kernResetIntBuffer,runs,"[('int', 'N'), ('int *', 'intBuffer'), ('int', 'value')]"
974,7,kernIdentifyCellStartEnd,runs,"[('int', 'N'), ('int *', 'particleGridIndices'), ('int *', 'gridCellStartIndices'), ('int *', 'gridCellEndIndices')]"
9767,1,dot,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'threadperblock'), ('int', 'max')]"
9767,35,sync_conv_groups,runs,[]
9769,0,multi,runs,"[('float *', 'a'), ('float *', 'b'), ('float *', 'c'), ('int', 'width')]"
977,4,reduce4,runs,"[('int *', 'g_idata'), ('int *', 'g_odata')]"
977,5,reduce5,runs,"[('int *', 'g_idata'), ('int *', 'g_odata')]"
977,6,reduce6,runs,"[('int *', 'g_idata'), ('int *', 'g_odata'), ('int', 'n')]"
977,9,timedReduction,runs,"[('const float *', 'input'), ('float *', 'output'), ('clock_t *', 'timer')]"
977,10,MatrixMul,runs,"[('int *', 'M'), ('int *', 'N'), ('int *', 'P'), ('int', 'width')]"
977,11,kernel,runs,"[('float *', 'a'), ('int', 'offset')]"
977,12,MatrixMul,runs,"[('int *', 'M'), ('int *', 'N'), ('int *', 'P'), ('int', 'width')]"
977,13,MatrixMul,runs,"[('int *', 'M'), ('int *', 'N'), ('int *', 'P'), ('int', 'width')]"
977,14,MatrixMul,runs,"[('int *', 'M'), ('int *', 'N'), ('int *', 'P'), ('int', 'width')]"
977,15,timedReduction,runs,"[('const float *', 'input'), ('float *', 'output'), ('clock_t *', 'timer')]"
977,16,MatrixMul,runs,"[('int *', 'M'), ('int *', 'N'), ('int *', 'P'), ('int', 'width')]"
977,17,timedReduction,runs,"[('const float *', 'input'), ('float *', 'output'), ('clock_t *', 'timer')]"
9770,0,nms_kernel,runs,"[('const int', 'n_boxes'), ('const float', 'nms_overlap_thres'), ('const float *', 'dev_boxes'), ('unsigned long long *', 'dev_mask')]"
978,0,kernel,runs,[]
978,1,helloFromGPU,runs,[]
978,2,kernel,runs,[]
9782,0,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
9782,1,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
9782,2,axpy,runs,"[('float', 'a'), ('float *', 'x'), ('float *', 'y')]"
9796,1,cuImageBrighten,runs,"[('const float *', 'dev_image'), ('float *', 'dev_out'), ('int', 'w'), ('int', 'h')]"
9796,3,gpu_monte_carlo,runs,"[('float *', 'estimate'), ('curandState *', 'states')]"
9798,29,reduce,runs,"[('double *', 'g_idata'), ('double *', 'g_odata'), ('unsigned int', 'n')]"
9798,30,normalize,runs,"[('double *', 'g_idata'), ('double *', 'g_odata'), ('unsigned int', 'n'), ('int', 'maxIndx')]"
9798,31,getTargetIndex,runs,"[('int', 'n'), ('int *', 'index'), ('double *', 'w')]"
9798,32,mismatch,runs,"[('int', 'n'), ('double *', 'actual'), ('double *', 'target'), ('int *', 'mis')]"
9798,33,setTargetIndex,runs,"[('int', 'n'), ('double *', 'w'), ('double *', 'out')]"
9798,34,setTargetIndexNormalize,runs,"[('int', 'n'), ('double', 'sum'), ('double *', 'w'), ('double *', 'out'), ('double *', 'output')]"
9798,35,backwardError,runs,"[('int', 'n'), ('double *', 'actual'), ('double *', 'target'), ('double *', 'out')]"
9798,36,difference,runs,"[('int', 'n'), ('double *', 'actual'), ('double *', 'target'), ('double *', 'out')]"
9798,37,reduce_exp,runs,"[('double *', 'g_idata'), ('double *', 'g_odata'), ('unsigned int', 'n')]"
9798,38,softmax,runs,"[('float *', 'g_idata'), ('float *', 'g_odata'), ('unsigned int', 'n')]"
9800,5,HistogramKernel,runs,"[('unsigned int *', 'input'), ('unsigned int', 'size'), ('unsigned int *', 'histogram'), ('unsigned int', 'pass')]"
9800,6,scan_sum_kernel,runs,"[('unsigned int *', 'input_vals'), ('unsigned int', 'pass'), ('unsigned int *', 'output'), ('unsigned int *', 'output_block'), ('unsigned int', 'size'), ('unsigned int', 'block_num')]"
9800,7,scan_kernel,runs,"[('unsigned int *', 'output_block'), ('unsigned int', 'block_num')]"
9800,8,scan_large_sum_kernel,runs,"[('unsigned int *', 'output_block'), ('unsigned int *', 'output_val'), ('unsigned int *', 'output_pos'), ('unsigned int *', 'input_val'), ('unsigned int *', 'input_pos'), ('unsigned int *', 'histogram'), ('unsigned int', 'pass'), ('unsigned int', 'block_num'), ('unsigned int', 'size')]"
9800,9,scatter_kernel,runs,"[('unsigned int *', 'd_inputVals'), ('unsigned int *', 'd_inputPos'), ('unsigned int *', 'd_outputVals'), ('unsigned int *', 'd_outputPos'), ('unsigned int *', 'cu_outputVals'), ('size_t', 'numElems')]"
9805,0,launchDecode,runs,[]
9806,0,kernel,runs,[]
9810,42,kernel_setup_curand,runs,"[('curandState *', 'state'), ('int', 'seed'), ('int', 'n')]"
9818,3,ComputeHomographies,runs,"[('float *', 'coord'), ('int *', 'randPts'), ('float *', 'homo'), ('int', 'numPts')]"
9818,6,ScaleUp,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height'), ('int', 'newpitch')]"
982,0,kernel,runs,[]
982,1,helloFromGPU,runs,[]
982,2,kernel,runs,[]
9822,0,cuda_cmp_kernel,runs,"[('std::size_t', 'n'), ('int *', 'aptr'), ('int *', 'bptr'), ('int *', 'rptr')]"
9823,0,setup_kernel,runs,"[('curandStateMRG32k3a *', 'state'), ('unsigned int', 'seed')]"
9823,1,run_kernel,runs,"[('curandStateMRG32k3a *', 'state'), ('unsigned int *', 'result')]"
9824,0,_medianfilter,runs,"[('const element *', 'signal'), ('element *', 'result')]"
9824,1,kernel_calculate_sum,runs,"[('double *', 'dev_array_sums'), ('unsigned int', 'array_size'), ('double *', 'dev_block_sums')]"
9824,2,Compute_Path,runs,"[('int *', 'Md'), ('const int', 'Width'), ('const int', 'k')]"
9831,38,sync_conv_groups,runs,[]
9842,0,batcherBitonicMergesort64,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
9842,1,reduce,runs,"[('unsigned int *', 'd_out_shared'), ('const unsigned int *', 'd_in')]"
9842,3,smooth,runs,"[('float *', 'v_new'), ('const float *', 'v')]"
9842,6,normalize_cdf,runs,"[('unsigned int *', 'd_input_cdf'), ('float *', 'd_output_cdf'), ('int', 'n')]"
9842,7,tonemap,runs,"[('float *', 'd_x'), ('float *', 'd_y'), ('float *', 'd_log_Y'), ('float *', 'd_cdf_norm'), ('float *', 'd_r_new'), ('float *', 'd_g_new'), ('float *', 'd_b_new'), ('float', 'min_log_Y'), ('float', 'max_log_Y'), ('float', 'log_Y_range'), ('int', 'num_bins'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x')]"
9842,9,remove_redness_from_coordinates,runs,"[('const unsigned int *', 'd_coordinates'), ('unsigned char *', 'd_r'), ('unsigned char *', 'd_b'), ('unsigned char *', 'd_g'), ('unsigned char *', 'd_r_output'), ('int', 'num_coordinates'), ('int', 'num_pixels_y'), ('int', 'num_pixels_x'), ('int', 'template_half_height'), ('int', 'template_half_width')]"
9842,20,global_reduce_kernel,runs,"[('float *', 'd_out'), ('float *', 'd_in')]"
9842,21,shmem_reduce_kernel,runs,"[('float *', 'd_out'), ('const float *', 'd_in')]"
9842,22,naive_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
9842,23,simple_histo,runs,"[('int *', 'd_bins'), ('const int *', 'd_in'), ('const int', 'BIN_COUNT')]"
9842,24,hello,runs,[]
9842,28,hello,runs,[]
9846,5,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9846,9,ComputeOrientations,runs,"[('float *', 'g_Data'), ('float *', 'd_Sift'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
9846,10,SubtractMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9846,12,LowPassRowMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9846,13,LowPassColMulti,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9846,15,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9846,16,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'pitch'), ('int', 'height')]"
9846,17,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
9846,19,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
9846,23,Subtract,runs,"[('float *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('int', 'width'), ('int', 'height')]"
9846,24,MultiplyAdd,runs,"[('float *', 'd_Result'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
9846,25,FindMinMax,runs,"[('float *', 'd_MinMax'), ('float *', 'd_Data'), ('int', 'width'), ('int', 'height')]"
9846,26,Find3DMinMax,runs,"[('int *', 'd_Result'), ('float *', 'd_Data1'), ('float *', 'd_Data2'), ('float *', 'd_Data3'), ('int', 'width'), ('int', 'height')]"
9846,27,UnpackPointers,runs,"[('int *', 'minmax'), ('int *', 'ptrs'), ('int', 'w'), ('int', 'h'), ('int', 'maxPts')]"
9846,28,ComputePositions,runs,"[('float *', 'g_Data1'), ('float *', 'g_Data2'), ('float *', 'g_Data3'), ('int *', 'd_Ptrs'), ('float *', 'd_Sift'), ('int', 'numPts'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
9846,29,ComputeOrientations,runs,"[('float *', 'g_Data'), ('int *', 'd_Ptrs'), ('float *', 'd_Orient'), ('int', 'maxPts'), ('int', 'w'), ('int', 'h')]"
9846,34,TestHomographies,runs,"[('float *', 'd_coord'), ('float *', 'd_homo'), ('int *', 'd_counts'), ('int', 'numPts'), ('float', 'thresh2')]"
9865,8,computeSphereVertexDistancesKernel,runs,"[('float4 *', 'V'), ('float *', 'dist'), ('unsigned int *', 'NEIGHBOR'), ('unsigned int *', 'NBOFFSETS'), ('unsigned int *', 'nNeighbors'), ('unsigned int', 'nVertices'), ('float', 'circumference')]"
9865,9,GradientAverageKernel,runs,"[('float4 *', 'D'), ('float4 *', 'TD'), ('unsigned int *', 'NEIGHBOR'), ('unsigned int *', 'NBOFFSETS'), ('unsigned int *', 'nNeighbors'), ('unsigned int', 'nVertices')]"
9865,10,updateGradientsKernel,runs,"[('float4 *', 'D'), ('float4 *', 'TD'), ('unsigned int', 'nVertices')]"
9875,0,CudaKernel_BatchResize_GRAY2GRAY,runs,"[('int', 'src_width'), ('unsigned char *', 'src_image'), ('int', 'num_rects'), ('int *', 'rects'), ('int', 'dst_width'), ('int', 'dst_height'), ('float *', 'dst_ptr')]"
9878,1,update_veloc_acoustic_kernel,runs,"[('float *', 'veloc'), ('const float *', 'accel'), ('const int', 'size'), ('const float', 'deltatover2')]"
9878,4,assemble_boundary_potential_on_device,runs,"[('float *', 'd_potential_dot_dot_acoustic'), ('const float *', 'd_send_potential_dot_dot_buffer'), ('const int', 'num_interfaces'), ('const int', 'max_nibool_interfaces'), ('const int *', 'd_nibool_interfaces'), ('const int *', 'd_ibool_interfaces')]"
9878,5,update_accel_acoustic_kernel,runs,"[('float *', 'accel'), ('const int', 'size'), ('const float *', 'rmass')]"
9878,15,update_veloc_elastic_kernel,runs,"[('float *', 'veloc'), ('const float *', 'accel'), ('const int', 'size'), ('const float', 'deltatover2')]"
9878,17,prepare_boundary_potential_on_device,runs,"[('const float *', 'd_potential_dot_dot_acoustic'), ('float *', 'd_send_potential_dot_dot_buffer'), ('const int', 'num_interfaces'), ('const int', 'max_nibool_interfaces'), ('const int *', 'd_nibool_interfaces'), ('const int *', 'd_ibool_interfaces')]"
9878,31,assemble_boundary_accel_on_device,runs,"[('float *', 'd_accel'), ('const float *', 'd_send_accel_buffer'), ('const int', 'num_interfaces'), ('const int', 'max_nibool_interfaces'), ('const int *', 'd_nibool_interfaces'), ('const int *', 'd_ibool_interfaces')]"
9878,32,prepare_boundary_accel_on_device,runs,"[('const float *', 'd_accel'), ('float *', 'd_send_accel_buffer'), ('const int', 'num_interfaces'), ('const int', 'max_nibool_interfaces'), ('const int *', 'd_nibool_interfaces'), ('const int *', 'd_ibool_interfaces')]"
9878,34,update_potential_kernel,runs,"[('float *', 'potential_acoustic'), ('float *', 'potential_dot_acoustic'), ('float *', 'potential_dot_dot_acoustic'), ('const int', 'size'), ('const float', 'deltat'), ('const float', 'deltatsqover2'), ('const float', 'deltatover2')]"
9878,35,update_disp_veloc_kernel,runs,"[('float *', 'displ'), ('float *', 'veloc'), ('float *', 'accel'), ('const int', 'size'), ('const float', 'deltat'), ('const float', 'deltatsqover2'), ('const float', 'deltatover2')]"
9878,36,update_accel_elastic_kernel,runs,"[('float *', 'accel'), ('const float *', 'veloc'), ('const int', 'size'), ('const float', 'two_omega_earth'), ('const float *', 'rmassx'), ('const float *', 'rmassy'), ('const float *', 'rmassz')]"
988,0,compute_gpu,runs,"[('float *', 'img'), ('float *', 'f'), ('float *', 'out'), ('int', 'bh'), ('int', 'bw'), ('int', 'imgH'), ('int', 'imgW'), ('int', 'imgN'), ('int', 'nF'), ('int', 'convH'), ('int', 'convW')]"
9887,95,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
9887,96,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
9887,97,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
9887,98,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
9887,169,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
989,4,step_1_row_sub,runs,[]
989,5,step_1_col_sub,runs,[]
989,6,compress_matrix,runs,[]
9899,0,RoyFloyd,runs,"[('int *', 'matrix'), ('int', 'k'), ('int', 'N')]"
990,0,cuda_mat_multiply,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('int', 'rowsa'), ('int', 'colsa'), ('int', 'rowsb'), ('int', 'colsb'), ('int', 'rowsc'), ('int', 'colsc')]"
990,1,cu_addition,runs,"[('const double *', 'A'), ('const double *', 'B'), ('double *', 'C'), ('const int', 'n')]"
990,2,cuda_mat_transpose,runs,"[('const double *', 'src'), ('double *', 'dst'), ('int', 'colssrc'), ('int', 'colsdst'), ('int', 'n')]"
990,3,cu_sigmoid,runs,"[('double *', 'src'), ('double *', 'dst'), ('int', 'n')]"
990,4,cu_mat_scalar_addition,runs,"[('double *', 'A'), ('const double', 'b'), ('const int', 'n')]"
990,5,cu_mat_scalar_multiply,runs,"[('double *', 'A'), ('double', 'B'), ('const int', 'n')]"
990,6,cu_mat_scalar_divide,runs,"[('double *', 'A'), ('double', 'B'), ('const int', 'n')]"
990,7,cu_elementWiseMultiply,runs,"[('double *', 'A'), ('const double *', 'B'), ('const int', 'n')]"
990,8,cu_dsigmoid_a,runs,"[('double *', 'src'), ('double *', 'dst'), ('int', 'n')]"
990,9,cu_dsigmoid,runs,"[('double *', 'src'), ('double *', 'dst'), ('int', 'n')]"
9911,0,kernel_move_inv_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern')]"
9911,3,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int *', 'err'), ('unsigned long *', 'err_addr'), ('unsigned long *', 'err_expect'), ('unsigned long *', 'err_current'), ('unsigned long *', 'err_second_read')]"
9911,5,kernel_test0_global_write,runs,"[('char *', '_ptr'), ('char *', '_end_ptr')]"
9911,7,kernel_test0_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
9911,9,kernel_test1_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int *', 'err')]"
9911,11,kernel_test5_init,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
9911,12,kernel_test5_move,runs,"[('char *', '_ptr'), ('char *', 'end_ptr')]"
9911,14,kernel_movinv32_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'pattern'), ('unsigned int', 'lb'), ('unsigned int', 'sval'), ('unsigned int', 'offset')]"
9911,17,kernel_test7_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('char *', '_start_ptr'), ('unsigned int *', 'err')]"
9911,20,kernel_modtest_write,runs,"[('char *', '_ptr'), ('char *', 'end_ptr'), ('unsigned int', 'offset'), ('unsigned int', 'p1'), ('unsigned int', 'p2')]"
9916,35,sync_conv_groups,runs,[]
9916,40,sync_streams,runs,[]
992,0,simple_vbo_kernel,runs,"[('float4 *', 'pos'), ('unsigned int', 'width'), ('unsigned int', 'height'), ('float', 'time')]"
992,8,crossFade,runs,"[('float *', 'out1'), ('float *', 'out2'), ('int', 'numFrames')]"
992,9,timeDomainConvolutionNaive,runs,"[('float *', 'ibuf'), ('float *', 'rbuf'), ('float *', 'obuf'), ('long long', 'oframes'), ('long long', 'rframes'), ('int', 'ch'), ('float', 'gain')]"
992,10,interleave,runs,"[('float *', 'input'), ('float *', 'output'), ('int', 'size')]"
992,11,MyFloatScale,runs,"[('float *', 'a'), ('float', 'scale'), ('int', 'size')]"
992,14,doNothing,runs,[]
992,15,fillZeros,runs,"[('float *', 'buf'), ('int', 'size')]"
9920,0,kernel,runs,[]
9921,0,Mean_SD_Norm,runs,"[('float *', 'input'), ('float *', 'output'), ('float *', 'mean_out'), ('float *', 'sd_out'), ('int', 'dim1'), ('int', 'numThread'), ('int', 'eval_ceil')]"
9922,4,init_random,runs,"[('unsigned long long *', 'seed'), ('curandState *', 'global_state')]"
9922,5,random,runs,"[('double *', 'x'), ('curandState *', 'global_state')]"
9922,6,UniformRandom,runs,"[('double *', 'x'), ('curandState *', 'global_state')]"
9924,7,emptyKernel,runs,[]
9925,5,quark_filter_gpu_sm2,runs,"[('const uint32_t', 'threads'), ('const uint32_t *', 'd_hash'), ('uint32_t *', 'd_branch2'), ('uint32_t *', 'd_NonceBranch')]"
9925,16,lyra2Z_gpu_hash_32_sm2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash'), ('uint32_t *', 'resNonces')]"
9925,18,lyra2Z_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash')]"
9925,19,lyra2Z_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint2 *', 'g_hash'), ('uint32_t *', 'resNonces')]"
9925,23,lyra2_gpu_hash_32_2,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint64_t *', 'g_hash')]"
9925,24,lyra2_gpu_hash_32_3,runs,"[('uint32_t', 'threads'), ('uint32_t', 'startNounce'), ('uint2 *', 'g_hash')]"
993,0,kernel,runs,[]
993,1,helloFromGPU,runs,[]
993,2,kernel,runs,[]
994,1,dropout_op,runs,"[('size_t', 'sz'), ('float_t *', 'random_nums'), ('float_t *', 'data'), ('float_t', 'drop_rate'), ('float_t', 'scale')]"
994,2,dense_mv_add,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest')]"
994,3,dense_add,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest')]"
994,4,dense_add_conv,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'bias_dim')]"
994,5,transpose,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'src_width'), ('size_t', 'src_height')]"
994,6,fractional_stride_nchw,runs,"[('size_t', 'num_values'), ('size_t', 'stride'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'ld_src'), ('size_t', 'ld_dest')]"
994,7,reshape,runs,"[('size_t', 'num_values'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'ld_src'), ('size_t', 'ld_dest')]"
994,8,transformation,runs,"[('size_t', 'num_values'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'ld_src'), ('size_t', 'ld_dest')]"
994,10,affine_transform,runs,"[('size_t', 'sz'), ('float_t *', 'audio'), ('float_t *', 'end_out'), ('size_t', 'stride')]"
994,11,skip_res_add,runs,"[('size_t', 'sz'), ('float_t *', 'f5'), ('float *', 'f1'), ('float_t *', 'skip_out_sum'), ('size_t', 'stride')]"
994,12,skip_add,runs,"[('size_t', 'sz'), ('float_t *', 'f1'), ('float *', 'skip_out_sum')]"
994,13,copy_kernel,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest')]"
994,14,transpose_kernel,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest'), ('size_t', 'ld_src'), ('size_t', 'ld_dest')]"
994,15,concat_z,runs,"[('size_t', 'sz'), ('float_t *', 'src'), ('float_t *', 'dest'), ('float_t *', 'z'), ('size_t', 'stride')]"
9940,179,downscale,runs,"[('float *', 'gradInput_data'), ('const float *', 'gradOutput_data'), ('long', 'no_elements'), ('int', 'scale_factor'), ('int', 'd1'), ('int', 'd2'), ('int', 'd3')]"
9940,320,AccuracyDivideKernel,runs,"[('const int', 'N'), ('float *', 'accuracy')]"
9943,0,cuda_cmp_kernel,runs,"[('std::size_t', 'n'), ('int *', 'aptr'), ('int *', 'bptr'), ('int *', 'rptr')]"
9959,9,cuda_fill,runs,"[('double *', 'pVec'), ('double', 'val'), ('int', 'n')]"
9959,10,cuda_activateTanh,runs,"[('double *', 'pA'), ('int', 'n')]"
9959,11,cuda_deactivateTanh,runs,"[('double *', 'pE'), ('const double *', 'pA'), ('int', 'n')]"
9959,13,cuda_deactivateBend,runs,"[('double *', 'pE'), ('const double *', 'pA'), ('int', 'n')]"
9959,14,cuda_conv2D_ff,runs,"[('double *', 'pA'), ('double *', 'pNet'), ('const double *', 'in'), ('const double *', 'pKernels'), ('const double *', 'pBias'), ('size_t', 'kernelCount'), ('size_t', 'kernelRows'), ('size_t', 'kernelCols'), ('size_t', 'outputRows'), ('size_t', 'outputCols'), ('size_t', 'inputRows'), ('size_t', 'inputCols'), ('size_t', 'inputChannels'), ('size_t', 'padding'), ('size_t', 'stride')]"
9959,15,cuda_conv2D_deactivate,runs,"[('double *', 'err'), ('const double *', 'net'), ('const double *', 'activation'), ('size_t', 'outputs')]"
9959,16,cuda_conv2D_backPropError,runs,"[('double *', 'upStreamError'), ('const double *', 'err'), ('const double *', 'pKernels'), ('size_t', 'kernelCount'), ('size_t', 'kernelRows'), ('size_t', 'kernelCols'), ('size_t', 'outputRows'), ('size_t', 'outputCols'), ('size_t', 'inputChannels'), ('size_t', 'inputRows'), ('size_t', 'inputCols'), ('size_t', 'padding'), ('size_t', 'stride')]"
9959,17,cuda_conv2D_updateDeltas,runs,"[('double *', 'delta'), ('double *', 'biasDelta'), ('const double *', 'upStreamActivation'), ('const double *', 'err'), ('double', 'momentum'), ('size_t', 'kernelCount'), ('size_t', 'kernelRows'), ('size_t', 'kernelCols'), ('size_t', 'outputRows'), ('size_t', 'outputCols'), ('size_t', 'inputChannels'), ('size_t', 'inputRows'), ('size_t', 'inputCols'), ('size_t', 'padding'), ('size_t', 'stride')]"
996,0,hoCalc,runs,"[('double *', 'rn'), ('double *', 'soilHeat'), ('double *', 'ho'), ('int', 'width_band')]"
9965,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
9965,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
9965,2,func,runs,[]
9965,3,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
9965,4,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
9965,5,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
9965,6,func,runs,[]
9965,7,func,runs,[]
9967,94,ForwardWarpKernel_PSF2x2,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'normalization_factor'), ('float *', 'dst')]"
9967,95,ForwardWarpKernel_PSF1x1,runs,"[('const float *', 'u'), ('const float *', 'v'), ('const float *', 'src'), ('const int', 'w'), ('const int', 'h'), ('const int', 'flow_stride'), ('const int', 'image_stride'), ('const float', 'time_scale'), ('float *', 'dst')]"
9967,96,NormalizeKernel,runs,"[('const float *', 'normalization_factor'), ('int', 'w'), ('int', 'h'), ('int', 's'), ('float *', 'image')]"
9967,97,MemsetKernel,runs,"[('const float', 'value'), ('int', 'w'), ('int', 'h'), ('float *', 'image')]"
9967,168,mergeLocation,runs,"[('const short2 *', 'loc_'), ('float *', 'x'), ('float *', 'y'), ('const int', 'npoints'), ('float', 'scale')]"
9978,0,VNU_kernel,runs,"[('short int *', 'device_array'), ('short int *', 'offset_array'), ('short int *', 'sign_array'), ('short int *', 'results_array')]"
9978,1,CNU_kernel,runs,"[('short int *', 'offset_array'), ('short int *', 'results_array')]"
9979,0,Inc1,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
9979,1,Inc2,runs,"[('float *', 'Ad'), ('float *', 'Bd')]"
9980,27,sigmoid64,runs,"[('double *', 'A'), ('int', 'size')]"
9980,28,sigmoid32,runs,"[('float *', 'A'), ('int', 'size')]"
9984,0,gaxpymm,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'b'), ('int', 'm'), ('int', 'n'), ('int', 'p')]"
9984,1,gaxpy,runs,"[('double *', 'y'), ('double *', 'a'), ('double *', 'x'), ('int', 'm'), ('int', 'n')]"
9984,2,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
9984,3,multMatriz,runs,"[('float *', 'da'), ('float *', 'db'), ('float *', 'dc'), ('int', 'num')]"
9984,4,indices,runs,[]
9984,7,func,runs,[]
9984,8,suma,runs,"[('int', 'a'), ('int', 'b'), ('int *', 'c')]"
9984,9,MatrixMul,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
9984,10,MatrixMulSh,runs,"[('float *', 'Md'), ('float *', 'Nd'), ('float *', 'Pd'), ('const int', 'WIDTH')]"
9984,11,func,runs,[]
9984,13,func,runs,[]
9987,1,p_ary_search,runs,"[('int', 'search'), ('int', 'array_length'), ('int *', 'arr'), ('int *', 'ret_val')]"
9994,1,multiply_device,runs,"[('double *', 'd_a'), ('double *', 'd_b'), ('int', 'dim')]"
9994,2,multiply_device,runs,"[('double *', 'd_a'), ('double *', 'd_b'), ('int', 'dim')]"
9994,4,multiply_device,runs,"[('double *', 'd_a'), ('double *', 'd_b'), ('int', 'dim')]"
9995,15,TEST,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
9995,18,TEST,runs,"[('int', 'n'), ('float *', 'x'), ('float *', 'y')]"
9995,22,Naive_Hist,runs,"[('int *', 'd_result'), ('int *', 'd_hist'), ('int', 'n_vertices')]"
9995,24,OPT_1_HIST,runs,"[('int *', 'lcm'), ('int *', 'hist'), ('int', 'n')]"
9995,25,OPT_2_SIZES,runs,"[('int *', 'd_adjList'), ('int *', 'd_sizeAdj'), ('int *', 'd_LCMSize'), ('int', 'n_vertices')]"
9995,26,OPT_2,runs,"[('int *', 'd_adjList'), ('int *', 'd_sizeAdj'), ('int *', 'd_lcmMatrix'), ('int *', 'd_LCMSize'), ('int', 'n_vertices')]"
9995,27,OPT_3_SIZES,runs,"[('int *', 'adj'), ('int *', 'lcmsizes'), ('int *', 'sizes'), ('int', 'n')]"
9995,28,OPT_3_SIZES_SUM,runs,"[('int *', 'lcmsizes'), ('int', 'n')]"
9995,30,OPT_3_HIST,runs,"[('int *', 'lcm'), ('int *', 'hist'), ('int *', 'lcmsizes'), ('int', 'n')]"
9995,31,OPT_4_SIZES,runs,"[('int *', 'd_adjList'), ('int *', 'd_sizeAdj'), ('int *', 'd_LCMSize'), ('int', 'n_vertices')]"
9995,32,OPT_4,runs,"[('int *', 'd_adjList'), ('int *', 'd_sizeAdj'), ('int *', 'd_lcmMatrix'), ('int *', 'd_LCMSize'), ('int', 'n_vertices')]"
9995,33,OPT_4_HIST,runs,"[('int *', 'd_lcmMatrix'), ('int *', 'd_LCMSize'), ('int *', 'd_histogram'), ('int', 'n_vertices')]"
9998,35,gSetSparse,runs,"[('float *', 'out'), ('const size_t *', 'indices'), ('const float *', 'values'), ('int', 'length')]"
9998,42,gMaxPoolingForward,runs,"[('float *', 'out'), ('int', 'outRows'), ('int', 'outCols'), ('float *', 'in'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
9998,43,gMaxPoolingBackward,runs,"[('float *', 'adj'), ('int', 'adjRows'), ('int', 'adjCols'), ('float *', 'in'), ('float *', 'adjIn'), ('int', 'inRows'), ('int', 'inCols'), ('float *', 'mask'), ('int', 'numKernels'), ('int', 'maskCols'), ('int', 'width'), ('int', 'lastWidth')]"
9998,46,gGetValueByKey,runs,"[('float *', 'd_in'), ('float *', 'd_out'), ('int *', 'indeces'), ('int', 'n')]"
9998,49,gScatterAdd,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
9998,50,gScatterUpdate,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"
9998,51,gGather,runs,"[('float *', 'denseData'), ('float *', 'sparseData'), ('int *', 'sparseIndices'), ('int', 'denseSize'), ('int', 'sparseSize'), ('int', 'offset')]"

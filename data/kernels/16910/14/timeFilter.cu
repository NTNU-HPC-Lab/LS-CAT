#include "includes.h"
const int  Nthreads = 1024, maxFR = 100000, NrankMax = 3, nmaxiter = 500, NchanMax = 32;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

// THIS UPDATE DOES NOT UPDATE ELOSS?
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////






//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
__global__ void	timeFilter(const double *Params, const float *data, const float *W,float *conv_sig){
volatile __shared__ float  sW2[81*NrankMax], sW[81*NrankMax], sdata[(Nthreads+81)*NrankMax];
float x;
int tid, tid0, bid, i, nid, Nrank, NT, Nfilt, nt0;

tid 		= threadIdx.x;
bid 		= blockIdx.x;
NT      	=   (int) Params[0];
Nfilt    	=   (int) Params[1];
Nrank     = (int) Params[6];
nt0       = (int) Params[4];

if(tid<nt0*Nrank)
sW[tid]  = W[tid%nt0 + (bid + Nfilt * (tid/nt0))* nt0];

__syncthreads();

tid0 = 0;
while (tid0<NT-Nthreads-nt0+1){
if (tid<nt0*NrankMax)
sdata[tid%nt0 + (tid/nt0)*(Nthreads+nt0)] =
data[tid0 + tid%nt0+ NT*(bid + Nfilt*(tid/nt0))];

#pragma unroll 3
for(nid=0;nid<Nrank;nid++){
sdata[tid + nt0+nid*(Nthreads+nt0)] = data[nt0+tid0 + tid+ NT*(bid +nid*Nfilt)];
}
__syncthreads();

x = 0.0f;
for(nid=0;nid<Nrank;nid++){
#pragma unroll 4
for(i=0;i<nt0;i++)
x    += sW[i + nid*nt0]  * sdata[i+tid + nid*(Nthreads+nt0)];
}
conv_sig[tid0  + tid + NT*bid]              = x;

tid0+=Nthreads;
__syncthreads();
}
}
#include "includes.h"
const int  Nthreads = 1024, maxFR = 100000, NrankMax = 3, nmaxiter = 500, NchanMax = 32;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

// THIS UPDATE DOES NOT UPDATE ELOSS?
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////






//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
__global__ void  bestFilterUpdate(const double *Params, const float *data, const float *mu, float *err, float *eloss, int *ftype, const int *st, const int *id, const int *counter){
int tid,  ind, i,t, NT, Nfilt, ibest = 0, nt0;
float  Cf, Cbest, lam, b, a, Cnextbest;

tid 		= threadIdx.x;
NT 		= (int) Params[0];
Nfilt 	= (int) Params[1];
lam 	    = (float) Params[7];
nt0       = (int) Params[4];


// we only need to compute this at updated locations
ind = counter[1] + blockIdx.x;

if (ind<counter[0]){
t = st[ind]-nt0 + tid;
if (t>=0 && t<NT){
Cbest = 0.0f;
for (i=0; i<Nfilt;i++){
a = 1+ lam;
b = max(0.0f, data[t + NT * i]) + lam * mu[i];

Cf =  b*b/a - lam * mu[i]*mu[i];

if (Cf > Cbest + 1e-6){
Cnextbest = Cbest;
Cbest 	= Cf;
ibest 	= i;
}
else
if  (Cf > Cnextbest + 1e-6)
Cnextbest = Cf;
}
err[t] 	= Cbest;
ftype[t] 	= ibest;
}
}
}
#include "includes.h"
const int  Nthreads = 1024, maxFR = 100000, NrankMax = 3, nmaxiter = 500, NchanMax = 32;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

// THIS UPDATE DOES NOT UPDATE ELOSS?
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////






//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
__global__ void  bestFilter(const double *Params, const float *data, const float *mu, float *err, float *eloss, int *ftype){
int tid, tid0, i, bid, NT, Nfilt, ibest = 0, nt0;
float  Cf, Cbest, lam, b, a, Cnextbest;

tid 		= threadIdx.x;
bid 		= blockIdx.x;
NT 		= (int) Params[0];
Nfilt 	= (int) Params[1];
lam 	    = (float) Params[7];
nt0       = (int) Params[4];

tid0 = tid + bid * blockDim.x;
while (tid0<NT-nt0){
Cbest = 0.0f;
Cnextbest = 0.0f;

for (i=0; i<Nfilt;i++){

a = 1+ lam;
b = max(0.0f, data[tid0 + NT * i]) + lam * mu[i];
Cf =  b*b/a - lam * mu[i]*mu[i];

if (Cf > Cbest + 1e-6){
Cnextbest = Cbest;
Cbest 	= Cf;
ibest 	= i;
}
else
if  (Cf > Cnextbest + 1e-6)
Cnextbest = Cf;
}
err[tid0] 	= Cbest;
eloss[tid0] 	= Cbest - Cnextbest;
ftype[tid0] 	= ibest;

tid0 += blockDim.x * gridDim.x;
}
}
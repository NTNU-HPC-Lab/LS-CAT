#include "includes.h"




#define IMUL(a, b) __mul24(a, b)
#define iDivUp(a,b) ((a)+(b)-1)/(b)
#define CONV1_THREAD_SIZE 256
#define CONVN_THREAD_SIZE1 16
#define CONVN_THREAD_SIZE2 31 //31 is faster than 32 because shared memory is too full

// 28 space-time orientations of V1 simple cells
#define nrFilters 28

// 8 directions
#define nrDirs 8

// each of these is a unit vector (e.g. d_v1popDirs[0][1..3] => (-0.6559)^2+(0.7246)^2+(0.2113)^2 == 1
// all vectors lie on the surface of a dome (hemisphere) in 3D Fourier space
// x, y, t
__constant__ float d_v1popDirs[3][nrFilters] = {
{ 0.7246,-0.9718, 0.7496,-0.5837,-0.0810, 0.9439, 0.3203,-0.8712,-0.1593,-0.5142, 0.9304, 0.3737,-0.8031,-0.8126, 0.6004,-0.5738, 0.0024, 0.5969, 0.1436, 0.7757,-0.4004,-0.5108, 0.2375,-0.2221,-0.5140, 0.5194,-0.0870, 0.3838},
{-0.6559,-0.1019, 0.6240,-0.7797, 0.9692,-0.2312,-0.9151, 0.4207,-0.9533, 0.8175, 0.2398, 0.8810,-0.4430, 0.0588,-0.5384, 0.5644, 0.7931, 0.5142,-0.7680,-0.0669,-0.6670,-0.2747, 0.5034, 0.5042, 0.1580, 0.1332,-0.5159,-0.3549},
{ 0.2113, 0.2126, 0.2210, 0.2266, 0.2327, 0.2359, 0.2451, 0.2529, 0.2567, 0.2593, 0.2772, 0.2902, 0.3984, 0.5799, 0.5913, 0.5935, 0.6091, 0.6160, 0.6241, 0.6275, 0.6283, 0.8146, 0.8308, 0.8345, 0.8431, 0.8441, 0.8522, 0.8525}
};

// \TODO use dynamic shared memory to allocate interpolation weights from filters onto directions
//extern __shared__ float motionProjDyn[];

__constant__ float motionProj[3][nrFilters][nrDirs] = {
// 1.5 px/fr
{{0.002719, 0.011644, -0.002266, -0.094267, -0.088188, -0.021185, -0.097296, -0.081224},
{-0.023337, -0.106719, -0.077625, 0.007519, 0.015789, -0.006119, -0.100403, -0.080257},
{0.002680, -0.081351, -0.101069, -0.017226, -0.080847, -0.101749, -0.007590, 0.013499},
{-0.105574, -0.075236, 0.004742, 0.012976, -0.014051, -0.107587, -0.074961, -0.019999},
{-0.101953, -0.078081, -0.011287, -0.098204, -0.084890, 0.000210, 0.010038, -0.012016},
{0.013383, 0.006850, -0.065943, -0.111274, -0.019242, -0.057148, -0.114513, -0.024744},
{-0.061140, 0.005103, 0.009873, -0.040867, -0.119077, -0.040599, -0.024648, -0.118630},
{-0.044083, -0.024613, -0.117431, -0.058263, 0.008179, 0.011178, -0.041624, -0.123260},
{-0.117735, -0.024345, 0.008927, -0.001303, -0.081491, -0.104572, -0.007043, -0.067123},
{-0.112299, -0.007929, -0.052488, -0.116908, -0.030257, 0.009875, 0.000031, -0.080050},
{0.005659, -0.038535, -0.118830, -0.041564, -0.003097, -0.109397, -0.074442, -0.001213},
{-0.058675, -0.117962, -0.014533, -0.012484, -0.117591, -0.062163, 0.000398, 0.002208},
{0.018759, -0.114775, -0.072420, -0.015796, -0.024858, -0.096423, -0.092574, 0.055902},
{0.186206, 0.066666, -0.093901, -0.083400, -0.050103, -0.073462, -0.098693, 0.033705},
{-0.080118, -0.054913, -0.083459, -0.089374, 0.073523, 0.196686, 0.042820, -0.099633},
{0.054765, 0.196021, 0.053990, -0.096637, -0.079803, -0.052328, -0.079579, -0.097683},
{-0.092917, 0.065871, 0.209082, 0.069072, -0.091233, -0.083159, -0.057583, -0.084435},
{-0.080172, -0.094335, 0.051800, 0.212371, 0.093687, -0.080371, -0.086343, -0.058694},
{-0.098998, -0.072622, -0.059005, -0.090925, -0.063341, 0.128669, 0.208913, 0.022446},
{-0.060042, -0.079222, -0.091489, 0.056837, 0.222364, 0.105811, -0.074728, -0.087321},
{0.017240, -0.093537, -0.070377, -0.061221, -0.093369, -0.052045, 0.145020, 0.205317},
{0.286286, 0.081896, -0.036612, -0.052630, -0.051398, -0.018586, 0.133449, 0.321045},
{-0.022913, 0.104241, 0.296008, 0.312626, 0.130534, -0.012370, -0.046058, -0.046925},
{0.125102, 0.308023, 0.301202, 0.114413, -0.017407, -0.044594, -0.042965, -0.011909},
{0.326466, 0.292408, 0.103527, -0.017697, -0.041094, -0.038607, 0.005764, 0.158558},
{-0.041630, -0.020604, 0.094234, 0.286191, 0.333461, 0.167671, 0.008501, -0.038692},
{0.090092, -0.015961, -0.038161, -0.032698, 0.027051, 0.193491, 0.340642, 0.274792},
{-0.027770, -0.037982, -0.026487, 0.060731, 0.246749, 0.348872, 0.225464, 0.046336}
},
// 0.125 px/fr
{{-0.000000, 0.897296, 0.353176, 0.000000, 0.000000, 1.209524, 0.285543, 0.265591},
{1.029417, 0.000000, 0.000000, 0.000000, 0.620836, 0.000000, 0.188835, 0.246830},
{-0.108047, -0.000000, -0.000000, 0.929848, -0.197093, -0.000000, 0.000000, 0.508013},
{0.000000, 0.000000, 0.000000, 0.367456, 0.197863, 0.000000, -0.000000, 0.859015},
{0.000000, 0.000000, 1.229100, 0.000000, 0.000000, 0.000000, 0.738794, 0.271190},
{0.000000, -0.410008, -0.247282, -0.086121, 0.462063, -0.271767, -0.182609, -0.182525},
{0.000000, -0.263183, -0.099207, -0.088605, 0.000000, -0.000000, 0.174004, -0.096171},
{0.000000, 0.278772, -0.000000, -0.140555, -0.146193, -0.000000, -0.000000, -0.109096},
{-0.201618, -0.000000, 0.000000, -0.193351, -0.268166, -0.162138, 0.555250, -0.276805},
{-0.151171, 0.360803, -0.466397, -0.178297, -0.186825, -0.000000, -0.475992, -0.326441},
{-0.000000, -0.000000, -0.000000, -0.277033, 0.374329, -0.000000, -0.210372, -0.264749},
{-0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -0.180506, -0.239941},
{-0.395916, -0.000000, -0.195059, -0.224185, -0.413778, -0.191141, -0.156726, -0.000000},
{-0.147002, -0.285356, -0.156458, -0.103351, -0.243213, -0.128499, -0.195833, -0.280861},
{-0.189982, -0.737936, -0.455772, -0.300128, -0.382581, -0.523640, -0.524815, -0.397732},
{0.000000, 0.000000, 0.287464, 0.000000, 0.200886, 0.000000, 0.338290, 0.285218},
{-0.101822, -0.298001, -0.479286, -0.185336, -0.174942, -0.190061, -0.451103, -0.143887},
{0.000000, -0.000000, -0.000000, -0.190980, -0.000000, -0.000000, -0.000000, -0.230796},
{0.000000, 0.293190, 0.000000, 0.000000, 0.172343, 0.000000, 0.000000, 0.210156},
{-0.000000, 0.430281, 0.305841, 0.200276, 0.000000, 0.000000, 0.363526, 0.321661},
{0.000000, -0.000000, -0.108791, -0.143990, 0.000000, 0.000000, -0.145709, -0.197730},
{0.000000, 0.204758, 0.000000, 0.000000, 0.200794, 0.000000, 0.271457, 0.000000},
{-0.000000, 0.332910, 0.286988, 0.000000, 0.155198, 0.000000, 0.329061, 0.300256},
{-0.000000, -0.165435, -0.000000, -0.092666, -0.128557, -0.000000, -0.000000, -0.269069},
{-0.097398, -0.000000, -0.208955, -0.130879, -0.082892, -0.000000, -0.212524, -0.000000},
{-0.105448, -0.491387, -0.410388, -0.190047, -0.237196, -0.307983, -0.477275, -0.285832},
{-0.218714, -0.380534, -0.261717, -0.160753, -0.338830, -0.255540, -0.277978, -0.161782},
{0.000000, 0.364896, 0.000000, 0.000000, 0.240844, 0.000000, 0.297409, 0.000000}
},
// 9 px/fr
{{-4.864834, -4.867060, -4.823441, -4.740868, -4.646694, -4.603636, -4.662763, -4.786739},
{-3.428012, -3.488151, -3.550758, -3.560310, -3.517467, -3.463406, -3.420058, -3.404072},
{-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-1.957444, -2.017401, -2.055229, -2.057289, -2.021035, -1.947560, -1.893333, -1.904727},
{-3.979133, -3.925736, -3.877434, -3.860755, -3.871451, -3.888292, -3.926100, -3.978706},
{1.948717, 1.963352, 2.010421, 2.063527, 2.077270, 2.045093, 1.995961, 1.960698},
{1.629890, 1.580667, 1.557382, 1.570485, 1.611004, 1.649102, 1.673758, 1.672242},
{1.784991, 1.784529, 1.721898, 1.625747, 1.555419, 1.550628, 1.617398, 1.718844},
{2.012012, 1.975361, 1.945907, 1.935350, 1.941052, 1.955430, 1.983538, 2.016023},
{3.419318, 3.451937, 3.429333, 3.357931, 3.269283, 3.215087, 3.236822, 3.329197},
{1.741699, 1.776702, 1.808409, 1.802087, 1.766176, 1.738879, 1.725429, 1.724178},
{1.588804, 1.642456, 1.666208, 1.648262, 1.603281, 1.552858, 1.526549, 1.541457},
{3.138541, 3.164963, 3.161345, 3.130037, 3.093148, 3.071225, 3.073344, 3.100179},
{0.000000, 0.000000, 1.099349, 1.180536, 1.181763, 1.126990, 0.000000, 0.000000},
{5.539593, 5.543994, 5.485430, 5.362374, 5.208172, 5.140021, 5.240953, 5.428928},
{-4.056137, -4.117032, -4.056287, -3.905148, -3.762848, -3.703982, -3.756792, -3.904550},
{2.270790, 2.128664, 2.040068, 2.067253, 2.168129, 2.257849, 2.320046, 2.343929},
{-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-3.781555, -3.698213, -3.649388, -3.646792, -3.687281, -3.747849, -3.813056, -3.839367},
{-4.309134, -4.343614, -4.415685, -4.477585, -4.459957, -4.384120, -4.318594, -4.299292},
{-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-3.010623, -3.110226, -3.151800, -3.137590, -3.097021, -3.040314, -2.977231, -2.948042},
{-2.954503, -2.839443, -2.696440, -2.662777, -2.755236, -2.858274, -2.933426, -2.978990},
{1.209452, 1.377843, 1.404586, 1.263931, 1.109909, 1.029849, 0.000000, 0.000000},
{2.089420, 2.032800, 1.842197, 1.695787, 1.641550, 1.658555, 1.762882, 1.948551},
{4.438072, 4.492991, 4.604519, 4.721339, 4.695153, 4.525393, 4.405185, 4.402908},
{4.205318, 4.047975, 3.943128, 3.896789, 3.932025, 4.088749, 4.284825, 4.331347},
{-3.438845, -3.446991, -3.378377, -3.223788, -3.010716, -2.916123, -3.067748, -3.308302}
}
};


// this corresponds to the number of spatiotemporal scales used
// same as pars.nScales in original S&H matlab code
// use only 1 spatiotemporal scale
//#define nrScales_ 3

// this filter is used to blur and downsample a 3D matrix
// same as filt in original S&H matlab code (see function blurDn3.m)
// blurring and downsampling is only used if nrScales_>1, that is, if we're processing at more than one
// spatiotemporal scale
#define scalingFiltSize 5
__constant__ float d_scalingFilt[scalingFiltSize] = {0.0884, 0.3536, 0.5303, 0.3536, 0.0884};


// d_v1GaussFilt defines the 1D receptive field size of a V1 unit, which is then used for all three dimensions (X,Y and T)
// this guy can be reproduced in matlab with g=normpdf(-4:4,0,1.25);
// same as in original S&H matlab code
#define v1GaussFiltSize 9
__constant__ float d_v1GaussFilt[v1GaussFiltSize] = {0.0007, 0.0155, 0.0903, 0.2345, 0.3179, 0.2345, 0.0903, 0.0155, 0.0007};

// d_complexV1Filt is the spacial filter for complex cells; it averages over "simple" V1 cells
// all simple cells must have the same space-time orientation and phase
// this guy can be reproduced in matlab with g=normpdf(-5:5,0,1.6);
// same as in original S&H matlab code
#define complexV1FiltSize 11
__constant__ float d_complexV1Filt[complexV1FiltSize] = {0.0019, 0.0110, 0.0430, 0.1142, 0.2052, 0.2495, 0.2052, 0.1142, 0.0430, 0.0110, 0.0019};

// d_normV1filt is the spatial filter used complex cell normalization
// this guy can be reproduced in matlab with: g=normpdf(-10:10,0,3.35);
// same as in original S&H matlab code
//#define normV1filtSize 21
//__constant__ float d_normV1filt[normV1filtSize] = {0.0013, 0.0031, 0.0067, 0.0132, 0.0237, 0.0389, 0.0584, 0.0800, 0.1001, 0.1146, 0.1199, 0.1146, 0.1001, 0.0800, 0.0584, 0.0389, 0.0237, 0.0132, 0.0067, 0.0031, 0.0013};
//float* normV1filt;

// use a slightly bigger filter: g=normpdf(-12:12,0,5.0)/sum(g);
#define normV1filtSize 25
__constant__ float d_normV1filt[normV1filtSize]={0.0045,0.0072,0.0109,0.0160,0.0225,0.0303,0.0393,0.0490,0.0587,0.0675,0.0746,0.0792,0.0808,0.0792,0.0746,0.0675,0.0587,0.0490,0.0393,0.0303,0.0225,0.0160,0.0109,0.0072,0.0045};

// difference operator for taking the first-order derivative
#define diff1filtSize 3
__constant__ float d_diff1filt[diff1filtSize] = {-1/2.0, 0, 1/2.0};

// difference operator for taking the second-order derivative
#define diff2filtSize 3
__constant__ float d_diff2filt[diff2filtSize] = {1, -2, 1};

// difference operator for taking the third-order derivative
// the grayscale values of our input stimuli will be convolved with d_scalingFilt in 3D
#define diff3filtSize 5
__constant__ float d_diff3filt[diff3filtSize] = {-1/2.0, 1, 0, -1, 1/2.0};

// number of time steps to be considered in computation
// in the easiest case (only 1 spatiotemporal scale), it should be the same as v1GaussFiltSize
#define nrT 9


/// **************************************************************************************************************** ///
/// DEVICE FUNCTIONS
/// **************************************************************************************************************** ///


// parallel averaging

// convolve idata with filt and store output in odata


// consider edge effects

// linearly combines filter responses with input activity to get direction-selective output activity

// parallel full-wave rectification

// compute the mean on the array's third dimension
// this is used to compute the mean of all 28 filter responses at a given location/scale (used in the complex cell
// normalization step)

// population normalization of complex cell responses

// parallel mulitplying with a scale factor

__global__ void dev_split_gray(unsigned char *idata, float *gray, int len) {
const int     tid = IMUL(blockDim.x, blockIdx.x) + threadIdx.x;
const int threadN = IMUL(blockDim.x, gridDim.x);

for(int i = tid; i < len; i += threadN) {
gray[i] = idata[i]*0.00392156863; // mult is faster than 1/255
}
}